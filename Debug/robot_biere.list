
robot_biere.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd30  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c94  0800cdf0  0800cdf0  0001cdf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da84  0800da84  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800da84  0800da84  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800da84  0800da84  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da84  0800da84  0001da84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da88  0800da88  0001da88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800da8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000109c  200001e4  0800dc70  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001280  0800dc70  00021280  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017dcd  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003977  00000000  00000000  00037fd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001538  00000000  00000000  0003b950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a0  00000000  00000000  0003ce88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a4d  00000000  00000000  0003e228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000197cf  00000000  00000000  00056c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098033  00000000  00000000  00070444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108477  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006110  00000000  00000000  001084c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e4 	.word	0x200001e4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800cdd8 	.word	0x0800cdd8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e8 	.word	0x200001e8
 8000104:	0800cdd8 	.word	0x0800cdd8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff7f 	bl	8001340 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fecf 	bl	80011f0 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff71 	bl	8001340 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff67 	bl	8001340 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fef7 	bl	8001274 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 feed 	bl	8001274 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__clear_cache>:
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)

080004ac <__aeabi_d2uiz>:
 80004ac:	b570      	push	{r4, r5, r6, lr}
 80004ae:	2200      	movs	r2, #0
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <__aeabi_d2uiz+0x38>)
 80004b2:	0004      	movs	r4, r0
 80004b4:	000d      	movs	r5, r1
 80004b6:	f7ff ffed 	bl	8000494 <__aeabi_dcmpge>
 80004ba:	2800      	cmp	r0, #0
 80004bc:	d104      	bne.n	80004c8 <__aeabi_d2uiz+0x1c>
 80004be:	0020      	movs	r0, r4
 80004c0:	0029      	movs	r1, r5
 80004c2:	f001 fdbd 	bl	8002040 <__aeabi_d2iz>
 80004c6:	bd70      	pop	{r4, r5, r6, pc}
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <__aeabi_d2uiz+0x38>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	0020      	movs	r0, r4
 80004ce:	0029      	movs	r1, r5
 80004d0:	f001 fa06 	bl	80018e0 <__aeabi_dsub>
 80004d4:	f001 fdb4 	bl	8002040 <__aeabi_d2iz>
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	061b      	lsls	r3, r3, #24
 80004dc:	469c      	mov	ip, r3
 80004de:	4460      	add	r0, ip
 80004e0:	e7f1      	b.n	80004c6 <__aeabi_d2uiz+0x1a>
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	41e00000 	.word	0x41e00000

080004e8 <__aeabi_d2lz>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	0005      	movs	r5, r0
 80004ec:	000c      	movs	r4, r1
 80004ee:	2200      	movs	r2, #0
 80004f0:	2300      	movs	r3, #0
 80004f2:	0028      	movs	r0, r5
 80004f4:	0021      	movs	r1, r4
 80004f6:	f7ff ffaf 	bl	8000458 <__aeabi_dcmplt>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	d108      	bne.n	8000510 <__aeabi_d2lz+0x28>
 80004fe:	0028      	movs	r0, r5
 8000500:	0021      	movs	r1, r4
 8000502:	f000 f80f 	bl	8000524 <__aeabi_d2ulz>
 8000506:	0002      	movs	r2, r0
 8000508:	000b      	movs	r3, r1
 800050a:	0010      	movs	r0, r2
 800050c:	0019      	movs	r1, r3
 800050e:	bd70      	pop	{r4, r5, r6, pc}
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	061b      	lsls	r3, r3, #24
 8000514:	18e1      	adds	r1, r4, r3
 8000516:	0028      	movs	r0, r5
 8000518:	f000 f804 	bl	8000524 <__aeabi_d2ulz>
 800051c:	2300      	movs	r3, #0
 800051e:	4242      	negs	r2, r0
 8000520:	418b      	sbcs	r3, r1
 8000522:	e7f2      	b.n	800050a <__aeabi_d2lz+0x22>

08000524 <__aeabi_d2ulz>:
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	2200      	movs	r2, #0
 8000528:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <__aeabi_d2ulz+0x34>)
 800052a:	000d      	movs	r5, r1
 800052c:	0004      	movs	r4, r0
 800052e:	f000 ff6b 	bl	8001408 <__aeabi_dmul>
 8000532:	f7ff ffbb 	bl	80004ac <__aeabi_d2uiz>
 8000536:	0006      	movs	r6, r0
 8000538:	f001 fde8 	bl	800210c <__aeabi_ui2d>
 800053c:	2200      	movs	r2, #0
 800053e:	4b07      	ldr	r3, [pc, #28]	; (800055c <__aeabi_d2ulz+0x38>)
 8000540:	f000 ff62 	bl	8001408 <__aeabi_dmul>
 8000544:	0002      	movs	r2, r0
 8000546:	000b      	movs	r3, r1
 8000548:	0020      	movs	r0, r4
 800054a:	0029      	movs	r1, r5
 800054c:	f001 f9c8 	bl	80018e0 <__aeabi_dsub>
 8000550:	f7ff ffac 	bl	80004ac <__aeabi_d2uiz>
 8000554:	0031      	movs	r1, r6
 8000556:	bd70      	pop	{r4, r5, r6, pc}
 8000558:	3df00000 	.word	0x3df00000
 800055c:	41f00000 	.word	0x41f00000

08000560 <__aeabi_l2d>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	0006      	movs	r6, r0
 8000564:	0008      	movs	r0, r1
 8000566:	f001 fda1 	bl	80020ac <__aeabi_i2d>
 800056a:	2200      	movs	r2, #0
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <__aeabi_l2d+0x28>)
 800056e:	f000 ff4b 	bl	8001408 <__aeabi_dmul>
 8000572:	000d      	movs	r5, r1
 8000574:	0004      	movs	r4, r0
 8000576:	0030      	movs	r0, r6
 8000578:	f001 fdc8 	bl	800210c <__aeabi_ui2d>
 800057c:	002b      	movs	r3, r5
 800057e:	0022      	movs	r2, r4
 8000580:	f000 f804 	bl	800058c <__aeabi_dadd>
 8000584:	bd70      	pop	{r4, r5, r6, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	41f00000 	.word	0x41f00000

0800058c <__aeabi_dadd>:
 800058c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058e:	464f      	mov	r7, r9
 8000590:	4646      	mov	r6, r8
 8000592:	46d6      	mov	lr, sl
 8000594:	000d      	movs	r5, r1
 8000596:	0004      	movs	r4, r0
 8000598:	b5c0      	push	{r6, r7, lr}
 800059a:	001f      	movs	r7, r3
 800059c:	0011      	movs	r1, r2
 800059e:	0328      	lsls	r0, r5, #12
 80005a0:	0f62      	lsrs	r2, r4, #29
 80005a2:	0a40      	lsrs	r0, r0, #9
 80005a4:	4310      	orrs	r0, r2
 80005a6:	007a      	lsls	r2, r7, #1
 80005a8:	0d52      	lsrs	r2, r2, #21
 80005aa:	00e3      	lsls	r3, r4, #3
 80005ac:	033c      	lsls	r4, r7, #12
 80005ae:	4691      	mov	r9, r2
 80005b0:	0a64      	lsrs	r4, r4, #9
 80005b2:	0ffa      	lsrs	r2, r7, #31
 80005b4:	0f4f      	lsrs	r7, r1, #29
 80005b6:	006e      	lsls	r6, r5, #1
 80005b8:	4327      	orrs	r7, r4
 80005ba:	4692      	mov	sl, r2
 80005bc:	46b8      	mov	r8, r7
 80005be:	0d76      	lsrs	r6, r6, #21
 80005c0:	0fed      	lsrs	r5, r5, #31
 80005c2:	00c9      	lsls	r1, r1, #3
 80005c4:	4295      	cmp	r5, r2
 80005c6:	d100      	bne.n	80005ca <__aeabi_dadd+0x3e>
 80005c8:	e099      	b.n	80006fe <__aeabi_dadd+0x172>
 80005ca:	464c      	mov	r4, r9
 80005cc:	1b34      	subs	r4, r6, r4
 80005ce:	46a4      	mov	ip, r4
 80005d0:	2c00      	cmp	r4, #0
 80005d2:	dc00      	bgt.n	80005d6 <__aeabi_dadd+0x4a>
 80005d4:	e07c      	b.n	80006d0 <__aeabi_dadd+0x144>
 80005d6:	464a      	mov	r2, r9
 80005d8:	2a00      	cmp	r2, #0
 80005da:	d100      	bne.n	80005de <__aeabi_dadd+0x52>
 80005dc:	e0b8      	b.n	8000750 <__aeabi_dadd+0x1c4>
 80005de:	4ac5      	ldr	r2, [pc, #788]	; (80008f4 <__aeabi_dadd+0x368>)
 80005e0:	4296      	cmp	r6, r2
 80005e2:	d100      	bne.n	80005e6 <__aeabi_dadd+0x5a>
 80005e4:	e11c      	b.n	8000820 <__aeabi_dadd+0x294>
 80005e6:	2280      	movs	r2, #128	; 0x80
 80005e8:	003c      	movs	r4, r7
 80005ea:	0412      	lsls	r2, r2, #16
 80005ec:	4314      	orrs	r4, r2
 80005ee:	46a0      	mov	r8, r4
 80005f0:	4662      	mov	r2, ip
 80005f2:	2a38      	cmp	r2, #56	; 0x38
 80005f4:	dd00      	ble.n	80005f8 <__aeabi_dadd+0x6c>
 80005f6:	e161      	b.n	80008bc <__aeabi_dadd+0x330>
 80005f8:	2a1f      	cmp	r2, #31
 80005fa:	dd00      	ble.n	80005fe <__aeabi_dadd+0x72>
 80005fc:	e1cc      	b.n	8000998 <__aeabi_dadd+0x40c>
 80005fe:	4664      	mov	r4, ip
 8000600:	2220      	movs	r2, #32
 8000602:	1b12      	subs	r2, r2, r4
 8000604:	4644      	mov	r4, r8
 8000606:	4094      	lsls	r4, r2
 8000608:	000f      	movs	r7, r1
 800060a:	46a1      	mov	r9, r4
 800060c:	4664      	mov	r4, ip
 800060e:	4091      	lsls	r1, r2
 8000610:	40e7      	lsrs	r7, r4
 8000612:	464c      	mov	r4, r9
 8000614:	1e4a      	subs	r2, r1, #1
 8000616:	4191      	sbcs	r1, r2
 8000618:	433c      	orrs	r4, r7
 800061a:	4642      	mov	r2, r8
 800061c:	4321      	orrs	r1, r4
 800061e:	4664      	mov	r4, ip
 8000620:	40e2      	lsrs	r2, r4
 8000622:	1a80      	subs	r0, r0, r2
 8000624:	1a5c      	subs	r4, r3, r1
 8000626:	42a3      	cmp	r3, r4
 8000628:	419b      	sbcs	r3, r3
 800062a:	425f      	negs	r7, r3
 800062c:	1bc7      	subs	r7, r0, r7
 800062e:	023b      	lsls	r3, r7, #8
 8000630:	d400      	bmi.n	8000634 <__aeabi_dadd+0xa8>
 8000632:	e0d0      	b.n	80007d6 <__aeabi_dadd+0x24a>
 8000634:	027f      	lsls	r7, r7, #9
 8000636:	0a7f      	lsrs	r7, r7, #9
 8000638:	2f00      	cmp	r7, #0
 800063a:	d100      	bne.n	800063e <__aeabi_dadd+0xb2>
 800063c:	e0ff      	b.n	800083e <__aeabi_dadd+0x2b2>
 800063e:	0038      	movs	r0, r7
 8000640:	f001 fe5a 	bl	80022f8 <__clzsi2>
 8000644:	0001      	movs	r1, r0
 8000646:	3908      	subs	r1, #8
 8000648:	2320      	movs	r3, #32
 800064a:	0022      	movs	r2, r4
 800064c:	1a5b      	subs	r3, r3, r1
 800064e:	408f      	lsls	r7, r1
 8000650:	40da      	lsrs	r2, r3
 8000652:	408c      	lsls	r4, r1
 8000654:	4317      	orrs	r7, r2
 8000656:	42b1      	cmp	r1, r6
 8000658:	da00      	bge.n	800065c <__aeabi_dadd+0xd0>
 800065a:	e0ff      	b.n	800085c <__aeabi_dadd+0x2d0>
 800065c:	1b89      	subs	r1, r1, r6
 800065e:	1c4b      	adds	r3, r1, #1
 8000660:	2b1f      	cmp	r3, #31
 8000662:	dd00      	ble.n	8000666 <__aeabi_dadd+0xda>
 8000664:	e0a8      	b.n	80007b8 <__aeabi_dadd+0x22c>
 8000666:	2220      	movs	r2, #32
 8000668:	0039      	movs	r1, r7
 800066a:	1ad2      	subs	r2, r2, r3
 800066c:	0020      	movs	r0, r4
 800066e:	4094      	lsls	r4, r2
 8000670:	4091      	lsls	r1, r2
 8000672:	40d8      	lsrs	r0, r3
 8000674:	1e62      	subs	r2, r4, #1
 8000676:	4194      	sbcs	r4, r2
 8000678:	40df      	lsrs	r7, r3
 800067a:	2600      	movs	r6, #0
 800067c:	4301      	orrs	r1, r0
 800067e:	430c      	orrs	r4, r1
 8000680:	0763      	lsls	r3, r4, #29
 8000682:	d009      	beq.n	8000698 <__aeabi_dadd+0x10c>
 8000684:	230f      	movs	r3, #15
 8000686:	4023      	ands	r3, r4
 8000688:	2b04      	cmp	r3, #4
 800068a:	d005      	beq.n	8000698 <__aeabi_dadd+0x10c>
 800068c:	1d23      	adds	r3, r4, #4
 800068e:	42a3      	cmp	r3, r4
 8000690:	41a4      	sbcs	r4, r4
 8000692:	4264      	negs	r4, r4
 8000694:	193f      	adds	r7, r7, r4
 8000696:	001c      	movs	r4, r3
 8000698:	023b      	lsls	r3, r7, #8
 800069a:	d400      	bmi.n	800069e <__aeabi_dadd+0x112>
 800069c:	e09e      	b.n	80007dc <__aeabi_dadd+0x250>
 800069e:	4b95      	ldr	r3, [pc, #596]	; (80008f4 <__aeabi_dadd+0x368>)
 80006a0:	3601      	adds	r6, #1
 80006a2:	429e      	cmp	r6, r3
 80006a4:	d100      	bne.n	80006a8 <__aeabi_dadd+0x11c>
 80006a6:	e0b7      	b.n	8000818 <__aeabi_dadd+0x28c>
 80006a8:	4a93      	ldr	r2, [pc, #588]	; (80008f8 <__aeabi_dadd+0x36c>)
 80006aa:	08e4      	lsrs	r4, r4, #3
 80006ac:	4017      	ands	r7, r2
 80006ae:	077b      	lsls	r3, r7, #29
 80006b0:	0571      	lsls	r1, r6, #21
 80006b2:	027f      	lsls	r7, r7, #9
 80006b4:	4323      	orrs	r3, r4
 80006b6:	0b3f      	lsrs	r7, r7, #12
 80006b8:	0d4a      	lsrs	r2, r1, #21
 80006ba:	0512      	lsls	r2, r2, #20
 80006bc:	433a      	orrs	r2, r7
 80006be:	07ed      	lsls	r5, r5, #31
 80006c0:	432a      	orrs	r2, r5
 80006c2:	0018      	movs	r0, r3
 80006c4:	0011      	movs	r1, r2
 80006c6:	bce0      	pop	{r5, r6, r7}
 80006c8:	46ba      	mov	sl, r7
 80006ca:	46b1      	mov	r9, r6
 80006cc:	46a8      	mov	r8, r5
 80006ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d0:	2c00      	cmp	r4, #0
 80006d2:	d04b      	beq.n	800076c <__aeabi_dadd+0x1e0>
 80006d4:	464c      	mov	r4, r9
 80006d6:	1ba4      	subs	r4, r4, r6
 80006d8:	46a4      	mov	ip, r4
 80006da:	2e00      	cmp	r6, #0
 80006dc:	d000      	beq.n	80006e0 <__aeabi_dadd+0x154>
 80006de:	e123      	b.n	8000928 <__aeabi_dadd+0x39c>
 80006e0:	0004      	movs	r4, r0
 80006e2:	431c      	orrs	r4, r3
 80006e4:	d100      	bne.n	80006e8 <__aeabi_dadd+0x15c>
 80006e6:	e1af      	b.n	8000a48 <__aeabi_dadd+0x4bc>
 80006e8:	4662      	mov	r2, ip
 80006ea:	1e54      	subs	r4, r2, #1
 80006ec:	2a01      	cmp	r2, #1
 80006ee:	d100      	bne.n	80006f2 <__aeabi_dadd+0x166>
 80006f0:	e215      	b.n	8000b1e <__aeabi_dadd+0x592>
 80006f2:	4d80      	ldr	r5, [pc, #512]	; (80008f4 <__aeabi_dadd+0x368>)
 80006f4:	45ac      	cmp	ip, r5
 80006f6:	d100      	bne.n	80006fa <__aeabi_dadd+0x16e>
 80006f8:	e1c8      	b.n	8000a8c <__aeabi_dadd+0x500>
 80006fa:	46a4      	mov	ip, r4
 80006fc:	e11b      	b.n	8000936 <__aeabi_dadd+0x3aa>
 80006fe:	464a      	mov	r2, r9
 8000700:	1ab2      	subs	r2, r6, r2
 8000702:	4694      	mov	ip, r2
 8000704:	2a00      	cmp	r2, #0
 8000706:	dc00      	bgt.n	800070a <__aeabi_dadd+0x17e>
 8000708:	e0ac      	b.n	8000864 <__aeabi_dadd+0x2d8>
 800070a:	464a      	mov	r2, r9
 800070c:	2a00      	cmp	r2, #0
 800070e:	d043      	beq.n	8000798 <__aeabi_dadd+0x20c>
 8000710:	4a78      	ldr	r2, [pc, #480]	; (80008f4 <__aeabi_dadd+0x368>)
 8000712:	4296      	cmp	r6, r2
 8000714:	d100      	bne.n	8000718 <__aeabi_dadd+0x18c>
 8000716:	e1af      	b.n	8000a78 <__aeabi_dadd+0x4ec>
 8000718:	2280      	movs	r2, #128	; 0x80
 800071a:	003c      	movs	r4, r7
 800071c:	0412      	lsls	r2, r2, #16
 800071e:	4314      	orrs	r4, r2
 8000720:	46a0      	mov	r8, r4
 8000722:	4662      	mov	r2, ip
 8000724:	2a38      	cmp	r2, #56	; 0x38
 8000726:	dc67      	bgt.n	80007f8 <__aeabi_dadd+0x26c>
 8000728:	2a1f      	cmp	r2, #31
 800072a:	dc00      	bgt.n	800072e <__aeabi_dadd+0x1a2>
 800072c:	e15f      	b.n	80009ee <__aeabi_dadd+0x462>
 800072e:	4647      	mov	r7, r8
 8000730:	3a20      	subs	r2, #32
 8000732:	40d7      	lsrs	r7, r2
 8000734:	4662      	mov	r2, ip
 8000736:	2a20      	cmp	r2, #32
 8000738:	d005      	beq.n	8000746 <__aeabi_dadd+0x1ba>
 800073a:	4664      	mov	r4, ip
 800073c:	2240      	movs	r2, #64	; 0x40
 800073e:	1b12      	subs	r2, r2, r4
 8000740:	4644      	mov	r4, r8
 8000742:	4094      	lsls	r4, r2
 8000744:	4321      	orrs	r1, r4
 8000746:	1e4a      	subs	r2, r1, #1
 8000748:	4191      	sbcs	r1, r2
 800074a:	000c      	movs	r4, r1
 800074c:	433c      	orrs	r4, r7
 800074e:	e057      	b.n	8000800 <__aeabi_dadd+0x274>
 8000750:	003a      	movs	r2, r7
 8000752:	430a      	orrs	r2, r1
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x1cc>
 8000756:	e105      	b.n	8000964 <__aeabi_dadd+0x3d8>
 8000758:	0022      	movs	r2, r4
 800075a:	3a01      	subs	r2, #1
 800075c:	2c01      	cmp	r4, #1
 800075e:	d100      	bne.n	8000762 <__aeabi_dadd+0x1d6>
 8000760:	e182      	b.n	8000a68 <__aeabi_dadd+0x4dc>
 8000762:	4c64      	ldr	r4, [pc, #400]	; (80008f4 <__aeabi_dadd+0x368>)
 8000764:	45a4      	cmp	ip, r4
 8000766:	d05b      	beq.n	8000820 <__aeabi_dadd+0x294>
 8000768:	4694      	mov	ip, r2
 800076a:	e741      	b.n	80005f0 <__aeabi_dadd+0x64>
 800076c:	4c63      	ldr	r4, [pc, #396]	; (80008fc <__aeabi_dadd+0x370>)
 800076e:	1c77      	adds	r7, r6, #1
 8000770:	4227      	tst	r7, r4
 8000772:	d000      	beq.n	8000776 <__aeabi_dadd+0x1ea>
 8000774:	e0c4      	b.n	8000900 <__aeabi_dadd+0x374>
 8000776:	0004      	movs	r4, r0
 8000778:	431c      	orrs	r4, r3
 800077a:	2e00      	cmp	r6, #0
 800077c:	d000      	beq.n	8000780 <__aeabi_dadd+0x1f4>
 800077e:	e169      	b.n	8000a54 <__aeabi_dadd+0x4c8>
 8000780:	2c00      	cmp	r4, #0
 8000782:	d100      	bne.n	8000786 <__aeabi_dadd+0x1fa>
 8000784:	e1bf      	b.n	8000b06 <__aeabi_dadd+0x57a>
 8000786:	4644      	mov	r4, r8
 8000788:	430c      	orrs	r4, r1
 800078a:	d000      	beq.n	800078e <__aeabi_dadd+0x202>
 800078c:	e1d0      	b.n	8000b30 <__aeabi_dadd+0x5a4>
 800078e:	0742      	lsls	r2, r0, #29
 8000790:	08db      	lsrs	r3, r3, #3
 8000792:	4313      	orrs	r3, r2
 8000794:	08c0      	lsrs	r0, r0, #3
 8000796:	e029      	b.n	80007ec <__aeabi_dadd+0x260>
 8000798:	003a      	movs	r2, r7
 800079a:	430a      	orrs	r2, r1
 800079c:	d100      	bne.n	80007a0 <__aeabi_dadd+0x214>
 800079e:	e170      	b.n	8000a82 <__aeabi_dadd+0x4f6>
 80007a0:	4662      	mov	r2, ip
 80007a2:	4664      	mov	r4, ip
 80007a4:	3a01      	subs	r2, #1
 80007a6:	2c01      	cmp	r4, #1
 80007a8:	d100      	bne.n	80007ac <__aeabi_dadd+0x220>
 80007aa:	e0e0      	b.n	800096e <__aeabi_dadd+0x3e2>
 80007ac:	4c51      	ldr	r4, [pc, #324]	; (80008f4 <__aeabi_dadd+0x368>)
 80007ae:	45a4      	cmp	ip, r4
 80007b0:	d100      	bne.n	80007b4 <__aeabi_dadd+0x228>
 80007b2:	e161      	b.n	8000a78 <__aeabi_dadd+0x4ec>
 80007b4:	4694      	mov	ip, r2
 80007b6:	e7b4      	b.n	8000722 <__aeabi_dadd+0x196>
 80007b8:	003a      	movs	r2, r7
 80007ba:	391f      	subs	r1, #31
 80007bc:	40ca      	lsrs	r2, r1
 80007be:	0011      	movs	r1, r2
 80007c0:	2b20      	cmp	r3, #32
 80007c2:	d003      	beq.n	80007cc <__aeabi_dadd+0x240>
 80007c4:	2240      	movs	r2, #64	; 0x40
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	409f      	lsls	r7, r3
 80007ca:	433c      	orrs	r4, r7
 80007cc:	1e63      	subs	r3, r4, #1
 80007ce:	419c      	sbcs	r4, r3
 80007d0:	2700      	movs	r7, #0
 80007d2:	2600      	movs	r6, #0
 80007d4:	430c      	orrs	r4, r1
 80007d6:	0763      	lsls	r3, r4, #29
 80007d8:	d000      	beq.n	80007dc <__aeabi_dadd+0x250>
 80007da:	e753      	b.n	8000684 <__aeabi_dadd+0xf8>
 80007dc:	46b4      	mov	ip, r6
 80007de:	08e4      	lsrs	r4, r4, #3
 80007e0:	077b      	lsls	r3, r7, #29
 80007e2:	4323      	orrs	r3, r4
 80007e4:	08f8      	lsrs	r0, r7, #3
 80007e6:	4a43      	ldr	r2, [pc, #268]	; (80008f4 <__aeabi_dadd+0x368>)
 80007e8:	4594      	cmp	ip, r2
 80007ea:	d01d      	beq.n	8000828 <__aeabi_dadd+0x29c>
 80007ec:	4662      	mov	r2, ip
 80007ee:	0307      	lsls	r7, r0, #12
 80007f0:	0552      	lsls	r2, r2, #21
 80007f2:	0b3f      	lsrs	r7, r7, #12
 80007f4:	0d52      	lsrs	r2, r2, #21
 80007f6:	e760      	b.n	80006ba <__aeabi_dadd+0x12e>
 80007f8:	4644      	mov	r4, r8
 80007fa:	430c      	orrs	r4, r1
 80007fc:	1e62      	subs	r2, r4, #1
 80007fe:	4194      	sbcs	r4, r2
 8000800:	18e4      	adds	r4, r4, r3
 8000802:	429c      	cmp	r4, r3
 8000804:	419b      	sbcs	r3, r3
 8000806:	425f      	negs	r7, r3
 8000808:	183f      	adds	r7, r7, r0
 800080a:	023b      	lsls	r3, r7, #8
 800080c:	d5e3      	bpl.n	80007d6 <__aeabi_dadd+0x24a>
 800080e:	4b39      	ldr	r3, [pc, #228]	; (80008f4 <__aeabi_dadd+0x368>)
 8000810:	3601      	adds	r6, #1
 8000812:	429e      	cmp	r6, r3
 8000814:	d000      	beq.n	8000818 <__aeabi_dadd+0x28c>
 8000816:	e0b5      	b.n	8000984 <__aeabi_dadd+0x3f8>
 8000818:	0032      	movs	r2, r6
 800081a:	2700      	movs	r7, #0
 800081c:	2300      	movs	r3, #0
 800081e:	e74c      	b.n	80006ba <__aeabi_dadd+0x12e>
 8000820:	0742      	lsls	r2, r0, #29
 8000822:	08db      	lsrs	r3, r3, #3
 8000824:	4313      	orrs	r3, r2
 8000826:	08c0      	lsrs	r0, r0, #3
 8000828:	001a      	movs	r2, r3
 800082a:	4302      	orrs	r2, r0
 800082c:	d100      	bne.n	8000830 <__aeabi_dadd+0x2a4>
 800082e:	e1e1      	b.n	8000bf4 <__aeabi_dadd+0x668>
 8000830:	2780      	movs	r7, #128	; 0x80
 8000832:	033f      	lsls	r7, r7, #12
 8000834:	4307      	orrs	r7, r0
 8000836:	033f      	lsls	r7, r7, #12
 8000838:	4a2e      	ldr	r2, [pc, #184]	; (80008f4 <__aeabi_dadd+0x368>)
 800083a:	0b3f      	lsrs	r7, r7, #12
 800083c:	e73d      	b.n	80006ba <__aeabi_dadd+0x12e>
 800083e:	0020      	movs	r0, r4
 8000840:	f001 fd5a 	bl	80022f8 <__clzsi2>
 8000844:	0001      	movs	r1, r0
 8000846:	3118      	adds	r1, #24
 8000848:	291f      	cmp	r1, #31
 800084a:	dc00      	bgt.n	800084e <__aeabi_dadd+0x2c2>
 800084c:	e6fc      	b.n	8000648 <__aeabi_dadd+0xbc>
 800084e:	3808      	subs	r0, #8
 8000850:	4084      	lsls	r4, r0
 8000852:	0027      	movs	r7, r4
 8000854:	2400      	movs	r4, #0
 8000856:	42b1      	cmp	r1, r6
 8000858:	db00      	blt.n	800085c <__aeabi_dadd+0x2d0>
 800085a:	e6ff      	b.n	800065c <__aeabi_dadd+0xd0>
 800085c:	4a26      	ldr	r2, [pc, #152]	; (80008f8 <__aeabi_dadd+0x36c>)
 800085e:	1a76      	subs	r6, r6, r1
 8000860:	4017      	ands	r7, r2
 8000862:	e70d      	b.n	8000680 <__aeabi_dadd+0xf4>
 8000864:	2a00      	cmp	r2, #0
 8000866:	d02f      	beq.n	80008c8 <__aeabi_dadd+0x33c>
 8000868:	464a      	mov	r2, r9
 800086a:	1b92      	subs	r2, r2, r6
 800086c:	4694      	mov	ip, r2
 800086e:	2e00      	cmp	r6, #0
 8000870:	d100      	bne.n	8000874 <__aeabi_dadd+0x2e8>
 8000872:	e0ad      	b.n	80009d0 <__aeabi_dadd+0x444>
 8000874:	4a1f      	ldr	r2, [pc, #124]	; (80008f4 <__aeabi_dadd+0x368>)
 8000876:	4591      	cmp	r9, r2
 8000878:	d100      	bne.n	800087c <__aeabi_dadd+0x2f0>
 800087a:	e10f      	b.n	8000a9c <__aeabi_dadd+0x510>
 800087c:	2280      	movs	r2, #128	; 0x80
 800087e:	0412      	lsls	r2, r2, #16
 8000880:	4310      	orrs	r0, r2
 8000882:	4662      	mov	r2, ip
 8000884:	2a38      	cmp	r2, #56	; 0x38
 8000886:	dd00      	ble.n	800088a <__aeabi_dadd+0x2fe>
 8000888:	e10f      	b.n	8000aaa <__aeabi_dadd+0x51e>
 800088a:	2a1f      	cmp	r2, #31
 800088c:	dd00      	ble.n	8000890 <__aeabi_dadd+0x304>
 800088e:	e180      	b.n	8000b92 <__aeabi_dadd+0x606>
 8000890:	4664      	mov	r4, ip
 8000892:	2220      	movs	r2, #32
 8000894:	001e      	movs	r6, r3
 8000896:	1b12      	subs	r2, r2, r4
 8000898:	4667      	mov	r7, ip
 800089a:	0004      	movs	r4, r0
 800089c:	4093      	lsls	r3, r2
 800089e:	4094      	lsls	r4, r2
 80008a0:	40fe      	lsrs	r6, r7
 80008a2:	1e5a      	subs	r2, r3, #1
 80008a4:	4193      	sbcs	r3, r2
 80008a6:	40f8      	lsrs	r0, r7
 80008a8:	4334      	orrs	r4, r6
 80008aa:	431c      	orrs	r4, r3
 80008ac:	4480      	add	r8, r0
 80008ae:	1864      	adds	r4, r4, r1
 80008b0:	428c      	cmp	r4, r1
 80008b2:	41bf      	sbcs	r7, r7
 80008b4:	427f      	negs	r7, r7
 80008b6:	464e      	mov	r6, r9
 80008b8:	4447      	add	r7, r8
 80008ba:	e7a6      	b.n	800080a <__aeabi_dadd+0x27e>
 80008bc:	4642      	mov	r2, r8
 80008be:	430a      	orrs	r2, r1
 80008c0:	0011      	movs	r1, r2
 80008c2:	1e4a      	subs	r2, r1, #1
 80008c4:	4191      	sbcs	r1, r2
 80008c6:	e6ad      	b.n	8000624 <__aeabi_dadd+0x98>
 80008c8:	4c0c      	ldr	r4, [pc, #48]	; (80008fc <__aeabi_dadd+0x370>)
 80008ca:	1c72      	adds	r2, r6, #1
 80008cc:	4222      	tst	r2, r4
 80008ce:	d000      	beq.n	80008d2 <__aeabi_dadd+0x346>
 80008d0:	e0a1      	b.n	8000a16 <__aeabi_dadd+0x48a>
 80008d2:	0002      	movs	r2, r0
 80008d4:	431a      	orrs	r2, r3
 80008d6:	2e00      	cmp	r6, #0
 80008d8:	d000      	beq.n	80008dc <__aeabi_dadd+0x350>
 80008da:	e0fa      	b.n	8000ad2 <__aeabi_dadd+0x546>
 80008dc:	2a00      	cmp	r2, #0
 80008de:	d100      	bne.n	80008e2 <__aeabi_dadd+0x356>
 80008e0:	e145      	b.n	8000b6e <__aeabi_dadd+0x5e2>
 80008e2:	003a      	movs	r2, r7
 80008e4:	430a      	orrs	r2, r1
 80008e6:	d000      	beq.n	80008ea <__aeabi_dadd+0x35e>
 80008e8:	e146      	b.n	8000b78 <__aeabi_dadd+0x5ec>
 80008ea:	0742      	lsls	r2, r0, #29
 80008ec:	08db      	lsrs	r3, r3, #3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	08c0      	lsrs	r0, r0, #3
 80008f2:	e77b      	b.n	80007ec <__aeabi_dadd+0x260>
 80008f4:	000007ff 	.word	0x000007ff
 80008f8:	ff7fffff 	.word	0xff7fffff
 80008fc:	000007fe 	.word	0x000007fe
 8000900:	4647      	mov	r7, r8
 8000902:	1a5c      	subs	r4, r3, r1
 8000904:	1bc2      	subs	r2, r0, r7
 8000906:	42a3      	cmp	r3, r4
 8000908:	41bf      	sbcs	r7, r7
 800090a:	427f      	negs	r7, r7
 800090c:	46b9      	mov	r9, r7
 800090e:	0017      	movs	r7, r2
 8000910:	464a      	mov	r2, r9
 8000912:	1abf      	subs	r7, r7, r2
 8000914:	023a      	lsls	r2, r7, #8
 8000916:	d500      	bpl.n	800091a <__aeabi_dadd+0x38e>
 8000918:	e08d      	b.n	8000a36 <__aeabi_dadd+0x4aa>
 800091a:	0023      	movs	r3, r4
 800091c:	433b      	orrs	r3, r7
 800091e:	d000      	beq.n	8000922 <__aeabi_dadd+0x396>
 8000920:	e68a      	b.n	8000638 <__aeabi_dadd+0xac>
 8000922:	2000      	movs	r0, #0
 8000924:	2500      	movs	r5, #0
 8000926:	e761      	b.n	80007ec <__aeabi_dadd+0x260>
 8000928:	4cb4      	ldr	r4, [pc, #720]	; (8000bfc <__aeabi_dadd+0x670>)
 800092a:	45a1      	cmp	r9, r4
 800092c:	d100      	bne.n	8000930 <__aeabi_dadd+0x3a4>
 800092e:	e0ad      	b.n	8000a8c <__aeabi_dadd+0x500>
 8000930:	2480      	movs	r4, #128	; 0x80
 8000932:	0424      	lsls	r4, r4, #16
 8000934:	4320      	orrs	r0, r4
 8000936:	4664      	mov	r4, ip
 8000938:	2c38      	cmp	r4, #56	; 0x38
 800093a:	dc3d      	bgt.n	80009b8 <__aeabi_dadd+0x42c>
 800093c:	4662      	mov	r2, ip
 800093e:	2c1f      	cmp	r4, #31
 8000940:	dd00      	ble.n	8000944 <__aeabi_dadd+0x3b8>
 8000942:	e0b7      	b.n	8000ab4 <__aeabi_dadd+0x528>
 8000944:	2520      	movs	r5, #32
 8000946:	001e      	movs	r6, r3
 8000948:	1b2d      	subs	r5, r5, r4
 800094a:	0004      	movs	r4, r0
 800094c:	40ab      	lsls	r3, r5
 800094e:	40ac      	lsls	r4, r5
 8000950:	40d6      	lsrs	r6, r2
 8000952:	40d0      	lsrs	r0, r2
 8000954:	4642      	mov	r2, r8
 8000956:	1e5d      	subs	r5, r3, #1
 8000958:	41ab      	sbcs	r3, r5
 800095a:	4334      	orrs	r4, r6
 800095c:	1a12      	subs	r2, r2, r0
 800095e:	4690      	mov	r8, r2
 8000960:	4323      	orrs	r3, r4
 8000962:	e02c      	b.n	80009be <__aeabi_dadd+0x432>
 8000964:	0742      	lsls	r2, r0, #29
 8000966:	08db      	lsrs	r3, r3, #3
 8000968:	4313      	orrs	r3, r2
 800096a:	08c0      	lsrs	r0, r0, #3
 800096c:	e73b      	b.n	80007e6 <__aeabi_dadd+0x25a>
 800096e:	185c      	adds	r4, r3, r1
 8000970:	429c      	cmp	r4, r3
 8000972:	419b      	sbcs	r3, r3
 8000974:	4440      	add	r0, r8
 8000976:	425b      	negs	r3, r3
 8000978:	18c7      	adds	r7, r0, r3
 800097a:	2601      	movs	r6, #1
 800097c:	023b      	lsls	r3, r7, #8
 800097e:	d400      	bmi.n	8000982 <__aeabi_dadd+0x3f6>
 8000980:	e729      	b.n	80007d6 <__aeabi_dadd+0x24a>
 8000982:	2602      	movs	r6, #2
 8000984:	4a9e      	ldr	r2, [pc, #632]	; (8000c00 <__aeabi_dadd+0x674>)
 8000986:	0863      	lsrs	r3, r4, #1
 8000988:	4017      	ands	r7, r2
 800098a:	2201      	movs	r2, #1
 800098c:	4014      	ands	r4, r2
 800098e:	431c      	orrs	r4, r3
 8000990:	07fb      	lsls	r3, r7, #31
 8000992:	431c      	orrs	r4, r3
 8000994:	087f      	lsrs	r7, r7, #1
 8000996:	e673      	b.n	8000680 <__aeabi_dadd+0xf4>
 8000998:	4644      	mov	r4, r8
 800099a:	3a20      	subs	r2, #32
 800099c:	40d4      	lsrs	r4, r2
 800099e:	4662      	mov	r2, ip
 80009a0:	2a20      	cmp	r2, #32
 80009a2:	d005      	beq.n	80009b0 <__aeabi_dadd+0x424>
 80009a4:	4667      	mov	r7, ip
 80009a6:	2240      	movs	r2, #64	; 0x40
 80009a8:	1bd2      	subs	r2, r2, r7
 80009aa:	4647      	mov	r7, r8
 80009ac:	4097      	lsls	r7, r2
 80009ae:	4339      	orrs	r1, r7
 80009b0:	1e4a      	subs	r2, r1, #1
 80009b2:	4191      	sbcs	r1, r2
 80009b4:	4321      	orrs	r1, r4
 80009b6:	e635      	b.n	8000624 <__aeabi_dadd+0x98>
 80009b8:	4303      	orrs	r3, r0
 80009ba:	1e58      	subs	r0, r3, #1
 80009bc:	4183      	sbcs	r3, r0
 80009be:	1acc      	subs	r4, r1, r3
 80009c0:	42a1      	cmp	r1, r4
 80009c2:	41bf      	sbcs	r7, r7
 80009c4:	4643      	mov	r3, r8
 80009c6:	427f      	negs	r7, r7
 80009c8:	4655      	mov	r5, sl
 80009ca:	464e      	mov	r6, r9
 80009cc:	1bdf      	subs	r7, r3, r7
 80009ce:	e62e      	b.n	800062e <__aeabi_dadd+0xa2>
 80009d0:	0002      	movs	r2, r0
 80009d2:	431a      	orrs	r2, r3
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x44c>
 80009d6:	e0bd      	b.n	8000b54 <__aeabi_dadd+0x5c8>
 80009d8:	4662      	mov	r2, ip
 80009da:	4664      	mov	r4, ip
 80009dc:	3a01      	subs	r2, #1
 80009de:	2c01      	cmp	r4, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_dadd+0x458>
 80009e2:	e0e5      	b.n	8000bb0 <__aeabi_dadd+0x624>
 80009e4:	4c85      	ldr	r4, [pc, #532]	; (8000bfc <__aeabi_dadd+0x670>)
 80009e6:	45a4      	cmp	ip, r4
 80009e8:	d058      	beq.n	8000a9c <__aeabi_dadd+0x510>
 80009ea:	4694      	mov	ip, r2
 80009ec:	e749      	b.n	8000882 <__aeabi_dadd+0x2f6>
 80009ee:	4664      	mov	r4, ip
 80009f0:	2220      	movs	r2, #32
 80009f2:	1b12      	subs	r2, r2, r4
 80009f4:	4644      	mov	r4, r8
 80009f6:	4094      	lsls	r4, r2
 80009f8:	000f      	movs	r7, r1
 80009fa:	46a1      	mov	r9, r4
 80009fc:	4664      	mov	r4, ip
 80009fe:	4091      	lsls	r1, r2
 8000a00:	40e7      	lsrs	r7, r4
 8000a02:	464c      	mov	r4, r9
 8000a04:	1e4a      	subs	r2, r1, #1
 8000a06:	4191      	sbcs	r1, r2
 8000a08:	433c      	orrs	r4, r7
 8000a0a:	4642      	mov	r2, r8
 8000a0c:	430c      	orrs	r4, r1
 8000a0e:	4661      	mov	r1, ip
 8000a10:	40ca      	lsrs	r2, r1
 8000a12:	1880      	adds	r0, r0, r2
 8000a14:	e6f4      	b.n	8000800 <__aeabi_dadd+0x274>
 8000a16:	4c79      	ldr	r4, [pc, #484]	; (8000bfc <__aeabi_dadd+0x670>)
 8000a18:	42a2      	cmp	r2, r4
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_dadd+0x492>
 8000a1c:	e6fd      	b.n	800081a <__aeabi_dadd+0x28e>
 8000a1e:	1859      	adds	r1, r3, r1
 8000a20:	4299      	cmp	r1, r3
 8000a22:	419b      	sbcs	r3, r3
 8000a24:	4440      	add	r0, r8
 8000a26:	425f      	negs	r7, r3
 8000a28:	19c7      	adds	r7, r0, r7
 8000a2a:	07fc      	lsls	r4, r7, #31
 8000a2c:	0849      	lsrs	r1, r1, #1
 8000a2e:	0016      	movs	r6, r2
 8000a30:	430c      	orrs	r4, r1
 8000a32:	087f      	lsrs	r7, r7, #1
 8000a34:	e6cf      	b.n	80007d6 <__aeabi_dadd+0x24a>
 8000a36:	1acc      	subs	r4, r1, r3
 8000a38:	42a1      	cmp	r1, r4
 8000a3a:	41bf      	sbcs	r7, r7
 8000a3c:	4643      	mov	r3, r8
 8000a3e:	427f      	negs	r7, r7
 8000a40:	1a18      	subs	r0, r3, r0
 8000a42:	4655      	mov	r5, sl
 8000a44:	1bc7      	subs	r7, r0, r7
 8000a46:	e5f7      	b.n	8000638 <__aeabi_dadd+0xac>
 8000a48:	08c9      	lsrs	r1, r1, #3
 8000a4a:	077b      	lsls	r3, r7, #29
 8000a4c:	4655      	mov	r5, sl
 8000a4e:	430b      	orrs	r3, r1
 8000a50:	08f8      	lsrs	r0, r7, #3
 8000a52:	e6c8      	b.n	80007e6 <__aeabi_dadd+0x25a>
 8000a54:	2c00      	cmp	r4, #0
 8000a56:	d000      	beq.n	8000a5a <__aeabi_dadd+0x4ce>
 8000a58:	e081      	b.n	8000b5e <__aeabi_dadd+0x5d2>
 8000a5a:	4643      	mov	r3, r8
 8000a5c:	430b      	orrs	r3, r1
 8000a5e:	d115      	bne.n	8000a8c <__aeabi_dadd+0x500>
 8000a60:	2080      	movs	r0, #128	; 0x80
 8000a62:	2500      	movs	r5, #0
 8000a64:	0300      	lsls	r0, r0, #12
 8000a66:	e6e3      	b.n	8000830 <__aeabi_dadd+0x2a4>
 8000a68:	1a5c      	subs	r4, r3, r1
 8000a6a:	42a3      	cmp	r3, r4
 8000a6c:	419b      	sbcs	r3, r3
 8000a6e:	1bc7      	subs	r7, r0, r7
 8000a70:	425b      	negs	r3, r3
 8000a72:	2601      	movs	r6, #1
 8000a74:	1aff      	subs	r7, r7, r3
 8000a76:	e5da      	b.n	800062e <__aeabi_dadd+0xa2>
 8000a78:	0742      	lsls	r2, r0, #29
 8000a7a:	08db      	lsrs	r3, r3, #3
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	08c0      	lsrs	r0, r0, #3
 8000a80:	e6d2      	b.n	8000828 <__aeabi_dadd+0x29c>
 8000a82:	0742      	lsls	r2, r0, #29
 8000a84:	08db      	lsrs	r3, r3, #3
 8000a86:	4313      	orrs	r3, r2
 8000a88:	08c0      	lsrs	r0, r0, #3
 8000a8a:	e6ac      	b.n	80007e6 <__aeabi_dadd+0x25a>
 8000a8c:	4643      	mov	r3, r8
 8000a8e:	4642      	mov	r2, r8
 8000a90:	08c9      	lsrs	r1, r1, #3
 8000a92:	075b      	lsls	r3, r3, #29
 8000a94:	4655      	mov	r5, sl
 8000a96:	430b      	orrs	r3, r1
 8000a98:	08d0      	lsrs	r0, r2, #3
 8000a9a:	e6c5      	b.n	8000828 <__aeabi_dadd+0x29c>
 8000a9c:	4643      	mov	r3, r8
 8000a9e:	4642      	mov	r2, r8
 8000aa0:	075b      	lsls	r3, r3, #29
 8000aa2:	08c9      	lsrs	r1, r1, #3
 8000aa4:	430b      	orrs	r3, r1
 8000aa6:	08d0      	lsrs	r0, r2, #3
 8000aa8:	e6be      	b.n	8000828 <__aeabi_dadd+0x29c>
 8000aaa:	4303      	orrs	r3, r0
 8000aac:	001c      	movs	r4, r3
 8000aae:	1e63      	subs	r3, r4, #1
 8000ab0:	419c      	sbcs	r4, r3
 8000ab2:	e6fc      	b.n	80008ae <__aeabi_dadd+0x322>
 8000ab4:	0002      	movs	r2, r0
 8000ab6:	3c20      	subs	r4, #32
 8000ab8:	40e2      	lsrs	r2, r4
 8000aba:	0014      	movs	r4, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	2a20      	cmp	r2, #32
 8000ac0:	d003      	beq.n	8000aca <__aeabi_dadd+0x53e>
 8000ac2:	2540      	movs	r5, #64	; 0x40
 8000ac4:	1aad      	subs	r5, r5, r2
 8000ac6:	40a8      	lsls	r0, r5
 8000ac8:	4303      	orrs	r3, r0
 8000aca:	1e58      	subs	r0, r3, #1
 8000acc:	4183      	sbcs	r3, r0
 8000ace:	4323      	orrs	r3, r4
 8000ad0:	e775      	b.n	80009be <__aeabi_dadd+0x432>
 8000ad2:	2a00      	cmp	r2, #0
 8000ad4:	d0e2      	beq.n	8000a9c <__aeabi_dadd+0x510>
 8000ad6:	003a      	movs	r2, r7
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	d0cd      	beq.n	8000a78 <__aeabi_dadd+0x4ec>
 8000adc:	0742      	lsls	r2, r0, #29
 8000ade:	08db      	lsrs	r3, r3, #3
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	2280      	movs	r2, #128	; 0x80
 8000ae4:	08c0      	lsrs	r0, r0, #3
 8000ae6:	0312      	lsls	r2, r2, #12
 8000ae8:	4210      	tst	r0, r2
 8000aea:	d006      	beq.n	8000afa <__aeabi_dadd+0x56e>
 8000aec:	08fc      	lsrs	r4, r7, #3
 8000aee:	4214      	tst	r4, r2
 8000af0:	d103      	bne.n	8000afa <__aeabi_dadd+0x56e>
 8000af2:	0020      	movs	r0, r4
 8000af4:	08cb      	lsrs	r3, r1, #3
 8000af6:	077a      	lsls	r2, r7, #29
 8000af8:	4313      	orrs	r3, r2
 8000afa:	0f5a      	lsrs	r2, r3, #29
 8000afc:	00db      	lsls	r3, r3, #3
 8000afe:	0752      	lsls	r2, r2, #29
 8000b00:	08db      	lsrs	r3, r3, #3
 8000b02:	4313      	orrs	r3, r2
 8000b04:	e690      	b.n	8000828 <__aeabi_dadd+0x29c>
 8000b06:	4643      	mov	r3, r8
 8000b08:	430b      	orrs	r3, r1
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_dadd+0x582>
 8000b0c:	e709      	b.n	8000922 <__aeabi_dadd+0x396>
 8000b0e:	4643      	mov	r3, r8
 8000b10:	4642      	mov	r2, r8
 8000b12:	08c9      	lsrs	r1, r1, #3
 8000b14:	075b      	lsls	r3, r3, #29
 8000b16:	4655      	mov	r5, sl
 8000b18:	430b      	orrs	r3, r1
 8000b1a:	08d0      	lsrs	r0, r2, #3
 8000b1c:	e666      	b.n	80007ec <__aeabi_dadd+0x260>
 8000b1e:	1acc      	subs	r4, r1, r3
 8000b20:	42a1      	cmp	r1, r4
 8000b22:	4189      	sbcs	r1, r1
 8000b24:	1a3f      	subs	r7, r7, r0
 8000b26:	4249      	negs	r1, r1
 8000b28:	4655      	mov	r5, sl
 8000b2a:	2601      	movs	r6, #1
 8000b2c:	1a7f      	subs	r7, r7, r1
 8000b2e:	e57e      	b.n	800062e <__aeabi_dadd+0xa2>
 8000b30:	4642      	mov	r2, r8
 8000b32:	1a5c      	subs	r4, r3, r1
 8000b34:	1a87      	subs	r7, r0, r2
 8000b36:	42a3      	cmp	r3, r4
 8000b38:	4192      	sbcs	r2, r2
 8000b3a:	4252      	negs	r2, r2
 8000b3c:	1abf      	subs	r7, r7, r2
 8000b3e:	023a      	lsls	r2, r7, #8
 8000b40:	d53d      	bpl.n	8000bbe <__aeabi_dadd+0x632>
 8000b42:	1acc      	subs	r4, r1, r3
 8000b44:	42a1      	cmp	r1, r4
 8000b46:	4189      	sbcs	r1, r1
 8000b48:	4643      	mov	r3, r8
 8000b4a:	4249      	negs	r1, r1
 8000b4c:	1a1f      	subs	r7, r3, r0
 8000b4e:	4655      	mov	r5, sl
 8000b50:	1a7f      	subs	r7, r7, r1
 8000b52:	e595      	b.n	8000680 <__aeabi_dadd+0xf4>
 8000b54:	077b      	lsls	r3, r7, #29
 8000b56:	08c9      	lsrs	r1, r1, #3
 8000b58:	430b      	orrs	r3, r1
 8000b5a:	08f8      	lsrs	r0, r7, #3
 8000b5c:	e643      	b.n	80007e6 <__aeabi_dadd+0x25a>
 8000b5e:	4644      	mov	r4, r8
 8000b60:	08db      	lsrs	r3, r3, #3
 8000b62:	430c      	orrs	r4, r1
 8000b64:	d130      	bne.n	8000bc8 <__aeabi_dadd+0x63c>
 8000b66:	0742      	lsls	r2, r0, #29
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	08c0      	lsrs	r0, r0, #3
 8000b6c:	e65c      	b.n	8000828 <__aeabi_dadd+0x29c>
 8000b6e:	077b      	lsls	r3, r7, #29
 8000b70:	08c9      	lsrs	r1, r1, #3
 8000b72:	430b      	orrs	r3, r1
 8000b74:	08f8      	lsrs	r0, r7, #3
 8000b76:	e639      	b.n	80007ec <__aeabi_dadd+0x260>
 8000b78:	185c      	adds	r4, r3, r1
 8000b7a:	429c      	cmp	r4, r3
 8000b7c:	419b      	sbcs	r3, r3
 8000b7e:	4440      	add	r0, r8
 8000b80:	425b      	negs	r3, r3
 8000b82:	18c7      	adds	r7, r0, r3
 8000b84:	023b      	lsls	r3, r7, #8
 8000b86:	d400      	bmi.n	8000b8a <__aeabi_dadd+0x5fe>
 8000b88:	e625      	b.n	80007d6 <__aeabi_dadd+0x24a>
 8000b8a:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <__aeabi_dadd+0x674>)
 8000b8c:	2601      	movs	r6, #1
 8000b8e:	401f      	ands	r7, r3
 8000b90:	e621      	b.n	80007d6 <__aeabi_dadd+0x24a>
 8000b92:	0004      	movs	r4, r0
 8000b94:	3a20      	subs	r2, #32
 8000b96:	40d4      	lsrs	r4, r2
 8000b98:	4662      	mov	r2, ip
 8000b9a:	2a20      	cmp	r2, #32
 8000b9c:	d004      	beq.n	8000ba8 <__aeabi_dadd+0x61c>
 8000b9e:	2240      	movs	r2, #64	; 0x40
 8000ba0:	4666      	mov	r6, ip
 8000ba2:	1b92      	subs	r2, r2, r6
 8000ba4:	4090      	lsls	r0, r2
 8000ba6:	4303      	orrs	r3, r0
 8000ba8:	1e5a      	subs	r2, r3, #1
 8000baa:	4193      	sbcs	r3, r2
 8000bac:	431c      	orrs	r4, r3
 8000bae:	e67e      	b.n	80008ae <__aeabi_dadd+0x322>
 8000bb0:	185c      	adds	r4, r3, r1
 8000bb2:	428c      	cmp	r4, r1
 8000bb4:	4189      	sbcs	r1, r1
 8000bb6:	4440      	add	r0, r8
 8000bb8:	4249      	negs	r1, r1
 8000bba:	1847      	adds	r7, r0, r1
 8000bbc:	e6dd      	b.n	800097a <__aeabi_dadd+0x3ee>
 8000bbe:	0023      	movs	r3, r4
 8000bc0:	433b      	orrs	r3, r7
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_dadd+0x63a>
 8000bc4:	e6ad      	b.n	8000922 <__aeabi_dadd+0x396>
 8000bc6:	e606      	b.n	80007d6 <__aeabi_dadd+0x24a>
 8000bc8:	0744      	lsls	r4, r0, #29
 8000bca:	4323      	orrs	r3, r4
 8000bcc:	2480      	movs	r4, #128	; 0x80
 8000bce:	08c0      	lsrs	r0, r0, #3
 8000bd0:	0324      	lsls	r4, r4, #12
 8000bd2:	4220      	tst	r0, r4
 8000bd4:	d008      	beq.n	8000be8 <__aeabi_dadd+0x65c>
 8000bd6:	4642      	mov	r2, r8
 8000bd8:	08d6      	lsrs	r6, r2, #3
 8000bda:	4226      	tst	r6, r4
 8000bdc:	d104      	bne.n	8000be8 <__aeabi_dadd+0x65c>
 8000bde:	4655      	mov	r5, sl
 8000be0:	0030      	movs	r0, r6
 8000be2:	08cb      	lsrs	r3, r1, #3
 8000be4:	0751      	lsls	r1, r2, #29
 8000be6:	430b      	orrs	r3, r1
 8000be8:	0f5a      	lsrs	r2, r3, #29
 8000bea:	00db      	lsls	r3, r3, #3
 8000bec:	08db      	lsrs	r3, r3, #3
 8000bee:	0752      	lsls	r2, r2, #29
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	e619      	b.n	8000828 <__aeabi_dadd+0x29c>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	4a01      	ldr	r2, [pc, #4]	; (8000bfc <__aeabi_dadd+0x670>)
 8000bf8:	001f      	movs	r7, r3
 8000bfa:	e55e      	b.n	80006ba <__aeabi_dadd+0x12e>
 8000bfc:	000007ff 	.word	0x000007ff
 8000c00:	ff7fffff 	.word	0xff7fffff

08000c04 <__aeabi_ddiv>:
 8000c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c06:	4657      	mov	r7, sl
 8000c08:	464e      	mov	r6, r9
 8000c0a:	4645      	mov	r5, r8
 8000c0c:	46de      	mov	lr, fp
 8000c0e:	b5e0      	push	{r5, r6, r7, lr}
 8000c10:	4681      	mov	r9, r0
 8000c12:	0005      	movs	r5, r0
 8000c14:	030c      	lsls	r4, r1, #12
 8000c16:	0048      	lsls	r0, r1, #1
 8000c18:	4692      	mov	sl, r2
 8000c1a:	001f      	movs	r7, r3
 8000c1c:	b085      	sub	sp, #20
 8000c1e:	0b24      	lsrs	r4, r4, #12
 8000c20:	0d40      	lsrs	r0, r0, #21
 8000c22:	0fce      	lsrs	r6, r1, #31
 8000c24:	2800      	cmp	r0, #0
 8000c26:	d100      	bne.n	8000c2a <__aeabi_ddiv+0x26>
 8000c28:	e156      	b.n	8000ed8 <__aeabi_ddiv+0x2d4>
 8000c2a:	4bd4      	ldr	r3, [pc, #848]	; (8000f7c <__aeabi_ddiv+0x378>)
 8000c2c:	4298      	cmp	r0, r3
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_ddiv+0x2e>
 8000c30:	e172      	b.n	8000f18 <__aeabi_ddiv+0x314>
 8000c32:	0f6b      	lsrs	r3, r5, #29
 8000c34:	00e4      	lsls	r4, r4, #3
 8000c36:	431c      	orrs	r4, r3
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	041b      	lsls	r3, r3, #16
 8000c3c:	4323      	orrs	r3, r4
 8000c3e:	4698      	mov	r8, r3
 8000c40:	4bcf      	ldr	r3, [pc, #828]	; (8000f80 <__aeabi_ddiv+0x37c>)
 8000c42:	00ed      	lsls	r5, r5, #3
 8000c44:	469b      	mov	fp, r3
 8000c46:	2300      	movs	r3, #0
 8000c48:	4699      	mov	r9, r3
 8000c4a:	4483      	add	fp, r0
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	033c      	lsls	r4, r7, #12
 8000c50:	007b      	lsls	r3, r7, #1
 8000c52:	4650      	mov	r0, sl
 8000c54:	0b24      	lsrs	r4, r4, #12
 8000c56:	0d5b      	lsrs	r3, r3, #21
 8000c58:	0fff      	lsrs	r7, r7, #31
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_ddiv+0x5c>
 8000c5e:	e11f      	b.n	8000ea0 <__aeabi_ddiv+0x29c>
 8000c60:	4ac6      	ldr	r2, [pc, #792]	; (8000f7c <__aeabi_ddiv+0x378>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d100      	bne.n	8000c68 <__aeabi_ddiv+0x64>
 8000c66:	e162      	b.n	8000f2e <__aeabi_ddiv+0x32a>
 8000c68:	49c5      	ldr	r1, [pc, #788]	; (8000f80 <__aeabi_ddiv+0x37c>)
 8000c6a:	0f42      	lsrs	r2, r0, #29
 8000c6c:	468c      	mov	ip, r1
 8000c6e:	00e4      	lsls	r4, r4, #3
 8000c70:	4659      	mov	r1, fp
 8000c72:	4314      	orrs	r4, r2
 8000c74:	2280      	movs	r2, #128	; 0x80
 8000c76:	4463      	add	r3, ip
 8000c78:	0412      	lsls	r2, r2, #16
 8000c7a:	1acb      	subs	r3, r1, r3
 8000c7c:	4314      	orrs	r4, r2
 8000c7e:	469b      	mov	fp, r3
 8000c80:	00c2      	lsls	r2, r0, #3
 8000c82:	2000      	movs	r0, #0
 8000c84:	0033      	movs	r3, r6
 8000c86:	407b      	eors	r3, r7
 8000c88:	469a      	mov	sl, r3
 8000c8a:	464b      	mov	r3, r9
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d827      	bhi.n	8000ce0 <__aeabi_ddiv+0xdc>
 8000c90:	49bc      	ldr	r1, [pc, #752]	; (8000f84 <__aeabi_ddiv+0x380>)
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	58cb      	ldr	r3, [r1, r3]
 8000c96:	469f      	mov	pc, r3
 8000c98:	46b2      	mov	sl, r6
 8000c9a:	9b00      	ldr	r3, [sp, #0]
 8000c9c:	2b02      	cmp	r3, #2
 8000c9e:	d016      	beq.n	8000cce <__aeabi_ddiv+0xca>
 8000ca0:	2b03      	cmp	r3, #3
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_ddiv+0xa2>
 8000ca4:	e28e      	b.n	80011c4 <__aeabi_ddiv+0x5c0>
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d000      	beq.n	8000cac <__aeabi_ddiv+0xa8>
 8000caa:	e0d9      	b.n	8000e60 <__aeabi_ddiv+0x25c>
 8000cac:	2300      	movs	r3, #0
 8000cae:	2400      	movs	r4, #0
 8000cb0:	2500      	movs	r5, #0
 8000cb2:	4652      	mov	r2, sl
 8000cb4:	051b      	lsls	r3, r3, #20
 8000cb6:	4323      	orrs	r3, r4
 8000cb8:	07d2      	lsls	r2, r2, #31
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	0028      	movs	r0, r5
 8000cbe:	0019      	movs	r1, r3
 8000cc0:	b005      	add	sp, #20
 8000cc2:	bcf0      	pop	{r4, r5, r6, r7}
 8000cc4:	46bb      	mov	fp, r7
 8000cc6:	46b2      	mov	sl, r6
 8000cc8:	46a9      	mov	r9, r5
 8000cca:	46a0      	mov	r8, r4
 8000ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cce:	2400      	movs	r4, #0
 8000cd0:	2500      	movs	r5, #0
 8000cd2:	4baa      	ldr	r3, [pc, #680]	; (8000f7c <__aeabi_ddiv+0x378>)
 8000cd4:	e7ed      	b.n	8000cb2 <__aeabi_ddiv+0xae>
 8000cd6:	46ba      	mov	sl, r7
 8000cd8:	46a0      	mov	r8, r4
 8000cda:	0015      	movs	r5, r2
 8000cdc:	9000      	str	r0, [sp, #0]
 8000cde:	e7dc      	b.n	8000c9a <__aeabi_ddiv+0x96>
 8000ce0:	4544      	cmp	r4, r8
 8000ce2:	d200      	bcs.n	8000ce6 <__aeabi_ddiv+0xe2>
 8000ce4:	e1c7      	b.n	8001076 <__aeabi_ddiv+0x472>
 8000ce6:	d100      	bne.n	8000cea <__aeabi_ddiv+0xe6>
 8000ce8:	e1c2      	b.n	8001070 <__aeabi_ddiv+0x46c>
 8000cea:	2301      	movs	r3, #1
 8000cec:	425b      	negs	r3, r3
 8000cee:	469c      	mov	ip, r3
 8000cf0:	002e      	movs	r6, r5
 8000cf2:	4640      	mov	r0, r8
 8000cf4:	2500      	movs	r5, #0
 8000cf6:	44e3      	add	fp, ip
 8000cf8:	0223      	lsls	r3, r4, #8
 8000cfa:	0e14      	lsrs	r4, r2, #24
 8000cfc:	431c      	orrs	r4, r3
 8000cfe:	0c1b      	lsrs	r3, r3, #16
 8000d00:	4699      	mov	r9, r3
 8000d02:	0423      	lsls	r3, r4, #16
 8000d04:	0c1f      	lsrs	r7, r3, #16
 8000d06:	0212      	lsls	r2, r2, #8
 8000d08:	4649      	mov	r1, r9
 8000d0a:	9200      	str	r2, [sp, #0]
 8000d0c:	9701      	str	r7, [sp, #4]
 8000d0e:	f7ff fa9d 	bl	800024c <__aeabi_uidivmod>
 8000d12:	0002      	movs	r2, r0
 8000d14:	437a      	muls	r2, r7
 8000d16:	040b      	lsls	r3, r1, #16
 8000d18:	0c31      	lsrs	r1, r6, #16
 8000d1a:	4680      	mov	r8, r0
 8000d1c:	4319      	orrs	r1, r3
 8000d1e:	428a      	cmp	r2, r1
 8000d20:	d907      	bls.n	8000d32 <__aeabi_ddiv+0x12e>
 8000d22:	2301      	movs	r3, #1
 8000d24:	425b      	negs	r3, r3
 8000d26:	469c      	mov	ip, r3
 8000d28:	1909      	adds	r1, r1, r4
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	428c      	cmp	r4, r1
 8000d2e:	d800      	bhi.n	8000d32 <__aeabi_ddiv+0x12e>
 8000d30:	e207      	b.n	8001142 <__aeabi_ddiv+0x53e>
 8000d32:	1a88      	subs	r0, r1, r2
 8000d34:	4649      	mov	r1, r9
 8000d36:	f7ff fa89 	bl	800024c <__aeabi_uidivmod>
 8000d3a:	0409      	lsls	r1, r1, #16
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	0431      	lsls	r1, r6, #16
 8000d40:	4666      	mov	r6, ip
 8000d42:	9a01      	ldr	r2, [sp, #4]
 8000d44:	0c09      	lsrs	r1, r1, #16
 8000d46:	4342      	muls	r2, r0
 8000d48:	0003      	movs	r3, r0
 8000d4a:	4331      	orrs	r1, r6
 8000d4c:	428a      	cmp	r2, r1
 8000d4e:	d904      	bls.n	8000d5a <__aeabi_ddiv+0x156>
 8000d50:	1909      	adds	r1, r1, r4
 8000d52:	3b01      	subs	r3, #1
 8000d54:	428c      	cmp	r4, r1
 8000d56:	d800      	bhi.n	8000d5a <__aeabi_ddiv+0x156>
 8000d58:	e1ed      	b.n	8001136 <__aeabi_ddiv+0x532>
 8000d5a:	1a88      	subs	r0, r1, r2
 8000d5c:	4642      	mov	r2, r8
 8000d5e:	0412      	lsls	r2, r2, #16
 8000d60:	431a      	orrs	r2, r3
 8000d62:	4690      	mov	r8, r2
 8000d64:	4641      	mov	r1, r8
 8000d66:	9b00      	ldr	r3, [sp, #0]
 8000d68:	040e      	lsls	r6, r1, #16
 8000d6a:	0c1b      	lsrs	r3, r3, #16
 8000d6c:	001f      	movs	r7, r3
 8000d6e:	9302      	str	r3, [sp, #8]
 8000d70:	9b00      	ldr	r3, [sp, #0]
 8000d72:	0c36      	lsrs	r6, r6, #16
 8000d74:	041b      	lsls	r3, r3, #16
 8000d76:	0c19      	lsrs	r1, r3, #16
 8000d78:	000b      	movs	r3, r1
 8000d7a:	4373      	muls	r3, r6
 8000d7c:	0c12      	lsrs	r2, r2, #16
 8000d7e:	437e      	muls	r6, r7
 8000d80:	9103      	str	r1, [sp, #12]
 8000d82:	4351      	muls	r1, r2
 8000d84:	437a      	muls	r2, r7
 8000d86:	0c1f      	lsrs	r7, r3, #16
 8000d88:	46bc      	mov	ip, r7
 8000d8a:	1876      	adds	r6, r6, r1
 8000d8c:	4466      	add	r6, ip
 8000d8e:	42b1      	cmp	r1, r6
 8000d90:	d903      	bls.n	8000d9a <__aeabi_ddiv+0x196>
 8000d92:	2180      	movs	r1, #128	; 0x80
 8000d94:	0249      	lsls	r1, r1, #9
 8000d96:	468c      	mov	ip, r1
 8000d98:	4462      	add	r2, ip
 8000d9a:	0c31      	lsrs	r1, r6, #16
 8000d9c:	188a      	adds	r2, r1, r2
 8000d9e:	0431      	lsls	r1, r6, #16
 8000da0:	041e      	lsls	r6, r3, #16
 8000da2:	0c36      	lsrs	r6, r6, #16
 8000da4:	198e      	adds	r6, r1, r6
 8000da6:	4290      	cmp	r0, r2
 8000da8:	d302      	bcc.n	8000db0 <__aeabi_ddiv+0x1ac>
 8000daa:	d112      	bne.n	8000dd2 <__aeabi_ddiv+0x1ce>
 8000dac:	42b5      	cmp	r5, r6
 8000dae:	d210      	bcs.n	8000dd2 <__aeabi_ddiv+0x1ce>
 8000db0:	4643      	mov	r3, r8
 8000db2:	1e59      	subs	r1, r3, #1
 8000db4:	9b00      	ldr	r3, [sp, #0]
 8000db6:	469c      	mov	ip, r3
 8000db8:	4465      	add	r5, ip
 8000dba:	001f      	movs	r7, r3
 8000dbc:	429d      	cmp	r5, r3
 8000dbe:	419b      	sbcs	r3, r3
 8000dc0:	425b      	negs	r3, r3
 8000dc2:	191b      	adds	r3, r3, r4
 8000dc4:	18c0      	adds	r0, r0, r3
 8000dc6:	4284      	cmp	r4, r0
 8000dc8:	d200      	bcs.n	8000dcc <__aeabi_ddiv+0x1c8>
 8000dca:	e1a0      	b.n	800110e <__aeabi_ddiv+0x50a>
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_ddiv+0x1cc>
 8000dce:	e19b      	b.n	8001108 <__aeabi_ddiv+0x504>
 8000dd0:	4688      	mov	r8, r1
 8000dd2:	1bae      	subs	r6, r5, r6
 8000dd4:	42b5      	cmp	r5, r6
 8000dd6:	41ad      	sbcs	r5, r5
 8000dd8:	1a80      	subs	r0, r0, r2
 8000dda:	426d      	negs	r5, r5
 8000ddc:	1b40      	subs	r0, r0, r5
 8000dde:	4284      	cmp	r4, r0
 8000de0:	d100      	bne.n	8000de4 <__aeabi_ddiv+0x1e0>
 8000de2:	e1d5      	b.n	8001190 <__aeabi_ddiv+0x58c>
 8000de4:	4649      	mov	r1, r9
 8000de6:	f7ff fa31 	bl	800024c <__aeabi_uidivmod>
 8000dea:	9a01      	ldr	r2, [sp, #4]
 8000dec:	040b      	lsls	r3, r1, #16
 8000dee:	4342      	muls	r2, r0
 8000df0:	0c31      	lsrs	r1, r6, #16
 8000df2:	0005      	movs	r5, r0
 8000df4:	4319      	orrs	r1, r3
 8000df6:	428a      	cmp	r2, r1
 8000df8:	d900      	bls.n	8000dfc <__aeabi_ddiv+0x1f8>
 8000dfa:	e16c      	b.n	80010d6 <__aeabi_ddiv+0x4d2>
 8000dfc:	1a88      	subs	r0, r1, r2
 8000dfe:	4649      	mov	r1, r9
 8000e00:	f7ff fa24 	bl	800024c <__aeabi_uidivmod>
 8000e04:	9a01      	ldr	r2, [sp, #4]
 8000e06:	0436      	lsls	r6, r6, #16
 8000e08:	4342      	muls	r2, r0
 8000e0a:	0409      	lsls	r1, r1, #16
 8000e0c:	0c36      	lsrs	r6, r6, #16
 8000e0e:	0003      	movs	r3, r0
 8000e10:	430e      	orrs	r6, r1
 8000e12:	42b2      	cmp	r2, r6
 8000e14:	d900      	bls.n	8000e18 <__aeabi_ddiv+0x214>
 8000e16:	e153      	b.n	80010c0 <__aeabi_ddiv+0x4bc>
 8000e18:	9803      	ldr	r0, [sp, #12]
 8000e1a:	1ab6      	subs	r6, r6, r2
 8000e1c:	0002      	movs	r2, r0
 8000e1e:	042d      	lsls	r5, r5, #16
 8000e20:	431d      	orrs	r5, r3
 8000e22:	9f02      	ldr	r7, [sp, #8]
 8000e24:	042b      	lsls	r3, r5, #16
 8000e26:	0c1b      	lsrs	r3, r3, #16
 8000e28:	435a      	muls	r2, r3
 8000e2a:	437b      	muls	r3, r7
 8000e2c:	469c      	mov	ip, r3
 8000e2e:	0c29      	lsrs	r1, r5, #16
 8000e30:	4348      	muls	r0, r1
 8000e32:	0c13      	lsrs	r3, r2, #16
 8000e34:	4484      	add	ip, r0
 8000e36:	4463      	add	r3, ip
 8000e38:	4379      	muls	r1, r7
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d903      	bls.n	8000e46 <__aeabi_ddiv+0x242>
 8000e3e:	2080      	movs	r0, #128	; 0x80
 8000e40:	0240      	lsls	r0, r0, #9
 8000e42:	4684      	mov	ip, r0
 8000e44:	4461      	add	r1, ip
 8000e46:	0c18      	lsrs	r0, r3, #16
 8000e48:	0412      	lsls	r2, r2, #16
 8000e4a:	041b      	lsls	r3, r3, #16
 8000e4c:	0c12      	lsrs	r2, r2, #16
 8000e4e:	1841      	adds	r1, r0, r1
 8000e50:	189b      	adds	r3, r3, r2
 8000e52:	428e      	cmp	r6, r1
 8000e54:	d200      	bcs.n	8000e58 <__aeabi_ddiv+0x254>
 8000e56:	e0ff      	b.n	8001058 <__aeabi_ddiv+0x454>
 8000e58:	d100      	bne.n	8000e5c <__aeabi_ddiv+0x258>
 8000e5a:	e0fa      	b.n	8001052 <__aeabi_ddiv+0x44e>
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	431d      	orrs	r5, r3
 8000e60:	4a49      	ldr	r2, [pc, #292]	; (8000f88 <__aeabi_ddiv+0x384>)
 8000e62:	445a      	add	r2, fp
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	dc00      	bgt.n	8000e6a <__aeabi_ddiv+0x266>
 8000e68:	e0aa      	b.n	8000fc0 <__aeabi_ddiv+0x3bc>
 8000e6a:	076b      	lsls	r3, r5, #29
 8000e6c:	d000      	beq.n	8000e70 <__aeabi_ddiv+0x26c>
 8000e6e:	e13d      	b.n	80010ec <__aeabi_ddiv+0x4e8>
 8000e70:	08ed      	lsrs	r5, r5, #3
 8000e72:	4643      	mov	r3, r8
 8000e74:	01db      	lsls	r3, r3, #7
 8000e76:	d506      	bpl.n	8000e86 <__aeabi_ddiv+0x282>
 8000e78:	4642      	mov	r2, r8
 8000e7a:	4b44      	ldr	r3, [pc, #272]	; (8000f8c <__aeabi_ddiv+0x388>)
 8000e7c:	401a      	ands	r2, r3
 8000e7e:	4690      	mov	r8, r2
 8000e80:	2280      	movs	r2, #128	; 0x80
 8000e82:	00d2      	lsls	r2, r2, #3
 8000e84:	445a      	add	r2, fp
 8000e86:	4b42      	ldr	r3, [pc, #264]	; (8000f90 <__aeabi_ddiv+0x38c>)
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dd00      	ble.n	8000e8e <__aeabi_ddiv+0x28a>
 8000e8c:	e71f      	b.n	8000cce <__aeabi_ddiv+0xca>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	075b      	lsls	r3, r3, #29
 8000e92:	431d      	orrs	r5, r3
 8000e94:	4643      	mov	r3, r8
 8000e96:	0552      	lsls	r2, r2, #21
 8000e98:	025c      	lsls	r4, r3, #9
 8000e9a:	0b24      	lsrs	r4, r4, #12
 8000e9c:	0d53      	lsrs	r3, r2, #21
 8000e9e:	e708      	b.n	8000cb2 <__aeabi_ddiv+0xae>
 8000ea0:	4652      	mov	r2, sl
 8000ea2:	4322      	orrs	r2, r4
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_ddiv+0x2a4>
 8000ea6:	e07b      	b.n	8000fa0 <__aeabi_ddiv+0x39c>
 8000ea8:	2c00      	cmp	r4, #0
 8000eaa:	d100      	bne.n	8000eae <__aeabi_ddiv+0x2aa>
 8000eac:	e0fa      	b.n	80010a4 <__aeabi_ddiv+0x4a0>
 8000eae:	0020      	movs	r0, r4
 8000eb0:	f001 fa22 	bl	80022f8 <__clzsi2>
 8000eb4:	0002      	movs	r2, r0
 8000eb6:	3a0b      	subs	r2, #11
 8000eb8:	231d      	movs	r3, #29
 8000eba:	0001      	movs	r1, r0
 8000ebc:	1a9b      	subs	r3, r3, r2
 8000ebe:	4652      	mov	r2, sl
 8000ec0:	3908      	subs	r1, #8
 8000ec2:	40da      	lsrs	r2, r3
 8000ec4:	408c      	lsls	r4, r1
 8000ec6:	4314      	orrs	r4, r2
 8000ec8:	4652      	mov	r2, sl
 8000eca:	408a      	lsls	r2, r1
 8000ecc:	4b31      	ldr	r3, [pc, #196]	; (8000f94 <__aeabi_ddiv+0x390>)
 8000ece:	4458      	add	r0, fp
 8000ed0:	469b      	mov	fp, r3
 8000ed2:	4483      	add	fp, r0
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	e6d5      	b.n	8000c84 <__aeabi_ddiv+0x80>
 8000ed8:	464b      	mov	r3, r9
 8000eda:	4323      	orrs	r3, r4
 8000edc:	4698      	mov	r8, r3
 8000ede:	d044      	beq.n	8000f6a <__aeabi_ddiv+0x366>
 8000ee0:	2c00      	cmp	r4, #0
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_ddiv+0x2e2>
 8000ee4:	e0ce      	b.n	8001084 <__aeabi_ddiv+0x480>
 8000ee6:	0020      	movs	r0, r4
 8000ee8:	f001 fa06 	bl	80022f8 <__clzsi2>
 8000eec:	0001      	movs	r1, r0
 8000eee:	0002      	movs	r2, r0
 8000ef0:	390b      	subs	r1, #11
 8000ef2:	231d      	movs	r3, #29
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	4649      	mov	r1, r9
 8000ef8:	0010      	movs	r0, r2
 8000efa:	40d9      	lsrs	r1, r3
 8000efc:	3808      	subs	r0, #8
 8000efe:	4084      	lsls	r4, r0
 8000f00:	000b      	movs	r3, r1
 8000f02:	464d      	mov	r5, r9
 8000f04:	4323      	orrs	r3, r4
 8000f06:	4698      	mov	r8, r3
 8000f08:	4085      	lsls	r5, r0
 8000f0a:	4823      	ldr	r0, [pc, #140]	; (8000f98 <__aeabi_ddiv+0x394>)
 8000f0c:	1a83      	subs	r3, r0, r2
 8000f0e:	469b      	mov	fp, r3
 8000f10:	2300      	movs	r3, #0
 8000f12:	4699      	mov	r9, r3
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	e69a      	b.n	8000c4e <__aeabi_ddiv+0x4a>
 8000f18:	464b      	mov	r3, r9
 8000f1a:	4323      	orrs	r3, r4
 8000f1c:	4698      	mov	r8, r3
 8000f1e:	d11d      	bne.n	8000f5c <__aeabi_ddiv+0x358>
 8000f20:	2308      	movs	r3, #8
 8000f22:	4699      	mov	r9, r3
 8000f24:	3b06      	subs	r3, #6
 8000f26:	2500      	movs	r5, #0
 8000f28:	4683      	mov	fp, r0
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	e68f      	b.n	8000c4e <__aeabi_ddiv+0x4a>
 8000f2e:	4652      	mov	r2, sl
 8000f30:	4322      	orrs	r2, r4
 8000f32:	d109      	bne.n	8000f48 <__aeabi_ddiv+0x344>
 8000f34:	2302      	movs	r3, #2
 8000f36:	4649      	mov	r1, r9
 8000f38:	4319      	orrs	r1, r3
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <__aeabi_ddiv+0x398>)
 8000f3c:	4689      	mov	r9, r1
 8000f3e:	469c      	mov	ip, r3
 8000f40:	2400      	movs	r4, #0
 8000f42:	2002      	movs	r0, #2
 8000f44:	44e3      	add	fp, ip
 8000f46:	e69d      	b.n	8000c84 <__aeabi_ddiv+0x80>
 8000f48:	2303      	movs	r3, #3
 8000f4a:	464a      	mov	r2, r9
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <__aeabi_ddiv+0x398>)
 8000f50:	4691      	mov	r9, r2
 8000f52:	469c      	mov	ip, r3
 8000f54:	4652      	mov	r2, sl
 8000f56:	2003      	movs	r0, #3
 8000f58:	44e3      	add	fp, ip
 8000f5a:	e693      	b.n	8000c84 <__aeabi_ddiv+0x80>
 8000f5c:	230c      	movs	r3, #12
 8000f5e:	4699      	mov	r9, r3
 8000f60:	3b09      	subs	r3, #9
 8000f62:	46a0      	mov	r8, r4
 8000f64:	4683      	mov	fp, r0
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	e671      	b.n	8000c4e <__aeabi_ddiv+0x4a>
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	4699      	mov	r9, r3
 8000f6e:	2300      	movs	r3, #0
 8000f70:	469b      	mov	fp, r3
 8000f72:	3301      	adds	r3, #1
 8000f74:	2500      	movs	r5, #0
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	e669      	b.n	8000c4e <__aeabi_ddiv+0x4a>
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	000007ff 	.word	0x000007ff
 8000f80:	fffffc01 	.word	0xfffffc01
 8000f84:	0800d47c 	.word	0x0800d47c
 8000f88:	000003ff 	.word	0x000003ff
 8000f8c:	feffffff 	.word	0xfeffffff
 8000f90:	000007fe 	.word	0x000007fe
 8000f94:	000003f3 	.word	0x000003f3
 8000f98:	fffffc0d 	.word	0xfffffc0d
 8000f9c:	fffff801 	.word	0xfffff801
 8000fa0:	4649      	mov	r1, r9
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	4319      	orrs	r1, r3
 8000fa6:	4689      	mov	r9, r1
 8000fa8:	2400      	movs	r4, #0
 8000faa:	2001      	movs	r0, #1
 8000fac:	e66a      	b.n	8000c84 <__aeabi_ddiv+0x80>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	2480      	movs	r4, #128	; 0x80
 8000fb2:	469a      	mov	sl, r3
 8000fb4:	2500      	movs	r5, #0
 8000fb6:	4b8a      	ldr	r3, [pc, #552]	; (80011e0 <__aeabi_ddiv+0x5dc>)
 8000fb8:	0324      	lsls	r4, r4, #12
 8000fba:	e67a      	b.n	8000cb2 <__aeabi_ddiv+0xae>
 8000fbc:	2501      	movs	r5, #1
 8000fbe:	426d      	negs	r5, r5
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	1a9b      	subs	r3, r3, r2
 8000fc4:	2b38      	cmp	r3, #56	; 0x38
 8000fc6:	dd00      	ble.n	8000fca <__aeabi_ddiv+0x3c6>
 8000fc8:	e670      	b.n	8000cac <__aeabi_ddiv+0xa8>
 8000fca:	2b1f      	cmp	r3, #31
 8000fcc:	dc00      	bgt.n	8000fd0 <__aeabi_ddiv+0x3cc>
 8000fce:	e0bf      	b.n	8001150 <__aeabi_ddiv+0x54c>
 8000fd0:	211f      	movs	r1, #31
 8000fd2:	4249      	negs	r1, r1
 8000fd4:	1a8a      	subs	r2, r1, r2
 8000fd6:	4641      	mov	r1, r8
 8000fd8:	40d1      	lsrs	r1, r2
 8000fda:	000a      	movs	r2, r1
 8000fdc:	2b20      	cmp	r3, #32
 8000fde:	d004      	beq.n	8000fea <__aeabi_ddiv+0x3e6>
 8000fe0:	4641      	mov	r1, r8
 8000fe2:	4b80      	ldr	r3, [pc, #512]	; (80011e4 <__aeabi_ddiv+0x5e0>)
 8000fe4:	445b      	add	r3, fp
 8000fe6:	4099      	lsls	r1, r3
 8000fe8:	430d      	orrs	r5, r1
 8000fea:	1e6b      	subs	r3, r5, #1
 8000fec:	419d      	sbcs	r5, r3
 8000fee:	2307      	movs	r3, #7
 8000ff0:	432a      	orrs	r2, r5
 8000ff2:	001d      	movs	r5, r3
 8000ff4:	2400      	movs	r4, #0
 8000ff6:	4015      	ands	r5, r2
 8000ff8:	4213      	tst	r3, r2
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_ddiv+0x3fa>
 8000ffc:	e0d4      	b.n	80011a8 <__aeabi_ddiv+0x5a4>
 8000ffe:	210f      	movs	r1, #15
 8001000:	2300      	movs	r3, #0
 8001002:	4011      	ands	r1, r2
 8001004:	2904      	cmp	r1, #4
 8001006:	d100      	bne.n	800100a <__aeabi_ddiv+0x406>
 8001008:	e0cb      	b.n	80011a2 <__aeabi_ddiv+0x59e>
 800100a:	1d11      	adds	r1, r2, #4
 800100c:	4291      	cmp	r1, r2
 800100e:	4192      	sbcs	r2, r2
 8001010:	4252      	negs	r2, r2
 8001012:	189b      	adds	r3, r3, r2
 8001014:	000a      	movs	r2, r1
 8001016:	0219      	lsls	r1, r3, #8
 8001018:	d400      	bmi.n	800101c <__aeabi_ddiv+0x418>
 800101a:	e0c2      	b.n	80011a2 <__aeabi_ddiv+0x59e>
 800101c:	2301      	movs	r3, #1
 800101e:	2400      	movs	r4, #0
 8001020:	2500      	movs	r5, #0
 8001022:	e646      	b.n	8000cb2 <__aeabi_ddiv+0xae>
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	4641      	mov	r1, r8
 8001028:	031b      	lsls	r3, r3, #12
 800102a:	4219      	tst	r1, r3
 800102c:	d008      	beq.n	8001040 <__aeabi_ddiv+0x43c>
 800102e:	421c      	tst	r4, r3
 8001030:	d106      	bne.n	8001040 <__aeabi_ddiv+0x43c>
 8001032:	431c      	orrs	r4, r3
 8001034:	0324      	lsls	r4, r4, #12
 8001036:	46ba      	mov	sl, r7
 8001038:	0015      	movs	r5, r2
 800103a:	4b69      	ldr	r3, [pc, #420]	; (80011e0 <__aeabi_ddiv+0x5dc>)
 800103c:	0b24      	lsrs	r4, r4, #12
 800103e:	e638      	b.n	8000cb2 <__aeabi_ddiv+0xae>
 8001040:	2480      	movs	r4, #128	; 0x80
 8001042:	4643      	mov	r3, r8
 8001044:	0324      	lsls	r4, r4, #12
 8001046:	431c      	orrs	r4, r3
 8001048:	0324      	lsls	r4, r4, #12
 800104a:	46b2      	mov	sl, r6
 800104c:	4b64      	ldr	r3, [pc, #400]	; (80011e0 <__aeabi_ddiv+0x5dc>)
 800104e:	0b24      	lsrs	r4, r4, #12
 8001050:	e62f      	b.n	8000cb2 <__aeabi_ddiv+0xae>
 8001052:	2b00      	cmp	r3, #0
 8001054:	d100      	bne.n	8001058 <__aeabi_ddiv+0x454>
 8001056:	e703      	b.n	8000e60 <__aeabi_ddiv+0x25c>
 8001058:	19a6      	adds	r6, r4, r6
 800105a:	1e68      	subs	r0, r5, #1
 800105c:	42a6      	cmp	r6, r4
 800105e:	d200      	bcs.n	8001062 <__aeabi_ddiv+0x45e>
 8001060:	e08d      	b.n	800117e <__aeabi_ddiv+0x57a>
 8001062:	428e      	cmp	r6, r1
 8001064:	d200      	bcs.n	8001068 <__aeabi_ddiv+0x464>
 8001066:	e0a3      	b.n	80011b0 <__aeabi_ddiv+0x5ac>
 8001068:	d100      	bne.n	800106c <__aeabi_ddiv+0x468>
 800106a:	e0b3      	b.n	80011d4 <__aeabi_ddiv+0x5d0>
 800106c:	0005      	movs	r5, r0
 800106e:	e6f5      	b.n	8000e5c <__aeabi_ddiv+0x258>
 8001070:	42aa      	cmp	r2, r5
 8001072:	d900      	bls.n	8001076 <__aeabi_ddiv+0x472>
 8001074:	e639      	b.n	8000cea <__aeabi_ddiv+0xe6>
 8001076:	4643      	mov	r3, r8
 8001078:	07de      	lsls	r6, r3, #31
 800107a:	0858      	lsrs	r0, r3, #1
 800107c:	086b      	lsrs	r3, r5, #1
 800107e:	431e      	orrs	r6, r3
 8001080:	07ed      	lsls	r5, r5, #31
 8001082:	e639      	b.n	8000cf8 <__aeabi_ddiv+0xf4>
 8001084:	4648      	mov	r0, r9
 8001086:	f001 f937 	bl	80022f8 <__clzsi2>
 800108a:	0001      	movs	r1, r0
 800108c:	0002      	movs	r2, r0
 800108e:	3115      	adds	r1, #21
 8001090:	3220      	adds	r2, #32
 8001092:	291c      	cmp	r1, #28
 8001094:	dc00      	bgt.n	8001098 <__aeabi_ddiv+0x494>
 8001096:	e72c      	b.n	8000ef2 <__aeabi_ddiv+0x2ee>
 8001098:	464b      	mov	r3, r9
 800109a:	3808      	subs	r0, #8
 800109c:	4083      	lsls	r3, r0
 800109e:	2500      	movs	r5, #0
 80010a0:	4698      	mov	r8, r3
 80010a2:	e732      	b.n	8000f0a <__aeabi_ddiv+0x306>
 80010a4:	f001 f928 	bl	80022f8 <__clzsi2>
 80010a8:	0003      	movs	r3, r0
 80010aa:	001a      	movs	r2, r3
 80010ac:	3215      	adds	r2, #21
 80010ae:	3020      	adds	r0, #32
 80010b0:	2a1c      	cmp	r2, #28
 80010b2:	dc00      	bgt.n	80010b6 <__aeabi_ddiv+0x4b2>
 80010b4:	e700      	b.n	8000eb8 <__aeabi_ddiv+0x2b4>
 80010b6:	4654      	mov	r4, sl
 80010b8:	3b08      	subs	r3, #8
 80010ba:	2200      	movs	r2, #0
 80010bc:	409c      	lsls	r4, r3
 80010be:	e705      	b.n	8000ecc <__aeabi_ddiv+0x2c8>
 80010c0:	1936      	adds	r6, r6, r4
 80010c2:	3b01      	subs	r3, #1
 80010c4:	42b4      	cmp	r4, r6
 80010c6:	d900      	bls.n	80010ca <__aeabi_ddiv+0x4c6>
 80010c8:	e6a6      	b.n	8000e18 <__aeabi_ddiv+0x214>
 80010ca:	42b2      	cmp	r2, r6
 80010cc:	d800      	bhi.n	80010d0 <__aeabi_ddiv+0x4cc>
 80010ce:	e6a3      	b.n	8000e18 <__aeabi_ddiv+0x214>
 80010d0:	1e83      	subs	r3, r0, #2
 80010d2:	1936      	adds	r6, r6, r4
 80010d4:	e6a0      	b.n	8000e18 <__aeabi_ddiv+0x214>
 80010d6:	1909      	adds	r1, r1, r4
 80010d8:	3d01      	subs	r5, #1
 80010da:	428c      	cmp	r4, r1
 80010dc:	d900      	bls.n	80010e0 <__aeabi_ddiv+0x4dc>
 80010de:	e68d      	b.n	8000dfc <__aeabi_ddiv+0x1f8>
 80010e0:	428a      	cmp	r2, r1
 80010e2:	d800      	bhi.n	80010e6 <__aeabi_ddiv+0x4e2>
 80010e4:	e68a      	b.n	8000dfc <__aeabi_ddiv+0x1f8>
 80010e6:	1e85      	subs	r5, r0, #2
 80010e8:	1909      	adds	r1, r1, r4
 80010ea:	e687      	b.n	8000dfc <__aeabi_ddiv+0x1f8>
 80010ec:	230f      	movs	r3, #15
 80010ee:	402b      	ands	r3, r5
 80010f0:	2b04      	cmp	r3, #4
 80010f2:	d100      	bne.n	80010f6 <__aeabi_ddiv+0x4f2>
 80010f4:	e6bc      	b.n	8000e70 <__aeabi_ddiv+0x26c>
 80010f6:	2305      	movs	r3, #5
 80010f8:	425b      	negs	r3, r3
 80010fa:	42ab      	cmp	r3, r5
 80010fc:	419b      	sbcs	r3, r3
 80010fe:	3504      	adds	r5, #4
 8001100:	425b      	negs	r3, r3
 8001102:	08ed      	lsrs	r5, r5, #3
 8001104:	4498      	add	r8, r3
 8001106:	e6b4      	b.n	8000e72 <__aeabi_ddiv+0x26e>
 8001108:	42af      	cmp	r7, r5
 800110a:	d900      	bls.n	800110e <__aeabi_ddiv+0x50a>
 800110c:	e660      	b.n	8000dd0 <__aeabi_ddiv+0x1cc>
 800110e:	4282      	cmp	r2, r0
 8001110:	d804      	bhi.n	800111c <__aeabi_ddiv+0x518>
 8001112:	d000      	beq.n	8001116 <__aeabi_ddiv+0x512>
 8001114:	e65c      	b.n	8000dd0 <__aeabi_ddiv+0x1cc>
 8001116:	42ae      	cmp	r6, r5
 8001118:	d800      	bhi.n	800111c <__aeabi_ddiv+0x518>
 800111a:	e659      	b.n	8000dd0 <__aeabi_ddiv+0x1cc>
 800111c:	2302      	movs	r3, #2
 800111e:	425b      	negs	r3, r3
 8001120:	469c      	mov	ip, r3
 8001122:	9b00      	ldr	r3, [sp, #0]
 8001124:	44e0      	add	r8, ip
 8001126:	469c      	mov	ip, r3
 8001128:	4465      	add	r5, ip
 800112a:	429d      	cmp	r5, r3
 800112c:	419b      	sbcs	r3, r3
 800112e:	425b      	negs	r3, r3
 8001130:	191b      	adds	r3, r3, r4
 8001132:	18c0      	adds	r0, r0, r3
 8001134:	e64d      	b.n	8000dd2 <__aeabi_ddiv+0x1ce>
 8001136:	428a      	cmp	r2, r1
 8001138:	d800      	bhi.n	800113c <__aeabi_ddiv+0x538>
 800113a:	e60e      	b.n	8000d5a <__aeabi_ddiv+0x156>
 800113c:	1e83      	subs	r3, r0, #2
 800113e:	1909      	adds	r1, r1, r4
 8001140:	e60b      	b.n	8000d5a <__aeabi_ddiv+0x156>
 8001142:	428a      	cmp	r2, r1
 8001144:	d800      	bhi.n	8001148 <__aeabi_ddiv+0x544>
 8001146:	e5f4      	b.n	8000d32 <__aeabi_ddiv+0x12e>
 8001148:	1e83      	subs	r3, r0, #2
 800114a:	4698      	mov	r8, r3
 800114c:	1909      	adds	r1, r1, r4
 800114e:	e5f0      	b.n	8000d32 <__aeabi_ddiv+0x12e>
 8001150:	4925      	ldr	r1, [pc, #148]	; (80011e8 <__aeabi_ddiv+0x5e4>)
 8001152:	0028      	movs	r0, r5
 8001154:	4459      	add	r1, fp
 8001156:	408d      	lsls	r5, r1
 8001158:	4642      	mov	r2, r8
 800115a:	408a      	lsls	r2, r1
 800115c:	1e69      	subs	r1, r5, #1
 800115e:	418d      	sbcs	r5, r1
 8001160:	4641      	mov	r1, r8
 8001162:	40d8      	lsrs	r0, r3
 8001164:	40d9      	lsrs	r1, r3
 8001166:	4302      	orrs	r2, r0
 8001168:	432a      	orrs	r2, r5
 800116a:	000b      	movs	r3, r1
 800116c:	0751      	lsls	r1, r2, #29
 800116e:	d100      	bne.n	8001172 <__aeabi_ddiv+0x56e>
 8001170:	e751      	b.n	8001016 <__aeabi_ddiv+0x412>
 8001172:	210f      	movs	r1, #15
 8001174:	4011      	ands	r1, r2
 8001176:	2904      	cmp	r1, #4
 8001178:	d000      	beq.n	800117c <__aeabi_ddiv+0x578>
 800117a:	e746      	b.n	800100a <__aeabi_ddiv+0x406>
 800117c:	e74b      	b.n	8001016 <__aeabi_ddiv+0x412>
 800117e:	0005      	movs	r5, r0
 8001180:	428e      	cmp	r6, r1
 8001182:	d000      	beq.n	8001186 <__aeabi_ddiv+0x582>
 8001184:	e66a      	b.n	8000e5c <__aeabi_ddiv+0x258>
 8001186:	9a00      	ldr	r2, [sp, #0]
 8001188:	4293      	cmp	r3, r2
 800118a:	d000      	beq.n	800118e <__aeabi_ddiv+0x58a>
 800118c:	e666      	b.n	8000e5c <__aeabi_ddiv+0x258>
 800118e:	e667      	b.n	8000e60 <__aeabi_ddiv+0x25c>
 8001190:	4a16      	ldr	r2, [pc, #88]	; (80011ec <__aeabi_ddiv+0x5e8>)
 8001192:	445a      	add	r2, fp
 8001194:	2a00      	cmp	r2, #0
 8001196:	dc00      	bgt.n	800119a <__aeabi_ddiv+0x596>
 8001198:	e710      	b.n	8000fbc <__aeabi_ddiv+0x3b8>
 800119a:	2301      	movs	r3, #1
 800119c:	2500      	movs	r5, #0
 800119e:	4498      	add	r8, r3
 80011a0:	e667      	b.n	8000e72 <__aeabi_ddiv+0x26e>
 80011a2:	075d      	lsls	r5, r3, #29
 80011a4:	025b      	lsls	r3, r3, #9
 80011a6:	0b1c      	lsrs	r4, r3, #12
 80011a8:	08d2      	lsrs	r2, r2, #3
 80011aa:	2300      	movs	r3, #0
 80011ac:	4315      	orrs	r5, r2
 80011ae:	e580      	b.n	8000cb2 <__aeabi_ddiv+0xae>
 80011b0:	9800      	ldr	r0, [sp, #0]
 80011b2:	3d02      	subs	r5, #2
 80011b4:	0042      	lsls	r2, r0, #1
 80011b6:	4282      	cmp	r2, r0
 80011b8:	41bf      	sbcs	r7, r7
 80011ba:	427f      	negs	r7, r7
 80011bc:	193c      	adds	r4, r7, r4
 80011be:	1936      	adds	r6, r6, r4
 80011c0:	9200      	str	r2, [sp, #0]
 80011c2:	e7dd      	b.n	8001180 <__aeabi_ddiv+0x57c>
 80011c4:	2480      	movs	r4, #128	; 0x80
 80011c6:	4643      	mov	r3, r8
 80011c8:	0324      	lsls	r4, r4, #12
 80011ca:	431c      	orrs	r4, r3
 80011cc:	0324      	lsls	r4, r4, #12
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <__aeabi_ddiv+0x5dc>)
 80011d0:	0b24      	lsrs	r4, r4, #12
 80011d2:	e56e      	b.n	8000cb2 <__aeabi_ddiv+0xae>
 80011d4:	9a00      	ldr	r2, [sp, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d3ea      	bcc.n	80011b0 <__aeabi_ddiv+0x5ac>
 80011da:	0005      	movs	r5, r0
 80011dc:	e7d3      	b.n	8001186 <__aeabi_ddiv+0x582>
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	000007ff 	.word	0x000007ff
 80011e4:	0000043e 	.word	0x0000043e
 80011e8:	0000041e 	.word	0x0000041e
 80011ec:	000003ff 	.word	0x000003ff

080011f0 <__eqdf2>:
 80011f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011f2:	464e      	mov	r6, r9
 80011f4:	4645      	mov	r5, r8
 80011f6:	46de      	mov	lr, fp
 80011f8:	4657      	mov	r7, sl
 80011fa:	4690      	mov	r8, r2
 80011fc:	b5e0      	push	{r5, r6, r7, lr}
 80011fe:	0017      	movs	r7, r2
 8001200:	031a      	lsls	r2, r3, #12
 8001202:	0b12      	lsrs	r2, r2, #12
 8001204:	0005      	movs	r5, r0
 8001206:	4684      	mov	ip, r0
 8001208:	4819      	ldr	r0, [pc, #100]	; (8001270 <__eqdf2+0x80>)
 800120a:	030e      	lsls	r6, r1, #12
 800120c:	004c      	lsls	r4, r1, #1
 800120e:	4691      	mov	r9, r2
 8001210:	005a      	lsls	r2, r3, #1
 8001212:	0fdb      	lsrs	r3, r3, #31
 8001214:	469b      	mov	fp, r3
 8001216:	0b36      	lsrs	r6, r6, #12
 8001218:	0d64      	lsrs	r4, r4, #21
 800121a:	0fc9      	lsrs	r1, r1, #31
 800121c:	0d52      	lsrs	r2, r2, #21
 800121e:	4284      	cmp	r4, r0
 8001220:	d019      	beq.n	8001256 <__eqdf2+0x66>
 8001222:	4282      	cmp	r2, r0
 8001224:	d010      	beq.n	8001248 <__eqdf2+0x58>
 8001226:	2001      	movs	r0, #1
 8001228:	4294      	cmp	r4, r2
 800122a:	d10e      	bne.n	800124a <__eqdf2+0x5a>
 800122c:	454e      	cmp	r6, r9
 800122e:	d10c      	bne.n	800124a <__eqdf2+0x5a>
 8001230:	2001      	movs	r0, #1
 8001232:	45c4      	cmp	ip, r8
 8001234:	d109      	bne.n	800124a <__eqdf2+0x5a>
 8001236:	4559      	cmp	r1, fp
 8001238:	d017      	beq.n	800126a <__eqdf2+0x7a>
 800123a:	2c00      	cmp	r4, #0
 800123c:	d105      	bne.n	800124a <__eqdf2+0x5a>
 800123e:	0030      	movs	r0, r6
 8001240:	4328      	orrs	r0, r5
 8001242:	1e43      	subs	r3, r0, #1
 8001244:	4198      	sbcs	r0, r3
 8001246:	e000      	b.n	800124a <__eqdf2+0x5a>
 8001248:	2001      	movs	r0, #1
 800124a:	bcf0      	pop	{r4, r5, r6, r7}
 800124c:	46bb      	mov	fp, r7
 800124e:	46b2      	mov	sl, r6
 8001250:	46a9      	mov	r9, r5
 8001252:	46a0      	mov	r8, r4
 8001254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001256:	0033      	movs	r3, r6
 8001258:	2001      	movs	r0, #1
 800125a:	432b      	orrs	r3, r5
 800125c:	d1f5      	bne.n	800124a <__eqdf2+0x5a>
 800125e:	42a2      	cmp	r2, r4
 8001260:	d1f3      	bne.n	800124a <__eqdf2+0x5a>
 8001262:	464b      	mov	r3, r9
 8001264:	433b      	orrs	r3, r7
 8001266:	d1f0      	bne.n	800124a <__eqdf2+0x5a>
 8001268:	e7e2      	b.n	8001230 <__eqdf2+0x40>
 800126a:	2000      	movs	r0, #0
 800126c:	e7ed      	b.n	800124a <__eqdf2+0x5a>
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	000007ff 	.word	0x000007ff

08001274 <__gedf2>:
 8001274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001276:	4647      	mov	r7, r8
 8001278:	46ce      	mov	lr, r9
 800127a:	0004      	movs	r4, r0
 800127c:	0018      	movs	r0, r3
 800127e:	0016      	movs	r6, r2
 8001280:	031b      	lsls	r3, r3, #12
 8001282:	0b1b      	lsrs	r3, r3, #12
 8001284:	4d2d      	ldr	r5, [pc, #180]	; (800133c <__gedf2+0xc8>)
 8001286:	004a      	lsls	r2, r1, #1
 8001288:	4699      	mov	r9, r3
 800128a:	b580      	push	{r7, lr}
 800128c:	0043      	lsls	r3, r0, #1
 800128e:	030f      	lsls	r7, r1, #12
 8001290:	46a4      	mov	ip, r4
 8001292:	46b0      	mov	r8, r6
 8001294:	0b3f      	lsrs	r7, r7, #12
 8001296:	0d52      	lsrs	r2, r2, #21
 8001298:	0fc9      	lsrs	r1, r1, #31
 800129a:	0d5b      	lsrs	r3, r3, #21
 800129c:	0fc0      	lsrs	r0, r0, #31
 800129e:	42aa      	cmp	r2, r5
 80012a0:	d021      	beq.n	80012e6 <__gedf2+0x72>
 80012a2:	42ab      	cmp	r3, r5
 80012a4:	d013      	beq.n	80012ce <__gedf2+0x5a>
 80012a6:	2a00      	cmp	r2, #0
 80012a8:	d122      	bne.n	80012f0 <__gedf2+0x7c>
 80012aa:	433c      	orrs	r4, r7
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <__gedf2+0x42>
 80012b0:	464d      	mov	r5, r9
 80012b2:	432e      	orrs	r6, r5
 80012b4:	d022      	beq.n	80012fc <__gedf2+0x88>
 80012b6:	2c00      	cmp	r4, #0
 80012b8:	d010      	beq.n	80012dc <__gedf2+0x68>
 80012ba:	4281      	cmp	r1, r0
 80012bc:	d022      	beq.n	8001304 <__gedf2+0x90>
 80012be:	2002      	movs	r0, #2
 80012c0:	3901      	subs	r1, #1
 80012c2:	4008      	ands	r0, r1
 80012c4:	3801      	subs	r0, #1
 80012c6:	bcc0      	pop	{r6, r7}
 80012c8:	46b9      	mov	r9, r7
 80012ca:	46b0      	mov	r8, r6
 80012cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ce:	464d      	mov	r5, r9
 80012d0:	432e      	orrs	r6, r5
 80012d2:	d129      	bne.n	8001328 <__gedf2+0xb4>
 80012d4:	2a00      	cmp	r2, #0
 80012d6:	d1f0      	bne.n	80012ba <__gedf2+0x46>
 80012d8:	433c      	orrs	r4, r7
 80012da:	d1ee      	bne.n	80012ba <__gedf2+0x46>
 80012dc:	2800      	cmp	r0, #0
 80012de:	d1f2      	bne.n	80012c6 <__gedf2+0x52>
 80012e0:	2001      	movs	r0, #1
 80012e2:	4240      	negs	r0, r0
 80012e4:	e7ef      	b.n	80012c6 <__gedf2+0x52>
 80012e6:	003d      	movs	r5, r7
 80012e8:	4325      	orrs	r5, r4
 80012ea:	d11d      	bne.n	8001328 <__gedf2+0xb4>
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d0ee      	beq.n	80012ce <__gedf2+0x5a>
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1e2      	bne.n	80012ba <__gedf2+0x46>
 80012f4:	464c      	mov	r4, r9
 80012f6:	4326      	orrs	r6, r4
 80012f8:	d1df      	bne.n	80012ba <__gedf2+0x46>
 80012fa:	e7e0      	b.n	80012be <__gedf2+0x4a>
 80012fc:	2000      	movs	r0, #0
 80012fe:	2c00      	cmp	r4, #0
 8001300:	d0e1      	beq.n	80012c6 <__gedf2+0x52>
 8001302:	e7dc      	b.n	80012be <__gedf2+0x4a>
 8001304:	429a      	cmp	r2, r3
 8001306:	dc0a      	bgt.n	800131e <__gedf2+0xaa>
 8001308:	dbe8      	blt.n	80012dc <__gedf2+0x68>
 800130a:	454f      	cmp	r7, r9
 800130c:	d8d7      	bhi.n	80012be <__gedf2+0x4a>
 800130e:	d00e      	beq.n	800132e <__gedf2+0xba>
 8001310:	2000      	movs	r0, #0
 8001312:	454f      	cmp	r7, r9
 8001314:	d2d7      	bcs.n	80012c6 <__gedf2+0x52>
 8001316:	2900      	cmp	r1, #0
 8001318:	d0e2      	beq.n	80012e0 <__gedf2+0x6c>
 800131a:	0008      	movs	r0, r1
 800131c:	e7d3      	b.n	80012c6 <__gedf2+0x52>
 800131e:	4243      	negs	r3, r0
 8001320:	4158      	adcs	r0, r3
 8001322:	0040      	lsls	r0, r0, #1
 8001324:	3801      	subs	r0, #1
 8001326:	e7ce      	b.n	80012c6 <__gedf2+0x52>
 8001328:	2002      	movs	r0, #2
 800132a:	4240      	negs	r0, r0
 800132c:	e7cb      	b.n	80012c6 <__gedf2+0x52>
 800132e:	45c4      	cmp	ip, r8
 8001330:	d8c5      	bhi.n	80012be <__gedf2+0x4a>
 8001332:	2000      	movs	r0, #0
 8001334:	45c4      	cmp	ip, r8
 8001336:	d2c6      	bcs.n	80012c6 <__gedf2+0x52>
 8001338:	e7ed      	b.n	8001316 <__gedf2+0xa2>
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	000007ff 	.word	0x000007ff

08001340 <__ledf2>:
 8001340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001342:	4647      	mov	r7, r8
 8001344:	46ce      	mov	lr, r9
 8001346:	0004      	movs	r4, r0
 8001348:	0018      	movs	r0, r3
 800134a:	0016      	movs	r6, r2
 800134c:	031b      	lsls	r3, r3, #12
 800134e:	0b1b      	lsrs	r3, r3, #12
 8001350:	4d2c      	ldr	r5, [pc, #176]	; (8001404 <__ledf2+0xc4>)
 8001352:	004a      	lsls	r2, r1, #1
 8001354:	4699      	mov	r9, r3
 8001356:	b580      	push	{r7, lr}
 8001358:	0043      	lsls	r3, r0, #1
 800135a:	030f      	lsls	r7, r1, #12
 800135c:	46a4      	mov	ip, r4
 800135e:	46b0      	mov	r8, r6
 8001360:	0b3f      	lsrs	r7, r7, #12
 8001362:	0d52      	lsrs	r2, r2, #21
 8001364:	0fc9      	lsrs	r1, r1, #31
 8001366:	0d5b      	lsrs	r3, r3, #21
 8001368:	0fc0      	lsrs	r0, r0, #31
 800136a:	42aa      	cmp	r2, r5
 800136c:	d00d      	beq.n	800138a <__ledf2+0x4a>
 800136e:	42ab      	cmp	r3, r5
 8001370:	d010      	beq.n	8001394 <__ledf2+0x54>
 8001372:	2a00      	cmp	r2, #0
 8001374:	d127      	bne.n	80013c6 <__ledf2+0x86>
 8001376:	433c      	orrs	r4, r7
 8001378:	2b00      	cmp	r3, #0
 800137a:	d111      	bne.n	80013a0 <__ledf2+0x60>
 800137c:	464d      	mov	r5, r9
 800137e:	432e      	orrs	r6, r5
 8001380:	d10e      	bne.n	80013a0 <__ledf2+0x60>
 8001382:	2000      	movs	r0, #0
 8001384:	2c00      	cmp	r4, #0
 8001386:	d015      	beq.n	80013b4 <__ledf2+0x74>
 8001388:	e00e      	b.n	80013a8 <__ledf2+0x68>
 800138a:	003d      	movs	r5, r7
 800138c:	4325      	orrs	r5, r4
 800138e:	d110      	bne.n	80013b2 <__ledf2+0x72>
 8001390:	4293      	cmp	r3, r2
 8001392:	d118      	bne.n	80013c6 <__ledf2+0x86>
 8001394:	464d      	mov	r5, r9
 8001396:	432e      	orrs	r6, r5
 8001398:	d10b      	bne.n	80013b2 <__ledf2+0x72>
 800139a:	2a00      	cmp	r2, #0
 800139c:	d102      	bne.n	80013a4 <__ledf2+0x64>
 800139e:	433c      	orrs	r4, r7
 80013a0:	2c00      	cmp	r4, #0
 80013a2:	d00b      	beq.n	80013bc <__ledf2+0x7c>
 80013a4:	4281      	cmp	r1, r0
 80013a6:	d014      	beq.n	80013d2 <__ledf2+0x92>
 80013a8:	2002      	movs	r0, #2
 80013aa:	3901      	subs	r1, #1
 80013ac:	4008      	ands	r0, r1
 80013ae:	3801      	subs	r0, #1
 80013b0:	e000      	b.n	80013b4 <__ledf2+0x74>
 80013b2:	2002      	movs	r0, #2
 80013b4:	bcc0      	pop	{r6, r7}
 80013b6:	46b9      	mov	r9, r7
 80013b8:	46b0      	mov	r8, r6
 80013ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013bc:	2800      	cmp	r0, #0
 80013be:	d1f9      	bne.n	80013b4 <__ledf2+0x74>
 80013c0:	2001      	movs	r0, #1
 80013c2:	4240      	negs	r0, r0
 80013c4:	e7f6      	b.n	80013b4 <__ledf2+0x74>
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1ec      	bne.n	80013a4 <__ledf2+0x64>
 80013ca:	464c      	mov	r4, r9
 80013cc:	4326      	orrs	r6, r4
 80013ce:	d1e9      	bne.n	80013a4 <__ledf2+0x64>
 80013d0:	e7ea      	b.n	80013a8 <__ledf2+0x68>
 80013d2:	429a      	cmp	r2, r3
 80013d4:	dd04      	ble.n	80013e0 <__ledf2+0xa0>
 80013d6:	4243      	negs	r3, r0
 80013d8:	4158      	adcs	r0, r3
 80013da:	0040      	lsls	r0, r0, #1
 80013dc:	3801      	subs	r0, #1
 80013de:	e7e9      	b.n	80013b4 <__ledf2+0x74>
 80013e0:	429a      	cmp	r2, r3
 80013e2:	dbeb      	blt.n	80013bc <__ledf2+0x7c>
 80013e4:	454f      	cmp	r7, r9
 80013e6:	d8df      	bhi.n	80013a8 <__ledf2+0x68>
 80013e8:	d006      	beq.n	80013f8 <__ledf2+0xb8>
 80013ea:	2000      	movs	r0, #0
 80013ec:	454f      	cmp	r7, r9
 80013ee:	d2e1      	bcs.n	80013b4 <__ledf2+0x74>
 80013f0:	2900      	cmp	r1, #0
 80013f2:	d0e5      	beq.n	80013c0 <__ledf2+0x80>
 80013f4:	0008      	movs	r0, r1
 80013f6:	e7dd      	b.n	80013b4 <__ledf2+0x74>
 80013f8:	45c4      	cmp	ip, r8
 80013fa:	d8d5      	bhi.n	80013a8 <__ledf2+0x68>
 80013fc:	2000      	movs	r0, #0
 80013fe:	45c4      	cmp	ip, r8
 8001400:	d2d8      	bcs.n	80013b4 <__ledf2+0x74>
 8001402:	e7f5      	b.n	80013f0 <__ledf2+0xb0>
 8001404:	000007ff 	.word	0x000007ff

08001408 <__aeabi_dmul>:
 8001408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800140a:	4657      	mov	r7, sl
 800140c:	464e      	mov	r6, r9
 800140e:	4645      	mov	r5, r8
 8001410:	46de      	mov	lr, fp
 8001412:	b5e0      	push	{r5, r6, r7, lr}
 8001414:	4698      	mov	r8, r3
 8001416:	030c      	lsls	r4, r1, #12
 8001418:	004b      	lsls	r3, r1, #1
 800141a:	0006      	movs	r6, r0
 800141c:	4692      	mov	sl, r2
 800141e:	b087      	sub	sp, #28
 8001420:	0b24      	lsrs	r4, r4, #12
 8001422:	0d5b      	lsrs	r3, r3, #21
 8001424:	0fcf      	lsrs	r7, r1, #31
 8001426:	2b00      	cmp	r3, #0
 8001428:	d100      	bne.n	800142c <__aeabi_dmul+0x24>
 800142a:	e15c      	b.n	80016e6 <__aeabi_dmul+0x2de>
 800142c:	4ad9      	ldr	r2, [pc, #868]	; (8001794 <__aeabi_dmul+0x38c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d100      	bne.n	8001434 <__aeabi_dmul+0x2c>
 8001432:	e175      	b.n	8001720 <__aeabi_dmul+0x318>
 8001434:	0f42      	lsrs	r2, r0, #29
 8001436:	00e4      	lsls	r4, r4, #3
 8001438:	4314      	orrs	r4, r2
 800143a:	2280      	movs	r2, #128	; 0x80
 800143c:	0412      	lsls	r2, r2, #16
 800143e:	4314      	orrs	r4, r2
 8001440:	4ad5      	ldr	r2, [pc, #852]	; (8001798 <__aeabi_dmul+0x390>)
 8001442:	00c5      	lsls	r5, r0, #3
 8001444:	4694      	mov	ip, r2
 8001446:	4463      	add	r3, ip
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2300      	movs	r3, #0
 800144c:	4699      	mov	r9, r3
 800144e:	469b      	mov	fp, r3
 8001450:	4643      	mov	r3, r8
 8001452:	4642      	mov	r2, r8
 8001454:	031e      	lsls	r6, r3, #12
 8001456:	0fd2      	lsrs	r2, r2, #31
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4650      	mov	r0, sl
 800145c:	4690      	mov	r8, r2
 800145e:	0b36      	lsrs	r6, r6, #12
 8001460:	0d5b      	lsrs	r3, r3, #21
 8001462:	d100      	bne.n	8001466 <__aeabi_dmul+0x5e>
 8001464:	e120      	b.n	80016a8 <__aeabi_dmul+0x2a0>
 8001466:	4acb      	ldr	r2, [pc, #812]	; (8001794 <__aeabi_dmul+0x38c>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d100      	bne.n	800146e <__aeabi_dmul+0x66>
 800146c:	e162      	b.n	8001734 <__aeabi_dmul+0x32c>
 800146e:	49ca      	ldr	r1, [pc, #808]	; (8001798 <__aeabi_dmul+0x390>)
 8001470:	0f42      	lsrs	r2, r0, #29
 8001472:	468c      	mov	ip, r1
 8001474:	9900      	ldr	r1, [sp, #0]
 8001476:	4463      	add	r3, ip
 8001478:	00f6      	lsls	r6, r6, #3
 800147a:	468c      	mov	ip, r1
 800147c:	4316      	orrs	r6, r2
 800147e:	2280      	movs	r2, #128	; 0x80
 8001480:	449c      	add	ip, r3
 8001482:	0412      	lsls	r2, r2, #16
 8001484:	4663      	mov	r3, ip
 8001486:	4316      	orrs	r6, r2
 8001488:	00c2      	lsls	r2, r0, #3
 800148a:	2000      	movs	r0, #0
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	9900      	ldr	r1, [sp, #0]
 8001490:	4643      	mov	r3, r8
 8001492:	3101      	adds	r1, #1
 8001494:	468c      	mov	ip, r1
 8001496:	4649      	mov	r1, r9
 8001498:	407b      	eors	r3, r7
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	290f      	cmp	r1, #15
 800149e:	d826      	bhi.n	80014ee <__aeabi_dmul+0xe6>
 80014a0:	4bbe      	ldr	r3, [pc, #760]	; (800179c <__aeabi_dmul+0x394>)
 80014a2:	0089      	lsls	r1, r1, #2
 80014a4:	5859      	ldr	r1, [r3, r1]
 80014a6:	468f      	mov	pc, r1
 80014a8:	4643      	mov	r3, r8
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	0034      	movs	r4, r6
 80014ae:	0015      	movs	r5, r2
 80014b0:	4683      	mov	fp, r0
 80014b2:	465b      	mov	r3, fp
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d016      	beq.n	80014e6 <__aeabi_dmul+0xde>
 80014b8:	2b03      	cmp	r3, #3
 80014ba:	d100      	bne.n	80014be <__aeabi_dmul+0xb6>
 80014bc:	e203      	b.n	80018c6 <__aeabi_dmul+0x4be>
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d000      	beq.n	80014c4 <__aeabi_dmul+0xbc>
 80014c2:	e0cd      	b.n	8001660 <__aeabi_dmul+0x258>
 80014c4:	2200      	movs	r2, #0
 80014c6:	2400      	movs	r4, #0
 80014c8:	2500      	movs	r5, #0
 80014ca:	9b01      	ldr	r3, [sp, #4]
 80014cc:	0512      	lsls	r2, r2, #20
 80014ce:	4322      	orrs	r2, r4
 80014d0:	07db      	lsls	r3, r3, #31
 80014d2:	431a      	orrs	r2, r3
 80014d4:	0028      	movs	r0, r5
 80014d6:	0011      	movs	r1, r2
 80014d8:	b007      	add	sp, #28
 80014da:	bcf0      	pop	{r4, r5, r6, r7}
 80014dc:	46bb      	mov	fp, r7
 80014de:	46b2      	mov	sl, r6
 80014e0:	46a9      	mov	r9, r5
 80014e2:	46a0      	mov	r8, r4
 80014e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e6:	2400      	movs	r4, #0
 80014e8:	2500      	movs	r5, #0
 80014ea:	4aaa      	ldr	r2, [pc, #680]	; (8001794 <__aeabi_dmul+0x38c>)
 80014ec:	e7ed      	b.n	80014ca <__aeabi_dmul+0xc2>
 80014ee:	0c28      	lsrs	r0, r5, #16
 80014f0:	042d      	lsls	r5, r5, #16
 80014f2:	0c2d      	lsrs	r5, r5, #16
 80014f4:	002b      	movs	r3, r5
 80014f6:	0c11      	lsrs	r1, r2, #16
 80014f8:	0412      	lsls	r2, r2, #16
 80014fa:	0c12      	lsrs	r2, r2, #16
 80014fc:	4353      	muls	r3, r2
 80014fe:	4698      	mov	r8, r3
 8001500:	0013      	movs	r3, r2
 8001502:	002f      	movs	r7, r5
 8001504:	4343      	muls	r3, r0
 8001506:	4699      	mov	r9, r3
 8001508:	434f      	muls	r7, r1
 800150a:	444f      	add	r7, r9
 800150c:	46bb      	mov	fp, r7
 800150e:	4647      	mov	r7, r8
 8001510:	000b      	movs	r3, r1
 8001512:	0c3f      	lsrs	r7, r7, #16
 8001514:	46ba      	mov	sl, r7
 8001516:	4343      	muls	r3, r0
 8001518:	44da      	add	sl, fp
 800151a:	9302      	str	r3, [sp, #8]
 800151c:	45d1      	cmp	r9, sl
 800151e:	d904      	bls.n	800152a <__aeabi_dmul+0x122>
 8001520:	2780      	movs	r7, #128	; 0x80
 8001522:	027f      	lsls	r7, r7, #9
 8001524:	46b9      	mov	r9, r7
 8001526:	444b      	add	r3, r9
 8001528:	9302      	str	r3, [sp, #8]
 800152a:	4653      	mov	r3, sl
 800152c:	0c1b      	lsrs	r3, r3, #16
 800152e:	469b      	mov	fp, r3
 8001530:	4653      	mov	r3, sl
 8001532:	041f      	lsls	r7, r3, #16
 8001534:	4643      	mov	r3, r8
 8001536:	041b      	lsls	r3, r3, #16
 8001538:	0c1b      	lsrs	r3, r3, #16
 800153a:	4698      	mov	r8, r3
 800153c:	003b      	movs	r3, r7
 800153e:	4443      	add	r3, r8
 8001540:	9304      	str	r3, [sp, #16]
 8001542:	0c33      	lsrs	r3, r6, #16
 8001544:	0436      	lsls	r6, r6, #16
 8001546:	0c36      	lsrs	r6, r6, #16
 8001548:	4698      	mov	r8, r3
 800154a:	0033      	movs	r3, r6
 800154c:	4343      	muls	r3, r0
 800154e:	4699      	mov	r9, r3
 8001550:	4643      	mov	r3, r8
 8001552:	4343      	muls	r3, r0
 8001554:	002f      	movs	r7, r5
 8001556:	469a      	mov	sl, r3
 8001558:	4643      	mov	r3, r8
 800155a:	4377      	muls	r7, r6
 800155c:	435d      	muls	r5, r3
 800155e:	0c38      	lsrs	r0, r7, #16
 8001560:	444d      	add	r5, r9
 8001562:	1945      	adds	r5, r0, r5
 8001564:	45a9      	cmp	r9, r5
 8001566:	d903      	bls.n	8001570 <__aeabi_dmul+0x168>
 8001568:	2380      	movs	r3, #128	; 0x80
 800156a:	025b      	lsls	r3, r3, #9
 800156c:	4699      	mov	r9, r3
 800156e:	44ca      	add	sl, r9
 8001570:	043f      	lsls	r7, r7, #16
 8001572:	0c28      	lsrs	r0, r5, #16
 8001574:	0c3f      	lsrs	r7, r7, #16
 8001576:	042d      	lsls	r5, r5, #16
 8001578:	19ed      	adds	r5, r5, r7
 800157a:	0c27      	lsrs	r7, r4, #16
 800157c:	0424      	lsls	r4, r4, #16
 800157e:	0c24      	lsrs	r4, r4, #16
 8001580:	0003      	movs	r3, r0
 8001582:	0020      	movs	r0, r4
 8001584:	4350      	muls	r0, r2
 8001586:	437a      	muls	r2, r7
 8001588:	4691      	mov	r9, r2
 800158a:	003a      	movs	r2, r7
 800158c:	4453      	add	r3, sl
 800158e:	9305      	str	r3, [sp, #20]
 8001590:	0c03      	lsrs	r3, r0, #16
 8001592:	469a      	mov	sl, r3
 8001594:	434a      	muls	r2, r1
 8001596:	4361      	muls	r1, r4
 8001598:	4449      	add	r1, r9
 800159a:	4451      	add	r1, sl
 800159c:	44ab      	add	fp, r5
 800159e:	4589      	cmp	r9, r1
 80015a0:	d903      	bls.n	80015aa <__aeabi_dmul+0x1a2>
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	025b      	lsls	r3, r3, #9
 80015a6:	4699      	mov	r9, r3
 80015a8:	444a      	add	r2, r9
 80015aa:	0400      	lsls	r0, r0, #16
 80015ac:	0c0b      	lsrs	r3, r1, #16
 80015ae:	0c00      	lsrs	r0, r0, #16
 80015b0:	0409      	lsls	r1, r1, #16
 80015b2:	1809      	adds	r1, r1, r0
 80015b4:	0020      	movs	r0, r4
 80015b6:	4699      	mov	r9, r3
 80015b8:	4643      	mov	r3, r8
 80015ba:	4370      	muls	r0, r6
 80015bc:	435c      	muls	r4, r3
 80015be:	437e      	muls	r6, r7
 80015c0:	435f      	muls	r7, r3
 80015c2:	0c03      	lsrs	r3, r0, #16
 80015c4:	4698      	mov	r8, r3
 80015c6:	19a4      	adds	r4, r4, r6
 80015c8:	4444      	add	r4, r8
 80015ca:	444a      	add	r2, r9
 80015cc:	9703      	str	r7, [sp, #12]
 80015ce:	42a6      	cmp	r6, r4
 80015d0:	d904      	bls.n	80015dc <__aeabi_dmul+0x1d4>
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	025b      	lsls	r3, r3, #9
 80015d6:	4698      	mov	r8, r3
 80015d8:	4447      	add	r7, r8
 80015da:	9703      	str	r7, [sp, #12]
 80015dc:	0423      	lsls	r3, r4, #16
 80015de:	9e02      	ldr	r6, [sp, #8]
 80015e0:	469a      	mov	sl, r3
 80015e2:	9b05      	ldr	r3, [sp, #20]
 80015e4:	445e      	add	r6, fp
 80015e6:	4698      	mov	r8, r3
 80015e8:	42ae      	cmp	r6, r5
 80015ea:	41ad      	sbcs	r5, r5
 80015ec:	1876      	adds	r6, r6, r1
 80015ee:	428e      	cmp	r6, r1
 80015f0:	4189      	sbcs	r1, r1
 80015f2:	0400      	lsls	r0, r0, #16
 80015f4:	0c00      	lsrs	r0, r0, #16
 80015f6:	4450      	add	r0, sl
 80015f8:	4440      	add	r0, r8
 80015fa:	426d      	negs	r5, r5
 80015fc:	1947      	adds	r7, r0, r5
 80015fe:	46b8      	mov	r8, r7
 8001600:	4693      	mov	fp, r2
 8001602:	4249      	negs	r1, r1
 8001604:	4689      	mov	r9, r1
 8001606:	44c3      	add	fp, r8
 8001608:	44d9      	add	r9, fp
 800160a:	4298      	cmp	r0, r3
 800160c:	4180      	sbcs	r0, r0
 800160e:	45a8      	cmp	r8, r5
 8001610:	41ad      	sbcs	r5, r5
 8001612:	4593      	cmp	fp, r2
 8001614:	4192      	sbcs	r2, r2
 8001616:	4589      	cmp	r9, r1
 8001618:	4189      	sbcs	r1, r1
 800161a:	426d      	negs	r5, r5
 800161c:	4240      	negs	r0, r0
 800161e:	4328      	orrs	r0, r5
 8001620:	0c24      	lsrs	r4, r4, #16
 8001622:	4252      	negs	r2, r2
 8001624:	4249      	negs	r1, r1
 8001626:	430a      	orrs	r2, r1
 8001628:	9b03      	ldr	r3, [sp, #12]
 800162a:	1900      	adds	r0, r0, r4
 800162c:	1880      	adds	r0, r0, r2
 800162e:	18c7      	adds	r7, r0, r3
 8001630:	464b      	mov	r3, r9
 8001632:	0ddc      	lsrs	r4, r3, #23
 8001634:	9b04      	ldr	r3, [sp, #16]
 8001636:	0275      	lsls	r5, r6, #9
 8001638:	431d      	orrs	r5, r3
 800163a:	1e6a      	subs	r2, r5, #1
 800163c:	4195      	sbcs	r5, r2
 800163e:	464b      	mov	r3, r9
 8001640:	0df6      	lsrs	r6, r6, #23
 8001642:	027f      	lsls	r7, r7, #9
 8001644:	4335      	orrs	r5, r6
 8001646:	025a      	lsls	r2, r3, #9
 8001648:	433c      	orrs	r4, r7
 800164a:	4315      	orrs	r5, r2
 800164c:	01fb      	lsls	r3, r7, #7
 800164e:	d400      	bmi.n	8001652 <__aeabi_dmul+0x24a>
 8001650:	e11c      	b.n	800188c <__aeabi_dmul+0x484>
 8001652:	2101      	movs	r1, #1
 8001654:	086a      	lsrs	r2, r5, #1
 8001656:	400d      	ands	r5, r1
 8001658:	4315      	orrs	r5, r2
 800165a:	07e2      	lsls	r2, r4, #31
 800165c:	4315      	orrs	r5, r2
 800165e:	0864      	lsrs	r4, r4, #1
 8001660:	494f      	ldr	r1, [pc, #316]	; (80017a0 <__aeabi_dmul+0x398>)
 8001662:	4461      	add	r1, ip
 8001664:	2900      	cmp	r1, #0
 8001666:	dc00      	bgt.n	800166a <__aeabi_dmul+0x262>
 8001668:	e0b0      	b.n	80017cc <__aeabi_dmul+0x3c4>
 800166a:	076b      	lsls	r3, r5, #29
 800166c:	d009      	beq.n	8001682 <__aeabi_dmul+0x27a>
 800166e:	220f      	movs	r2, #15
 8001670:	402a      	ands	r2, r5
 8001672:	2a04      	cmp	r2, #4
 8001674:	d005      	beq.n	8001682 <__aeabi_dmul+0x27a>
 8001676:	1d2a      	adds	r2, r5, #4
 8001678:	42aa      	cmp	r2, r5
 800167a:	41ad      	sbcs	r5, r5
 800167c:	426d      	negs	r5, r5
 800167e:	1964      	adds	r4, r4, r5
 8001680:	0015      	movs	r5, r2
 8001682:	01e3      	lsls	r3, r4, #7
 8001684:	d504      	bpl.n	8001690 <__aeabi_dmul+0x288>
 8001686:	2180      	movs	r1, #128	; 0x80
 8001688:	4a46      	ldr	r2, [pc, #280]	; (80017a4 <__aeabi_dmul+0x39c>)
 800168a:	00c9      	lsls	r1, r1, #3
 800168c:	4014      	ands	r4, r2
 800168e:	4461      	add	r1, ip
 8001690:	4a45      	ldr	r2, [pc, #276]	; (80017a8 <__aeabi_dmul+0x3a0>)
 8001692:	4291      	cmp	r1, r2
 8001694:	dd00      	ble.n	8001698 <__aeabi_dmul+0x290>
 8001696:	e726      	b.n	80014e6 <__aeabi_dmul+0xde>
 8001698:	0762      	lsls	r2, r4, #29
 800169a:	08ed      	lsrs	r5, r5, #3
 800169c:	0264      	lsls	r4, r4, #9
 800169e:	0549      	lsls	r1, r1, #21
 80016a0:	4315      	orrs	r5, r2
 80016a2:	0b24      	lsrs	r4, r4, #12
 80016a4:	0d4a      	lsrs	r2, r1, #21
 80016a6:	e710      	b.n	80014ca <__aeabi_dmul+0xc2>
 80016a8:	4652      	mov	r2, sl
 80016aa:	4332      	orrs	r2, r6
 80016ac:	d100      	bne.n	80016b0 <__aeabi_dmul+0x2a8>
 80016ae:	e07f      	b.n	80017b0 <__aeabi_dmul+0x3a8>
 80016b0:	2e00      	cmp	r6, #0
 80016b2:	d100      	bne.n	80016b6 <__aeabi_dmul+0x2ae>
 80016b4:	e0dc      	b.n	8001870 <__aeabi_dmul+0x468>
 80016b6:	0030      	movs	r0, r6
 80016b8:	f000 fe1e 	bl	80022f8 <__clzsi2>
 80016bc:	0002      	movs	r2, r0
 80016be:	3a0b      	subs	r2, #11
 80016c0:	231d      	movs	r3, #29
 80016c2:	0001      	movs	r1, r0
 80016c4:	1a9b      	subs	r3, r3, r2
 80016c6:	4652      	mov	r2, sl
 80016c8:	3908      	subs	r1, #8
 80016ca:	40da      	lsrs	r2, r3
 80016cc:	408e      	lsls	r6, r1
 80016ce:	4316      	orrs	r6, r2
 80016d0:	4652      	mov	r2, sl
 80016d2:	408a      	lsls	r2, r1
 80016d4:	9b00      	ldr	r3, [sp, #0]
 80016d6:	4935      	ldr	r1, [pc, #212]	; (80017ac <__aeabi_dmul+0x3a4>)
 80016d8:	1a18      	subs	r0, r3, r0
 80016da:	0003      	movs	r3, r0
 80016dc:	468c      	mov	ip, r1
 80016de:	4463      	add	r3, ip
 80016e0:	2000      	movs	r0, #0
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	e6d3      	b.n	800148e <__aeabi_dmul+0x86>
 80016e6:	0025      	movs	r5, r4
 80016e8:	4305      	orrs	r5, r0
 80016ea:	d04a      	beq.n	8001782 <__aeabi_dmul+0x37a>
 80016ec:	2c00      	cmp	r4, #0
 80016ee:	d100      	bne.n	80016f2 <__aeabi_dmul+0x2ea>
 80016f0:	e0b0      	b.n	8001854 <__aeabi_dmul+0x44c>
 80016f2:	0020      	movs	r0, r4
 80016f4:	f000 fe00 	bl	80022f8 <__clzsi2>
 80016f8:	0001      	movs	r1, r0
 80016fa:	0002      	movs	r2, r0
 80016fc:	390b      	subs	r1, #11
 80016fe:	231d      	movs	r3, #29
 8001700:	0010      	movs	r0, r2
 8001702:	1a5b      	subs	r3, r3, r1
 8001704:	0031      	movs	r1, r6
 8001706:	0035      	movs	r5, r6
 8001708:	3808      	subs	r0, #8
 800170a:	4084      	lsls	r4, r0
 800170c:	40d9      	lsrs	r1, r3
 800170e:	4085      	lsls	r5, r0
 8001710:	430c      	orrs	r4, r1
 8001712:	4826      	ldr	r0, [pc, #152]	; (80017ac <__aeabi_dmul+0x3a4>)
 8001714:	1a83      	subs	r3, r0, r2
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2300      	movs	r3, #0
 800171a:	4699      	mov	r9, r3
 800171c:	469b      	mov	fp, r3
 800171e:	e697      	b.n	8001450 <__aeabi_dmul+0x48>
 8001720:	0005      	movs	r5, r0
 8001722:	4325      	orrs	r5, r4
 8001724:	d126      	bne.n	8001774 <__aeabi_dmul+0x36c>
 8001726:	2208      	movs	r2, #8
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	2302      	movs	r3, #2
 800172c:	2400      	movs	r4, #0
 800172e:	4691      	mov	r9, r2
 8001730:	469b      	mov	fp, r3
 8001732:	e68d      	b.n	8001450 <__aeabi_dmul+0x48>
 8001734:	4652      	mov	r2, sl
 8001736:	9b00      	ldr	r3, [sp, #0]
 8001738:	4332      	orrs	r2, r6
 800173a:	d110      	bne.n	800175e <__aeabi_dmul+0x356>
 800173c:	4915      	ldr	r1, [pc, #84]	; (8001794 <__aeabi_dmul+0x38c>)
 800173e:	2600      	movs	r6, #0
 8001740:	468c      	mov	ip, r1
 8001742:	4463      	add	r3, ip
 8001744:	4649      	mov	r1, r9
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2302      	movs	r3, #2
 800174a:	4319      	orrs	r1, r3
 800174c:	4689      	mov	r9, r1
 800174e:	2002      	movs	r0, #2
 8001750:	e69d      	b.n	800148e <__aeabi_dmul+0x86>
 8001752:	465b      	mov	r3, fp
 8001754:	9701      	str	r7, [sp, #4]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d000      	beq.n	800175c <__aeabi_dmul+0x354>
 800175a:	e6ad      	b.n	80014b8 <__aeabi_dmul+0xb0>
 800175c:	e6c3      	b.n	80014e6 <__aeabi_dmul+0xde>
 800175e:	4a0d      	ldr	r2, [pc, #52]	; (8001794 <__aeabi_dmul+0x38c>)
 8001760:	2003      	movs	r0, #3
 8001762:	4694      	mov	ip, r2
 8001764:	4463      	add	r3, ip
 8001766:	464a      	mov	r2, r9
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	2303      	movs	r3, #3
 800176c:	431a      	orrs	r2, r3
 800176e:	4691      	mov	r9, r2
 8001770:	4652      	mov	r2, sl
 8001772:	e68c      	b.n	800148e <__aeabi_dmul+0x86>
 8001774:	220c      	movs	r2, #12
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2303      	movs	r3, #3
 800177a:	0005      	movs	r5, r0
 800177c:	4691      	mov	r9, r2
 800177e:	469b      	mov	fp, r3
 8001780:	e666      	b.n	8001450 <__aeabi_dmul+0x48>
 8001782:	2304      	movs	r3, #4
 8001784:	4699      	mov	r9, r3
 8001786:	2300      	movs	r3, #0
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	3301      	adds	r3, #1
 800178c:	2400      	movs	r4, #0
 800178e:	469b      	mov	fp, r3
 8001790:	e65e      	b.n	8001450 <__aeabi_dmul+0x48>
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	000007ff 	.word	0x000007ff
 8001798:	fffffc01 	.word	0xfffffc01
 800179c:	0800d4bc 	.word	0x0800d4bc
 80017a0:	000003ff 	.word	0x000003ff
 80017a4:	feffffff 	.word	0xfeffffff
 80017a8:	000007fe 	.word	0x000007fe
 80017ac:	fffffc0d 	.word	0xfffffc0d
 80017b0:	4649      	mov	r1, r9
 80017b2:	2301      	movs	r3, #1
 80017b4:	4319      	orrs	r1, r3
 80017b6:	4689      	mov	r9, r1
 80017b8:	2600      	movs	r6, #0
 80017ba:	2001      	movs	r0, #1
 80017bc:	e667      	b.n	800148e <__aeabi_dmul+0x86>
 80017be:	2300      	movs	r3, #0
 80017c0:	2480      	movs	r4, #128	; 0x80
 80017c2:	2500      	movs	r5, #0
 80017c4:	4a43      	ldr	r2, [pc, #268]	; (80018d4 <__aeabi_dmul+0x4cc>)
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	0324      	lsls	r4, r4, #12
 80017ca:	e67e      	b.n	80014ca <__aeabi_dmul+0xc2>
 80017cc:	2001      	movs	r0, #1
 80017ce:	1a40      	subs	r0, r0, r1
 80017d0:	2838      	cmp	r0, #56	; 0x38
 80017d2:	dd00      	ble.n	80017d6 <__aeabi_dmul+0x3ce>
 80017d4:	e676      	b.n	80014c4 <__aeabi_dmul+0xbc>
 80017d6:	281f      	cmp	r0, #31
 80017d8:	dd5b      	ble.n	8001892 <__aeabi_dmul+0x48a>
 80017da:	221f      	movs	r2, #31
 80017dc:	0023      	movs	r3, r4
 80017de:	4252      	negs	r2, r2
 80017e0:	1a51      	subs	r1, r2, r1
 80017e2:	40cb      	lsrs	r3, r1
 80017e4:	0019      	movs	r1, r3
 80017e6:	2820      	cmp	r0, #32
 80017e8:	d003      	beq.n	80017f2 <__aeabi_dmul+0x3ea>
 80017ea:	4a3b      	ldr	r2, [pc, #236]	; (80018d8 <__aeabi_dmul+0x4d0>)
 80017ec:	4462      	add	r2, ip
 80017ee:	4094      	lsls	r4, r2
 80017f0:	4325      	orrs	r5, r4
 80017f2:	1e6a      	subs	r2, r5, #1
 80017f4:	4195      	sbcs	r5, r2
 80017f6:	002a      	movs	r2, r5
 80017f8:	430a      	orrs	r2, r1
 80017fa:	2107      	movs	r1, #7
 80017fc:	000d      	movs	r5, r1
 80017fe:	2400      	movs	r4, #0
 8001800:	4015      	ands	r5, r2
 8001802:	4211      	tst	r1, r2
 8001804:	d05b      	beq.n	80018be <__aeabi_dmul+0x4b6>
 8001806:	210f      	movs	r1, #15
 8001808:	2400      	movs	r4, #0
 800180a:	4011      	ands	r1, r2
 800180c:	2904      	cmp	r1, #4
 800180e:	d053      	beq.n	80018b8 <__aeabi_dmul+0x4b0>
 8001810:	1d11      	adds	r1, r2, #4
 8001812:	4291      	cmp	r1, r2
 8001814:	4192      	sbcs	r2, r2
 8001816:	4252      	negs	r2, r2
 8001818:	18a4      	adds	r4, r4, r2
 800181a:	000a      	movs	r2, r1
 800181c:	0223      	lsls	r3, r4, #8
 800181e:	d54b      	bpl.n	80018b8 <__aeabi_dmul+0x4b0>
 8001820:	2201      	movs	r2, #1
 8001822:	2400      	movs	r4, #0
 8001824:	2500      	movs	r5, #0
 8001826:	e650      	b.n	80014ca <__aeabi_dmul+0xc2>
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	031b      	lsls	r3, r3, #12
 800182c:	421c      	tst	r4, r3
 800182e:	d009      	beq.n	8001844 <__aeabi_dmul+0x43c>
 8001830:	421e      	tst	r6, r3
 8001832:	d107      	bne.n	8001844 <__aeabi_dmul+0x43c>
 8001834:	4333      	orrs	r3, r6
 8001836:	031c      	lsls	r4, r3, #12
 8001838:	4643      	mov	r3, r8
 800183a:	0015      	movs	r5, r2
 800183c:	0b24      	lsrs	r4, r4, #12
 800183e:	4a25      	ldr	r2, [pc, #148]	; (80018d4 <__aeabi_dmul+0x4cc>)
 8001840:	9301      	str	r3, [sp, #4]
 8001842:	e642      	b.n	80014ca <__aeabi_dmul+0xc2>
 8001844:	2280      	movs	r2, #128	; 0x80
 8001846:	0312      	lsls	r2, r2, #12
 8001848:	4314      	orrs	r4, r2
 800184a:	0324      	lsls	r4, r4, #12
 800184c:	4a21      	ldr	r2, [pc, #132]	; (80018d4 <__aeabi_dmul+0x4cc>)
 800184e:	0b24      	lsrs	r4, r4, #12
 8001850:	9701      	str	r7, [sp, #4]
 8001852:	e63a      	b.n	80014ca <__aeabi_dmul+0xc2>
 8001854:	f000 fd50 	bl	80022f8 <__clzsi2>
 8001858:	0001      	movs	r1, r0
 800185a:	0002      	movs	r2, r0
 800185c:	3115      	adds	r1, #21
 800185e:	3220      	adds	r2, #32
 8001860:	291c      	cmp	r1, #28
 8001862:	dc00      	bgt.n	8001866 <__aeabi_dmul+0x45e>
 8001864:	e74b      	b.n	80016fe <__aeabi_dmul+0x2f6>
 8001866:	0034      	movs	r4, r6
 8001868:	3808      	subs	r0, #8
 800186a:	2500      	movs	r5, #0
 800186c:	4084      	lsls	r4, r0
 800186e:	e750      	b.n	8001712 <__aeabi_dmul+0x30a>
 8001870:	f000 fd42 	bl	80022f8 <__clzsi2>
 8001874:	0003      	movs	r3, r0
 8001876:	001a      	movs	r2, r3
 8001878:	3215      	adds	r2, #21
 800187a:	3020      	adds	r0, #32
 800187c:	2a1c      	cmp	r2, #28
 800187e:	dc00      	bgt.n	8001882 <__aeabi_dmul+0x47a>
 8001880:	e71e      	b.n	80016c0 <__aeabi_dmul+0x2b8>
 8001882:	4656      	mov	r6, sl
 8001884:	3b08      	subs	r3, #8
 8001886:	2200      	movs	r2, #0
 8001888:	409e      	lsls	r6, r3
 800188a:	e723      	b.n	80016d4 <__aeabi_dmul+0x2cc>
 800188c:	9b00      	ldr	r3, [sp, #0]
 800188e:	469c      	mov	ip, r3
 8001890:	e6e6      	b.n	8001660 <__aeabi_dmul+0x258>
 8001892:	4912      	ldr	r1, [pc, #72]	; (80018dc <__aeabi_dmul+0x4d4>)
 8001894:	0022      	movs	r2, r4
 8001896:	4461      	add	r1, ip
 8001898:	002e      	movs	r6, r5
 800189a:	408d      	lsls	r5, r1
 800189c:	408a      	lsls	r2, r1
 800189e:	40c6      	lsrs	r6, r0
 80018a0:	1e69      	subs	r1, r5, #1
 80018a2:	418d      	sbcs	r5, r1
 80018a4:	4332      	orrs	r2, r6
 80018a6:	432a      	orrs	r2, r5
 80018a8:	40c4      	lsrs	r4, r0
 80018aa:	0753      	lsls	r3, r2, #29
 80018ac:	d0b6      	beq.n	800181c <__aeabi_dmul+0x414>
 80018ae:	210f      	movs	r1, #15
 80018b0:	4011      	ands	r1, r2
 80018b2:	2904      	cmp	r1, #4
 80018b4:	d1ac      	bne.n	8001810 <__aeabi_dmul+0x408>
 80018b6:	e7b1      	b.n	800181c <__aeabi_dmul+0x414>
 80018b8:	0765      	lsls	r5, r4, #29
 80018ba:	0264      	lsls	r4, r4, #9
 80018bc:	0b24      	lsrs	r4, r4, #12
 80018be:	08d2      	lsrs	r2, r2, #3
 80018c0:	4315      	orrs	r5, r2
 80018c2:	2200      	movs	r2, #0
 80018c4:	e601      	b.n	80014ca <__aeabi_dmul+0xc2>
 80018c6:	2280      	movs	r2, #128	; 0x80
 80018c8:	0312      	lsls	r2, r2, #12
 80018ca:	4314      	orrs	r4, r2
 80018cc:	0324      	lsls	r4, r4, #12
 80018ce:	4a01      	ldr	r2, [pc, #4]	; (80018d4 <__aeabi_dmul+0x4cc>)
 80018d0:	0b24      	lsrs	r4, r4, #12
 80018d2:	e5fa      	b.n	80014ca <__aeabi_dmul+0xc2>
 80018d4:	000007ff 	.word	0x000007ff
 80018d8:	0000043e 	.word	0x0000043e
 80018dc:	0000041e 	.word	0x0000041e

080018e0 <__aeabi_dsub>:
 80018e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018e2:	4657      	mov	r7, sl
 80018e4:	464e      	mov	r6, r9
 80018e6:	4645      	mov	r5, r8
 80018e8:	46de      	mov	lr, fp
 80018ea:	b5e0      	push	{r5, r6, r7, lr}
 80018ec:	001e      	movs	r6, r3
 80018ee:	0017      	movs	r7, r2
 80018f0:	004a      	lsls	r2, r1, #1
 80018f2:	030b      	lsls	r3, r1, #12
 80018f4:	0d52      	lsrs	r2, r2, #21
 80018f6:	0a5b      	lsrs	r3, r3, #9
 80018f8:	4690      	mov	r8, r2
 80018fa:	0f42      	lsrs	r2, r0, #29
 80018fc:	431a      	orrs	r2, r3
 80018fe:	0fcd      	lsrs	r5, r1, #31
 8001900:	4ccd      	ldr	r4, [pc, #820]	; (8001c38 <__aeabi_dsub+0x358>)
 8001902:	0331      	lsls	r1, r6, #12
 8001904:	00c3      	lsls	r3, r0, #3
 8001906:	4694      	mov	ip, r2
 8001908:	0070      	lsls	r0, r6, #1
 800190a:	0f7a      	lsrs	r2, r7, #29
 800190c:	0a49      	lsrs	r1, r1, #9
 800190e:	00ff      	lsls	r7, r7, #3
 8001910:	469a      	mov	sl, r3
 8001912:	46b9      	mov	r9, r7
 8001914:	0d40      	lsrs	r0, r0, #21
 8001916:	0ff6      	lsrs	r6, r6, #31
 8001918:	4311      	orrs	r1, r2
 800191a:	42a0      	cmp	r0, r4
 800191c:	d100      	bne.n	8001920 <__aeabi_dsub+0x40>
 800191e:	e0b1      	b.n	8001a84 <__aeabi_dsub+0x1a4>
 8001920:	2201      	movs	r2, #1
 8001922:	4056      	eors	r6, r2
 8001924:	46b3      	mov	fp, r6
 8001926:	42b5      	cmp	r5, r6
 8001928:	d100      	bne.n	800192c <__aeabi_dsub+0x4c>
 800192a:	e088      	b.n	8001a3e <__aeabi_dsub+0x15e>
 800192c:	4642      	mov	r2, r8
 800192e:	1a12      	subs	r2, r2, r0
 8001930:	2a00      	cmp	r2, #0
 8001932:	dc00      	bgt.n	8001936 <__aeabi_dsub+0x56>
 8001934:	e0ae      	b.n	8001a94 <__aeabi_dsub+0x1b4>
 8001936:	2800      	cmp	r0, #0
 8001938:	d100      	bne.n	800193c <__aeabi_dsub+0x5c>
 800193a:	e0c1      	b.n	8001ac0 <__aeabi_dsub+0x1e0>
 800193c:	48be      	ldr	r0, [pc, #760]	; (8001c38 <__aeabi_dsub+0x358>)
 800193e:	4580      	cmp	r8, r0
 8001940:	d100      	bne.n	8001944 <__aeabi_dsub+0x64>
 8001942:	e151      	b.n	8001be8 <__aeabi_dsub+0x308>
 8001944:	2080      	movs	r0, #128	; 0x80
 8001946:	0400      	lsls	r0, r0, #16
 8001948:	4301      	orrs	r1, r0
 800194a:	2a38      	cmp	r2, #56	; 0x38
 800194c:	dd00      	ble.n	8001950 <__aeabi_dsub+0x70>
 800194e:	e17b      	b.n	8001c48 <__aeabi_dsub+0x368>
 8001950:	2a1f      	cmp	r2, #31
 8001952:	dd00      	ble.n	8001956 <__aeabi_dsub+0x76>
 8001954:	e1ee      	b.n	8001d34 <__aeabi_dsub+0x454>
 8001956:	2020      	movs	r0, #32
 8001958:	003e      	movs	r6, r7
 800195a:	1a80      	subs	r0, r0, r2
 800195c:	000c      	movs	r4, r1
 800195e:	40d6      	lsrs	r6, r2
 8001960:	40d1      	lsrs	r1, r2
 8001962:	4087      	lsls	r7, r0
 8001964:	4662      	mov	r2, ip
 8001966:	4084      	lsls	r4, r0
 8001968:	1a52      	subs	r2, r2, r1
 800196a:	1e78      	subs	r0, r7, #1
 800196c:	4187      	sbcs	r7, r0
 800196e:	4694      	mov	ip, r2
 8001970:	4334      	orrs	r4, r6
 8001972:	4327      	orrs	r7, r4
 8001974:	1bdc      	subs	r4, r3, r7
 8001976:	42a3      	cmp	r3, r4
 8001978:	419b      	sbcs	r3, r3
 800197a:	4662      	mov	r2, ip
 800197c:	425b      	negs	r3, r3
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	4699      	mov	r9, r3
 8001982:	464b      	mov	r3, r9
 8001984:	021b      	lsls	r3, r3, #8
 8001986:	d400      	bmi.n	800198a <__aeabi_dsub+0xaa>
 8001988:	e118      	b.n	8001bbc <__aeabi_dsub+0x2dc>
 800198a:	464b      	mov	r3, r9
 800198c:	0258      	lsls	r0, r3, #9
 800198e:	0a43      	lsrs	r3, r0, #9
 8001990:	4699      	mov	r9, r3
 8001992:	464b      	mov	r3, r9
 8001994:	2b00      	cmp	r3, #0
 8001996:	d100      	bne.n	800199a <__aeabi_dsub+0xba>
 8001998:	e137      	b.n	8001c0a <__aeabi_dsub+0x32a>
 800199a:	4648      	mov	r0, r9
 800199c:	f000 fcac 	bl	80022f8 <__clzsi2>
 80019a0:	0001      	movs	r1, r0
 80019a2:	3908      	subs	r1, #8
 80019a4:	2320      	movs	r3, #32
 80019a6:	0022      	movs	r2, r4
 80019a8:	4648      	mov	r0, r9
 80019aa:	1a5b      	subs	r3, r3, r1
 80019ac:	40da      	lsrs	r2, r3
 80019ae:	4088      	lsls	r0, r1
 80019b0:	408c      	lsls	r4, r1
 80019b2:	4643      	mov	r3, r8
 80019b4:	4310      	orrs	r0, r2
 80019b6:	4588      	cmp	r8, r1
 80019b8:	dd00      	ble.n	80019bc <__aeabi_dsub+0xdc>
 80019ba:	e136      	b.n	8001c2a <__aeabi_dsub+0x34a>
 80019bc:	1ac9      	subs	r1, r1, r3
 80019be:	1c4b      	adds	r3, r1, #1
 80019c0:	2b1f      	cmp	r3, #31
 80019c2:	dd00      	ble.n	80019c6 <__aeabi_dsub+0xe6>
 80019c4:	e0ea      	b.n	8001b9c <__aeabi_dsub+0x2bc>
 80019c6:	2220      	movs	r2, #32
 80019c8:	0026      	movs	r6, r4
 80019ca:	1ad2      	subs	r2, r2, r3
 80019cc:	0001      	movs	r1, r0
 80019ce:	4094      	lsls	r4, r2
 80019d0:	40de      	lsrs	r6, r3
 80019d2:	40d8      	lsrs	r0, r3
 80019d4:	2300      	movs	r3, #0
 80019d6:	4091      	lsls	r1, r2
 80019d8:	1e62      	subs	r2, r4, #1
 80019da:	4194      	sbcs	r4, r2
 80019dc:	4681      	mov	r9, r0
 80019de:	4698      	mov	r8, r3
 80019e0:	4331      	orrs	r1, r6
 80019e2:	430c      	orrs	r4, r1
 80019e4:	0763      	lsls	r3, r4, #29
 80019e6:	d009      	beq.n	80019fc <__aeabi_dsub+0x11c>
 80019e8:	230f      	movs	r3, #15
 80019ea:	4023      	ands	r3, r4
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d005      	beq.n	80019fc <__aeabi_dsub+0x11c>
 80019f0:	1d23      	adds	r3, r4, #4
 80019f2:	42a3      	cmp	r3, r4
 80019f4:	41a4      	sbcs	r4, r4
 80019f6:	4264      	negs	r4, r4
 80019f8:	44a1      	add	r9, r4
 80019fa:	001c      	movs	r4, r3
 80019fc:	464b      	mov	r3, r9
 80019fe:	021b      	lsls	r3, r3, #8
 8001a00:	d400      	bmi.n	8001a04 <__aeabi_dsub+0x124>
 8001a02:	e0de      	b.n	8001bc2 <__aeabi_dsub+0x2e2>
 8001a04:	4641      	mov	r1, r8
 8001a06:	4b8c      	ldr	r3, [pc, #560]	; (8001c38 <__aeabi_dsub+0x358>)
 8001a08:	3101      	adds	r1, #1
 8001a0a:	4299      	cmp	r1, r3
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x130>
 8001a0e:	e0e7      	b.n	8001be0 <__aeabi_dsub+0x300>
 8001a10:	464b      	mov	r3, r9
 8001a12:	488a      	ldr	r0, [pc, #552]	; (8001c3c <__aeabi_dsub+0x35c>)
 8001a14:	08e4      	lsrs	r4, r4, #3
 8001a16:	4003      	ands	r3, r0
 8001a18:	0018      	movs	r0, r3
 8001a1a:	0549      	lsls	r1, r1, #21
 8001a1c:	075b      	lsls	r3, r3, #29
 8001a1e:	0240      	lsls	r0, r0, #9
 8001a20:	4323      	orrs	r3, r4
 8001a22:	0d4a      	lsrs	r2, r1, #21
 8001a24:	0b04      	lsrs	r4, r0, #12
 8001a26:	0512      	lsls	r2, r2, #20
 8001a28:	07ed      	lsls	r5, r5, #31
 8001a2a:	4322      	orrs	r2, r4
 8001a2c:	432a      	orrs	r2, r5
 8001a2e:	0018      	movs	r0, r3
 8001a30:	0011      	movs	r1, r2
 8001a32:	bcf0      	pop	{r4, r5, r6, r7}
 8001a34:	46bb      	mov	fp, r7
 8001a36:	46b2      	mov	sl, r6
 8001a38:	46a9      	mov	r9, r5
 8001a3a:	46a0      	mov	r8, r4
 8001a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a3e:	4642      	mov	r2, r8
 8001a40:	1a12      	subs	r2, r2, r0
 8001a42:	2a00      	cmp	r2, #0
 8001a44:	dd52      	ble.n	8001aec <__aeabi_dsub+0x20c>
 8001a46:	2800      	cmp	r0, #0
 8001a48:	d100      	bne.n	8001a4c <__aeabi_dsub+0x16c>
 8001a4a:	e09c      	b.n	8001b86 <__aeabi_dsub+0x2a6>
 8001a4c:	45a0      	cmp	r8, r4
 8001a4e:	d100      	bne.n	8001a52 <__aeabi_dsub+0x172>
 8001a50:	e0ca      	b.n	8001be8 <__aeabi_dsub+0x308>
 8001a52:	2080      	movs	r0, #128	; 0x80
 8001a54:	0400      	lsls	r0, r0, #16
 8001a56:	4301      	orrs	r1, r0
 8001a58:	2a38      	cmp	r2, #56	; 0x38
 8001a5a:	dd00      	ble.n	8001a5e <__aeabi_dsub+0x17e>
 8001a5c:	e149      	b.n	8001cf2 <__aeabi_dsub+0x412>
 8001a5e:	2a1f      	cmp	r2, #31
 8001a60:	dc00      	bgt.n	8001a64 <__aeabi_dsub+0x184>
 8001a62:	e197      	b.n	8001d94 <__aeabi_dsub+0x4b4>
 8001a64:	0010      	movs	r0, r2
 8001a66:	000e      	movs	r6, r1
 8001a68:	3820      	subs	r0, #32
 8001a6a:	40c6      	lsrs	r6, r0
 8001a6c:	2a20      	cmp	r2, #32
 8001a6e:	d004      	beq.n	8001a7a <__aeabi_dsub+0x19a>
 8001a70:	2040      	movs	r0, #64	; 0x40
 8001a72:	1a82      	subs	r2, r0, r2
 8001a74:	4091      	lsls	r1, r2
 8001a76:	430f      	orrs	r7, r1
 8001a78:	46b9      	mov	r9, r7
 8001a7a:	464c      	mov	r4, r9
 8001a7c:	1e62      	subs	r2, r4, #1
 8001a7e:	4194      	sbcs	r4, r2
 8001a80:	4334      	orrs	r4, r6
 8001a82:	e13a      	b.n	8001cfa <__aeabi_dsub+0x41a>
 8001a84:	000a      	movs	r2, r1
 8001a86:	433a      	orrs	r2, r7
 8001a88:	d028      	beq.n	8001adc <__aeabi_dsub+0x1fc>
 8001a8a:	46b3      	mov	fp, r6
 8001a8c:	42b5      	cmp	r5, r6
 8001a8e:	d02b      	beq.n	8001ae8 <__aeabi_dsub+0x208>
 8001a90:	4a6b      	ldr	r2, [pc, #428]	; (8001c40 <__aeabi_dsub+0x360>)
 8001a92:	4442      	add	r2, r8
 8001a94:	2a00      	cmp	r2, #0
 8001a96:	d05d      	beq.n	8001b54 <__aeabi_dsub+0x274>
 8001a98:	4642      	mov	r2, r8
 8001a9a:	4644      	mov	r4, r8
 8001a9c:	1a82      	subs	r2, r0, r2
 8001a9e:	2c00      	cmp	r4, #0
 8001aa0:	d000      	beq.n	8001aa4 <__aeabi_dsub+0x1c4>
 8001aa2:	e0f5      	b.n	8001c90 <__aeabi_dsub+0x3b0>
 8001aa4:	4665      	mov	r5, ip
 8001aa6:	431d      	orrs	r5, r3
 8001aa8:	d100      	bne.n	8001aac <__aeabi_dsub+0x1cc>
 8001aaa:	e19c      	b.n	8001de6 <__aeabi_dsub+0x506>
 8001aac:	1e55      	subs	r5, r2, #1
 8001aae:	2a01      	cmp	r2, #1
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_dsub+0x1d4>
 8001ab2:	e1fb      	b.n	8001eac <__aeabi_dsub+0x5cc>
 8001ab4:	4c60      	ldr	r4, [pc, #384]	; (8001c38 <__aeabi_dsub+0x358>)
 8001ab6:	42a2      	cmp	r2, r4
 8001ab8:	d100      	bne.n	8001abc <__aeabi_dsub+0x1dc>
 8001aba:	e1bd      	b.n	8001e38 <__aeabi_dsub+0x558>
 8001abc:	002a      	movs	r2, r5
 8001abe:	e0f0      	b.n	8001ca2 <__aeabi_dsub+0x3c2>
 8001ac0:	0008      	movs	r0, r1
 8001ac2:	4338      	orrs	r0, r7
 8001ac4:	d100      	bne.n	8001ac8 <__aeabi_dsub+0x1e8>
 8001ac6:	e0c3      	b.n	8001c50 <__aeabi_dsub+0x370>
 8001ac8:	1e50      	subs	r0, r2, #1
 8001aca:	2a01      	cmp	r2, #1
 8001acc:	d100      	bne.n	8001ad0 <__aeabi_dsub+0x1f0>
 8001ace:	e1a8      	b.n	8001e22 <__aeabi_dsub+0x542>
 8001ad0:	4c59      	ldr	r4, [pc, #356]	; (8001c38 <__aeabi_dsub+0x358>)
 8001ad2:	42a2      	cmp	r2, r4
 8001ad4:	d100      	bne.n	8001ad8 <__aeabi_dsub+0x1f8>
 8001ad6:	e087      	b.n	8001be8 <__aeabi_dsub+0x308>
 8001ad8:	0002      	movs	r2, r0
 8001ada:	e736      	b.n	800194a <__aeabi_dsub+0x6a>
 8001adc:	2201      	movs	r2, #1
 8001ade:	4056      	eors	r6, r2
 8001ae0:	46b3      	mov	fp, r6
 8001ae2:	42b5      	cmp	r5, r6
 8001ae4:	d000      	beq.n	8001ae8 <__aeabi_dsub+0x208>
 8001ae6:	e721      	b.n	800192c <__aeabi_dsub+0x4c>
 8001ae8:	4a55      	ldr	r2, [pc, #340]	; (8001c40 <__aeabi_dsub+0x360>)
 8001aea:	4442      	add	r2, r8
 8001aec:	2a00      	cmp	r2, #0
 8001aee:	d100      	bne.n	8001af2 <__aeabi_dsub+0x212>
 8001af0:	e0b5      	b.n	8001c5e <__aeabi_dsub+0x37e>
 8001af2:	4642      	mov	r2, r8
 8001af4:	4644      	mov	r4, r8
 8001af6:	1a82      	subs	r2, r0, r2
 8001af8:	2c00      	cmp	r4, #0
 8001afa:	d100      	bne.n	8001afe <__aeabi_dsub+0x21e>
 8001afc:	e138      	b.n	8001d70 <__aeabi_dsub+0x490>
 8001afe:	4e4e      	ldr	r6, [pc, #312]	; (8001c38 <__aeabi_dsub+0x358>)
 8001b00:	42b0      	cmp	r0, r6
 8001b02:	d100      	bne.n	8001b06 <__aeabi_dsub+0x226>
 8001b04:	e1de      	b.n	8001ec4 <__aeabi_dsub+0x5e4>
 8001b06:	2680      	movs	r6, #128	; 0x80
 8001b08:	4664      	mov	r4, ip
 8001b0a:	0436      	lsls	r6, r6, #16
 8001b0c:	4334      	orrs	r4, r6
 8001b0e:	46a4      	mov	ip, r4
 8001b10:	2a38      	cmp	r2, #56	; 0x38
 8001b12:	dd00      	ble.n	8001b16 <__aeabi_dsub+0x236>
 8001b14:	e196      	b.n	8001e44 <__aeabi_dsub+0x564>
 8001b16:	2a1f      	cmp	r2, #31
 8001b18:	dd00      	ble.n	8001b1c <__aeabi_dsub+0x23c>
 8001b1a:	e224      	b.n	8001f66 <__aeabi_dsub+0x686>
 8001b1c:	2620      	movs	r6, #32
 8001b1e:	1ab4      	subs	r4, r6, r2
 8001b20:	46a2      	mov	sl, r4
 8001b22:	4664      	mov	r4, ip
 8001b24:	4656      	mov	r6, sl
 8001b26:	40b4      	lsls	r4, r6
 8001b28:	46a1      	mov	r9, r4
 8001b2a:	001c      	movs	r4, r3
 8001b2c:	464e      	mov	r6, r9
 8001b2e:	40d4      	lsrs	r4, r2
 8001b30:	4326      	orrs	r6, r4
 8001b32:	0034      	movs	r4, r6
 8001b34:	4656      	mov	r6, sl
 8001b36:	40b3      	lsls	r3, r6
 8001b38:	1e5e      	subs	r6, r3, #1
 8001b3a:	41b3      	sbcs	r3, r6
 8001b3c:	431c      	orrs	r4, r3
 8001b3e:	4663      	mov	r3, ip
 8001b40:	40d3      	lsrs	r3, r2
 8001b42:	18c9      	adds	r1, r1, r3
 8001b44:	19e4      	adds	r4, r4, r7
 8001b46:	42bc      	cmp	r4, r7
 8001b48:	41bf      	sbcs	r7, r7
 8001b4a:	427f      	negs	r7, r7
 8001b4c:	46b9      	mov	r9, r7
 8001b4e:	4680      	mov	r8, r0
 8001b50:	4489      	add	r9, r1
 8001b52:	e0d8      	b.n	8001d06 <__aeabi_dsub+0x426>
 8001b54:	4640      	mov	r0, r8
 8001b56:	4c3b      	ldr	r4, [pc, #236]	; (8001c44 <__aeabi_dsub+0x364>)
 8001b58:	3001      	adds	r0, #1
 8001b5a:	4220      	tst	r0, r4
 8001b5c:	d000      	beq.n	8001b60 <__aeabi_dsub+0x280>
 8001b5e:	e0b4      	b.n	8001cca <__aeabi_dsub+0x3ea>
 8001b60:	4640      	mov	r0, r8
 8001b62:	2800      	cmp	r0, #0
 8001b64:	d000      	beq.n	8001b68 <__aeabi_dsub+0x288>
 8001b66:	e144      	b.n	8001df2 <__aeabi_dsub+0x512>
 8001b68:	4660      	mov	r0, ip
 8001b6a:	4318      	orrs	r0, r3
 8001b6c:	d100      	bne.n	8001b70 <__aeabi_dsub+0x290>
 8001b6e:	e190      	b.n	8001e92 <__aeabi_dsub+0x5b2>
 8001b70:	0008      	movs	r0, r1
 8001b72:	4338      	orrs	r0, r7
 8001b74:	d000      	beq.n	8001b78 <__aeabi_dsub+0x298>
 8001b76:	e1aa      	b.n	8001ece <__aeabi_dsub+0x5ee>
 8001b78:	4661      	mov	r1, ip
 8001b7a:	08db      	lsrs	r3, r3, #3
 8001b7c:	0749      	lsls	r1, r1, #29
 8001b7e:	430b      	orrs	r3, r1
 8001b80:	4661      	mov	r1, ip
 8001b82:	08cc      	lsrs	r4, r1, #3
 8001b84:	e027      	b.n	8001bd6 <__aeabi_dsub+0x2f6>
 8001b86:	0008      	movs	r0, r1
 8001b88:	4338      	orrs	r0, r7
 8001b8a:	d061      	beq.n	8001c50 <__aeabi_dsub+0x370>
 8001b8c:	1e50      	subs	r0, r2, #1
 8001b8e:	2a01      	cmp	r2, #1
 8001b90:	d100      	bne.n	8001b94 <__aeabi_dsub+0x2b4>
 8001b92:	e139      	b.n	8001e08 <__aeabi_dsub+0x528>
 8001b94:	42a2      	cmp	r2, r4
 8001b96:	d027      	beq.n	8001be8 <__aeabi_dsub+0x308>
 8001b98:	0002      	movs	r2, r0
 8001b9a:	e75d      	b.n	8001a58 <__aeabi_dsub+0x178>
 8001b9c:	0002      	movs	r2, r0
 8001b9e:	391f      	subs	r1, #31
 8001ba0:	40ca      	lsrs	r2, r1
 8001ba2:	0011      	movs	r1, r2
 8001ba4:	2b20      	cmp	r3, #32
 8001ba6:	d003      	beq.n	8001bb0 <__aeabi_dsub+0x2d0>
 8001ba8:	2240      	movs	r2, #64	; 0x40
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	4098      	lsls	r0, r3
 8001bae:	4304      	orrs	r4, r0
 8001bb0:	1e63      	subs	r3, r4, #1
 8001bb2:	419c      	sbcs	r4, r3
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	4699      	mov	r9, r3
 8001bb8:	4698      	mov	r8, r3
 8001bba:	430c      	orrs	r4, r1
 8001bbc:	0763      	lsls	r3, r4, #29
 8001bbe:	d000      	beq.n	8001bc2 <__aeabi_dsub+0x2e2>
 8001bc0:	e712      	b.n	80019e8 <__aeabi_dsub+0x108>
 8001bc2:	464b      	mov	r3, r9
 8001bc4:	464a      	mov	r2, r9
 8001bc6:	08e4      	lsrs	r4, r4, #3
 8001bc8:	075b      	lsls	r3, r3, #29
 8001bca:	4323      	orrs	r3, r4
 8001bcc:	08d4      	lsrs	r4, r2, #3
 8001bce:	4642      	mov	r2, r8
 8001bd0:	4919      	ldr	r1, [pc, #100]	; (8001c38 <__aeabi_dsub+0x358>)
 8001bd2:	428a      	cmp	r2, r1
 8001bd4:	d00e      	beq.n	8001bf4 <__aeabi_dsub+0x314>
 8001bd6:	0324      	lsls	r4, r4, #12
 8001bd8:	0552      	lsls	r2, r2, #21
 8001bda:	0b24      	lsrs	r4, r4, #12
 8001bdc:	0d52      	lsrs	r2, r2, #21
 8001bde:	e722      	b.n	8001a26 <__aeabi_dsub+0x146>
 8001be0:	000a      	movs	r2, r1
 8001be2:	2400      	movs	r4, #0
 8001be4:	2300      	movs	r3, #0
 8001be6:	e71e      	b.n	8001a26 <__aeabi_dsub+0x146>
 8001be8:	08db      	lsrs	r3, r3, #3
 8001bea:	4662      	mov	r2, ip
 8001bec:	0752      	lsls	r2, r2, #29
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	4662      	mov	r2, ip
 8001bf2:	08d4      	lsrs	r4, r2, #3
 8001bf4:	001a      	movs	r2, r3
 8001bf6:	4322      	orrs	r2, r4
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_dsub+0x31c>
 8001bfa:	e1fc      	b.n	8001ff6 <__aeabi_dsub+0x716>
 8001bfc:	2280      	movs	r2, #128	; 0x80
 8001bfe:	0312      	lsls	r2, r2, #12
 8001c00:	4314      	orrs	r4, r2
 8001c02:	0324      	lsls	r4, r4, #12
 8001c04:	4a0c      	ldr	r2, [pc, #48]	; (8001c38 <__aeabi_dsub+0x358>)
 8001c06:	0b24      	lsrs	r4, r4, #12
 8001c08:	e70d      	b.n	8001a26 <__aeabi_dsub+0x146>
 8001c0a:	0020      	movs	r0, r4
 8001c0c:	f000 fb74 	bl	80022f8 <__clzsi2>
 8001c10:	0001      	movs	r1, r0
 8001c12:	3118      	adds	r1, #24
 8001c14:	291f      	cmp	r1, #31
 8001c16:	dc00      	bgt.n	8001c1a <__aeabi_dsub+0x33a>
 8001c18:	e6c4      	b.n	80019a4 <__aeabi_dsub+0xc4>
 8001c1a:	3808      	subs	r0, #8
 8001c1c:	4084      	lsls	r4, r0
 8001c1e:	4643      	mov	r3, r8
 8001c20:	0020      	movs	r0, r4
 8001c22:	2400      	movs	r4, #0
 8001c24:	4588      	cmp	r8, r1
 8001c26:	dc00      	bgt.n	8001c2a <__aeabi_dsub+0x34a>
 8001c28:	e6c8      	b.n	80019bc <__aeabi_dsub+0xdc>
 8001c2a:	4a04      	ldr	r2, [pc, #16]	; (8001c3c <__aeabi_dsub+0x35c>)
 8001c2c:	1a5b      	subs	r3, r3, r1
 8001c2e:	4010      	ands	r0, r2
 8001c30:	4698      	mov	r8, r3
 8001c32:	4681      	mov	r9, r0
 8001c34:	e6d6      	b.n	80019e4 <__aeabi_dsub+0x104>
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	000007ff 	.word	0x000007ff
 8001c3c:	ff7fffff 	.word	0xff7fffff
 8001c40:	fffff801 	.word	0xfffff801
 8001c44:	000007fe 	.word	0x000007fe
 8001c48:	430f      	orrs	r7, r1
 8001c4a:	1e7a      	subs	r2, r7, #1
 8001c4c:	4197      	sbcs	r7, r2
 8001c4e:	e691      	b.n	8001974 <__aeabi_dsub+0x94>
 8001c50:	4661      	mov	r1, ip
 8001c52:	08db      	lsrs	r3, r3, #3
 8001c54:	0749      	lsls	r1, r1, #29
 8001c56:	430b      	orrs	r3, r1
 8001c58:	4661      	mov	r1, ip
 8001c5a:	08cc      	lsrs	r4, r1, #3
 8001c5c:	e7b8      	b.n	8001bd0 <__aeabi_dsub+0x2f0>
 8001c5e:	4640      	mov	r0, r8
 8001c60:	4cd3      	ldr	r4, [pc, #844]	; (8001fb0 <__aeabi_dsub+0x6d0>)
 8001c62:	3001      	adds	r0, #1
 8001c64:	4220      	tst	r0, r4
 8001c66:	d000      	beq.n	8001c6a <__aeabi_dsub+0x38a>
 8001c68:	e0a2      	b.n	8001db0 <__aeabi_dsub+0x4d0>
 8001c6a:	4640      	mov	r0, r8
 8001c6c:	2800      	cmp	r0, #0
 8001c6e:	d000      	beq.n	8001c72 <__aeabi_dsub+0x392>
 8001c70:	e101      	b.n	8001e76 <__aeabi_dsub+0x596>
 8001c72:	4660      	mov	r0, ip
 8001c74:	4318      	orrs	r0, r3
 8001c76:	d100      	bne.n	8001c7a <__aeabi_dsub+0x39a>
 8001c78:	e15e      	b.n	8001f38 <__aeabi_dsub+0x658>
 8001c7a:	0008      	movs	r0, r1
 8001c7c:	4338      	orrs	r0, r7
 8001c7e:	d000      	beq.n	8001c82 <__aeabi_dsub+0x3a2>
 8001c80:	e15f      	b.n	8001f42 <__aeabi_dsub+0x662>
 8001c82:	4661      	mov	r1, ip
 8001c84:	08db      	lsrs	r3, r3, #3
 8001c86:	0749      	lsls	r1, r1, #29
 8001c88:	430b      	orrs	r3, r1
 8001c8a:	4661      	mov	r1, ip
 8001c8c:	08cc      	lsrs	r4, r1, #3
 8001c8e:	e7a2      	b.n	8001bd6 <__aeabi_dsub+0x2f6>
 8001c90:	4dc8      	ldr	r5, [pc, #800]	; (8001fb4 <__aeabi_dsub+0x6d4>)
 8001c92:	42a8      	cmp	r0, r5
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x3b8>
 8001c96:	e0cf      	b.n	8001e38 <__aeabi_dsub+0x558>
 8001c98:	2580      	movs	r5, #128	; 0x80
 8001c9a:	4664      	mov	r4, ip
 8001c9c:	042d      	lsls	r5, r5, #16
 8001c9e:	432c      	orrs	r4, r5
 8001ca0:	46a4      	mov	ip, r4
 8001ca2:	2a38      	cmp	r2, #56	; 0x38
 8001ca4:	dc56      	bgt.n	8001d54 <__aeabi_dsub+0x474>
 8001ca6:	2a1f      	cmp	r2, #31
 8001ca8:	dd00      	ble.n	8001cac <__aeabi_dsub+0x3cc>
 8001caa:	e0d1      	b.n	8001e50 <__aeabi_dsub+0x570>
 8001cac:	2520      	movs	r5, #32
 8001cae:	001e      	movs	r6, r3
 8001cb0:	1aad      	subs	r5, r5, r2
 8001cb2:	4664      	mov	r4, ip
 8001cb4:	40ab      	lsls	r3, r5
 8001cb6:	40ac      	lsls	r4, r5
 8001cb8:	40d6      	lsrs	r6, r2
 8001cba:	1e5d      	subs	r5, r3, #1
 8001cbc:	41ab      	sbcs	r3, r5
 8001cbe:	4334      	orrs	r4, r6
 8001cc0:	4323      	orrs	r3, r4
 8001cc2:	4664      	mov	r4, ip
 8001cc4:	40d4      	lsrs	r4, r2
 8001cc6:	1b09      	subs	r1, r1, r4
 8001cc8:	e049      	b.n	8001d5e <__aeabi_dsub+0x47e>
 8001cca:	4660      	mov	r0, ip
 8001ccc:	1bdc      	subs	r4, r3, r7
 8001cce:	1a46      	subs	r6, r0, r1
 8001cd0:	42a3      	cmp	r3, r4
 8001cd2:	4180      	sbcs	r0, r0
 8001cd4:	4240      	negs	r0, r0
 8001cd6:	4681      	mov	r9, r0
 8001cd8:	0030      	movs	r0, r6
 8001cda:	464e      	mov	r6, r9
 8001cdc:	1b80      	subs	r0, r0, r6
 8001cde:	4681      	mov	r9, r0
 8001ce0:	0200      	lsls	r0, r0, #8
 8001ce2:	d476      	bmi.n	8001dd2 <__aeabi_dsub+0x4f2>
 8001ce4:	464b      	mov	r3, r9
 8001ce6:	4323      	orrs	r3, r4
 8001ce8:	d000      	beq.n	8001cec <__aeabi_dsub+0x40c>
 8001cea:	e652      	b.n	8001992 <__aeabi_dsub+0xb2>
 8001cec:	2400      	movs	r4, #0
 8001cee:	2500      	movs	r5, #0
 8001cf0:	e771      	b.n	8001bd6 <__aeabi_dsub+0x2f6>
 8001cf2:	4339      	orrs	r1, r7
 8001cf4:	000c      	movs	r4, r1
 8001cf6:	1e62      	subs	r2, r4, #1
 8001cf8:	4194      	sbcs	r4, r2
 8001cfa:	18e4      	adds	r4, r4, r3
 8001cfc:	429c      	cmp	r4, r3
 8001cfe:	419b      	sbcs	r3, r3
 8001d00:	425b      	negs	r3, r3
 8001d02:	4463      	add	r3, ip
 8001d04:	4699      	mov	r9, r3
 8001d06:	464b      	mov	r3, r9
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	d400      	bmi.n	8001d0e <__aeabi_dsub+0x42e>
 8001d0c:	e756      	b.n	8001bbc <__aeabi_dsub+0x2dc>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	469c      	mov	ip, r3
 8001d12:	4ba8      	ldr	r3, [pc, #672]	; (8001fb4 <__aeabi_dsub+0x6d4>)
 8001d14:	44e0      	add	r8, ip
 8001d16:	4598      	cmp	r8, r3
 8001d18:	d038      	beq.n	8001d8c <__aeabi_dsub+0x4ac>
 8001d1a:	464b      	mov	r3, r9
 8001d1c:	48a6      	ldr	r0, [pc, #664]	; (8001fb8 <__aeabi_dsub+0x6d8>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4003      	ands	r3, r0
 8001d22:	0018      	movs	r0, r3
 8001d24:	0863      	lsrs	r3, r4, #1
 8001d26:	4014      	ands	r4, r2
 8001d28:	431c      	orrs	r4, r3
 8001d2a:	07c3      	lsls	r3, r0, #31
 8001d2c:	431c      	orrs	r4, r3
 8001d2e:	0843      	lsrs	r3, r0, #1
 8001d30:	4699      	mov	r9, r3
 8001d32:	e657      	b.n	80019e4 <__aeabi_dsub+0x104>
 8001d34:	0010      	movs	r0, r2
 8001d36:	000e      	movs	r6, r1
 8001d38:	3820      	subs	r0, #32
 8001d3a:	40c6      	lsrs	r6, r0
 8001d3c:	2a20      	cmp	r2, #32
 8001d3e:	d004      	beq.n	8001d4a <__aeabi_dsub+0x46a>
 8001d40:	2040      	movs	r0, #64	; 0x40
 8001d42:	1a82      	subs	r2, r0, r2
 8001d44:	4091      	lsls	r1, r2
 8001d46:	430f      	orrs	r7, r1
 8001d48:	46b9      	mov	r9, r7
 8001d4a:	464f      	mov	r7, r9
 8001d4c:	1e7a      	subs	r2, r7, #1
 8001d4e:	4197      	sbcs	r7, r2
 8001d50:	4337      	orrs	r7, r6
 8001d52:	e60f      	b.n	8001974 <__aeabi_dsub+0x94>
 8001d54:	4662      	mov	r2, ip
 8001d56:	431a      	orrs	r2, r3
 8001d58:	0013      	movs	r3, r2
 8001d5a:	1e5a      	subs	r2, r3, #1
 8001d5c:	4193      	sbcs	r3, r2
 8001d5e:	1afc      	subs	r4, r7, r3
 8001d60:	42a7      	cmp	r7, r4
 8001d62:	41bf      	sbcs	r7, r7
 8001d64:	427f      	negs	r7, r7
 8001d66:	1bcb      	subs	r3, r1, r7
 8001d68:	4699      	mov	r9, r3
 8001d6a:	465d      	mov	r5, fp
 8001d6c:	4680      	mov	r8, r0
 8001d6e:	e608      	b.n	8001982 <__aeabi_dsub+0xa2>
 8001d70:	4666      	mov	r6, ip
 8001d72:	431e      	orrs	r6, r3
 8001d74:	d100      	bne.n	8001d78 <__aeabi_dsub+0x498>
 8001d76:	e0be      	b.n	8001ef6 <__aeabi_dsub+0x616>
 8001d78:	1e56      	subs	r6, r2, #1
 8001d7a:	2a01      	cmp	r2, #1
 8001d7c:	d100      	bne.n	8001d80 <__aeabi_dsub+0x4a0>
 8001d7e:	e109      	b.n	8001f94 <__aeabi_dsub+0x6b4>
 8001d80:	4c8c      	ldr	r4, [pc, #560]	; (8001fb4 <__aeabi_dsub+0x6d4>)
 8001d82:	42a2      	cmp	r2, r4
 8001d84:	d100      	bne.n	8001d88 <__aeabi_dsub+0x4a8>
 8001d86:	e119      	b.n	8001fbc <__aeabi_dsub+0x6dc>
 8001d88:	0032      	movs	r2, r6
 8001d8a:	e6c1      	b.n	8001b10 <__aeabi_dsub+0x230>
 8001d8c:	4642      	mov	r2, r8
 8001d8e:	2400      	movs	r4, #0
 8001d90:	2300      	movs	r3, #0
 8001d92:	e648      	b.n	8001a26 <__aeabi_dsub+0x146>
 8001d94:	2020      	movs	r0, #32
 8001d96:	000c      	movs	r4, r1
 8001d98:	1a80      	subs	r0, r0, r2
 8001d9a:	003e      	movs	r6, r7
 8001d9c:	4087      	lsls	r7, r0
 8001d9e:	4084      	lsls	r4, r0
 8001da0:	40d6      	lsrs	r6, r2
 8001da2:	1e78      	subs	r0, r7, #1
 8001da4:	4187      	sbcs	r7, r0
 8001da6:	40d1      	lsrs	r1, r2
 8001da8:	4334      	orrs	r4, r6
 8001daa:	433c      	orrs	r4, r7
 8001dac:	448c      	add	ip, r1
 8001dae:	e7a4      	b.n	8001cfa <__aeabi_dsub+0x41a>
 8001db0:	4a80      	ldr	r2, [pc, #512]	; (8001fb4 <__aeabi_dsub+0x6d4>)
 8001db2:	4290      	cmp	r0, r2
 8001db4:	d100      	bne.n	8001db8 <__aeabi_dsub+0x4d8>
 8001db6:	e0e9      	b.n	8001f8c <__aeabi_dsub+0x6ac>
 8001db8:	19df      	adds	r7, r3, r7
 8001dba:	429f      	cmp	r7, r3
 8001dbc:	419b      	sbcs	r3, r3
 8001dbe:	4461      	add	r1, ip
 8001dc0:	425b      	negs	r3, r3
 8001dc2:	18c9      	adds	r1, r1, r3
 8001dc4:	07cc      	lsls	r4, r1, #31
 8001dc6:	087f      	lsrs	r7, r7, #1
 8001dc8:	084b      	lsrs	r3, r1, #1
 8001dca:	4699      	mov	r9, r3
 8001dcc:	4680      	mov	r8, r0
 8001dce:	433c      	orrs	r4, r7
 8001dd0:	e6f4      	b.n	8001bbc <__aeabi_dsub+0x2dc>
 8001dd2:	1afc      	subs	r4, r7, r3
 8001dd4:	42a7      	cmp	r7, r4
 8001dd6:	41bf      	sbcs	r7, r7
 8001dd8:	4663      	mov	r3, ip
 8001dda:	427f      	negs	r7, r7
 8001ddc:	1ac9      	subs	r1, r1, r3
 8001dde:	1bcb      	subs	r3, r1, r7
 8001de0:	4699      	mov	r9, r3
 8001de2:	465d      	mov	r5, fp
 8001de4:	e5d5      	b.n	8001992 <__aeabi_dsub+0xb2>
 8001de6:	08ff      	lsrs	r7, r7, #3
 8001de8:	074b      	lsls	r3, r1, #29
 8001dea:	465d      	mov	r5, fp
 8001dec:	433b      	orrs	r3, r7
 8001dee:	08cc      	lsrs	r4, r1, #3
 8001df0:	e6ee      	b.n	8001bd0 <__aeabi_dsub+0x2f0>
 8001df2:	4662      	mov	r2, ip
 8001df4:	431a      	orrs	r2, r3
 8001df6:	d000      	beq.n	8001dfa <__aeabi_dsub+0x51a>
 8001df8:	e082      	b.n	8001f00 <__aeabi_dsub+0x620>
 8001dfa:	000b      	movs	r3, r1
 8001dfc:	433b      	orrs	r3, r7
 8001dfe:	d11b      	bne.n	8001e38 <__aeabi_dsub+0x558>
 8001e00:	2480      	movs	r4, #128	; 0x80
 8001e02:	2500      	movs	r5, #0
 8001e04:	0324      	lsls	r4, r4, #12
 8001e06:	e6f9      	b.n	8001bfc <__aeabi_dsub+0x31c>
 8001e08:	19dc      	adds	r4, r3, r7
 8001e0a:	429c      	cmp	r4, r3
 8001e0c:	419b      	sbcs	r3, r3
 8001e0e:	4461      	add	r1, ip
 8001e10:	4689      	mov	r9, r1
 8001e12:	425b      	negs	r3, r3
 8001e14:	4499      	add	r9, r3
 8001e16:	464b      	mov	r3, r9
 8001e18:	021b      	lsls	r3, r3, #8
 8001e1a:	d444      	bmi.n	8001ea6 <__aeabi_dsub+0x5c6>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	4698      	mov	r8, r3
 8001e20:	e6cc      	b.n	8001bbc <__aeabi_dsub+0x2dc>
 8001e22:	1bdc      	subs	r4, r3, r7
 8001e24:	4662      	mov	r2, ip
 8001e26:	42a3      	cmp	r3, r4
 8001e28:	419b      	sbcs	r3, r3
 8001e2a:	1a51      	subs	r1, r2, r1
 8001e2c:	425b      	negs	r3, r3
 8001e2e:	1acb      	subs	r3, r1, r3
 8001e30:	4699      	mov	r9, r3
 8001e32:	2301      	movs	r3, #1
 8001e34:	4698      	mov	r8, r3
 8001e36:	e5a4      	b.n	8001982 <__aeabi_dsub+0xa2>
 8001e38:	08ff      	lsrs	r7, r7, #3
 8001e3a:	074b      	lsls	r3, r1, #29
 8001e3c:	465d      	mov	r5, fp
 8001e3e:	433b      	orrs	r3, r7
 8001e40:	08cc      	lsrs	r4, r1, #3
 8001e42:	e6d7      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001e44:	4662      	mov	r2, ip
 8001e46:	431a      	orrs	r2, r3
 8001e48:	0014      	movs	r4, r2
 8001e4a:	1e63      	subs	r3, r4, #1
 8001e4c:	419c      	sbcs	r4, r3
 8001e4e:	e679      	b.n	8001b44 <__aeabi_dsub+0x264>
 8001e50:	0015      	movs	r5, r2
 8001e52:	4664      	mov	r4, ip
 8001e54:	3d20      	subs	r5, #32
 8001e56:	40ec      	lsrs	r4, r5
 8001e58:	46a0      	mov	r8, r4
 8001e5a:	2a20      	cmp	r2, #32
 8001e5c:	d005      	beq.n	8001e6a <__aeabi_dsub+0x58a>
 8001e5e:	2540      	movs	r5, #64	; 0x40
 8001e60:	4664      	mov	r4, ip
 8001e62:	1aaa      	subs	r2, r5, r2
 8001e64:	4094      	lsls	r4, r2
 8001e66:	4323      	orrs	r3, r4
 8001e68:	469a      	mov	sl, r3
 8001e6a:	4654      	mov	r4, sl
 8001e6c:	1e63      	subs	r3, r4, #1
 8001e6e:	419c      	sbcs	r4, r3
 8001e70:	4643      	mov	r3, r8
 8001e72:	4323      	orrs	r3, r4
 8001e74:	e773      	b.n	8001d5e <__aeabi_dsub+0x47e>
 8001e76:	4662      	mov	r2, ip
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	d023      	beq.n	8001ec4 <__aeabi_dsub+0x5e4>
 8001e7c:	000a      	movs	r2, r1
 8001e7e:	433a      	orrs	r2, r7
 8001e80:	d000      	beq.n	8001e84 <__aeabi_dsub+0x5a4>
 8001e82:	e0a0      	b.n	8001fc6 <__aeabi_dsub+0x6e6>
 8001e84:	4662      	mov	r2, ip
 8001e86:	08db      	lsrs	r3, r3, #3
 8001e88:	0752      	lsls	r2, r2, #29
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	4662      	mov	r2, ip
 8001e8e:	08d4      	lsrs	r4, r2, #3
 8001e90:	e6b0      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001e92:	000b      	movs	r3, r1
 8001e94:	433b      	orrs	r3, r7
 8001e96:	d100      	bne.n	8001e9a <__aeabi_dsub+0x5ba>
 8001e98:	e728      	b.n	8001cec <__aeabi_dsub+0x40c>
 8001e9a:	08ff      	lsrs	r7, r7, #3
 8001e9c:	074b      	lsls	r3, r1, #29
 8001e9e:	465d      	mov	r5, fp
 8001ea0:	433b      	orrs	r3, r7
 8001ea2:	08cc      	lsrs	r4, r1, #3
 8001ea4:	e697      	b.n	8001bd6 <__aeabi_dsub+0x2f6>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	4698      	mov	r8, r3
 8001eaa:	e736      	b.n	8001d1a <__aeabi_dsub+0x43a>
 8001eac:	1afc      	subs	r4, r7, r3
 8001eae:	42a7      	cmp	r7, r4
 8001eb0:	41bf      	sbcs	r7, r7
 8001eb2:	4663      	mov	r3, ip
 8001eb4:	427f      	negs	r7, r7
 8001eb6:	1ac9      	subs	r1, r1, r3
 8001eb8:	1bcb      	subs	r3, r1, r7
 8001eba:	4699      	mov	r9, r3
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	465d      	mov	r5, fp
 8001ec0:	4698      	mov	r8, r3
 8001ec2:	e55e      	b.n	8001982 <__aeabi_dsub+0xa2>
 8001ec4:	074b      	lsls	r3, r1, #29
 8001ec6:	08ff      	lsrs	r7, r7, #3
 8001ec8:	433b      	orrs	r3, r7
 8001eca:	08cc      	lsrs	r4, r1, #3
 8001ecc:	e692      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001ece:	1bdc      	subs	r4, r3, r7
 8001ed0:	4660      	mov	r0, ip
 8001ed2:	42a3      	cmp	r3, r4
 8001ed4:	41b6      	sbcs	r6, r6
 8001ed6:	1a40      	subs	r0, r0, r1
 8001ed8:	4276      	negs	r6, r6
 8001eda:	1b80      	subs	r0, r0, r6
 8001edc:	4681      	mov	r9, r0
 8001ede:	0200      	lsls	r0, r0, #8
 8001ee0:	d560      	bpl.n	8001fa4 <__aeabi_dsub+0x6c4>
 8001ee2:	1afc      	subs	r4, r7, r3
 8001ee4:	42a7      	cmp	r7, r4
 8001ee6:	41bf      	sbcs	r7, r7
 8001ee8:	4663      	mov	r3, ip
 8001eea:	427f      	negs	r7, r7
 8001eec:	1ac9      	subs	r1, r1, r3
 8001eee:	1bcb      	subs	r3, r1, r7
 8001ef0:	4699      	mov	r9, r3
 8001ef2:	465d      	mov	r5, fp
 8001ef4:	e576      	b.n	80019e4 <__aeabi_dsub+0x104>
 8001ef6:	08ff      	lsrs	r7, r7, #3
 8001ef8:	074b      	lsls	r3, r1, #29
 8001efa:	433b      	orrs	r3, r7
 8001efc:	08cc      	lsrs	r4, r1, #3
 8001efe:	e667      	b.n	8001bd0 <__aeabi_dsub+0x2f0>
 8001f00:	000a      	movs	r2, r1
 8001f02:	08db      	lsrs	r3, r3, #3
 8001f04:	433a      	orrs	r2, r7
 8001f06:	d100      	bne.n	8001f0a <__aeabi_dsub+0x62a>
 8001f08:	e66f      	b.n	8001bea <__aeabi_dsub+0x30a>
 8001f0a:	4662      	mov	r2, ip
 8001f0c:	0752      	lsls	r2, r2, #29
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	4662      	mov	r2, ip
 8001f12:	08d4      	lsrs	r4, r2, #3
 8001f14:	2280      	movs	r2, #128	; 0x80
 8001f16:	0312      	lsls	r2, r2, #12
 8001f18:	4214      	tst	r4, r2
 8001f1a:	d007      	beq.n	8001f2c <__aeabi_dsub+0x64c>
 8001f1c:	08c8      	lsrs	r0, r1, #3
 8001f1e:	4210      	tst	r0, r2
 8001f20:	d104      	bne.n	8001f2c <__aeabi_dsub+0x64c>
 8001f22:	465d      	mov	r5, fp
 8001f24:	0004      	movs	r4, r0
 8001f26:	08fb      	lsrs	r3, r7, #3
 8001f28:	0749      	lsls	r1, r1, #29
 8001f2a:	430b      	orrs	r3, r1
 8001f2c:	0f5a      	lsrs	r2, r3, #29
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	08db      	lsrs	r3, r3, #3
 8001f32:	0752      	lsls	r2, r2, #29
 8001f34:	4313      	orrs	r3, r2
 8001f36:	e65d      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001f38:	074b      	lsls	r3, r1, #29
 8001f3a:	08ff      	lsrs	r7, r7, #3
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	08cc      	lsrs	r4, r1, #3
 8001f40:	e649      	b.n	8001bd6 <__aeabi_dsub+0x2f6>
 8001f42:	19dc      	adds	r4, r3, r7
 8001f44:	429c      	cmp	r4, r3
 8001f46:	419b      	sbcs	r3, r3
 8001f48:	4461      	add	r1, ip
 8001f4a:	4689      	mov	r9, r1
 8001f4c:	425b      	negs	r3, r3
 8001f4e:	4499      	add	r9, r3
 8001f50:	464b      	mov	r3, r9
 8001f52:	021b      	lsls	r3, r3, #8
 8001f54:	d400      	bmi.n	8001f58 <__aeabi_dsub+0x678>
 8001f56:	e631      	b.n	8001bbc <__aeabi_dsub+0x2dc>
 8001f58:	464a      	mov	r2, r9
 8001f5a:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <__aeabi_dsub+0x6d8>)
 8001f5c:	401a      	ands	r2, r3
 8001f5e:	2301      	movs	r3, #1
 8001f60:	4691      	mov	r9, r2
 8001f62:	4698      	mov	r8, r3
 8001f64:	e62a      	b.n	8001bbc <__aeabi_dsub+0x2dc>
 8001f66:	0016      	movs	r6, r2
 8001f68:	4664      	mov	r4, ip
 8001f6a:	3e20      	subs	r6, #32
 8001f6c:	40f4      	lsrs	r4, r6
 8001f6e:	46a0      	mov	r8, r4
 8001f70:	2a20      	cmp	r2, #32
 8001f72:	d005      	beq.n	8001f80 <__aeabi_dsub+0x6a0>
 8001f74:	2640      	movs	r6, #64	; 0x40
 8001f76:	4664      	mov	r4, ip
 8001f78:	1ab2      	subs	r2, r6, r2
 8001f7a:	4094      	lsls	r4, r2
 8001f7c:	4323      	orrs	r3, r4
 8001f7e:	469a      	mov	sl, r3
 8001f80:	4654      	mov	r4, sl
 8001f82:	1e63      	subs	r3, r4, #1
 8001f84:	419c      	sbcs	r4, r3
 8001f86:	4643      	mov	r3, r8
 8001f88:	431c      	orrs	r4, r3
 8001f8a:	e5db      	b.n	8001b44 <__aeabi_dsub+0x264>
 8001f8c:	0002      	movs	r2, r0
 8001f8e:	2400      	movs	r4, #0
 8001f90:	2300      	movs	r3, #0
 8001f92:	e548      	b.n	8001a26 <__aeabi_dsub+0x146>
 8001f94:	19dc      	adds	r4, r3, r7
 8001f96:	42bc      	cmp	r4, r7
 8001f98:	41bf      	sbcs	r7, r7
 8001f9a:	4461      	add	r1, ip
 8001f9c:	4689      	mov	r9, r1
 8001f9e:	427f      	negs	r7, r7
 8001fa0:	44b9      	add	r9, r7
 8001fa2:	e738      	b.n	8001e16 <__aeabi_dsub+0x536>
 8001fa4:	464b      	mov	r3, r9
 8001fa6:	4323      	orrs	r3, r4
 8001fa8:	d100      	bne.n	8001fac <__aeabi_dsub+0x6cc>
 8001faa:	e69f      	b.n	8001cec <__aeabi_dsub+0x40c>
 8001fac:	e606      	b.n	8001bbc <__aeabi_dsub+0x2dc>
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	000007fe 	.word	0x000007fe
 8001fb4:	000007ff 	.word	0x000007ff
 8001fb8:	ff7fffff 	.word	0xff7fffff
 8001fbc:	08ff      	lsrs	r7, r7, #3
 8001fbe:	074b      	lsls	r3, r1, #29
 8001fc0:	433b      	orrs	r3, r7
 8001fc2:	08cc      	lsrs	r4, r1, #3
 8001fc4:	e616      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001fc6:	4662      	mov	r2, ip
 8001fc8:	08db      	lsrs	r3, r3, #3
 8001fca:	0752      	lsls	r2, r2, #29
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	4662      	mov	r2, ip
 8001fd0:	08d4      	lsrs	r4, r2, #3
 8001fd2:	2280      	movs	r2, #128	; 0x80
 8001fd4:	0312      	lsls	r2, r2, #12
 8001fd6:	4214      	tst	r4, r2
 8001fd8:	d007      	beq.n	8001fea <__aeabi_dsub+0x70a>
 8001fda:	08c8      	lsrs	r0, r1, #3
 8001fdc:	4210      	tst	r0, r2
 8001fde:	d104      	bne.n	8001fea <__aeabi_dsub+0x70a>
 8001fe0:	465d      	mov	r5, fp
 8001fe2:	0004      	movs	r4, r0
 8001fe4:	08fb      	lsrs	r3, r7, #3
 8001fe6:	0749      	lsls	r1, r1, #29
 8001fe8:	430b      	orrs	r3, r1
 8001fea:	0f5a      	lsrs	r2, r3, #29
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	0752      	lsls	r2, r2, #29
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	e5fe      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	4a01      	ldr	r2, [pc, #4]	; (8002000 <__aeabi_dsub+0x720>)
 8001ffa:	001c      	movs	r4, r3
 8001ffc:	e513      	b.n	8001a26 <__aeabi_dsub+0x146>
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	000007ff 	.word	0x000007ff

08002004 <__aeabi_dcmpun>:
 8002004:	b570      	push	{r4, r5, r6, lr}
 8002006:	0005      	movs	r5, r0
 8002008:	480c      	ldr	r0, [pc, #48]	; (800203c <__aeabi_dcmpun+0x38>)
 800200a:	031c      	lsls	r4, r3, #12
 800200c:	0016      	movs	r6, r2
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	030a      	lsls	r2, r1, #12
 8002012:	0049      	lsls	r1, r1, #1
 8002014:	0b12      	lsrs	r2, r2, #12
 8002016:	0d49      	lsrs	r1, r1, #21
 8002018:	0b24      	lsrs	r4, r4, #12
 800201a:	0d5b      	lsrs	r3, r3, #21
 800201c:	4281      	cmp	r1, r0
 800201e:	d008      	beq.n	8002032 <__aeabi_dcmpun+0x2e>
 8002020:	4a06      	ldr	r2, [pc, #24]	; (800203c <__aeabi_dcmpun+0x38>)
 8002022:	2000      	movs	r0, #0
 8002024:	4293      	cmp	r3, r2
 8002026:	d103      	bne.n	8002030 <__aeabi_dcmpun+0x2c>
 8002028:	0020      	movs	r0, r4
 800202a:	4330      	orrs	r0, r6
 800202c:	1e43      	subs	r3, r0, #1
 800202e:	4198      	sbcs	r0, r3
 8002030:	bd70      	pop	{r4, r5, r6, pc}
 8002032:	2001      	movs	r0, #1
 8002034:	432a      	orrs	r2, r5
 8002036:	d1fb      	bne.n	8002030 <__aeabi_dcmpun+0x2c>
 8002038:	e7f2      	b.n	8002020 <__aeabi_dcmpun+0x1c>
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	000007ff 	.word	0x000007ff

08002040 <__aeabi_d2iz>:
 8002040:	000a      	movs	r2, r1
 8002042:	b530      	push	{r4, r5, lr}
 8002044:	4c13      	ldr	r4, [pc, #76]	; (8002094 <__aeabi_d2iz+0x54>)
 8002046:	0053      	lsls	r3, r2, #1
 8002048:	0309      	lsls	r1, r1, #12
 800204a:	0005      	movs	r5, r0
 800204c:	0b09      	lsrs	r1, r1, #12
 800204e:	2000      	movs	r0, #0
 8002050:	0d5b      	lsrs	r3, r3, #21
 8002052:	0fd2      	lsrs	r2, r2, #31
 8002054:	42a3      	cmp	r3, r4
 8002056:	dd04      	ble.n	8002062 <__aeabi_d2iz+0x22>
 8002058:	480f      	ldr	r0, [pc, #60]	; (8002098 <__aeabi_d2iz+0x58>)
 800205a:	4283      	cmp	r3, r0
 800205c:	dd02      	ble.n	8002064 <__aeabi_d2iz+0x24>
 800205e:	4b0f      	ldr	r3, [pc, #60]	; (800209c <__aeabi_d2iz+0x5c>)
 8002060:	18d0      	adds	r0, r2, r3
 8002062:	bd30      	pop	{r4, r5, pc}
 8002064:	2080      	movs	r0, #128	; 0x80
 8002066:	0340      	lsls	r0, r0, #13
 8002068:	4301      	orrs	r1, r0
 800206a:	480d      	ldr	r0, [pc, #52]	; (80020a0 <__aeabi_d2iz+0x60>)
 800206c:	1ac0      	subs	r0, r0, r3
 800206e:	281f      	cmp	r0, #31
 8002070:	dd08      	ble.n	8002084 <__aeabi_d2iz+0x44>
 8002072:	480c      	ldr	r0, [pc, #48]	; (80020a4 <__aeabi_d2iz+0x64>)
 8002074:	1ac3      	subs	r3, r0, r3
 8002076:	40d9      	lsrs	r1, r3
 8002078:	000b      	movs	r3, r1
 800207a:	4258      	negs	r0, r3
 800207c:	2a00      	cmp	r2, #0
 800207e:	d1f0      	bne.n	8002062 <__aeabi_d2iz+0x22>
 8002080:	0018      	movs	r0, r3
 8002082:	e7ee      	b.n	8002062 <__aeabi_d2iz+0x22>
 8002084:	4c08      	ldr	r4, [pc, #32]	; (80020a8 <__aeabi_d2iz+0x68>)
 8002086:	40c5      	lsrs	r5, r0
 8002088:	46a4      	mov	ip, r4
 800208a:	4463      	add	r3, ip
 800208c:	4099      	lsls	r1, r3
 800208e:	000b      	movs	r3, r1
 8002090:	432b      	orrs	r3, r5
 8002092:	e7f2      	b.n	800207a <__aeabi_d2iz+0x3a>
 8002094:	000003fe 	.word	0x000003fe
 8002098:	0000041d 	.word	0x0000041d
 800209c:	7fffffff 	.word	0x7fffffff
 80020a0:	00000433 	.word	0x00000433
 80020a4:	00000413 	.word	0x00000413
 80020a8:	fffffbed 	.word	0xfffffbed

080020ac <__aeabi_i2d>:
 80020ac:	b570      	push	{r4, r5, r6, lr}
 80020ae:	2800      	cmp	r0, #0
 80020b0:	d016      	beq.n	80020e0 <__aeabi_i2d+0x34>
 80020b2:	17c3      	asrs	r3, r0, #31
 80020b4:	18c5      	adds	r5, r0, r3
 80020b6:	405d      	eors	r5, r3
 80020b8:	0fc4      	lsrs	r4, r0, #31
 80020ba:	0028      	movs	r0, r5
 80020bc:	f000 f91c 	bl	80022f8 <__clzsi2>
 80020c0:	4a11      	ldr	r2, [pc, #68]	; (8002108 <__aeabi_i2d+0x5c>)
 80020c2:	1a12      	subs	r2, r2, r0
 80020c4:	280a      	cmp	r0, #10
 80020c6:	dc16      	bgt.n	80020f6 <__aeabi_i2d+0x4a>
 80020c8:	0003      	movs	r3, r0
 80020ca:	002e      	movs	r6, r5
 80020cc:	3315      	adds	r3, #21
 80020ce:	409e      	lsls	r6, r3
 80020d0:	230b      	movs	r3, #11
 80020d2:	1a18      	subs	r0, r3, r0
 80020d4:	40c5      	lsrs	r5, r0
 80020d6:	0552      	lsls	r2, r2, #21
 80020d8:	032d      	lsls	r5, r5, #12
 80020da:	0b2d      	lsrs	r5, r5, #12
 80020dc:	0d53      	lsrs	r3, r2, #21
 80020de:	e003      	b.n	80020e8 <__aeabi_i2d+0x3c>
 80020e0:	2400      	movs	r4, #0
 80020e2:	2300      	movs	r3, #0
 80020e4:	2500      	movs	r5, #0
 80020e6:	2600      	movs	r6, #0
 80020e8:	051b      	lsls	r3, r3, #20
 80020ea:	432b      	orrs	r3, r5
 80020ec:	07e4      	lsls	r4, r4, #31
 80020ee:	4323      	orrs	r3, r4
 80020f0:	0030      	movs	r0, r6
 80020f2:	0019      	movs	r1, r3
 80020f4:	bd70      	pop	{r4, r5, r6, pc}
 80020f6:	380b      	subs	r0, #11
 80020f8:	4085      	lsls	r5, r0
 80020fa:	0552      	lsls	r2, r2, #21
 80020fc:	032d      	lsls	r5, r5, #12
 80020fe:	2600      	movs	r6, #0
 8002100:	0b2d      	lsrs	r5, r5, #12
 8002102:	0d53      	lsrs	r3, r2, #21
 8002104:	e7f0      	b.n	80020e8 <__aeabi_i2d+0x3c>
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	0000041e 	.word	0x0000041e

0800210c <__aeabi_ui2d>:
 800210c:	b510      	push	{r4, lr}
 800210e:	1e04      	subs	r4, r0, #0
 8002110:	d010      	beq.n	8002134 <__aeabi_ui2d+0x28>
 8002112:	f000 f8f1 	bl	80022f8 <__clzsi2>
 8002116:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <__aeabi_ui2d+0x48>)
 8002118:	1a1b      	subs	r3, r3, r0
 800211a:	280a      	cmp	r0, #10
 800211c:	dc11      	bgt.n	8002142 <__aeabi_ui2d+0x36>
 800211e:	220b      	movs	r2, #11
 8002120:	0021      	movs	r1, r4
 8002122:	1a12      	subs	r2, r2, r0
 8002124:	40d1      	lsrs	r1, r2
 8002126:	3015      	adds	r0, #21
 8002128:	030a      	lsls	r2, r1, #12
 800212a:	055b      	lsls	r3, r3, #21
 800212c:	4084      	lsls	r4, r0
 800212e:	0b12      	lsrs	r2, r2, #12
 8002130:	0d5b      	lsrs	r3, r3, #21
 8002132:	e001      	b.n	8002138 <__aeabi_ui2d+0x2c>
 8002134:	2300      	movs	r3, #0
 8002136:	2200      	movs	r2, #0
 8002138:	051b      	lsls	r3, r3, #20
 800213a:	4313      	orrs	r3, r2
 800213c:	0020      	movs	r0, r4
 800213e:	0019      	movs	r1, r3
 8002140:	bd10      	pop	{r4, pc}
 8002142:	0022      	movs	r2, r4
 8002144:	380b      	subs	r0, #11
 8002146:	4082      	lsls	r2, r0
 8002148:	055b      	lsls	r3, r3, #21
 800214a:	0312      	lsls	r2, r2, #12
 800214c:	2400      	movs	r4, #0
 800214e:	0b12      	lsrs	r2, r2, #12
 8002150:	0d5b      	lsrs	r3, r3, #21
 8002152:	e7f1      	b.n	8002138 <__aeabi_ui2d+0x2c>
 8002154:	0000041e 	.word	0x0000041e

08002158 <__aeabi_f2d>:
 8002158:	b570      	push	{r4, r5, r6, lr}
 800215a:	0043      	lsls	r3, r0, #1
 800215c:	0246      	lsls	r6, r0, #9
 800215e:	0fc4      	lsrs	r4, r0, #31
 8002160:	20fe      	movs	r0, #254	; 0xfe
 8002162:	0e1b      	lsrs	r3, r3, #24
 8002164:	1c59      	adds	r1, r3, #1
 8002166:	0a75      	lsrs	r5, r6, #9
 8002168:	4208      	tst	r0, r1
 800216a:	d00c      	beq.n	8002186 <__aeabi_f2d+0x2e>
 800216c:	22e0      	movs	r2, #224	; 0xe0
 800216e:	0092      	lsls	r2, r2, #2
 8002170:	4694      	mov	ip, r2
 8002172:	076d      	lsls	r5, r5, #29
 8002174:	0b36      	lsrs	r6, r6, #12
 8002176:	4463      	add	r3, ip
 8002178:	051b      	lsls	r3, r3, #20
 800217a:	4333      	orrs	r3, r6
 800217c:	07e4      	lsls	r4, r4, #31
 800217e:	4323      	orrs	r3, r4
 8002180:	0028      	movs	r0, r5
 8002182:	0019      	movs	r1, r3
 8002184:	bd70      	pop	{r4, r5, r6, pc}
 8002186:	2b00      	cmp	r3, #0
 8002188:	d114      	bne.n	80021b4 <__aeabi_f2d+0x5c>
 800218a:	2d00      	cmp	r5, #0
 800218c:	d01b      	beq.n	80021c6 <__aeabi_f2d+0x6e>
 800218e:	0028      	movs	r0, r5
 8002190:	f000 f8b2 	bl	80022f8 <__clzsi2>
 8002194:	280a      	cmp	r0, #10
 8002196:	dc1c      	bgt.n	80021d2 <__aeabi_f2d+0x7a>
 8002198:	230b      	movs	r3, #11
 800219a:	002e      	movs	r6, r5
 800219c:	1a1b      	subs	r3, r3, r0
 800219e:	40de      	lsrs	r6, r3
 80021a0:	0003      	movs	r3, r0
 80021a2:	3315      	adds	r3, #21
 80021a4:	409d      	lsls	r5, r3
 80021a6:	4a0e      	ldr	r2, [pc, #56]	; (80021e0 <__aeabi_f2d+0x88>)
 80021a8:	0336      	lsls	r6, r6, #12
 80021aa:	1a12      	subs	r2, r2, r0
 80021ac:	0552      	lsls	r2, r2, #21
 80021ae:	0b36      	lsrs	r6, r6, #12
 80021b0:	0d53      	lsrs	r3, r2, #21
 80021b2:	e7e1      	b.n	8002178 <__aeabi_f2d+0x20>
 80021b4:	2d00      	cmp	r5, #0
 80021b6:	d009      	beq.n	80021cc <__aeabi_f2d+0x74>
 80021b8:	2280      	movs	r2, #128	; 0x80
 80021ba:	0b36      	lsrs	r6, r6, #12
 80021bc:	0312      	lsls	r2, r2, #12
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <__aeabi_f2d+0x8c>)
 80021c0:	076d      	lsls	r5, r5, #29
 80021c2:	4316      	orrs	r6, r2
 80021c4:	e7d8      	b.n	8002178 <__aeabi_f2d+0x20>
 80021c6:	2300      	movs	r3, #0
 80021c8:	2600      	movs	r6, #0
 80021ca:	e7d5      	b.n	8002178 <__aeabi_f2d+0x20>
 80021cc:	2600      	movs	r6, #0
 80021ce:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <__aeabi_f2d+0x8c>)
 80021d0:	e7d2      	b.n	8002178 <__aeabi_f2d+0x20>
 80021d2:	0003      	movs	r3, r0
 80021d4:	3b0b      	subs	r3, #11
 80021d6:	409d      	lsls	r5, r3
 80021d8:	002e      	movs	r6, r5
 80021da:	2500      	movs	r5, #0
 80021dc:	e7e3      	b.n	80021a6 <__aeabi_f2d+0x4e>
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	00000389 	.word	0x00000389
 80021e4:	000007ff 	.word	0x000007ff

080021e8 <__aeabi_d2f>:
 80021e8:	0002      	movs	r2, r0
 80021ea:	004b      	lsls	r3, r1, #1
 80021ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ee:	0d5b      	lsrs	r3, r3, #21
 80021f0:	030c      	lsls	r4, r1, #12
 80021f2:	4e3d      	ldr	r6, [pc, #244]	; (80022e8 <__aeabi_d2f+0x100>)
 80021f4:	0a64      	lsrs	r4, r4, #9
 80021f6:	0f40      	lsrs	r0, r0, #29
 80021f8:	1c5f      	adds	r7, r3, #1
 80021fa:	0fc9      	lsrs	r1, r1, #31
 80021fc:	4304      	orrs	r4, r0
 80021fe:	00d5      	lsls	r5, r2, #3
 8002200:	4237      	tst	r7, r6
 8002202:	d00a      	beq.n	800221a <__aeabi_d2f+0x32>
 8002204:	4839      	ldr	r0, [pc, #228]	; (80022ec <__aeabi_d2f+0x104>)
 8002206:	181e      	adds	r6, r3, r0
 8002208:	2efe      	cmp	r6, #254	; 0xfe
 800220a:	dd16      	ble.n	800223a <__aeabi_d2f+0x52>
 800220c:	20ff      	movs	r0, #255	; 0xff
 800220e:	2400      	movs	r4, #0
 8002210:	05c0      	lsls	r0, r0, #23
 8002212:	4320      	orrs	r0, r4
 8002214:	07c9      	lsls	r1, r1, #31
 8002216:	4308      	orrs	r0, r1
 8002218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800221a:	2b00      	cmp	r3, #0
 800221c:	d106      	bne.n	800222c <__aeabi_d2f+0x44>
 800221e:	432c      	orrs	r4, r5
 8002220:	d026      	beq.n	8002270 <__aeabi_d2f+0x88>
 8002222:	2205      	movs	r2, #5
 8002224:	0192      	lsls	r2, r2, #6
 8002226:	0a54      	lsrs	r4, r2, #9
 8002228:	b2d8      	uxtb	r0, r3
 800222a:	e7f1      	b.n	8002210 <__aeabi_d2f+0x28>
 800222c:	4325      	orrs	r5, r4
 800222e:	d0ed      	beq.n	800220c <__aeabi_d2f+0x24>
 8002230:	2080      	movs	r0, #128	; 0x80
 8002232:	03c0      	lsls	r0, r0, #15
 8002234:	4304      	orrs	r4, r0
 8002236:	20ff      	movs	r0, #255	; 0xff
 8002238:	e7ea      	b.n	8002210 <__aeabi_d2f+0x28>
 800223a:	2e00      	cmp	r6, #0
 800223c:	dd1b      	ble.n	8002276 <__aeabi_d2f+0x8e>
 800223e:	0192      	lsls	r2, r2, #6
 8002240:	1e53      	subs	r3, r2, #1
 8002242:	419a      	sbcs	r2, r3
 8002244:	00e4      	lsls	r4, r4, #3
 8002246:	0f6d      	lsrs	r5, r5, #29
 8002248:	4322      	orrs	r2, r4
 800224a:	432a      	orrs	r2, r5
 800224c:	0753      	lsls	r3, r2, #29
 800224e:	d048      	beq.n	80022e2 <__aeabi_d2f+0xfa>
 8002250:	230f      	movs	r3, #15
 8002252:	4013      	ands	r3, r2
 8002254:	2b04      	cmp	r3, #4
 8002256:	d000      	beq.n	800225a <__aeabi_d2f+0x72>
 8002258:	3204      	adds	r2, #4
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	04db      	lsls	r3, r3, #19
 800225e:	4013      	ands	r3, r2
 8002260:	d03f      	beq.n	80022e2 <__aeabi_d2f+0xfa>
 8002262:	1c70      	adds	r0, r6, #1
 8002264:	2efe      	cmp	r6, #254	; 0xfe
 8002266:	d0d1      	beq.n	800220c <__aeabi_d2f+0x24>
 8002268:	0192      	lsls	r2, r2, #6
 800226a:	0a54      	lsrs	r4, r2, #9
 800226c:	b2c0      	uxtb	r0, r0
 800226e:	e7cf      	b.n	8002210 <__aeabi_d2f+0x28>
 8002270:	2000      	movs	r0, #0
 8002272:	2400      	movs	r4, #0
 8002274:	e7cc      	b.n	8002210 <__aeabi_d2f+0x28>
 8002276:	0032      	movs	r2, r6
 8002278:	3217      	adds	r2, #23
 800227a:	db22      	blt.n	80022c2 <__aeabi_d2f+0xda>
 800227c:	2080      	movs	r0, #128	; 0x80
 800227e:	0400      	lsls	r0, r0, #16
 8002280:	4320      	orrs	r0, r4
 8002282:	241e      	movs	r4, #30
 8002284:	1ba4      	subs	r4, r4, r6
 8002286:	2c1f      	cmp	r4, #31
 8002288:	dd1d      	ble.n	80022c6 <__aeabi_d2f+0xde>
 800228a:	2202      	movs	r2, #2
 800228c:	4252      	negs	r2, r2
 800228e:	1b96      	subs	r6, r2, r6
 8002290:	0002      	movs	r2, r0
 8002292:	40f2      	lsrs	r2, r6
 8002294:	0016      	movs	r6, r2
 8002296:	2c20      	cmp	r4, #32
 8002298:	d004      	beq.n	80022a4 <__aeabi_d2f+0xbc>
 800229a:	4a15      	ldr	r2, [pc, #84]	; (80022f0 <__aeabi_d2f+0x108>)
 800229c:	4694      	mov	ip, r2
 800229e:	4463      	add	r3, ip
 80022a0:	4098      	lsls	r0, r3
 80022a2:	4305      	orrs	r5, r0
 80022a4:	002a      	movs	r2, r5
 80022a6:	1e53      	subs	r3, r2, #1
 80022a8:	419a      	sbcs	r2, r3
 80022aa:	4332      	orrs	r2, r6
 80022ac:	2600      	movs	r6, #0
 80022ae:	0753      	lsls	r3, r2, #29
 80022b0:	d1ce      	bne.n	8002250 <__aeabi_d2f+0x68>
 80022b2:	2480      	movs	r4, #128	; 0x80
 80022b4:	0013      	movs	r3, r2
 80022b6:	04e4      	lsls	r4, r4, #19
 80022b8:	2001      	movs	r0, #1
 80022ba:	4023      	ands	r3, r4
 80022bc:	4222      	tst	r2, r4
 80022be:	d1d3      	bne.n	8002268 <__aeabi_d2f+0x80>
 80022c0:	e7b0      	b.n	8002224 <__aeabi_d2f+0x3c>
 80022c2:	2300      	movs	r3, #0
 80022c4:	e7ad      	b.n	8002222 <__aeabi_d2f+0x3a>
 80022c6:	4a0b      	ldr	r2, [pc, #44]	; (80022f4 <__aeabi_d2f+0x10c>)
 80022c8:	4694      	mov	ip, r2
 80022ca:	002a      	movs	r2, r5
 80022cc:	40e2      	lsrs	r2, r4
 80022ce:	0014      	movs	r4, r2
 80022d0:	002a      	movs	r2, r5
 80022d2:	4463      	add	r3, ip
 80022d4:	409a      	lsls	r2, r3
 80022d6:	4098      	lsls	r0, r3
 80022d8:	1e55      	subs	r5, r2, #1
 80022da:	41aa      	sbcs	r2, r5
 80022dc:	4302      	orrs	r2, r0
 80022de:	4322      	orrs	r2, r4
 80022e0:	e7e4      	b.n	80022ac <__aeabi_d2f+0xc4>
 80022e2:	0033      	movs	r3, r6
 80022e4:	e79e      	b.n	8002224 <__aeabi_d2f+0x3c>
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	000007fe 	.word	0x000007fe
 80022ec:	fffffc80 	.word	0xfffffc80
 80022f0:	fffffca2 	.word	0xfffffca2
 80022f4:	fffffc82 	.word	0xfffffc82

080022f8 <__clzsi2>:
 80022f8:	211c      	movs	r1, #28
 80022fa:	2301      	movs	r3, #1
 80022fc:	041b      	lsls	r3, r3, #16
 80022fe:	4298      	cmp	r0, r3
 8002300:	d301      	bcc.n	8002306 <__clzsi2+0xe>
 8002302:	0c00      	lsrs	r0, r0, #16
 8002304:	3910      	subs	r1, #16
 8002306:	0a1b      	lsrs	r3, r3, #8
 8002308:	4298      	cmp	r0, r3
 800230a:	d301      	bcc.n	8002310 <__clzsi2+0x18>
 800230c:	0a00      	lsrs	r0, r0, #8
 800230e:	3908      	subs	r1, #8
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	4298      	cmp	r0, r3
 8002314:	d301      	bcc.n	800231a <__clzsi2+0x22>
 8002316:	0900      	lsrs	r0, r0, #4
 8002318:	3904      	subs	r1, #4
 800231a:	a202      	add	r2, pc, #8	; (adr r2, 8002324 <__clzsi2+0x2c>)
 800231c:	5c10      	ldrb	r0, [r2, r0]
 800231e:	1840      	adds	r0, r0, r1
 8002320:	4770      	bx	lr
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	02020304 	.word	0x02020304
 8002328:	01010101 	.word	0x01010101
	...

08002334 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002334:	b590      	push	{r4, r7, lr}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	4a08      	ldr	r2, [pc, #32]	; (8002360 <MX_FREERTOS_Init+0x2c>)
 800233e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002340:	c313      	stmia	r3!, {r0, r1, r4}
 8002342:	ca03      	ldmia	r2!, {r0, r1}
 8002344:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002346:	1d3b      	adds	r3, r7, #4
 8002348:	2100      	movs	r1, #0
 800234a:	0018      	movs	r0, r3
 800234c:	f004 fe37 	bl	8006fbe <osThreadCreate>
 8002350:	0002      	movs	r2, r0
 8002352:	4b04      	ldr	r3, [pc, #16]	; (8002364 <MX_FREERTOS_Init+0x30>)
 8002354:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	46bd      	mov	sp, r7
 800235a:	b007      	add	sp, #28
 800235c:	bd90      	pop	{r4, r7, pc}
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	0800cdfc 	.word	0x0800cdfc
 8002364:	20000200 	.word	0x20000200

08002368 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002370:	2001      	movs	r0, #1
 8002372:	f004 fe4c 	bl	800700e <osDelay>
 8002376:	e7fb      	b.n	8002370 <StartDefaultTask+0x8>

08002378 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800237e:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <MX_GPIO_Init+0x70>)
 8002380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002382:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <MX_GPIO_Init+0x70>)
 8002384:	2101      	movs	r1, #1
 8002386:	430a      	orrs	r2, r1
 8002388:	635a      	str	r2, [r3, #52]	; 0x34
 800238a:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <MX_GPIO_Init+0x70>)
 800238c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238e:	2201      	movs	r2, #1
 8002390:	4013      	ands	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002396:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <MX_GPIO_Init+0x70>)
 8002398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800239a:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <MX_GPIO_Init+0x70>)
 800239c:	2104      	movs	r1, #4
 800239e:	430a      	orrs	r2, r1
 80023a0:	635a      	str	r2, [r3, #52]	; 0x34
 80023a2:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <MX_GPIO_Init+0x70>)
 80023a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a6:	2204      	movs	r2, #4
 80023a8:	4013      	ands	r3, r2
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ae:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <MX_GPIO_Init+0x70>)
 80023b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <MX_GPIO_Init+0x70>)
 80023b4:	2102      	movs	r1, #2
 80023b6:	430a      	orrs	r2, r1
 80023b8:	635a      	str	r2, [r3, #52]	; 0x34
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <MX_GPIO_Init+0x70>)
 80023bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023be:	2202      	movs	r2, #2
 80023c0:	4013      	ands	r3, r2
 80023c2:	607b      	str	r3, [r7, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023c6:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <MX_GPIO_Init+0x70>)
 80023c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <MX_GPIO_Init+0x70>)
 80023cc:	2108      	movs	r1, #8
 80023ce:	430a      	orrs	r2, r1
 80023d0:	635a      	str	r2, [r3, #52]	; 0x34
 80023d2:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <MX_GPIO_Init+0x70>)
 80023d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d6:	2208      	movs	r2, #8
 80023d8:	4013      	ands	r3, r2
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	683b      	ldr	r3, [r7, #0]

}
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b004      	add	sp, #16
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	40021000 	.word	0x40021000

080023ec <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80023f4:	4b05      	ldr	r3, [pc, #20]	; (800240c <__io_putchar+0x20>)
 80023f6:	1d39      	adds	r1, r7, #4
 80023f8:	4805      	ldr	r0, [pc, #20]	; (8002410 <__io_putchar+0x24>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	f003 ff14 	bl	8006228 <HAL_UART_Transmit>
	return ch;
 8002400:	687b      	ldr	r3, [r7, #4]
}
 8002402:	0018      	movs	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	b002      	add	sp, #8
 8002408:	bd80      	pop	{r7, pc}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	0000ffff 	.word	0x0000ffff
 8002410:	200003f8 	.word	0x200003f8

08002414 <taskServoMoteur.0>:
	xl320_torqueEnable(&xl320);
	xl320_setGoalPosition(&xl320, 0);

	// Tâche du ServoMoteur

	void taskServoMoteur(void * unused){
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	4663      	mov	r3, ip
 800241e:	603b      	str	r3, [r7, #0]
		for(;;){
			//xSemaphoreTake(sem_taskServo, portMAX_DELAY);
			xl320_setGoalPosition(&xl320, 69);
 8002420:	4a0b      	ldr	r2, [pc, #44]	; (8002450 <taskServoMoteur.0+0x3c>)
 8002422:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <taskServoMoteur.0+0x40>)
 8002424:	1c11      	adds	r1, r2, #0
 8002426:	0018      	movs	r0, r3
 8002428:	f001 f938 	bl	800369c <xl320_setGoalPosition>
			// donner le sémaphore à la tache asserv
			vTaskDelay(1000);
 800242c:	23fa      	movs	r3, #250	; 0xfa
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	0018      	movs	r0, r3
 8002432:	f005 f87b 	bl	800752c <vTaskDelay>
			xl320_setGoalPosition(&xl320, 0);
 8002436:	2200      	movs	r2, #0
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <taskServoMoteur.0+0x40>)
 800243a:	1c11      	adds	r1, r2, #0
 800243c:	0018      	movs	r0, r3
 800243e:	f001 f92d 	bl	800369c <xl320_setGoalPosition>
			// donner le sémaphore à la tâche capteur de couleurs
			vTaskDelay(1000);
 8002442:	23fa      	movs	r3, #250	; 0xfa
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	0018      	movs	r0, r3
 8002448:	f005 f870 	bl	800752c <vTaskDelay>
			xl320_setGoalPosition(&xl320, 69);
 800244c:	e7e8      	b.n	8002420 <taskServoMoteur.0+0xc>
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	428a0000 	.word	0x428a0000
 8002454:	20000204 	.word	0x20000204

08002458 <main>:
{
 8002458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800245a:	b089      	sub	sp, #36	; 0x24
 800245c:	af02      	add	r7, sp, #8
int main(void)
 800245e:	2320      	movs	r3, #32
 8002460:	2210      	movs	r2, #16
 8002462:	189b      	adds	r3, r3, r2
 8002464:	19da      	adds	r2, r3, r7
 8002466:	003b      	movs	r3, r7
 8002468:	615a      	str	r2, [r3, #20]
 800246a:	003b      	movs	r3, r7
 800246c:	0038      	movs	r0, r7
 800246e:	494d      	ldr	r1, [pc, #308]	; (80025a4 <main+0x14c>)
 8002470:	001a      	movs	r2, r3
 8002472:	c970      	ldmia	r1!, {r4, r5, r6}
 8002474:	c270      	stmia	r2!, {r4, r5, r6}
 8002476:	c930      	ldmia	r1!, {r4, r5}
 8002478:	c230      	stmia	r2!, {r4, r5}
 800247a:	60d8      	str	r0, [r3, #12]
 800247c:	4a4a      	ldr	r2, [pc, #296]	; (80025a8 <main+0x150>)
 800247e:	611a      	str	r2, [r3, #16]
 8002480:	001a      	movs	r2, r3
 8002482:	3214      	adds	r2, #20
 8002484:	0011      	movs	r1, r2
 8002486:	0018      	movs	r0, r3
 8002488:	f7fe f80e 	bl	80004a8 <__clear_cache>
	HAL_Init();
 800248c:	f001 f9c2 	bl	8003814 <HAL_Init>
	SystemClock_Config();
 8002490:	f000 f8ac 	bl	80025ec <SystemClock_Config>
	MX_GPIO_Init();
 8002494:	f7ff ff70 	bl	8002378 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8002498:	f000 fe5e 	bl	8003158 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800249c:	f000 feae 	bl	80031fc <MX_USART2_UART_Init>
	MX_TIM14_Init();
 80024a0:	f000 fb0a 	bl	8002ab8 <MX_TIM14_Init>
	MX_TIM3_Init();
 80024a4:	f000 fa68 	bl	8002978 <MX_TIM3_Init>
	MX_TIM15_Init();
 80024a8:	f000 fb52 	bl	8002b50 <MX_TIM15_Init>
	MX_TIM16_Init();
 80024ac:	f000 fbea 	bl	8002c84 <MX_TIM16_Init>
	MX_TIM1_Init();
 80024b0:	f000 f9f8 	bl	80028a4 <MX_TIM1_Init>
	MX_TIM7_Init();
 80024b4:	f000 fac4 	bl	8002a40 <MX_TIM7_Init>
	HAL_TIM_Base_Start_IT(&htim7);
 80024b8:	4b3c      	ldr	r3, [pc, #240]	; (80025ac <main+0x154>)
 80024ba:	0018      	movs	r0, r3
 80024bc:	f002 fb04 	bl	8004ac8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80024c0:	4b3b      	ldr	r3, [pc, #236]	; (80025b0 <main+0x158>)
 80024c2:	213c      	movs	r1, #60	; 0x3c
 80024c4:	0018      	movs	r0, r3
 80024c6:	f002 fcb5 	bl	8004e34 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80024ca:	4b3a      	ldr	r3, [pc, #232]	; (80025b4 <main+0x15c>)
 80024cc:	213c      	movs	r1, #60	; 0x3c
 80024ce:	0018      	movs	r0, r3
 80024d0:	f002 fcb0 	bl	8004e34 <HAL_TIM_Encoder_Start>
	xl320.serial.transmit = uart_half_duplex_transmit;
 80024d4:	4b38      	ldr	r3, [pc, #224]	; (80025b8 <main+0x160>)
 80024d6:	4a39      	ldr	r2, [pc, #228]	; (80025bc <main+0x164>)
 80024d8:	605a      	str	r2, [r3, #4]
	xl320.serial.receive  = uart_half_duplex_receive;
 80024da:	4b37      	ldr	r3, [pc, #220]	; (80025b8 <main+0x160>)
 80024dc:	4a38      	ldr	r2, [pc, #224]	; (80025c0 <main+0x168>)
 80024de:	609a      	str	r2, [r3, #8]
	sem_taskServo = xSemaphoreCreateBinary();
 80024e0:	2203      	movs	r2, #3
 80024e2:	2100      	movs	r1, #0
 80024e4:	2001      	movs	r0, #1
 80024e6:	f004 fea3 	bl	8007230 <xQueueGenericCreate>
 80024ea:	0002      	movs	r2, r0
 80024ec:	4b35      	ldr	r3, [pc, #212]	; (80025c4 <main+0x16c>)
 80024ee:	601a      	str	r2, [r3, #0]
	sem_taskAsserv = xSemaphoreCreateBinary();
 80024f0:	2203      	movs	r2, #3
 80024f2:	2100      	movs	r1, #0
 80024f4:	2001      	movs	r0, #1
 80024f6:	f004 fe9b 	bl	8007230 <xQueueGenericCreate>
 80024fa:	0002      	movs	r2, r0
 80024fc:	4b32      	ldr	r3, [pc, #200]	; (80025c8 <main+0x170>)
 80024fe:	601a      	str	r2, [r3, #0]
	sem_taskMoteur = xSemaphoreCreateBinary();
 8002500:	2203      	movs	r2, #3
 8002502:	2100      	movs	r1, #0
 8002504:	2001      	movs	r0, #1
 8002506:	f004 fe93 	bl	8007230 <xQueueGenericCreate>
 800250a:	0002      	movs	r2, r0
 800250c:	4b2f      	ldr	r3, [pc, #188]	; (80025cc <main+0x174>)
 800250e:	601a      	str	r2, [r3, #0]
	sem_taskSensorColor = xSemaphoreCreateBinary();
 8002510:	2203      	movs	r2, #3
 8002512:	2100      	movs	r1, #0
 8002514:	2001      	movs	r0, #1
 8002516:	f004 fe8b 	bl	8007230 <xQueueGenericCreate>
 800251a:	0002      	movs	r2, r0
 800251c:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <main+0x178>)
 800251e:	601a      	str	r2, [r3, #0]
	sem_taskSensorTof = xSemaphoreCreateBinary();
 8002520:	2203      	movs	r2, #3
 8002522:	2100      	movs	r1, #0
 8002524:	2001      	movs	r0, #1
 8002526:	f004 fe83 	bl	8007230 <xQueueGenericCreate>
 800252a:	0002      	movs	r2, r0
 800252c:	4b29      	ldr	r3, [pc, #164]	; (80025d4 <main+0x17c>)
 800252e:	601a      	str	r2, [r3, #0]
	sem_taskSync = xSemaphoreCreateBinary();
 8002530:	2203      	movs	r2, #3
 8002532:	2100      	movs	r1, #0
 8002534:	2001      	movs	r0, #1
 8002536:	f004 fe7b 	bl	8007230 <xQueueGenericCreate>
 800253a:	0002      	movs	r2, r0
 800253c:	4b26      	ldr	r3, [pc, #152]	; (80025d8 <main+0x180>)
 800253e:	601a      	str	r2, [r3, #0]
	xl320_init(&xl320, 1, BR_1M);
 8002540:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <main+0x160>)
 8002542:	2203      	movs	r2, #3
 8002544:	2101      	movs	r1, #1
 8002546:	0018      	movs	r0, r3
 8002548:	f000 ff50 	bl	80033ec <xl320_init>
	xl320_setSpeed(&xl320, 20);
 800254c:	4a23      	ldr	r2, [pc, #140]	; (80025dc <main+0x184>)
 800254e:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <main+0x160>)
 8002550:	1c11      	adds	r1, r2, #0
 8002552:	0018      	movs	r0, r3
 8002554:	f001 f8da 	bl	800370c <xl320_setSpeed>
	xl320_torqueEnable(&xl320);
 8002558:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <main+0x160>)
 800255a:	0018      	movs	r0, r3
 800255c:	f001 f918 	bl	8003790 <xl320_torqueEnable>
	xl320_setGoalPosition(&xl320, 0);
 8002560:	2200      	movs	r2, #0
 8002562:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <main+0x160>)
 8002564:	1c11      	adds	r1, r2, #0
 8002566:	0018      	movs	r0, r3
 8002568:	f001 f898 	bl	800369c <xl320_setGoalPosition>
		}
	}

	if (xTaskCreate(taskServoMoteur, "Tache Servo moteur", STACK_SERVO_SIZE, NULL, 6, &h_taskServoMoteur) != pdPASS){
 800256c:	003b      	movs	r3, r7
 800256e:	2201      	movs	r2, #1
 8002570:	4313      	orrs	r3, r2
 8002572:	0018      	movs	r0, r3
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	005a      	lsls	r2, r3, #1
 8002578:	4919      	ldr	r1, [pc, #100]	; (80025e0 <main+0x188>)
 800257a:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <main+0x18c>)
 800257c:	9301      	str	r3, [sp, #4]
 800257e:	2306      	movs	r3, #6
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	2300      	movs	r3, #0
 8002584:	f004 fea4 	bl	80072d0 <xTaskCreate>
 8002588:	0003      	movs	r3, r0
 800258a:	2b01      	cmp	r3, #1
 800258c:	d003      	beq.n	8002596 <main+0x13e>
		printf("TaskServoMoteur not created");
 800258e:	4b16      	ldr	r3, [pc, #88]	; (80025e8 <main+0x190>)
 8002590:	0018      	movs	r0, r3
 8002592:	f006 fdcf 	bl	8009134 <iprintf>
		if (xTaskCreate(taskServoMoteur, "Tache Servo moteur", STACK_SERVO_SIZE, NULL, 6, &h_taskServoMoteur) != pdPASS){
			printf("TaskServoMoteur not created");
		}
	}
	 */
	vTaskStartScheduler();
 8002596:	f004 ffef 	bl	8007578 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 800259a:	f7ff fecb 	bl	8002334 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 800259e:	f004 fd06 	bl	8006fae <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80025a2:	e7fe      	b.n	80025a2 <main+0x14a>
 80025a4:	0800ce10 	.word	0x0800ce10
 80025a8:	08002415 	.word	0x08002415
 80025ac:	200002c8 	.word	0x200002c8
 80025b0:	20000230 	.word	0x20000230
 80025b4:	2000027c 	.word	0x2000027c
 80025b8:	20000204 	.word	0x20000204
 80025bc:	080030e9 	.word	0x080030e9
 80025c0:	08003121 	.word	0x08003121
 80025c4:	20000214 	.word	0x20000214
 80025c8:	2000021c 	.word	0x2000021c
 80025cc:	20000218 	.word	0x20000218
 80025d0:	20000224 	.word	0x20000224
 80025d4:	20000220 	.word	0x20000220
 80025d8:	20000228 	.word	0x20000228
 80025dc:	41a00000 	.word	0x41a00000
 80025e0:	0800ce24 	.word	0x0800ce24
 80025e4:	20000210 	.word	0x20000210
 80025e8:	0800ce38 	.word	0x0800ce38

080025ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b093      	sub	sp, #76	; 0x4c
 80025f0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025f2:	2414      	movs	r4, #20
 80025f4:	193b      	adds	r3, r7, r4
 80025f6:	0018      	movs	r0, r3
 80025f8:	2334      	movs	r3, #52	; 0x34
 80025fa:	001a      	movs	r2, r3
 80025fc:	2100      	movs	r1, #0
 80025fe:	f005 fe38 	bl	8008272 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	0018      	movs	r0, r3
 8002606:	2310      	movs	r3, #16
 8002608:	001a      	movs	r2, r3
 800260a:	2100      	movs	r1, #0
 800260c:	f005 fe31 	bl	8008272 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	0018      	movs	r0, r3
 8002616:	f001 fbc5 	bl	8003da4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800261a:	193b      	adds	r3, r7, r4
 800261c:	2202      	movs	r2, #2
 800261e:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002620:	193b      	adds	r3, r7, r4
 8002622:	2280      	movs	r2, #128	; 0x80
 8002624:	0052      	lsls	r2, r2, #1
 8002626:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002628:	193b      	adds	r3, r7, r4
 800262a:	2200      	movs	r2, #0
 800262c:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800262e:	193b      	adds	r3, r7, r4
 8002630:	2240      	movs	r2, #64	; 0x40
 8002632:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002634:	193b      	adds	r3, r7, r4
 8002636:	2200      	movs	r2, #0
 8002638:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800263a:	193b      	adds	r3, r7, r4
 800263c:	0018      	movs	r0, r3
 800263e:	f001 fbfd 	bl	8003e3c <HAL_RCC_OscConfig>
 8002642:	1e03      	subs	r3, r0, #0
 8002644:	d001      	beq.n	800264a <SystemClock_Config+0x5e>
	{
		Error_Handler();
 8002646:	f000 f819 	bl	800267c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	2207      	movs	r2, #7
 800264e:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002650:	1d3b      	adds	r3, r7, #4
 8002652:	2200      	movs	r2, #0
 8002654:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002656:	1d3b      	adds	r3, r7, #4
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	2200      	movs	r2, #0
 8002660:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002662:	1d3b      	adds	r3, r7, #4
 8002664:	2100      	movs	r1, #0
 8002666:	0018      	movs	r0, r3
 8002668:	f001 fef8 	bl	800445c <HAL_RCC_ClockConfig>
 800266c:	1e03      	subs	r3, r0, #0
 800266e:	d001      	beq.n	8002674 <SystemClock_Config+0x88>
	{
		Error_Handler();
 8002670:	f000 f804 	bl	800267c <Error_Handler>
	}
}
 8002674:	46c0      	nop			; (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	b013      	add	sp, #76	; 0x4c
 800267a:	bd90      	pop	{r4, r7, pc}

0800267c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002680:	b672      	cpsid	i
}
 8002682:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002684:	e7fe      	b.n	8002684 <Error_Handler+0x8>
	...

08002688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268e:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <HAL_MspInit+0x50>)
 8002690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002692:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <HAL_MspInit+0x50>)
 8002694:	2101      	movs	r1, #1
 8002696:	430a      	orrs	r2, r1
 8002698:	641a      	str	r2, [r3, #64]	; 0x40
 800269a:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <HAL_MspInit+0x50>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	2201      	movs	r2, #1
 80026a0:	4013      	ands	r3, r2
 80026a2:	607b      	str	r3, [r7, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a6:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <HAL_MspInit+0x50>)
 80026a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026aa:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_MspInit+0x50>)
 80026ac:	2180      	movs	r1, #128	; 0x80
 80026ae:	0549      	lsls	r1, r1, #21
 80026b0:	430a      	orrs	r2, r1
 80026b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80026b4:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <HAL_MspInit+0x50>)
 80026b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	055b      	lsls	r3, r3, #21
 80026bc:	4013      	ands	r3, r2
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80026c2:	2302      	movs	r3, #2
 80026c4:	425b      	negs	r3, r3
 80026c6:	2200      	movs	r2, #0
 80026c8:	2103      	movs	r1, #3
 80026ca:	0018      	movs	r0, r3
 80026cc:	f001 f9d4 	bl	8003a78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026d0:	46c0      	nop			; (mov r8, r8)
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b002      	add	sp, #8
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40021000 	.word	0x40021000

080026dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026e0:	e7fe      	b.n	80026e0 <NMI_Handler+0x4>

080026e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026e6:	e7fe      	b.n	80026e6 <HardFault_Handler+0x4>

080026e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ec:	f001 f8fc 	bl	80038e8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80026f0:	f005 fa20 	bl	8007b34 <xTaskGetSchedulerState>
 80026f4:	0003      	movs	r3, r0
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d001      	beq.n	80026fe <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80026fa:	f005 fb85 	bl	8007e08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002708:	4b03      	ldr	r3, [pc, #12]	; (8002718 <TIM7_IRQHandler+0x14>)
 800270a:	0018      	movs	r0, r3
 800270c:	f002 fc36 	bl	8004f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002710:	46c0      	nop			; (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	200002c8 	.word	0x200002c8

0800271c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
	return 1;
 8002720:	2301      	movs	r3, #1
}
 8002722:	0018      	movs	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <_kill>:

int _kill(int pid, int sig)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002732:	f005 fd57 	bl	80081e4 <__errno>
 8002736:	0003      	movs	r3, r0
 8002738:	2216      	movs	r2, #22
 800273a:	601a      	str	r2, [r3, #0]
	return -1;
 800273c:	2301      	movs	r3, #1
 800273e:	425b      	negs	r3, r3
}
 8002740:	0018      	movs	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	b002      	add	sp, #8
 8002746:	bd80      	pop	{r7, pc}

08002748 <_exit>:

void _exit (int status)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002750:	2301      	movs	r3, #1
 8002752:	425a      	negs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	0011      	movs	r1, r2
 8002758:	0018      	movs	r0, r3
 800275a:	f7ff ffe5 	bl	8002728 <_kill>
	while (1) {}		/* Make sure we hang here */
 800275e:	e7fe      	b.n	800275e <_exit+0x16>

08002760 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	e00a      	b.n	8002788 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002772:	e000      	b.n	8002776 <_read+0x16>
 8002774:	bf00      	nop
 8002776:	0001      	movs	r1, r0
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	60ba      	str	r2, [r7, #8]
 800277e:	b2ca      	uxtb	r2, r1
 8002780:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	3301      	adds	r3, #1
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	429a      	cmp	r2, r3
 800278e:	dbf0      	blt.n	8002772 <_read+0x12>
	}

return len;
 8002790:	687b      	ldr	r3, [r7, #4]
}
 8002792:	0018      	movs	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	b006      	add	sp, #24
 8002798:	bd80      	pop	{r7, pc}

0800279a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b086      	sub	sp, #24
 800279e:	af00      	add	r7, sp, #0
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	e009      	b.n	80027c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	60ba      	str	r2, [r7, #8]
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	0018      	movs	r0, r3
 80027b6:	f7ff fe19 	bl	80023ec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	3301      	adds	r3, #1
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	dbf1      	blt.n	80027ac <_write+0x12>
	}
	return len;
 80027c8:	687b      	ldr	r3, [r7, #4]
}
 80027ca:	0018      	movs	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b006      	add	sp, #24
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <_close>:

int _close(int file)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
	return -1;
 80027da:	2301      	movs	r3, #1
 80027dc:	425b      	negs	r3, r3
}
 80027de:	0018      	movs	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b002      	add	sp, #8
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	2280      	movs	r2, #128	; 0x80
 80027f4:	0192      	lsls	r2, r2, #6
 80027f6:	605a      	str	r2, [r3, #4]
	return 0;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	0018      	movs	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	b002      	add	sp, #8
 8002800:	bd80      	pop	{r7, pc}

08002802 <_isatty>:

int _isatty(int file)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
	return 1;
 800280a:	2301      	movs	r3, #1
}
 800280c:	0018      	movs	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	b002      	add	sp, #8
 8002812:	bd80      	pop	{r7, pc}

08002814 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
	return 0;
 8002820:	2300      	movs	r3, #0
}
 8002822:	0018      	movs	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	b004      	add	sp, #16
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002834:	4a14      	ldr	r2, [pc, #80]	; (8002888 <_sbrk+0x5c>)
 8002836:	4b15      	ldr	r3, [pc, #84]	; (800288c <_sbrk+0x60>)
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002840:	4b13      	ldr	r3, [pc, #76]	; (8002890 <_sbrk+0x64>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d102      	bne.n	800284e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002848:	4b11      	ldr	r3, [pc, #68]	; (8002890 <_sbrk+0x64>)
 800284a:	4a12      	ldr	r2, [pc, #72]	; (8002894 <_sbrk+0x68>)
 800284c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800284e:	4b10      	ldr	r3, [pc, #64]	; (8002890 <_sbrk+0x64>)
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	18d3      	adds	r3, r2, r3
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	429a      	cmp	r2, r3
 800285a:	d207      	bcs.n	800286c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800285c:	f005 fcc2 	bl	80081e4 <__errno>
 8002860:	0003      	movs	r3, r0
 8002862:	220c      	movs	r2, #12
 8002864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002866:	2301      	movs	r3, #1
 8002868:	425b      	negs	r3, r3
 800286a:	e009      	b.n	8002880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800286c:	4b08      	ldr	r3, [pc, #32]	; (8002890 <_sbrk+0x64>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002872:	4b07      	ldr	r3, [pc, #28]	; (8002890 <_sbrk+0x64>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	18d2      	adds	r2, r2, r3
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <_sbrk+0x64>)
 800287c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800287e:	68fb      	ldr	r3, [r7, #12]
}
 8002880:	0018      	movs	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	b006      	add	sp, #24
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20009000 	.word	0x20009000
 800288c:	00000400 	.word	0x00000400
 8002890:	2000022c 	.word	0x2000022c
 8002894:	20001280 	.word	0x20001280

08002898 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800289c:	46c0      	nop			; (mov r8, r8)
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b08d      	sub	sp, #52	; 0x34
 80028a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80028aa:	240c      	movs	r4, #12
 80028ac:	193b      	adds	r3, r7, r4
 80028ae:	0018      	movs	r0, r3
 80028b0:	2324      	movs	r3, #36	; 0x24
 80028b2:	001a      	movs	r2, r3
 80028b4:	2100      	movs	r1, #0
 80028b6:	f005 fcdc 	bl	8008272 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ba:	003b      	movs	r3, r7
 80028bc:	0018      	movs	r0, r3
 80028be:	230c      	movs	r3, #12
 80028c0:	001a      	movs	r2, r3
 80028c2:	2100      	movs	r1, #0
 80028c4:	f005 fcd5 	bl	8008272 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028c8:	4b28      	ldr	r3, [pc, #160]	; (800296c <MX_TIM1_Init+0xc8>)
 80028ca:	4a29      	ldr	r2, [pc, #164]	; (8002970 <MX_TIM1_Init+0xcc>)
 80028cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80028ce:	4b27      	ldr	r3, [pc, #156]	; (800296c <MX_TIM1_Init+0xc8>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d4:	4b25      	ldr	r3, [pc, #148]	; (800296c <MX_TIM1_Init+0xc8>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80028da:	4b24      	ldr	r3, [pc, #144]	; (800296c <MX_TIM1_Init+0xc8>)
 80028dc:	4a25      	ldr	r2, [pc, #148]	; (8002974 <MX_TIM1_Init+0xd0>)
 80028de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e0:	4b22      	ldr	r3, [pc, #136]	; (800296c <MX_TIM1_Init+0xc8>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028e6:	4b21      	ldr	r3, [pc, #132]	; (800296c <MX_TIM1_Init+0xc8>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ec:	4b1f      	ldr	r3, [pc, #124]	; (800296c <MX_TIM1_Init+0xc8>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80028f2:	0021      	movs	r1, r4
 80028f4:	187b      	adds	r3, r7, r1
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028fa:	187b      	adds	r3, r7, r1
 80028fc:	2200      	movs	r2, #0
 80028fe:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002900:	187b      	adds	r3, r7, r1
 8002902:	2201      	movs	r2, #1
 8002904:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002906:	187b      	adds	r3, r7, r1
 8002908:	2200      	movs	r2, #0
 800290a:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 800290c:	187b      	adds	r3, r7, r1
 800290e:	2200      	movs	r2, #0
 8002910:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002912:	187b      	adds	r3, r7, r1
 8002914:	2200      	movs	r2, #0
 8002916:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002918:	187b      	adds	r3, r7, r1
 800291a:	2201      	movs	r2, #1
 800291c:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800291e:	187b      	adds	r3, r7, r1
 8002920:	2200      	movs	r2, #0
 8002922:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8002924:	187b      	adds	r3, r7, r1
 8002926:	2200      	movs	r2, #0
 8002928:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800292a:	187a      	adds	r2, r7, r1
 800292c:	4b0f      	ldr	r3, [pc, #60]	; (800296c <MX_TIM1_Init+0xc8>)
 800292e:	0011      	movs	r1, r2
 8002930:	0018      	movs	r0, r3
 8002932:	f002 f9d7 	bl	8004ce4 <HAL_TIM_Encoder_Init>
 8002936:	1e03      	subs	r3, r0, #0
 8002938:	d001      	beq.n	800293e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800293a:	f7ff fe9f 	bl	800267c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800293e:	003b      	movs	r3, r7
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002944:	003b      	movs	r3, r7
 8002946:	2200      	movs	r2, #0
 8002948:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800294a:	003b      	movs	r3, r7
 800294c:	2200      	movs	r2, #0
 800294e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002950:	003a      	movs	r2, r7
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <MX_TIM1_Init+0xc8>)
 8002954:	0011      	movs	r1, r2
 8002956:	0018      	movs	r0, r3
 8002958:	f003 fa8c 	bl	8005e74 <HAL_TIMEx_MasterConfigSynchronization>
 800295c:	1e03      	subs	r3, r0, #0
 800295e:	d001      	beq.n	8002964 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8002960:	f7ff fe8c 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002964:	46c0      	nop			; (mov r8, r8)
 8002966:	46bd      	mov	sp, r7
 8002968:	b00d      	add	sp, #52	; 0x34
 800296a:	bd90      	pop	{r4, r7, pc}
 800296c:	20000230 	.word	0x20000230
 8002970:	40012c00 	.word	0x40012c00
 8002974:	0000ffff 	.word	0x0000ffff

08002978 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b08d      	sub	sp, #52	; 0x34
 800297c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800297e:	240c      	movs	r4, #12
 8002980:	193b      	adds	r3, r7, r4
 8002982:	0018      	movs	r0, r3
 8002984:	2324      	movs	r3, #36	; 0x24
 8002986:	001a      	movs	r2, r3
 8002988:	2100      	movs	r1, #0
 800298a:	f005 fc72 	bl	8008272 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800298e:	003b      	movs	r3, r7
 8002990:	0018      	movs	r0, r3
 8002992:	230c      	movs	r3, #12
 8002994:	001a      	movs	r2, r3
 8002996:	2100      	movs	r1, #0
 8002998:	f005 fc6b 	bl	8008272 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800299c:	4b25      	ldr	r3, [pc, #148]	; (8002a34 <MX_TIM3_Init+0xbc>)
 800299e:	4a26      	ldr	r2, [pc, #152]	; (8002a38 <MX_TIM3_Init+0xc0>)
 80029a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80029a2:	4b24      	ldr	r3, [pc, #144]	; (8002a34 <MX_TIM3_Init+0xbc>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029a8:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <MX_TIM3_Init+0xbc>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80029ae:	4b21      	ldr	r3, [pc, #132]	; (8002a34 <MX_TIM3_Init+0xbc>)
 80029b0:	4a22      	ldr	r2, [pc, #136]	; (8002a3c <MX_TIM3_Init+0xc4>)
 80029b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029b4:	4b1f      	ldr	r3, [pc, #124]	; (8002a34 <MX_TIM3_Init+0xbc>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ba:	4b1e      	ldr	r3, [pc, #120]	; (8002a34 <MX_TIM3_Init+0xbc>)
 80029bc:	2200      	movs	r2, #0
 80029be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80029c0:	0021      	movs	r1, r4
 80029c2:	187b      	adds	r3, r7, r1
 80029c4:	2201      	movs	r2, #1
 80029c6:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029c8:	187b      	adds	r3, r7, r1
 80029ca:	2200      	movs	r2, #0
 80029cc:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029ce:	187b      	adds	r3, r7, r1
 80029d0:	2201      	movs	r2, #1
 80029d2:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029d4:	187b      	adds	r3, r7, r1
 80029d6:	2200      	movs	r2, #0
 80029d8:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80029da:	187b      	adds	r3, r7, r1
 80029dc:	2200      	movs	r2, #0
 80029de:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	2200      	movs	r2, #0
 80029e4:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029e6:	187b      	adds	r3, r7, r1
 80029e8:	2201      	movs	r2, #1
 80029ea:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029ec:	187b      	adds	r3, r7, r1
 80029ee:	2200      	movs	r2, #0
 80029f0:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80029f2:	187b      	adds	r3, r7, r1
 80029f4:	2200      	movs	r2, #0
 80029f6:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80029f8:	187a      	adds	r2, r7, r1
 80029fa:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <MX_TIM3_Init+0xbc>)
 80029fc:	0011      	movs	r1, r2
 80029fe:	0018      	movs	r0, r3
 8002a00:	f002 f970 	bl	8004ce4 <HAL_TIM_Encoder_Init>
 8002a04:	1e03      	subs	r3, r0, #0
 8002a06:	d001      	beq.n	8002a0c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002a08:	f7ff fe38 	bl	800267c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a0c:	003b      	movs	r3, r7
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a12:	003b      	movs	r3, r7
 8002a14:	2200      	movs	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a18:	003a      	movs	r2, r7
 8002a1a:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <MX_TIM3_Init+0xbc>)
 8002a1c:	0011      	movs	r1, r2
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f003 fa28 	bl	8005e74 <HAL_TIMEx_MasterConfigSynchronization>
 8002a24:	1e03      	subs	r3, r0, #0
 8002a26:	d001      	beq.n	8002a2c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002a28:	f7ff fe28 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a2c:	46c0      	nop			; (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b00d      	add	sp, #52	; 0x34
 8002a32:	bd90      	pop	{r4, r7, pc}
 8002a34:	2000027c 	.word	0x2000027c
 8002a38:	40000400 	.word	0x40000400
 8002a3c:	0000ffff 	.word	0x0000ffff

08002a40 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a46:	1d3b      	adds	r3, r7, #4
 8002a48:	0018      	movs	r0, r3
 8002a4a:	230c      	movs	r3, #12
 8002a4c:	001a      	movs	r2, r3
 8002a4e:	2100      	movs	r1, #0
 8002a50:	f005 fc0f 	bl	8008272 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002a54:	4b15      	ldr	r3, [pc, #84]	; (8002aac <MX_TIM7_Init+0x6c>)
 8002a56:	4a16      	ldr	r2, [pc, #88]	; (8002ab0 <MX_TIM7_Init+0x70>)
 8002a58:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 64;
 8002a5a:	4b14      	ldr	r3, [pc, #80]	; (8002aac <MX_TIM7_Init+0x6c>)
 8002a5c:	2240      	movs	r2, #64	; 0x40
 8002a5e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a60:	4b12      	ldr	r3, [pc, #72]	; (8002aac <MX_TIM7_Init+0x6c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 30000;
 8002a66:	4b11      	ldr	r3, [pc, #68]	; (8002aac <MX_TIM7_Init+0x6c>)
 8002a68:	4a12      	ldr	r2, [pc, #72]	; (8002ab4 <MX_TIM7_Init+0x74>)
 8002a6a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <MX_TIM7_Init+0x6c>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <MX_TIM7_Init+0x6c>)
 8002a74:	0018      	movs	r0, r3
 8002a76:	f001 ffcf 	bl	8004a18 <HAL_TIM_Base_Init>
 8002a7a:	1e03      	subs	r3, r0, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002a7e:	f7ff fdfd 	bl	800267c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a82:	1d3b      	adds	r3, r7, #4
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002a8e:	1d3a      	adds	r2, r7, #4
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <MX_TIM7_Init+0x6c>)
 8002a92:	0011      	movs	r1, r2
 8002a94:	0018      	movs	r0, r3
 8002a96:	f003 f9ed 	bl	8005e74 <HAL_TIMEx_MasterConfigSynchronization>
 8002a9a:	1e03      	subs	r3, r0, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8002a9e:	f7ff fded 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002aa2:	46c0      	nop			; (mov r8, r8)
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	b004      	add	sp, #16
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	200002c8 	.word	0x200002c8
 8002ab0:	40001400 	.word	0x40001400
 8002ab4:	00007530 	.word	0x00007530

08002ab8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002abe:	003b      	movs	r3, r7
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	2310      	movs	r3, #16
 8002ac4:	001a      	movs	r2, r3
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	f005 fbd3 	bl	8008272 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002acc:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <MX_TIM14_Init+0x8c>)
 8002ace:	4a1e      	ldr	r2, [pc, #120]	; (8002b48 <MX_TIM14_Init+0x90>)
 8002ad0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8002ad2:	4b1c      	ldr	r3, [pc, #112]	; (8002b44 <MX_TIM14_Init+0x8c>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad8:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <MX_TIM14_Init+0x8c>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8002ade:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <MX_TIM14_Init+0x8c>)
 8002ae0:	4a1a      	ldr	r2, [pc, #104]	; (8002b4c <MX_TIM14_Init+0x94>)
 8002ae2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ae4:	4b17      	ldr	r3, [pc, #92]	; (8002b44 <MX_TIM14_Init+0x8c>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aea:	4b16      	ldr	r3, [pc, #88]	; (8002b44 <MX_TIM14_Init+0x8c>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002af0:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <MX_TIM14_Init+0x8c>)
 8002af2:	0018      	movs	r0, r3
 8002af4:	f001 ff90 	bl	8004a18 <HAL_TIM_Base_Init>
 8002af8:	1e03      	subs	r3, r0, #0
 8002afa:	d001      	beq.n	8002b00 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8002afc:	f7ff fdbe 	bl	800267c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 8002b00:	4b10      	ldr	r3, [pc, #64]	; (8002b44 <MX_TIM14_Init+0x8c>)
 8002b02:	0018      	movs	r0, r3
 8002b04:	f002 f88e 	bl	8004c24 <HAL_TIM_IC_Init>
 8002b08:	1e03      	subs	r3, r0, #0
 8002b0a:	d001      	beq.n	8002b10 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8002b0c:	f7ff fdb6 	bl	800267c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002b10:	003b      	movs	r3, r7
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b16:	003b      	movs	r3, r7
 8002b18:	2201      	movs	r2, #1
 8002b1a:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b1c:	003b      	movs	r3, r7
 8002b1e:	2200      	movs	r2, #0
 8002b20:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8002b22:	003b      	movs	r3, r7
 8002b24:	2200      	movs	r2, #0
 8002b26:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002b28:	0039      	movs	r1, r7
 8002b2a:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <MX_TIM14_Init+0x8c>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f002 fb56 	bl	80051e0 <HAL_TIM_IC_ConfigChannel>
 8002b34:	1e03      	subs	r3, r0, #0
 8002b36:	d001      	beq.n	8002b3c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8002b38:	f7ff fda0 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002b3c:	46c0      	nop			; (mov r8, r8)
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	b004      	add	sp, #16
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000314 	.word	0x20000314
 8002b48:	40002000 	.word	0x40002000
 8002b4c:	0000ffff 	.word	0x0000ffff

08002b50 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b098      	sub	sp, #96	; 0x60
 8002b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b56:	2354      	movs	r3, #84	; 0x54
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	230c      	movs	r3, #12
 8002b5e:	001a      	movs	r2, r3
 8002b60:	2100      	movs	r1, #0
 8002b62:	f005 fb86 	bl	8008272 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b66:	2338      	movs	r3, #56	; 0x38
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	231c      	movs	r3, #28
 8002b6e:	001a      	movs	r2, r3
 8002b70:	2100      	movs	r1, #0
 8002b72:	f005 fb7e 	bl	8008272 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b76:	1d3b      	adds	r3, r7, #4
 8002b78:	0018      	movs	r0, r3
 8002b7a:	2334      	movs	r3, #52	; 0x34
 8002b7c:	001a      	movs	r2, r3
 8002b7e:	2100      	movs	r1, #0
 8002b80:	f005 fb77 	bl	8008272 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002b84:	4b3c      	ldr	r3, [pc, #240]	; (8002c78 <MX_TIM15_Init+0x128>)
 8002b86:	4a3d      	ldr	r2, [pc, #244]	; (8002c7c <MX_TIM15_Init+0x12c>)
 8002b88:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2-1;
 8002b8a:	4b3b      	ldr	r3, [pc, #236]	; (8002c78 <MX_TIM15_Init+0x128>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b90:	4b39      	ldr	r3, [pc, #228]	; (8002c78 <MX_TIM15_Init+0x128>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1500-1;
 8002b96:	4b38      	ldr	r3, [pc, #224]	; (8002c78 <MX_TIM15_Init+0x128>)
 8002b98:	4a39      	ldr	r2, [pc, #228]	; (8002c80 <MX_TIM15_Init+0x130>)
 8002b9a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b9c:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <MX_TIM15_Init+0x128>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002ba2:	4b35      	ldr	r3, [pc, #212]	; (8002c78 <MX_TIM15_Init+0x128>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ba8:	4b33      	ldr	r3, [pc, #204]	; (8002c78 <MX_TIM15_Init+0x128>)
 8002baa:	2280      	movs	r2, #128	; 0x80
 8002bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002bae:	4b32      	ldr	r3, [pc, #200]	; (8002c78 <MX_TIM15_Init+0x128>)
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f001 ffdf 	bl	8004b74 <HAL_TIM_PWM_Init>
 8002bb6:	1e03      	subs	r3, r0, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8002bba:	f7ff fd5f 	bl	800267c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bbe:	2154      	movs	r1, #84	; 0x54
 8002bc0:	187b      	adds	r3, r7, r1
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc6:	187b      	adds	r3, r7, r1
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002bcc:	187a      	adds	r2, r7, r1
 8002bce:	4b2a      	ldr	r3, [pc, #168]	; (8002c78 <MX_TIM15_Init+0x128>)
 8002bd0:	0011      	movs	r1, r2
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f003 f94e 	bl	8005e74 <HAL_TIMEx_MasterConfigSynchronization>
 8002bd8:	1e03      	subs	r3, r0, #0
 8002bda:	d001      	beq.n	8002be0 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8002bdc:	f7ff fd4e 	bl	800267c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002be0:	2138      	movs	r1, #56	; 0x38
 8002be2:	187b      	adds	r3, r7, r1
 8002be4:	2260      	movs	r2, #96	; 0x60
 8002be6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002be8:	187b      	adds	r3, r7, r1
 8002bea:	2200      	movs	r2, #0
 8002bec:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bee:	187b      	adds	r3, r7, r1
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bf4:	187b      	adds	r3, r7, r1
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bfa:	187b      	adds	r3, r7, r1
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c00:	187b      	adds	r3, r7, r1
 8002c02:	2200      	movs	r2, #0
 8002c04:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c06:	187b      	adds	r3, r7, r1
 8002c08:	2200      	movs	r2, #0
 8002c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c0c:	1879      	adds	r1, r7, r1
 8002c0e:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <MX_TIM15_Init+0x128>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	0018      	movs	r0, r3
 8002c14:	f002 fb88 	bl	8005328 <HAL_TIM_PWM_ConfigChannel>
 8002c18:	1e03      	subs	r3, r0, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8002c1c:	f7ff fd2e 	bl	800267c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c20:	1d3b      	adds	r3, r7, #4
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c26:	1d3b      	adds	r3, r7, #4
 8002c28:	2200      	movs	r2, #0
 8002c2a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c2c:	1d3b      	adds	r3, r7, #4
 8002c2e:	2200      	movs	r2, #0
 8002c30:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	2200      	movs	r2, #0
 8002c36:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c38:	1d3b      	adds	r3, r7, #4
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c3e:	1d3b      	adds	r3, r7, #4
 8002c40:	2280      	movs	r2, #128	; 0x80
 8002c42:	0192      	lsls	r2, r2, #6
 8002c44:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c46:	1d3b      	adds	r3, r7, #4
 8002c48:	2200      	movs	r2, #0
 8002c4a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c4c:	1d3b      	adds	r3, r7, #4
 8002c4e:	2200      	movs	r2, #0
 8002c50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002c52:	1d3a      	adds	r2, r7, #4
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <MX_TIM15_Init+0x128>)
 8002c56:	0011      	movs	r1, r2
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f003 f973 	bl	8005f44 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c5e:	1e03      	subs	r3, r0, #0
 8002c60:	d001      	beq.n	8002c66 <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 8002c62:	f7ff fd0b 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002c66:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <MX_TIM15_Init+0x128>)
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f000 f9b1 	bl	8002fd0 <HAL_TIM_MspPostInit>

}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b018      	add	sp, #96	; 0x60
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	20000360 	.word	0x20000360
 8002c7c:	40014000 	.word	0x40014000
 8002c80:	000005db 	.word	0x000005db

08002c84 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b094      	sub	sp, #80	; 0x50
 8002c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c8a:	2334      	movs	r3, #52	; 0x34
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	0018      	movs	r0, r3
 8002c90:	231c      	movs	r3, #28
 8002c92:	001a      	movs	r2, r3
 8002c94:	2100      	movs	r1, #0
 8002c96:	f005 faec 	bl	8008272 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c9a:	003b      	movs	r3, r7
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	2334      	movs	r3, #52	; 0x34
 8002ca0:	001a      	movs	r2, r3
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	f005 fae5 	bl	8008272 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002ca8:	4b37      	ldr	r3, [pc, #220]	; (8002d88 <MX_TIM16_Init+0x104>)
 8002caa:	4a38      	ldr	r2, [pc, #224]	; (8002d8c <MX_TIM16_Init+0x108>)
 8002cac:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2-1;
 8002cae:	4b36      	ldr	r3, [pc, #216]	; (8002d88 <MX_TIM16_Init+0x104>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb4:	4b34      	ldr	r3, [pc, #208]	; (8002d88 <MX_TIM16_Init+0x104>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1500-1;
 8002cba:	4b33      	ldr	r3, [pc, #204]	; (8002d88 <MX_TIM16_Init+0x104>)
 8002cbc:	4a34      	ldr	r2, [pc, #208]	; (8002d90 <MX_TIM16_Init+0x10c>)
 8002cbe:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cc0:	4b31      	ldr	r3, [pc, #196]	; (8002d88 <MX_TIM16_Init+0x104>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002cc6:	4b30      	ldr	r3, [pc, #192]	; (8002d88 <MX_TIM16_Init+0x104>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ccc:	4b2e      	ldr	r3, [pc, #184]	; (8002d88 <MX_TIM16_Init+0x104>)
 8002cce:	2280      	movs	r2, #128	; 0x80
 8002cd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002cd2:	4b2d      	ldr	r3, [pc, #180]	; (8002d88 <MX_TIM16_Init+0x104>)
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f001 fe9f 	bl	8004a18 <HAL_TIM_Base_Init>
 8002cda:	1e03      	subs	r3, r0, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8002cde:	f7ff fccd 	bl	800267c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002ce2:	4b29      	ldr	r3, [pc, #164]	; (8002d88 <MX_TIM16_Init+0x104>)
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f001 ff45 	bl	8004b74 <HAL_TIM_PWM_Init>
 8002cea:	1e03      	subs	r3, r0, #0
 8002cec:	d001      	beq.n	8002cf2 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8002cee:	f7ff fcc5 	bl	800267c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cf2:	2134      	movs	r1, #52	; 0x34
 8002cf4:	187b      	adds	r3, r7, r1
 8002cf6:	2260      	movs	r2, #96	; 0x60
 8002cf8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002cfa:	187b      	adds	r3, r7, r1
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d00:	187b      	adds	r3, r7, r1
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d06:	187b      	adds	r3, r7, r1
 8002d08:	2200      	movs	r2, #0
 8002d0a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d0c:	187b      	adds	r3, r7, r1
 8002d0e:	2200      	movs	r2, #0
 8002d10:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d12:	187b      	adds	r3, r7, r1
 8002d14:	2200      	movs	r2, #0
 8002d16:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d18:	187b      	adds	r3, r7, r1
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d1e:	1879      	adds	r1, r7, r1
 8002d20:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <MX_TIM16_Init+0x104>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	0018      	movs	r0, r3
 8002d26:	f002 faff 	bl	8005328 <HAL_TIM_PWM_ConfigChannel>
 8002d2a:	1e03      	subs	r3, r0, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8002d2e:	f7ff fca5 	bl	800267c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d32:	003b      	movs	r3, r7
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d38:	003b      	movs	r3, r7
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d3e:	003b      	movs	r3, r7
 8002d40:	2200      	movs	r2, #0
 8002d42:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d44:	003b      	movs	r3, r7
 8002d46:	2200      	movs	r2, #0
 8002d48:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d4a:	003b      	movs	r3, r7
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d50:	003b      	movs	r3, r7
 8002d52:	2280      	movs	r2, #128	; 0x80
 8002d54:	0192      	lsls	r2, r2, #6
 8002d56:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d58:	003b      	movs	r3, r7
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d5e:	003b      	movs	r3, r7
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002d64:	003a      	movs	r2, r7
 8002d66:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <MX_TIM16_Init+0x104>)
 8002d68:	0011      	movs	r1, r2
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f003 f8ea 	bl	8005f44 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d70:	1e03      	subs	r3, r0, #0
 8002d72:	d001      	beq.n	8002d78 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8002d74:	f7ff fc82 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002d78:	4b03      	ldr	r3, [pc, #12]	; (8002d88 <MX_TIM16_Init+0x104>)
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f000 f928 	bl	8002fd0 <HAL_TIM_MspPostInit>

}
 8002d80:	46c0      	nop			; (mov r8, r8)
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b014      	add	sp, #80	; 0x50
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	200003ac 	.word	0x200003ac
 8002d8c:	40014400 	.word	0x40014400
 8002d90:	000005db 	.word	0x000005db

08002d94 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002d94:	b590      	push	{r4, r7, lr}
 8002d96:	b08d      	sub	sp, #52	; 0x34
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9c:	241c      	movs	r4, #28
 8002d9e:	193b      	adds	r3, r7, r4
 8002da0:	0018      	movs	r0, r3
 8002da2:	2314      	movs	r3, #20
 8002da4:	001a      	movs	r2, r3
 8002da6:	2100      	movs	r1, #0
 8002da8:	f005 fa63 	bl	8008272 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a36      	ldr	r2, [pc, #216]	; (8002e8c <HAL_TIM_Encoder_MspInit+0xf8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d132      	bne.n	8002e1c <HAL_TIM_Encoder_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002db6:	4b36      	ldr	r3, [pc, #216]	; (8002e90 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dba:	4b35      	ldr	r3, [pc, #212]	; (8002e90 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002dbc:	2180      	movs	r1, #128	; 0x80
 8002dbe:	0109      	lsls	r1, r1, #4
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40
 8002dc4:	4b32      	ldr	r3, [pc, #200]	; (8002e90 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dc8:	2380      	movs	r3, #128	; 0x80
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
 8002dd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd2:	4b2f      	ldr	r3, [pc, #188]	; (8002e90 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002dd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dd6:	4b2e      	ldr	r3, [pc, #184]	; (8002e90 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002dd8:	2101      	movs	r1, #1
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	635a      	str	r2, [r3, #52]	; 0x34
 8002dde:	4b2c      	ldr	r3, [pc, #176]	; (8002e90 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de2:	2201      	movs	r2, #1
 8002de4:	4013      	ands	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002dea:	193b      	adds	r3, r7, r4
 8002dec:	22c0      	movs	r2, #192	; 0xc0
 8002dee:	0092      	lsls	r2, r2, #2
 8002df0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df2:	0021      	movs	r1, r4
 8002df4:	187b      	adds	r3, r7, r1
 8002df6:	2202      	movs	r2, #2
 8002df8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	187b      	adds	r3, r7, r1
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e00:	187b      	adds	r3, r7, r1
 8002e02:	2200      	movs	r2, #0
 8002e04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002e06:	187b      	adds	r3, r7, r1
 8002e08:	2202      	movs	r2, #2
 8002e0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e0c:	187a      	adds	r2, r7, r1
 8002e0e:	23a0      	movs	r3, #160	; 0xa0
 8002e10:	05db      	lsls	r3, r3, #23
 8002e12:	0011      	movs	r1, r2
 8002e14:	0018      	movs	r0, r3
 8002e16:	f000 fe61 	bl	8003adc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002e1a:	e033      	b.n	8002e84 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(tim_encoderHandle->Instance==TIM3)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1c      	ldr	r2, [pc, #112]	; (8002e94 <HAL_TIM_Encoder_MspInit+0x100>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d12e      	bne.n	8002e84 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e26:	4b1a      	ldr	r3, [pc, #104]	; (8002e90 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002e28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e2a:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002e2c:	2102      	movs	r1, #2
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e32:	4b17      	ldr	r3, [pc, #92]	; (8002e90 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e36:	2202      	movs	r2, #2
 8002e38:	4013      	ands	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e3e:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002e40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e42:	4b13      	ldr	r3, [pc, #76]	; (8002e90 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002e44:	2101      	movs	r1, #1
 8002e46:	430a      	orrs	r2, r1
 8002e48:	635a      	str	r2, [r3, #52]	; 0x34
 8002e4a:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4e:	2201      	movs	r2, #1
 8002e50:	4013      	ands	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e56:	211c      	movs	r1, #28
 8002e58:	187b      	adds	r3, r7, r1
 8002e5a:	22c0      	movs	r2, #192	; 0xc0
 8002e5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5e:	187b      	adds	r3, r7, r1
 8002e60:	2202      	movs	r2, #2
 8002e62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e64:	187b      	adds	r3, r7, r1
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6a:	187b      	adds	r3, r7, r1
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002e70:	187b      	adds	r3, r7, r1
 8002e72:	2201      	movs	r2, #1
 8002e74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e76:	187a      	adds	r2, r7, r1
 8002e78:	23a0      	movs	r3, #160	; 0xa0
 8002e7a:	05db      	lsls	r3, r3, #23
 8002e7c:	0011      	movs	r1, r2
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f000 fe2c 	bl	8003adc <HAL_GPIO_Init>
}
 8002e84:	46c0      	nop			; (mov r8, r8)
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b00d      	add	sp, #52	; 0x34
 8002e8a:	bd90      	pop	{r4, r7, pc}
 8002e8c:	40012c00 	.word	0x40012c00
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40000400 	.word	0x40000400

08002e98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08c      	sub	sp, #48	; 0x30
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea0:	231c      	movs	r3, #28
 8002ea2:	18fb      	adds	r3, r7, r3
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	2314      	movs	r3, #20
 8002ea8:	001a      	movs	r2, r3
 8002eaa:	2100      	movs	r1, #0
 8002eac:	f005 f9e1 	bl	8008272 <memset>
  if(tim_baseHandle->Instance==TIM7)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a32      	ldr	r2, [pc, #200]	; (8002f80 <HAL_TIM_Base_MspInit+0xe8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d114      	bne.n	8002ee4 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002eba:	4b32      	ldr	r3, [pc, #200]	; (8002f84 <HAL_TIM_Base_MspInit+0xec>)
 8002ebc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ebe:	4b31      	ldr	r3, [pc, #196]	; (8002f84 <HAL_TIM_Base_MspInit+0xec>)
 8002ec0:	2120      	movs	r1, #32
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ec6:	4b2f      	ldr	r3, [pc, #188]	; (8002f84 <HAL_TIM_Base_MspInit+0xec>)
 8002ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eca:	2220      	movs	r2, #32
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	69bb      	ldr	r3, [r7, #24]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2103      	movs	r1, #3
 8002ed6:	2012      	movs	r0, #18
 8002ed8:	f000 fdce 	bl	8003a78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002edc:	2012      	movs	r0, #18
 8002ede:	f000 fde0 	bl	8003aa2 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002ee2:	e049      	b.n	8002f78 <HAL_TIM_Base_MspInit+0xe0>
  else if(tim_baseHandle->Instance==TIM14)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a27      	ldr	r2, [pc, #156]	; (8002f88 <HAL_TIM_Base_MspInit+0xf0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d131      	bne.n	8002f52 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002eee:	4b25      	ldr	r3, [pc, #148]	; (8002f84 <HAL_TIM_Base_MspInit+0xec>)
 8002ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ef2:	4b24      	ldr	r3, [pc, #144]	; (8002f84 <HAL_TIM_Base_MspInit+0xec>)
 8002ef4:	2180      	movs	r1, #128	; 0x80
 8002ef6:	0209      	lsls	r1, r1, #8
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	641a      	str	r2, [r3, #64]	; 0x40
 8002efc:	4b21      	ldr	r3, [pc, #132]	; (8002f84 <HAL_TIM_Base_MspInit+0xec>)
 8002efe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f00:	2380      	movs	r3, #128	; 0x80
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	4013      	ands	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0a:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <HAL_TIM_Base_MspInit+0xec>)
 8002f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f0e:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <HAL_TIM_Base_MspInit+0xec>)
 8002f10:	2101      	movs	r1, #1
 8002f12:	430a      	orrs	r2, r1
 8002f14:	635a      	str	r2, [r3, #52]	; 0x34
 8002f16:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <HAL_TIM_Base_MspInit+0xec>)
 8002f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f22:	211c      	movs	r1, #28
 8002f24:	187b      	adds	r3, r7, r1
 8002f26:	2210      	movs	r2, #16
 8002f28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2a:	187b      	adds	r3, r7, r1
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f30:	187b      	adds	r3, r7, r1
 8002f32:	2200      	movs	r2, #0
 8002f34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f36:	187b      	adds	r3, r7, r1
 8002f38:	2200      	movs	r2, #0
 8002f3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8002f3c:	187b      	adds	r3, r7, r1
 8002f3e:	2204      	movs	r2, #4
 8002f40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f42:	187a      	adds	r2, r7, r1
 8002f44:	23a0      	movs	r3, #160	; 0xa0
 8002f46:	05db      	lsls	r3, r3, #23
 8002f48:	0011      	movs	r1, r2
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f000 fdc6 	bl	8003adc <HAL_GPIO_Init>
}
 8002f50:	e012      	b.n	8002f78 <HAL_TIM_Base_MspInit+0xe0>
  else if(tim_baseHandle->Instance==TIM16)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a0d      	ldr	r2, [pc, #52]	; (8002f8c <HAL_TIM_Base_MspInit+0xf4>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d10d      	bne.n	8002f78 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002f5c:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <HAL_TIM_Base_MspInit+0xec>)
 8002f5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f60:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <HAL_TIM_Base_MspInit+0xec>)
 8002f62:	2180      	movs	r1, #128	; 0x80
 8002f64:	0289      	lsls	r1, r1, #10
 8002f66:	430a      	orrs	r2, r1
 8002f68:	641a      	str	r2, [r3, #64]	; 0x40
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <HAL_TIM_Base_MspInit+0xec>)
 8002f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	029b      	lsls	r3, r3, #10
 8002f72:	4013      	ands	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	68fb      	ldr	r3, [r7, #12]
}
 8002f78:	46c0      	nop			; (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b00c      	add	sp, #48	; 0x30
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40001400 	.word	0x40001400
 8002f84:	40021000 	.word	0x40021000
 8002f88:	40002000 	.word	0x40002000
 8002f8c:	40014400 	.word	0x40014400

08002f90 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a0a      	ldr	r2, [pc, #40]	; (8002fc8 <HAL_TIM_PWM_MspInit+0x38>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d10d      	bne.n	8002fbe <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002fa2:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <HAL_TIM_PWM_MspInit+0x3c>)
 8002fa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <HAL_TIM_PWM_MspInit+0x3c>)
 8002fa8:	2180      	movs	r1, #128	; 0x80
 8002faa:	0249      	lsls	r1, r1, #9
 8002fac:	430a      	orrs	r2, r1
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_TIM_PWM_MspInit+0x3c>)
 8002fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	025b      	lsls	r3, r3, #9
 8002fb8:	4013      	ands	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b004      	add	sp, #16
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	40014000 	.word	0x40014000
 8002fcc:	40021000 	.word	0x40021000

08002fd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b08b      	sub	sp, #44	; 0x2c
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd8:	2414      	movs	r4, #20
 8002fda:	193b      	adds	r3, r7, r4
 8002fdc:	0018      	movs	r0, r3
 8002fde:	2314      	movs	r3, #20
 8002fe0:	001a      	movs	r2, r3
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	f005 f945 	bl	8008272 <memset>
  if(timHandle->Instance==TIM15)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a39      	ldr	r2, [pc, #228]	; (80030d4 <HAL_TIM_MspPostInit+0x104>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d123      	bne.n	800303a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff2:	4b39      	ldr	r3, [pc, #228]	; (80030d8 <HAL_TIM_MspPostInit+0x108>)
 8002ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ff6:	4b38      	ldr	r3, [pc, #224]	; (80030d8 <HAL_TIM_MspPostInit+0x108>)
 8002ff8:	2102      	movs	r1, #2
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ffe:	4b36      	ldr	r3, [pc, #216]	; (80030d8 <HAL_TIM_MspPostInit+0x108>)
 8003000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003002:	2202      	movs	r2, #2
 8003004:	4013      	ands	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
 8003008:	693b      	ldr	r3, [r7, #16]
    /**TIM15 GPIO Configuration
    PB13     ------> TIM15_CH1N
    PB14     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800300a:	193b      	adds	r3, r7, r4
 800300c:	22c0      	movs	r2, #192	; 0xc0
 800300e:	01d2      	lsls	r2, r2, #7
 8003010:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003012:	0021      	movs	r1, r4
 8003014:	187b      	adds	r3, r7, r1
 8003016:	2202      	movs	r2, #2
 8003018:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301a:	187b      	adds	r3, r7, r1
 800301c:	2200      	movs	r2, #0
 800301e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003020:	187b      	adds	r3, r7, r1
 8003022:	2200      	movs	r2, #0
 8003024:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 8003026:	187b      	adds	r3, r7, r1
 8003028:	2205      	movs	r2, #5
 800302a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800302c:	187b      	adds	r3, r7, r1
 800302e:	4a2b      	ldr	r2, [pc, #172]	; (80030dc <HAL_TIM_MspPostInit+0x10c>)
 8003030:	0019      	movs	r1, r3
 8003032:	0010      	movs	r0, r2
 8003034:	f000 fd52 	bl	8003adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8003038:	e048      	b.n	80030cc <HAL_TIM_MspPostInit+0xfc>
  else if(timHandle->Instance==TIM16)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a28      	ldr	r2, [pc, #160]	; (80030e0 <HAL_TIM_MspPostInit+0x110>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d143      	bne.n	80030cc <HAL_TIM_MspPostInit+0xfc>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003044:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <HAL_TIM_MspPostInit+0x108>)
 8003046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003048:	4b23      	ldr	r3, [pc, #140]	; (80030d8 <HAL_TIM_MspPostInit+0x108>)
 800304a:	2108      	movs	r1, #8
 800304c:	430a      	orrs	r2, r1
 800304e:	635a      	str	r2, [r3, #52]	; 0x34
 8003050:	4b21      	ldr	r3, [pc, #132]	; (80030d8 <HAL_TIM_MspPostInit+0x108>)
 8003052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003054:	2208      	movs	r2, #8
 8003056:	4013      	ands	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800305c:	4b1e      	ldr	r3, [pc, #120]	; (80030d8 <HAL_TIM_MspPostInit+0x108>)
 800305e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003060:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <HAL_TIM_MspPostInit+0x108>)
 8003062:	2102      	movs	r1, #2
 8003064:	430a      	orrs	r2, r1
 8003066:	635a      	str	r2, [r3, #52]	; 0x34
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_TIM_MspPostInit+0x108>)
 800306a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306c:	2202      	movs	r2, #2
 800306e:	4013      	ands	r3, r2
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003074:	2414      	movs	r4, #20
 8003076:	193b      	adds	r3, r7, r4
 8003078:	2201      	movs	r2, #1
 800307a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307c:	193b      	adds	r3, r7, r4
 800307e:	2202      	movs	r2, #2
 8003080:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003082:	193b      	adds	r3, r7, r4
 8003084:	2200      	movs	r2, #0
 8003086:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003088:	193b      	adds	r3, r7, r4
 800308a:	2200      	movs	r2, #0
 800308c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 800308e:	193b      	adds	r3, r7, r4
 8003090:	2202      	movs	r2, #2
 8003092:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003094:	193b      	adds	r3, r7, r4
 8003096:	4a13      	ldr	r2, [pc, #76]	; (80030e4 <HAL_TIM_MspPostInit+0x114>)
 8003098:	0019      	movs	r1, r3
 800309a:	0010      	movs	r0, r2
 800309c:	f000 fd1e 	bl	8003adc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80030a0:	0021      	movs	r1, r4
 80030a2:	187b      	adds	r3, r7, r1
 80030a4:	2240      	movs	r2, #64	; 0x40
 80030a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a8:	187b      	adds	r3, r7, r1
 80030aa:	2202      	movs	r2, #2
 80030ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ae:	187b      	adds	r3, r7, r1
 80030b0:	2200      	movs	r2, #0
 80030b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b4:	187b      	adds	r3, r7, r1
 80030b6:	2200      	movs	r2, #0
 80030b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 80030ba:	187b      	adds	r3, r7, r1
 80030bc:	2202      	movs	r2, #2
 80030be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c0:	187b      	adds	r3, r7, r1
 80030c2:	4a06      	ldr	r2, [pc, #24]	; (80030dc <HAL_TIM_MspPostInit+0x10c>)
 80030c4:	0019      	movs	r1, r3
 80030c6:	0010      	movs	r0, r2
 80030c8:	f000 fd08 	bl	8003adc <HAL_GPIO_Init>
}
 80030cc:	46c0      	nop			; (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b00b      	add	sp, #44	; 0x2c
 80030d2:	bd90      	pop	{r4, r7, pc}
 80030d4:	40014000 	.word	0x40014000
 80030d8:	40021000 	.word	0x40021000
 80030dc:	50000400 	.word	0x50000400
 80030e0:	40014400 	.word	0x40014400
 80030e4:	50000c00 	.word	0x50000c00

080030e8 <uart_half_duplex_transmit>:
 *  Created on: Oct 27, 2022
 *      Author: lucas
 */
#include "uart_half_duplex_driver.h"

int uart_half_duplex_transmit(uint8_t *pData, uint16_t size, uint32_t timeout){
 80030e8:	b5b0      	push	{r4, r5, r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	607a      	str	r2, [r7, #4]
 80030f2:	250a      	movs	r5, #10
 80030f4:	197b      	adds	r3, r7, r5
 80030f6:	1c0a      	adds	r2, r1, #0
 80030f8:	801a      	strh	r2, [r3, #0]
	HAL_HalfDuplex_EnableTransmitter(&USART_PORT);
 80030fa:	4b08      	ldr	r3, [pc, #32]	; (800311c <uart_half_duplex_transmit+0x34>)
 80030fc:	0018      	movs	r0, r3
 80030fe:	f003 fa11 	bl	8006524 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&USART_PORT, pData, size, timeout);
 8003102:	687c      	ldr	r4, [r7, #4]
 8003104:	197b      	adds	r3, r7, r5
 8003106:	881a      	ldrh	r2, [r3, #0]
 8003108:	68f9      	ldr	r1, [r7, #12]
 800310a:	4804      	ldr	r0, [pc, #16]	; (800311c <uart_half_duplex_transmit+0x34>)
 800310c:	0023      	movs	r3, r4
 800310e:	f003 f88b 	bl	8006228 <HAL_UART_Transmit>

	return 0;
 8003112:	2300      	movs	r3, #0
}
 8003114:	0018      	movs	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	b004      	add	sp, #16
 800311a:	bdb0      	pop	{r4, r5, r7, pc}
 800311c:	2000048c 	.word	0x2000048c

08003120 <uart_half_duplex_receive>:

int uart_half_duplex_receive(uint8_t *pData, uint16_t size, uint32_t timeout) {
 8003120:	b5b0      	push	{r4, r5, r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	607a      	str	r2, [r7, #4]
 800312a:	250a      	movs	r5, #10
 800312c:	197b      	adds	r3, r7, r5
 800312e:	1c0a      	adds	r2, r1, #0
 8003130:	801a      	strh	r2, [r3, #0]
	HAL_HalfDuplex_EnableReceiver(&USART_PORT);
 8003132:	4b08      	ldr	r3, [pc, #32]	; (8003154 <uart_half_duplex_receive+0x34>)
 8003134:	0018      	movs	r0, r3
 8003136:	f003 fa47 	bl	80065c8 <HAL_HalfDuplex_EnableReceiver>
	HAL_UART_Receive(&USART_PORT, pData, size, timeout);
 800313a:	687c      	ldr	r4, [r7, #4]
 800313c:	197b      	adds	r3, r7, r5
 800313e:	881a      	ldrh	r2, [r3, #0]
 8003140:	68f9      	ldr	r1, [r7, #12]
 8003142:	4804      	ldr	r0, [pc, #16]	; (8003154 <uart_half_duplex_receive+0x34>)
 8003144:	0023      	movs	r3, r4
 8003146:	f003 f90b 	bl	8006360 <HAL_UART_Receive>

	return 0;
 800314a:	2300      	movs	r3, #0
}
 800314c:	0018      	movs	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	b004      	add	sp, #16
 8003152:	bdb0      	pop	{r4, r5, r7, pc}
 8003154:	2000048c 	.word	0x2000048c

08003158 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800315c:	4b25      	ldr	r3, [pc, #148]	; (80031f4 <MX_USART1_UART_Init+0x9c>)
 800315e:	4a26      	ldr	r2, [pc, #152]	; (80031f8 <MX_USART1_UART_Init+0xa0>)
 8003160:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003162:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <MX_USART1_UART_Init+0x9c>)
 8003164:	22e1      	movs	r2, #225	; 0xe1
 8003166:	0252      	lsls	r2, r2, #9
 8003168:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800316a:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <MX_USART1_UART_Init+0x9c>)
 800316c:	2200      	movs	r2, #0
 800316e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003170:	4b20      	ldr	r3, [pc, #128]	; (80031f4 <MX_USART1_UART_Init+0x9c>)
 8003172:	2200      	movs	r2, #0
 8003174:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003176:	4b1f      	ldr	r3, [pc, #124]	; (80031f4 <MX_USART1_UART_Init+0x9c>)
 8003178:	2200      	movs	r2, #0
 800317a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800317c:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <MX_USART1_UART_Init+0x9c>)
 800317e:	220c      	movs	r2, #12
 8003180:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003182:	4b1c      	ldr	r3, [pc, #112]	; (80031f4 <MX_USART1_UART_Init+0x9c>)
 8003184:	2200      	movs	r2, #0
 8003186:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003188:	4b1a      	ldr	r3, [pc, #104]	; (80031f4 <MX_USART1_UART_Init+0x9c>)
 800318a:	2200      	movs	r2, #0
 800318c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800318e:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <MX_USART1_UART_Init+0x9c>)
 8003190:	2200      	movs	r2, #0
 8003192:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003194:	4b17      	ldr	r3, [pc, #92]	; (80031f4 <MX_USART1_UART_Init+0x9c>)
 8003196:	2200      	movs	r2, #0
 8003198:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800319a:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <MX_USART1_UART_Init+0x9c>)
 800319c:	2208      	movs	r2, #8
 800319e:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80031a0:	4b14      	ldr	r3, [pc, #80]	; (80031f4 <MX_USART1_UART_Init+0x9c>)
 80031a2:	2280      	movs	r2, #128	; 0x80
 80031a4:	0212      	lsls	r2, r2, #8
 80031a6:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031a8:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <MX_USART1_UART_Init+0x9c>)
 80031aa:	0018      	movs	r0, r3
 80031ac:	f002 ff88 	bl	80060c0 <HAL_UART_Init>
 80031b0:	1e03      	subs	r3, r0, #0
 80031b2:	d001      	beq.n	80031b8 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 80031b4:	f7ff fa62 	bl	800267c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031b8:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <MX_USART1_UART_Init+0x9c>)
 80031ba:	2100      	movs	r1, #0
 80031bc:	0018      	movs	r0, r3
 80031be:	f003 fdfd 	bl	8006dbc <HAL_UARTEx_SetTxFifoThreshold>
 80031c2:	1e03      	subs	r3, r0, #0
 80031c4:	d001      	beq.n	80031ca <MX_USART1_UART_Init+0x72>
  {
    Error_Handler();
 80031c6:	f7ff fa59 	bl	800267c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031ca:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <MX_USART1_UART_Init+0x9c>)
 80031cc:	2100      	movs	r1, #0
 80031ce:	0018      	movs	r0, r3
 80031d0:	f003 fe34 	bl	8006e3c <HAL_UARTEx_SetRxFifoThreshold>
 80031d4:	1e03      	subs	r3, r0, #0
 80031d6:	d001      	beq.n	80031dc <MX_USART1_UART_Init+0x84>
  {
    Error_Handler();
 80031d8:	f7ff fa50 	bl	800267c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <MX_USART1_UART_Init+0x9c>)
 80031de:	0018      	movs	r0, r3
 80031e0:	f003 fdb2 	bl	8006d48 <HAL_UARTEx_DisableFifoMode>
 80031e4:	1e03      	subs	r3, r0, #0
 80031e6:	d001      	beq.n	80031ec <MX_USART1_UART_Init+0x94>
  {
    Error_Handler();
 80031e8:	f7ff fa48 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031ec:	46c0      	nop			; (mov r8, r8)
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	200003f8 	.word	0x200003f8
 80031f8:	40013800 	.word	0x40013800

080031fc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003200:	4b22      	ldr	r3, [pc, #136]	; (800328c <MX_USART2_UART_Init+0x90>)
 8003202:	4a23      	ldr	r2, [pc, #140]	; (8003290 <MX_USART2_UART_Init+0x94>)
 8003204:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8003206:	4b21      	ldr	r3, [pc, #132]	; (800328c <MX_USART2_UART_Init+0x90>)
 8003208:	4a22      	ldr	r2, [pc, #136]	; (8003294 <MX_USART2_UART_Init+0x98>)
 800320a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800320c:	4b1f      	ldr	r3, [pc, #124]	; (800328c <MX_USART2_UART_Init+0x90>)
 800320e:	2200      	movs	r2, #0
 8003210:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003212:	4b1e      	ldr	r3, [pc, #120]	; (800328c <MX_USART2_UART_Init+0x90>)
 8003214:	2200      	movs	r2, #0
 8003216:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003218:	4b1c      	ldr	r3, [pc, #112]	; (800328c <MX_USART2_UART_Init+0x90>)
 800321a:	2200      	movs	r2, #0
 800321c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800321e:	4b1b      	ldr	r3, [pc, #108]	; (800328c <MX_USART2_UART_Init+0x90>)
 8003220:	220c      	movs	r2, #12
 8003222:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003224:	4b19      	ldr	r3, [pc, #100]	; (800328c <MX_USART2_UART_Init+0x90>)
 8003226:	2200      	movs	r2, #0
 8003228:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800322a:	4b18      	ldr	r3, [pc, #96]	; (800328c <MX_USART2_UART_Init+0x90>)
 800322c:	2200      	movs	r2, #0
 800322e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003230:	4b16      	ldr	r3, [pc, #88]	; (800328c <MX_USART2_UART_Init+0x90>)
 8003232:	2200      	movs	r2, #0
 8003234:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003236:	4b15      	ldr	r3, [pc, #84]	; (800328c <MX_USART2_UART_Init+0x90>)
 8003238:	2200      	movs	r2, #0
 800323a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800323c:	4b13      	ldr	r3, [pc, #76]	; (800328c <MX_USART2_UART_Init+0x90>)
 800323e:	2200      	movs	r2, #0
 8003240:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8003242:	4b12      	ldr	r3, [pc, #72]	; (800328c <MX_USART2_UART_Init+0x90>)
 8003244:	0018      	movs	r0, r3
 8003246:	f002 ff91 	bl	800616c <HAL_HalfDuplex_Init>
 800324a:	1e03      	subs	r3, r0, #0
 800324c:	d001      	beq.n	8003252 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 800324e:	f7ff fa15 	bl	800267c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003252:	4b0e      	ldr	r3, [pc, #56]	; (800328c <MX_USART2_UART_Init+0x90>)
 8003254:	2100      	movs	r1, #0
 8003256:	0018      	movs	r0, r3
 8003258:	f003 fdb0 	bl	8006dbc <HAL_UARTEx_SetTxFifoThreshold>
 800325c:	1e03      	subs	r3, r0, #0
 800325e:	d001      	beq.n	8003264 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8003260:	f7ff fa0c 	bl	800267c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003264:	4b09      	ldr	r3, [pc, #36]	; (800328c <MX_USART2_UART_Init+0x90>)
 8003266:	2100      	movs	r1, #0
 8003268:	0018      	movs	r0, r3
 800326a:	f003 fde7 	bl	8006e3c <HAL_UARTEx_SetRxFifoThreshold>
 800326e:	1e03      	subs	r3, r0, #0
 8003270:	d001      	beq.n	8003276 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8003272:	f7ff fa03 	bl	800267c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003276:	4b05      	ldr	r3, [pc, #20]	; (800328c <MX_USART2_UART_Init+0x90>)
 8003278:	0018      	movs	r0, r3
 800327a:	f003 fd65 	bl	8006d48 <HAL_UARTEx_DisableFifoMode>
 800327e:	1e03      	subs	r3, r0, #0
 8003280:	d001      	beq.n	8003286 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8003282:	f7ff f9fb 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	2000048c 	.word	0x2000048c
 8003290:	40004400 	.word	0x40004400
 8003294:	000f4240 	.word	0x000f4240

08003298 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003298:	b590      	push	{r4, r7, lr}
 800329a:	b093      	sub	sp, #76	; 0x4c
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a0:	2334      	movs	r3, #52	; 0x34
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	0018      	movs	r0, r3
 80032a6:	2314      	movs	r3, #20
 80032a8:	001a      	movs	r2, r3
 80032aa:	2100      	movs	r1, #0
 80032ac:	f004 ffe1 	bl	8008272 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032b0:	2418      	movs	r4, #24
 80032b2:	193b      	adds	r3, r7, r4
 80032b4:	0018      	movs	r0, r3
 80032b6:	231c      	movs	r3, #28
 80032b8:	001a      	movs	r2, r3
 80032ba:	2100      	movs	r1, #0
 80032bc:	f004 ffd9 	bl	8008272 <memset>
  if(uartHandle->Instance==USART1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a45      	ldr	r2, [pc, #276]	; (80033dc <HAL_UART_MspInit+0x144>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d13e      	bne.n	8003348 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80032ca:	193b      	adds	r3, r7, r4
 80032cc:	2201      	movs	r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80032d0:	193b      	adds	r3, r7, r4
 80032d2:	2200      	movs	r2, #0
 80032d4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032d6:	193b      	adds	r3, r7, r4
 80032d8:	0018      	movs	r0, r3
 80032da:	f001 fa69 	bl	80047b0 <HAL_RCCEx_PeriphCLKConfig>
 80032de:	1e03      	subs	r3, r0, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80032e2:	f7ff f9cb 	bl	800267c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032e6:	4b3e      	ldr	r3, [pc, #248]	; (80033e0 <HAL_UART_MspInit+0x148>)
 80032e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032ea:	4b3d      	ldr	r3, [pc, #244]	; (80033e0 <HAL_UART_MspInit+0x148>)
 80032ec:	2180      	movs	r1, #128	; 0x80
 80032ee:	01c9      	lsls	r1, r1, #7
 80032f0:	430a      	orrs	r2, r1
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40
 80032f4:	4b3a      	ldr	r3, [pc, #232]	; (80033e0 <HAL_UART_MspInit+0x148>)
 80032f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032f8:	2380      	movs	r3, #128	; 0x80
 80032fa:	01db      	lsls	r3, r3, #7
 80032fc:	4013      	ands	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003302:	4b37      	ldr	r3, [pc, #220]	; (80033e0 <HAL_UART_MspInit+0x148>)
 8003304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003306:	4b36      	ldr	r3, [pc, #216]	; (80033e0 <HAL_UART_MspInit+0x148>)
 8003308:	2104      	movs	r1, #4
 800330a:	430a      	orrs	r2, r1
 800330c:	635a      	str	r2, [r3, #52]	; 0x34
 800330e:	4b34      	ldr	r3, [pc, #208]	; (80033e0 <HAL_UART_MspInit+0x148>)
 8003310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003312:	2204      	movs	r2, #4
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
 8003318:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800331a:	2134      	movs	r1, #52	; 0x34
 800331c:	187b      	adds	r3, r7, r1
 800331e:	2230      	movs	r2, #48	; 0x30
 8003320:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003322:	187b      	adds	r3, r7, r1
 8003324:	2202      	movs	r2, #2
 8003326:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	187b      	adds	r3, r7, r1
 800332a:	2200      	movs	r2, #0
 800332c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332e:	187b      	adds	r3, r7, r1
 8003330:	2200      	movs	r2, #0
 8003332:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003334:	187b      	adds	r3, r7, r1
 8003336:	2201      	movs	r2, #1
 8003338:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800333a:	187b      	adds	r3, r7, r1
 800333c:	4a29      	ldr	r2, [pc, #164]	; (80033e4 <HAL_UART_MspInit+0x14c>)
 800333e:	0019      	movs	r1, r3
 8003340:	0010      	movs	r0, r2
 8003342:	f000 fbcb 	bl	8003adc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003346:	e044      	b.n	80033d2 <HAL_UART_MspInit+0x13a>
  else if(uartHandle->Instance==USART2)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a26      	ldr	r2, [pc, #152]	; (80033e8 <HAL_UART_MspInit+0x150>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d13f      	bne.n	80033d2 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003352:	2118      	movs	r1, #24
 8003354:	187b      	adds	r3, r7, r1
 8003356:	2202      	movs	r2, #2
 8003358:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800335a:	187b      	adds	r3, r7, r1
 800335c:	2200      	movs	r2, #0
 800335e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003360:	187b      	adds	r3, r7, r1
 8003362:	0018      	movs	r0, r3
 8003364:	f001 fa24 	bl	80047b0 <HAL_RCCEx_PeriphCLKConfig>
 8003368:	1e03      	subs	r3, r0, #0
 800336a:	d001      	beq.n	8003370 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 800336c:	f7ff f986 	bl	800267c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003370:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <HAL_UART_MspInit+0x148>)
 8003372:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003374:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <HAL_UART_MspInit+0x148>)
 8003376:	2180      	movs	r1, #128	; 0x80
 8003378:	0289      	lsls	r1, r1, #10
 800337a:	430a      	orrs	r2, r1
 800337c:	63da      	str	r2, [r3, #60]	; 0x3c
 800337e:	4b18      	ldr	r3, [pc, #96]	; (80033e0 <HAL_UART_MspInit+0x148>)
 8003380:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	029b      	lsls	r3, r3, #10
 8003386:	4013      	ands	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800338c:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <HAL_UART_MspInit+0x148>)
 800338e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003390:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <HAL_UART_MspInit+0x148>)
 8003392:	2101      	movs	r1, #1
 8003394:	430a      	orrs	r2, r1
 8003396:	635a      	str	r2, [r3, #52]	; 0x34
 8003398:	4b11      	ldr	r3, [pc, #68]	; (80033e0 <HAL_UART_MspInit+0x148>)
 800339a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339c:	2201      	movs	r2, #1
 800339e:	4013      	ands	r3, r2
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80033a4:	2134      	movs	r1, #52	; 0x34
 80033a6:	187b      	adds	r3, r7, r1
 80033a8:	2204      	movs	r2, #4
 80033aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ac:	187b      	adds	r3, r7, r1
 80033ae:	2202      	movs	r2, #2
 80033b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b2:	187b      	adds	r3, r7, r1
 80033b4:	2200      	movs	r2, #0
 80033b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b8:	187b      	adds	r3, r7, r1
 80033ba:	2200      	movs	r2, #0
 80033bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80033be:	187b      	adds	r3, r7, r1
 80033c0:	2201      	movs	r2, #1
 80033c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c4:	187a      	adds	r2, r7, r1
 80033c6:	23a0      	movs	r3, #160	; 0xa0
 80033c8:	05db      	lsls	r3, r3, #23
 80033ca:	0011      	movs	r1, r2
 80033cc:	0018      	movs	r0, r3
 80033ce:	f000 fb85 	bl	8003adc <HAL_GPIO_Init>
}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b013      	add	sp, #76	; 0x4c
 80033d8:	bd90      	pop	{r4, r7, pc}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	40013800 	.word	0x40013800
 80033e0:	40021000 	.word	0x40021000
 80033e4:	50000800 	.word	0x50000800
 80033e8:	40004400 	.word	0x40004400

080033ec <xl320_init>:
 *	@author Lucas Vallery
 *
 */
#include "xl320_driver.h"

int xl320_init(XL320_t* xl320, uint8_t id, XL320_BaudRate_t br){
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	0008      	movs	r0, r1
 80033f6:	0011      	movs	r1, r2
 80033f8:	1cfb      	adds	r3, r7, #3
 80033fa:	1c02      	adds	r2, r0, #0
 80033fc:	701a      	strb	r2, [r3, #0]
 80033fe:	1cbb      	adds	r3, r7, #2
 8003400:	1c0a      	adds	r2, r1, #0
 8003402:	701a      	strb	r2, [r3, #0]
	xl320->id 	= id;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	1cfa      	adds	r2, r7, #3
 8003408:	7812      	ldrb	r2, [r2, #0]
 800340a:	701a      	strb	r2, [r3, #0]
	xl320->br	= br;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	1cba      	adds	r2, r7, #2
 8003410:	7812      	ldrb	r2, [r2, #0]
 8003412:	705a      	strb	r2, [r3, #1]

	return 0;
 8003414:	2300      	movs	r3, #0
}
 8003416:	0018      	movs	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	b002      	add	sp, #8
 800341c:	bd80      	pop	{r7, pc}

0800341e <xl320_addHeader2Buff>:

void xl320_addHeader2Buff(uint8_t* buff){
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
	buff[0] = 0xFF;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	22ff      	movs	r2, #255	; 0xff
 800342a:	701a      	strb	r2, [r3, #0]
	buff[1] = 0xFF;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3301      	adds	r3, #1
 8003430:	22ff      	movs	r2, #255	; 0xff
 8003432:	701a      	strb	r2, [r3, #0]
	buff[2] = 0xFD;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3302      	adds	r3, #2
 8003438:	22fd      	movs	r2, #253	; 0xfd
 800343a:	701a      	strb	r2, [r3, #0]
	buff[3] = 0x00;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3303      	adds	r3, #3
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
}
 8003444:	46c0      	nop			; (mov r8, r8)
 8003446:	46bd      	mov	sp, r7
 8003448:	b002      	add	sp, #8
 800344a:	bd80      	pop	{r7, pc}

0800344c <xl320_updateCrc>:

unsigned short xl320_updateCrc(unsigned short crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size) {
 800344c:	b5b0      	push	{r4, r5, r7, lr}
 800344e:	4c33      	ldr	r4, [pc, #204]	; (800351c <xl320_updateCrc+0xd0>)
 8003450:	44a5      	add	sp, r4
 8003452:	af00      	add	r7, sp, #0
 8003454:	6039      	str	r1, [r7, #0]
 8003456:	0011      	movs	r1, r2
 8003458:	4b31      	ldr	r3, [pc, #196]	; (8003520 <xl320_updateCrc+0xd4>)
 800345a:	2484      	movs	r4, #132	; 0x84
 800345c:	00a4      	lsls	r4, r4, #2
 800345e:	191b      	adds	r3, r3, r4
 8003460:	19db      	adds	r3, r3, r7
 8003462:	1c02      	adds	r2, r0, #0
 8003464:	801a      	strh	r2, [r3, #0]
 8003466:	4b2f      	ldr	r3, [pc, #188]	; (8003524 <xl320_updateCrc+0xd8>)
 8003468:	0020      	movs	r0, r4
 800346a:	181b      	adds	r3, r3, r0
 800346c:	19db      	adds	r3, r3, r7
 800346e:	1c0a      	adds	r2, r1, #0
 8003470:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] = {
 8003472:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <xl320_updateCrc+0xdc>)
 8003474:	181b      	adds	r3, r3, r0
 8003476:	19da      	adds	r2, r3, r7
 8003478:	4b2c      	ldr	r3, [pc, #176]	; (800352c <xl320_updateCrc+0xe0>)
 800347a:	0010      	movs	r0, r2
 800347c:	0019      	movs	r1, r3
 800347e:	2380      	movs	r3, #128	; 0x80
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	001a      	movs	r2, r3
 8003484:	f004 feec 	bl	8008260 <memcpy>
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};

	for(j = 0; j < data_blk_size; j++) {
 8003488:	4b29      	ldr	r3, [pc, #164]	; (8003530 <xl320_updateCrc+0xe4>)
 800348a:	18fb      	adds	r3, r7, r3
 800348c:	2200      	movs	r2, #0
 800348e:	801a      	strh	r2, [r3, #0]
 8003490:	e02f      	b.n	80034f2 <xl320_updateCrc+0xa6>
		i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8003492:	4b23      	ldr	r3, [pc, #140]	; (8003520 <xl320_updateCrc+0xd4>)
 8003494:	2084      	movs	r0, #132	; 0x84
 8003496:	0080      	lsls	r0, r0, #2
 8003498:	181b      	adds	r3, r3, r0
 800349a:	19db      	adds	r3, r3, r7
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	0a1b      	lsrs	r3, r3, #8
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	4c23      	ldr	r4, [pc, #140]	; (8003530 <xl320_updateCrc+0xe4>)
 80034a4:	193b      	adds	r3, r7, r4
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	6839      	ldr	r1, [r7, #0]
 80034aa:	18cb      	adds	r3, r1, r3
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	4053      	eors	r3, r2
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	2583      	movs	r5, #131	; 0x83
 80034b6:	00ad      	lsls	r5, r5, #2
 80034b8:	197b      	adds	r3, r7, r5
 80034ba:	21ff      	movs	r1, #255	; 0xff
 80034bc:	400a      	ands	r2, r1
 80034be:	801a      	strh	r2, [r3, #0]
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 80034c0:	4b17      	ldr	r3, [pc, #92]	; (8003520 <xl320_updateCrc+0xd4>)
 80034c2:	181b      	adds	r3, r3, r0
 80034c4:	19db      	adds	r3, r3, r7
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	b21a      	sxth	r2, r3
 80034cc:	197b      	adds	r3, r7, r5
 80034ce:	8819      	ldrh	r1, [r3, #0]
 80034d0:	4b15      	ldr	r3, [pc, #84]	; (8003528 <xl320_updateCrc+0xdc>)
 80034d2:	181b      	adds	r3, r3, r0
 80034d4:	19db      	adds	r3, r3, r7
 80034d6:	0049      	lsls	r1, r1, #1
 80034d8:	5acb      	ldrh	r3, [r1, r3]
 80034da:	b21b      	sxth	r3, r3
 80034dc:	4053      	eors	r3, r2
 80034de:	b21a      	sxth	r2, r3
 80034e0:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <xl320_updateCrc+0xd4>)
 80034e2:	181b      	adds	r3, r3, r0
 80034e4:	19db      	adds	r3, r3, r7
 80034e6:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++) {
 80034e8:	193b      	adds	r3, r7, r4
 80034ea:	881a      	ldrh	r2, [r3, #0]
 80034ec:	193b      	adds	r3, r7, r4
 80034ee:	3201      	adds	r2, #1
 80034f0:	801a      	strh	r2, [r3, #0]
 80034f2:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <xl320_updateCrc+0xe4>)
 80034f4:	18fa      	adds	r2, r7, r3
 80034f6:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <xl320_updateCrc+0xd8>)
 80034f8:	2184      	movs	r1, #132	; 0x84
 80034fa:	0089      	lsls	r1, r1, #2
 80034fc:	185b      	adds	r3, r3, r1
 80034fe:	19db      	adds	r3, r3, r7
 8003500:	8812      	ldrh	r2, [r2, #0]
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d3c4      	bcc.n	8003492 <xl320_updateCrc+0x46>
	}

	return crc_accum;
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <xl320_updateCrc+0xd4>)
 800350a:	185b      	adds	r3, r3, r1
 800350c:	19db      	adds	r3, r3, r7
 800350e:	881b      	ldrh	r3, [r3, #0]
}
 8003510:	0018      	movs	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	2384      	movs	r3, #132	; 0x84
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	449d      	add	sp, r3
 800351a:	bdb0      	pop	{r4, r5, r7, pc}
 800351c:	fffffdf0 	.word	0xfffffdf0
 8003520:	fffffdf6 	.word	0xfffffdf6
 8003524:	fffffdf4 	.word	0xfffffdf4
 8003528:	fffffdfc 	.word	0xfffffdfc
 800352c:	0800ce54 	.word	0x0800ce54
 8003530:	0000020e 	.word	0x0000020e

08003534 <xl320_copyParams2Buff>:

void xl320_copyParams2Buff(uint8_t buffStartIndex, uint8_t* buff, uint16_t nbParams, uint8_t* params){
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	0011      	movs	r1, r2
 800353e:	607b      	str	r3, [r7, #4]
 8003540:	230f      	movs	r3, #15
 8003542:	18fb      	adds	r3, r7, r3
 8003544:	1c02      	adds	r2, r0, #0
 8003546:	701a      	strb	r2, [r3, #0]
 8003548:	230c      	movs	r3, #12
 800354a:	18fb      	adds	r3, r7, r3
 800354c:	1c0a      	adds	r2, r1, #0
 800354e:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < nbParams; i++){
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	e00f      	b.n	8003576 <xl320_copyParams2Buff+0x42>
		buff[i + buffStartIndex] = params[i];
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	18d2      	adds	r2, r2, r3
 800355c:	230f      	movs	r3, #15
 800355e:	18fb      	adds	r3, r7, r3
 8003560:	7819      	ldrb	r1, [r3, #0]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	18cb      	adds	r3, r1, r3
 8003566:	0019      	movs	r1, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	185b      	adds	r3, r3, r1
 800356c:	7812      	ldrb	r2, [r2, #0]
 800356e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < nbParams; i++){
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	3301      	adds	r3, #1
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	230c      	movs	r3, #12
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	429a      	cmp	r2, r3
 8003580:	dbe9      	blt.n	8003556 <xl320_copyParams2Buff+0x22>
	}
}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	46c0      	nop			; (mov r8, r8)
 8003586:	46bd      	mov	sp, r7
 8003588:	b006      	add	sp, #24
 800358a:	bd80      	pop	{r7, pc}

0800358c <xl320_sendCommand>:

int xl320_sendCommand(XL320_t* xl320, XL320_Instruction_t inst, uint16_t nbParams, uint8_t* params){
 800358c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	0008      	movs	r0, r1
 8003596:	0011      	movs	r1, r2
 8003598:	607b      	str	r3, [r7, #4]
 800359a:	230b      	movs	r3, #11
 800359c:	18fb      	adds	r3, r7, r3
 800359e:	1c02      	adds	r2, r0, #0
 80035a0:	701a      	strb	r2, [r3, #0]
 80035a2:	2008      	movs	r0, #8
 80035a4:	183b      	adds	r3, r7, r0
 80035a6:	1c0a      	adds	r2, r1, #0
 80035a8:	801a      	strh	r2, [r3, #0]
	uint8_t* txBuff = NULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
	txBuff = (uint8_t*) malloc((MIN_FRAME_SIZE + nbParams)*sizeof(uint8_t));
 80035ae:	183b      	adds	r3, r7, r0
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	330a      	adds	r3, #10
 80035b4:	0018      	movs	r0, r3
 80035b6:	f004 fe3f 	bl	8008238 <malloc>
 80035ba:	0003      	movs	r3, r0
 80035bc:	617b      	str	r3, [r7, #20]

	if(txBuff == NULL){
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d106      	bne.n	80035d2 <xl320_sendCommand+0x46>
		DEBUG_PRINTF("XL320 ERROT : Malloc failed\r\n");
 80035c4:	4b34      	ldr	r3, [pc, #208]	; (8003698 <xl320_sendCommand+0x10c>)
 80035c6:	0018      	movs	r0, r3
 80035c8:	f005 fe40 	bl	800924c <puts>
		return -1;
 80035cc:	2301      	movs	r3, #1
 80035ce:	425b      	negs	r3, r3
 80035d0:	e05d      	b.n	800368e <xl320_sendCommand+0x102>
	}

	uint16_t length = nbParams + 3;
 80035d2:	2512      	movs	r5, #18
 80035d4:	197b      	adds	r3, r7, r5
 80035d6:	2408      	movs	r4, #8
 80035d8:	193a      	adds	r2, r7, r4
 80035da:	8812      	ldrh	r2, [r2, #0]
 80035dc:	3203      	adds	r2, #3
 80035de:	801a      	strh	r2, [r3, #0]

	xl320_addHeader2Buff(txBuff);
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	0018      	movs	r0, r3
 80035e4:	f7ff ff1b 	bl	800341e <xl320_addHeader2Buff>
	txBuff[4] = xl320->id;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	3304      	adds	r3, #4
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	7812      	ldrb	r2, [r2, #0]
 80035f0:	701a      	strb	r2, [r3, #0]
	txBuff[5] = (uint8_t) (length & 0xFF);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	3305      	adds	r3, #5
 80035f6:	197a      	adds	r2, r7, r5
 80035f8:	8812      	ldrh	r2, [r2, #0]
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	701a      	strb	r2, [r3, #0]
	txBuff[6] = (uint8_t) (length >> 8);
 80035fe:	197b      	adds	r3, r7, r5
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	0a1b      	lsrs	r3, r3, #8
 8003604:	b29a      	uxth	r2, r3
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	3306      	adds	r3, #6
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]
	txBuff[7] = inst;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	3307      	adds	r3, #7
 8003612:	220b      	movs	r2, #11
 8003614:	18ba      	adds	r2, r7, r2
 8003616:	7812      	ldrb	r2, [r2, #0]
 8003618:	701a      	strb	r2, [r3, #0]
	xl320_copyParams2Buff(8, txBuff, nbParams, params);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	193b      	adds	r3, r7, r4
 800361e:	881a      	ldrh	r2, [r3, #0]
 8003620:	6979      	ldr	r1, [r7, #20]
 8003622:	0003      	movs	r3, r0
 8003624:	2008      	movs	r0, #8
 8003626:	f7ff ff85 	bl	8003534 <xl320_copyParams2Buff>

	uint16_t crc = xl320_updateCrc(0, txBuff, MIN_FRAME_SIZE + nbParams - CRC_FIELD_SIZE);
 800362a:	0025      	movs	r5, r4
 800362c:	193b      	adds	r3, r7, r4
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	3308      	adds	r3, #8
 8003632:	b29a      	uxth	r2, r3
 8003634:	2610      	movs	r6, #16
 8003636:	19bc      	adds	r4, r7, r6
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	0019      	movs	r1, r3
 800363c:	2000      	movs	r0, #0
 800363e:	f7ff ff05 	bl	800344c <xl320_updateCrc>
 8003642:	0003      	movs	r3, r0
 8003644:	8023      	strh	r3, [r4, #0]

	txBuff[(MIN_FRAME_SIZE + nbParams) - 2] = (uint8_t) (crc & 0xFF);
 8003646:	002c      	movs	r4, r5
 8003648:	193b      	adds	r3, r7, r4
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	3308      	adds	r3, #8
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	18d3      	adds	r3, r2, r3
 8003652:	19ba      	adds	r2, r7, r6
 8003654:	8812      	ldrh	r2, [r2, #0]
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	701a      	strb	r2, [r3, #0]
	txBuff[(MIN_FRAME_SIZE + nbParams) - 1] = (uint8_t) (crc >> 8);
 800365a:	19bb      	adds	r3, r7, r6
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	0a1b      	lsrs	r3, r3, #8
 8003660:	b299      	uxth	r1, r3
 8003662:	193b      	adds	r3, r7, r4
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	3309      	adds	r3, #9
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	18d3      	adds	r3, r2, r3
 800366c:	b2ca      	uxtb	r2, r1
 800366e:	701a      	strb	r2, [r3, #0]

	xl320->serial.transmit(txBuff, (MIN_FRAME_SIZE + nbParams)*sizeof(uint8_t), 0x1F4);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	193a      	adds	r2, r7, r4
 8003676:	8812      	ldrh	r2, [r2, #0]
 8003678:	320a      	adds	r2, #10
 800367a:	b291      	uxth	r1, r2
 800367c:	22fa      	movs	r2, #250	; 0xfa
 800367e:	0052      	lsls	r2, r2, #1
 8003680:	6978      	ldr	r0, [r7, #20]
 8003682:	4798      	blx	r3

	free(txBuff);
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	0018      	movs	r0, r3
 8003688:	f004 fde0 	bl	800824c <free>
	return 0;
 800368c:	2300      	movs	r3, #0
}
 800368e:	0018      	movs	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	b007      	add	sp, #28
 8003694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	0800d054 	.word	0x0800d054

0800369c <xl320_setGoalPosition>:
	xl320_sendCommand(xl320, WRITE, 3, (uint8_t*) &params);

	return 0;
}

int xl320_setGoalPosition(XL320_t* xl320, float goalPositionInDeg){
 800369c:	b5b0      	push	{r4, r5, r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
	uint16_t position = (uint16_t)(goalPositionInDeg/BIT_RESOLUTION_IN_DEG);
 80036a6:	6838      	ldr	r0, [r7, #0]
 80036a8:	f7fe fd56 	bl	8002158 <__aeabi_f2d>
 80036ac:	4a15      	ldr	r2, [pc, #84]	; (8003704 <xl320_setGoalPosition+0x68>)
 80036ae:	4b16      	ldr	r3, [pc, #88]	; (8003708 <xl320_setGoalPosition+0x6c>)
 80036b0:	f7fd faa8 	bl	8000c04 <__aeabi_ddiv>
 80036b4:	0002      	movs	r2, r0
 80036b6:	000b      	movs	r3, r1
 80036b8:	250e      	movs	r5, #14
 80036ba:	197c      	adds	r4, r7, r5
 80036bc:	0010      	movs	r0, r2
 80036be:	0019      	movs	r1, r3
 80036c0:	f7fc fef4 	bl	80004ac <__aeabi_d2uiz>
 80036c4:	0003      	movs	r3, r0
 80036c6:	8023      	strh	r3, [r4, #0]
	uint8_t params[4] = {POSITION, 0, (uint8_t)(position & 0xFF) , (uint8_t)(position >> 8)};
 80036c8:	2108      	movs	r1, #8
 80036ca:	187b      	adds	r3, r7, r1
 80036cc:	221e      	movs	r2, #30
 80036ce:	701a      	strb	r2, [r3, #0]
 80036d0:	187b      	adds	r3, r7, r1
 80036d2:	2200      	movs	r2, #0
 80036d4:	705a      	strb	r2, [r3, #1]
 80036d6:	197b      	adds	r3, r7, r5
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	187b      	adds	r3, r7, r1
 80036de:	709a      	strb	r2, [r3, #2]
 80036e0:	197b      	adds	r3, r7, r5
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	0a1b      	lsrs	r3, r3, #8
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	187b      	adds	r3, r7, r1
 80036ec:	70da      	strb	r2, [r3, #3]

	xl320_sendCommand(xl320, WRITE, 4, (uint8_t*) &params);
 80036ee:	187b      	adds	r3, r7, r1
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	2204      	movs	r2, #4
 80036f4:	2103      	movs	r1, #3
 80036f6:	f7ff ff49 	bl	800358c <xl320_sendCommand>

	return 0;
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	0018      	movs	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	b004      	add	sp, #16
 8003702:	bdb0      	pop	{r4, r5, r7, pc}
 8003704:	28f5c28f 	.word	0x28f5c28f
 8003708:	3fd28f5c 	.word	0x3fd28f5c

0800370c <xl320_setSpeed>:

int xl320_setSpeed(XL320_t* xl320, float rpm){
 800370c:	b5b0      	push	{r4, r5, r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
	uint16_t speedValue = (uint16_t)(rpm/RESOLUTION_SPEED);
 8003716:	6838      	ldr	r0, [r7, #0]
 8003718:	f7fe fd1e 	bl	8002158 <__aeabi_f2d>
 800371c:	4a1a      	ldr	r2, [pc, #104]	; (8003788 <xl320_setSpeed+0x7c>)
 800371e:	4b1b      	ldr	r3, [pc, #108]	; (800378c <xl320_setSpeed+0x80>)
 8003720:	f7fd fa70 	bl	8000c04 <__aeabi_ddiv>
 8003724:	0002      	movs	r2, r0
 8003726:	000b      	movs	r3, r1
 8003728:	250e      	movs	r5, #14
 800372a:	197c      	adds	r4, r7, r5
 800372c:	0010      	movs	r0, r2
 800372e:	0019      	movs	r1, r3
 8003730:	f7fc febc 	bl	80004ac <__aeabi_d2uiz>
 8003734:	0003      	movs	r3, r0
 8003736:	8023      	strh	r3, [r4, #0]
	uint8_t highByte = (uint8_t)((speedValue >> 8) & 0xFF);
 8003738:	0029      	movs	r1, r5
 800373a:	187b      	adds	r3, r7, r1
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	0a1b      	lsrs	r3, r3, #8
 8003740:	b29a      	uxth	r2, r3
 8003742:	200d      	movs	r0, #13
 8003744:	183b      	adds	r3, r7, r0
 8003746:	701a      	strb	r2, [r3, #0]
	uint8_t lowByte = (uint8_t)(speedValue & 0xFF);
 8003748:	240c      	movs	r4, #12
 800374a:	193b      	adds	r3, r7, r4
 800374c:	187a      	adds	r2, r7, r1
 800374e:	8812      	ldrh	r2, [r2, #0]
 8003750:	701a      	strb	r2, [r3, #0]

	uint8_t params[4] = {SPEED, 0, lowByte, highByte};
 8003752:	2108      	movs	r1, #8
 8003754:	187b      	adds	r3, r7, r1
 8003756:	2220      	movs	r2, #32
 8003758:	701a      	strb	r2, [r3, #0]
 800375a:	187b      	adds	r3, r7, r1
 800375c:	2200      	movs	r2, #0
 800375e:	705a      	strb	r2, [r3, #1]
 8003760:	187b      	adds	r3, r7, r1
 8003762:	193a      	adds	r2, r7, r4
 8003764:	7812      	ldrb	r2, [r2, #0]
 8003766:	709a      	strb	r2, [r3, #2]
 8003768:	187b      	adds	r3, r7, r1
 800376a:	183a      	adds	r2, r7, r0
 800376c:	7812      	ldrb	r2, [r2, #0]
 800376e:	70da      	strb	r2, [r3, #3]
	xl320_sendCommand(xl320, WRITE, 4, (uint8_t*) &params);
 8003770:	187b      	adds	r3, r7, r1
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	2204      	movs	r2, #4
 8003776:	2103      	movs	r1, #3
 8003778:	f7ff ff08 	bl	800358c <xl320_sendCommand>

	return 0;
 800377c:	2300      	movs	r3, #0
}
 800377e:	0018      	movs	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	b004      	add	sp, #16
 8003784:	bdb0      	pop	{r4, r5, r7, pc}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	f9db22d1 	.word	0xf9db22d1
 800378c:	3fbc6a7e 	.word	0x3fbc6a7e

08003790 <xl320_torqueEnable>:
	xl320_sendCommand(xl320, ACTION, 0, NULL);

	return 0;
}

int xl320_torqueEnable(XL320_t* xl320){
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
	uint8_t params[3] = {TORQUE_EN, 0, ENABLE};
 8003798:	200c      	movs	r0, #12
 800379a:	183b      	adds	r3, r7, r0
 800379c:	4a07      	ldr	r2, [pc, #28]	; (80037bc <xl320_torqueEnable+0x2c>)
 800379e:	8811      	ldrh	r1, [r2, #0]
 80037a0:	8019      	strh	r1, [r3, #0]
 80037a2:	7892      	ldrb	r2, [r2, #2]
 80037a4:	709a      	strb	r2, [r3, #2]

	xl320_sendCommand(xl320, WRITE, 3, (uint8_t*) &params);
 80037a6:	183b      	adds	r3, r7, r0
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	2203      	movs	r2, #3
 80037ac:	2103      	movs	r1, #3
 80037ae:	f7ff feed 	bl	800358c <xl320_sendCommand>

	return 0;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	0018      	movs	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b004      	add	sp, #16
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	0800d404 	.word	0x0800d404

080037c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80037c0:	480d      	ldr	r0, [pc, #52]	; (80037f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80037c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80037c4:	f7ff f868 	bl	8002898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037c8:	480c      	ldr	r0, [pc, #48]	; (80037fc <LoopForever+0x6>)
  ldr r1, =_edata
 80037ca:	490d      	ldr	r1, [pc, #52]	; (8003800 <LoopForever+0xa>)
  ldr r2, =_sidata
 80037cc:	4a0d      	ldr	r2, [pc, #52]	; (8003804 <LoopForever+0xe>)
  movs r3, #0
 80037ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037d0:	e002      	b.n	80037d8 <LoopCopyDataInit>

080037d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037d6:	3304      	adds	r3, #4

080037d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037dc:	d3f9      	bcc.n	80037d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037de:	4a0a      	ldr	r2, [pc, #40]	; (8003808 <LoopForever+0x12>)
  ldr r4, =_ebss
 80037e0:	4c0a      	ldr	r4, [pc, #40]	; (800380c <LoopForever+0x16>)
  movs r3, #0
 80037e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037e4:	e001      	b.n	80037ea <LoopFillZerobss>

080037e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037e8:	3204      	adds	r2, #4

080037ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037ec:	d3fb      	bcc.n	80037e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80037ee:	f004 fcff 	bl	80081f0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80037f2:	f7fe fe31 	bl	8002458 <main>

080037f6 <LoopForever>:

LoopForever:
  b LoopForever
 80037f6:	e7fe      	b.n	80037f6 <LoopForever>
  ldr   r0, =_estack
 80037f8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80037fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003800:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003804:	0800da8c 	.word	0x0800da8c
  ldr r2, =_sbss
 8003808:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800380c:	20001280 	.word	0x20001280

08003810 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003810:	e7fe      	b.n	8003810 <ADC1_IRQHandler>
	...

08003814 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800381a:	1dfb      	adds	r3, r7, #7
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003820:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <HAL_Init+0x3c>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	4b0a      	ldr	r3, [pc, #40]	; (8003850 <HAL_Init+0x3c>)
 8003826:	2180      	movs	r1, #128	; 0x80
 8003828:	0049      	lsls	r1, r1, #1
 800382a:	430a      	orrs	r2, r1
 800382c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800382e:	2003      	movs	r0, #3
 8003830:	f000 f810 	bl	8003854 <HAL_InitTick>
 8003834:	1e03      	subs	r3, r0, #0
 8003836:	d003      	beq.n	8003840 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003838:	1dfb      	adds	r3, r7, #7
 800383a:	2201      	movs	r2, #1
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	e001      	b.n	8003844 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003840:	f7fe ff22 	bl	8002688 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003844:	1dfb      	adds	r3, r7, #7
 8003846:	781b      	ldrb	r3, [r3, #0]
}
 8003848:	0018      	movs	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	b002      	add	sp, #8
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40022000 	.word	0x40022000

08003854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003854:	b590      	push	{r4, r7, lr}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800385c:	230f      	movs	r3, #15
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	2200      	movs	r2, #0
 8003862:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8003864:	4b1d      	ldr	r3, [pc, #116]	; (80038dc <HAL_InitTick+0x88>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d02b      	beq.n	80038c4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800386c:	4b1c      	ldr	r3, [pc, #112]	; (80038e0 <HAL_InitTick+0x8c>)
 800386e:	681c      	ldr	r4, [r3, #0]
 8003870:	4b1a      	ldr	r3, [pc, #104]	; (80038dc <HAL_InitTick+0x88>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	0019      	movs	r1, r3
 8003876:	23fa      	movs	r3, #250	; 0xfa
 8003878:	0098      	lsls	r0, r3, #2
 800387a:	f7fc fc61 	bl	8000140 <__udivsi3>
 800387e:	0003      	movs	r3, r0
 8003880:	0019      	movs	r1, r3
 8003882:	0020      	movs	r0, r4
 8003884:	f7fc fc5c 	bl	8000140 <__udivsi3>
 8003888:	0003      	movs	r3, r0
 800388a:	0018      	movs	r0, r3
 800388c:	f000 f919 	bl	8003ac2 <HAL_SYSTICK_Config>
 8003890:	1e03      	subs	r3, r0, #0
 8003892:	d112      	bne.n	80038ba <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b03      	cmp	r3, #3
 8003898:	d80a      	bhi.n	80038b0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	2301      	movs	r3, #1
 800389e:	425b      	negs	r3, r3
 80038a0:	2200      	movs	r2, #0
 80038a2:	0018      	movs	r0, r3
 80038a4:	f000 f8e8 	bl	8003a78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80038a8:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <HAL_InitTick+0x90>)
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	e00d      	b.n	80038cc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80038b0:	230f      	movs	r3, #15
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	2201      	movs	r2, #1
 80038b6:	701a      	strb	r2, [r3, #0]
 80038b8:	e008      	b.n	80038cc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80038ba:	230f      	movs	r3, #15
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	2201      	movs	r2, #1
 80038c0:	701a      	strb	r2, [r3, #0]
 80038c2:	e003      	b.n	80038cc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80038c4:	230f      	movs	r3, #15
 80038c6:	18fb      	adds	r3, r7, r3
 80038c8:	2201      	movs	r2, #1
 80038ca:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80038cc:	230f      	movs	r3, #15
 80038ce:	18fb      	adds	r3, r7, r3
 80038d0:	781b      	ldrb	r3, [r3, #0]
}
 80038d2:	0018      	movs	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b005      	add	sp, #20
 80038d8:	bd90      	pop	{r4, r7, pc}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	20000008 	.word	0x20000008
 80038e0:	20000000 	.word	0x20000000
 80038e4:	20000004 	.word	0x20000004

080038e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80038ec:	4b05      	ldr	r3, [pc, #20]	; (8003904 <HAL_IncTick+0x1c>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	001a      	movs	r2, r3
 80038f2:	4b05      	ldr	r3, [pc, #20]	; (8003908 <HAL_IncTick+0x20>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	18d2      	adds	r2, r2, r3
 80038f8:	4b03      	ldr	r3, [pc, #12]	; (8003908 <HAL_IncTick+0x20>)
 80038fa:	601a      	str	r2, [r3, #0]
}
 80038fc:	46c0      	nop			; (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	20000008 	.word	0x20000008
 8003908:	20000520 	.word	0x20000520

0800390c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  return uwTick;
 8003910:	4b02      	ldr	r3, [pc, #8]	; (800391c <HAL_GetTick+0x10>)
 8003912:	681b      	ldr	r3, [r3, #0]
}
 8003914:	0018      	movs	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	20000520 	.word	0x20000520

08003920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	0002      	movs	r2, r0
 8003928:	1dfb      	adds	r3, r7, #7
 800392a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800392c:	1dfb      	adds	r3, r7, #7
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b7f      	cmp	r3, #127	; 0x7f
 8003932:	d809      	bhi.n	8003948 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003934:	1dfb      	adds	r3, r7, #7
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	001a      	movs	r2, r3
 800393a:	231f      	movs	r3, #31
 800393c:	401a      	ands	r2, r3
 800393e:	4b04      	ldr	r3, [pc, #16]	; (8003950 <__NVIC_EnableIRQ+0x30>)
 8003940:	2101      	movs	r1, #1
 8003942:	4091      	lsls	r1, r2
 8003944:	000a      	movs	r2, r1
 8003946:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003948:	46c0      	nop			; (mov r8, r8)
 800394a:	46bd      	mov	sp, r7
 800394c:	b002      	add	sp, #8
 800394e:	bd80      	pop	{r7, pc}
 8003950:	e000e100 	.word	0xe000e100

08003954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003954:	b590      	push	{r4, r7, lr}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	0002      	movs	r2, r0
 800395c:	6039      	str	r1, [r7, #0]
 800395e:	1dfb      	adds	r3, r7, #7
 8003960:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003962:	1dfb      	adds	r3, r7, #7
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b7f      	cmp	r3, #127	; 0x7f
 8003968:	d828      	bhi.n	80039bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800396a:	4a2f      	ldr	r2, [pc, #188]	; (8003a28 <__NVIC_SetPriority+0xd4>)
 800396c:	1dfb      	adds	r3, r7, #7
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	b25b      	sxtb	r3, r3
 8003972:	089b      	lsrs	r3, r3, #2
 8003974:	33c0      	adds	r3, #192	; 0xc0
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	589b      	ldr	r3, [r3, r2]
 800397a:	1dfa      	adds	r2, r7, #7
 800397c:	7812      	ldrb	r2, [r2, #0]
 800397e:	0011      	movs	r1, r2
 8003980:	2203      	movs	r2, #3
 8003982:	400a      	ands	r2, r1
 8003984:	00d2      	lsls	r2, r2, #3
 8003986:	21ff      	movs	r1, #255	; 0xff
 8003988:	4091      	lsls	r1, r2
 800398a:	000a      	movs	r2, r1
 800398c:	43d2      	mvns	r2, r2
 800398e:	401a      	ands	r2, r3
 8003990:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	019b      	lsls	r3, r3, #6
 8003996:	22ff      	movs	r2, #255	; 0xff
 8003998:	401a      	ands	r2, r3
 800399a:	1dfb      	adds	r3, r7, #7
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	0018      	movs	r0, r3
 80039a0:	2303      	movs	r3, #3
 80039a2:	4003      	ands	r3, r0
 80039a4:	00db      	lsls	r3, r3, #3
 80039a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039a8:	481f      	ldr	r0, [pc, #124]	; (8003a28 <__NVIC_SetPriority+0xd4>)
 80039aa:	1dfb      	adds	r3, r7, #7
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	b25b      	sxtb	r3, r3
 80039b0:	089b      	lsrs	r3, r3, #2
 80039b2:	430a      	orrs	r2, r1
 80039b4:	33c0      	adds	r3, #192	; 0xc0
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80039ba:	e031      	b.n	8003a20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039bc:	4a1b      	ldr	r2, [pc, #108]	; (8003a2c <__NVIC_SetPriority+0xd8>)
 80039be:	1dfb      	adds	r3, r7, #7
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	0019      	movs	r1, r3
 80039c4:	230f      	movs	r3, #15
 80039c6:	400b      	ands	r3, r1
 80039c8:	3b08      	subs	r3, #8
 80039ca:	089b      	lsrs	r3, r3, #2
 80039cc:	3306      	adds	r3, #6
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	18d3      	adds	r3, r2, r3
 80039d2:	3304      	adds	r3, #4
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	1dfa      	adds	r2, r7, #7
 80039d8:	7812      	ldrb	r2, [r2, #0]
 80039da:	0011      	movs	r1, r2
 80039dc:	2203      	movs	r2, #3
 80039de:	400a      	ands	r2, r1
 80039e0:	00d2      	lsls	r2, r2, #3
 80039e2:	21ff      	movs	r1, #255	; 0xff
 80039e4:	4091      	lsls	r1, r2
 80039e6:	000a      	movs	r2, r1
 80039e8:	43d2      	mvns	r2, r2
 80039ea:	401a      	ands	r2, r3
 80039ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	019b      	lsls	r3, r3, #6
 80039f2:	22ff      	movs	r2, #255	; 0xff
 80039f4:	401a      	ands	r2, r3
 80039f6:	1dfb      	adds	r3, r7, #7
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	0018      	movs	r0, r3
 80039fc:	2303      	movs	r3, #3
 80039fe:	4003      	ands	r3, r0
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a04:	4809      	ldr	r0, [pc, #36]	; (8003a2c <__NVIC_SetPriority+0xd8>)
 8003a06:	1dfb      	adds	r3, r7, #7
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	001c      	movs	r4, r3
 8003a0c:	230f      	movs	r3, #15
 8003a0e:	4023      	ands	r3, r4
 8003a10:	3b08      	subs	r3, #8
 8003a12:	089b      	lsrs	r3, r3, #2
 8003a14:	430a      	orrs	r2, r1
 8003a16:	3306      	adds	r3, #6
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	18c3      	adds	r3, r0, r3
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	601a      	str	r2, [r3, #0]
}
 8003a20:	46c0      	nop			; (mov r8, r8)
 8003a22:	46bd      	mov	sp, r7
 8003a24:	b003      	add	sp, #12
 8003a26:	bd90      	pop	{r4, r7, pc}
 8003a28:	e000e100 	.word	0xe000e100
 8003a2c:	e000ed00 	.word	0xe000ed00

08003a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	1e5a      	subs	r2, r3, #1
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	045b      	lsls	r3, r3, #17
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d301      	bcc.n	8003a48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a44:	2301      	movs	r3, #1
 8003a46:	e010      	b.n	8003a6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a48:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <SysTick_Config+0x44>)
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	3a01      	subs	r2, #1
 8003a4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a50:	2301      	movs	r3, #1
 8003a52:	425b      	negs	r3, r3
 8003a54:	2103      	movs	r1, #3
 8003a56:	0018      	movs	r0, r3
 8003a58:	f7ff ff7c 	bl	8003954 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a5c:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <SysTick_Config+0x44>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a62:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <SysTick_Config+0x44>)
 8003a64:	2207      	movs	r2, #7
 8003a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	0018      	movs	r0, r3
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	b002      	add	sp, #8
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	e000e010 	.word	0xe000e010

08003a78 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	607a      	str	r2, [r7, #4]
 8003a82:	210f      	movs	r1, #15
 8003a84:	187b      	adds	r3, r7, r1
 8003a86:	1c02      	adds	r2, r0, #0
 8003a88:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	187b      	adds	r3, r7, r1
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	b25b      	sxtb	r3, r3
 8003a92:	0011      	movs	r1, r2
 8003a94:	0018      	movs	r0, r3
 8003a96:	f7ff ff5d 	bl	8003954 <__NVIC_SetPriority>
}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	b004      	add	sp, #16
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	0002      	movs	r2, r0
 8003aaa:	1dfb      	adds	r3, r7, #7
 8003aac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aae:	1dfb      	adds	r3, r7, #7
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	b25b      	sxtb	r3, r3
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	f7ff ff33 	bl	8003920 <__NVIC_EnableIRQ>
}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b002      	add	sp, #8
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	0018      	movs	r0, r3
 8003ace:	f7ff ffaf 	bl	8003a30 <SysTick_Config>
 8003ad2:	0003      	movs	r3, r0
}
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b002      	add	sp, #8
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aea:	e147      	b.n	8003d7c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2101      	movs	r1, #1
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4091      	lsls	r1, r2
 8003af6:	000a      	movs	r2, r1
 8003af8:	4013      	ands	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d100      	bne.n	8003b04 <HAL_GPIO_Init+0x28>
 8003b02:	e138      	b.n	8003d76 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2203      	movs	r2, #3
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d005      	beq.n	8003b1c <HAL_GPIO_Init+0x40>
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2203      	movs	r2, #3
 8003b16:	4013      	ands	r3, r2
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d130      	bne.n	8003b7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	2203      	movs	r2, #3
 8003b28:	409a      	lsls	r2, r3
 8003b2a:	0013      	movs	r3, r2
 8003b2c:	43da      	mvns	r2, r3
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4013      	ands	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	409a      	lsls	r2, r3
 8003b3e:	0013      	movs	r3, r2
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b52:	2201      	movs	r2, #1
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	409a      	lsls	r2, r3
 8003b58:	0013      	movs	r3, r2
 8003b5a:	43da      	mvns	r2, r3
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	091b      	lsrs	r3, r3, #4
 8003b68:	2201      	movs	r2, #1
 8003b6a:	401a      	ands	r2, r3
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	409a      	lsls	r2, r3
 8003b70:	0013      	movs	r3, r2
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2203      	movs	r2, #3
 8003b84:	4013      	ands	r3, r2
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d017      	beq.n	8003bba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	2203      	movs	r2, #3
 8003b96:	409a      	lsls	r2, r3
 8003b98:	0013      	movs	r3, r2
 8003b9a:	43da      	mvns	r2, r3
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	689a      	ldr	r2, [r3, #8]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	409a      	lsls	r2, r3
 8003bac:	0013      	movs	r3, r2
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2203      	movs	r2, #3
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d123      	bne.n	8003c0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	08da      	lsrs	r2, r3, #3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	3208      	adds	r2, #8
 8003bce:	0092      	lsls	r2, r2, #2
 8003bd0:	58d3      	ldr	r3, [r2, r3]
 8003bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	2207      	movs	r2, #7
 8003bd8:	4013      	ands	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	220f      	movs	r2, #15
 8003bde:	409a      	lsls	r2, r3
 8003be0:	0013      	movs	r3, r2
 8003be2:	43da      	mvns	r2, r3
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4013      	ands	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	691a      	ldr	r2, [r3, #16]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2107      	movs	r1, #7
 8003bf2:	400b      	ands	r3, r1
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	409a      	lsls	r2, r3
 8003bf8:	0013      	movs	r3, r2
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	08da      	lsrs	r2, r3, #3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3208      	adds	r2, #8
 8003c08:	0092      	lsls	r2, r2, #2
 8003c0a:	6939      	ldr	r1, [r7, #16]
 8003c0c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	2203      	movs	r2, #3
 8003c1a:	409a      	lsls	r2, r3
 8003c1c:	0013      	movs	r3, r2
 8003c1e:	43da      	mvns	r2, r3
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4013      	ands	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2203      	movs	r2, #3
 8003c2c:	401a      	ands	r2, r3
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	409a      	lsls	r2, r3
 8003c34:	0013      	movs	r3, r2
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	23c0      	movs	r3, #192	; 0xc0
 8003c48:	029b      	lsls	r3, r3, #10
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d100      	bne.n	8003c50 <HAL_GPIO_Init+0x174>
 8003c4e:	e092      	b.n	8003d76 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003c50:	4a50      	ldr	r2, [pc, #320]	; (8003d94 <HAL_GPIO_Init+0x2b8>)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	089b      	lsrs	r3, r3, #2
 8003c56:	3318      	adds	r3, #24
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	589b      	ldr	r3, [r3, r2]
 8003c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2203      	movs	r2, #3
 8003c62:	4013      	ands	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	220f      	movs	r2, #15
 8003c68:	409a      	lsls	r2, r3
 8003c6a:	0013      	movs	r3, r2
 8003c6c:	43da      	mvns	r2, r3
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4013      	ands	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	23a0      	movs	r3, #160	; 0xa0
 8003c78:	05db      	lsls	r3, r3, #23
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d013      	beq.n	8003ca6 <HAL_GPIO_Init+0x1ca>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a45      	ldr	r2, [pc, #276]	; (8003d98 <HAL_GPIO_Init+0x2bc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d00d      	beq.n	8003ca2 <HAL_GPIO_Init+0x1c6>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a44      	ldr	r2, [pc, #272]	; (8003d9c <HAL_GPIO_Init+0x2c0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d007      	beq.n	8003c9e <HAL_GPIO_Init+0x1c2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a43      	ldr	r2, [pc, #268]	; (8003da0 <HAL_GPIO_Init+0x2c4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d101      	bne.n	8003c9a <HAL_GPIO_Init+0x1be>
 8003c96:	2303      	movs	r3, #3
 8003c98:	e006      	b.n	8003ca8 <HAL_GPIO_Init+0x1cc>
 8003c9a:	2305      	movs	r3, #5
 8003c9c:	e004      	b.n	8003ca8 <HAL_GPIO_Init+0x1cc>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e002      	b.n	8003ca8 <HAL_GPIO_Init+0x1cc>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e000      	b.n	8003ca8 <HAL_GPIO_Init+0x1cc>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	2103      	movs	r1, #3
 8003cac:	400a      	ands	r2, r1
 8003cae:	00d2      	lsls	r2, r2, #3
 8003cb0:	4093      	lsls	r3, r2
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003cb8:	4936      	ldr	r1, [pc, #216]	; (8003d94 <HAL_GPIO_Init+0x2b8>)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	089b      	lsrs	r3, r3, #2
 8003cbe:	3318      	adds	r3, #24
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cc6:	4b33      	ldr	r3, [pc, #204]	; (8003d94 <HAL_GPIO_Init+0x2b8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	43da      	mvns	r2, r3
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	2380      	movs	r3, #128	; 0x80
 8003cdc:	035b      	lsls	r3, r3, #13
 8003cde:	4013      	ands	r3, r2
 8003ce0:	d003      	beq.n	8003cea <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cea:	4b2a      	ldr	r3, [pc, #168]	; (8003d94 <HAL_GPIO_Init+0x2b8>)
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003cf0:	4b28      	ldr	r3, [pc, #160]	; (8003d94 <HAL_GPIO_Init+0x2b8>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	43da      	mvns	r2, r3
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	2380      	movs	r3, #128	; 0x80
 8003d06:	039b      	lsls	r3, r3, #14
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d003      	beq.n	8003d14 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d14:	4b1f      	ldr	r3, [pc, #124]	; (8003d94 <HAL_GPIO_Init+0x2b8>)
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d1a:	4a1e      	ldr	r2, [pc, #120]	; (8003d94 <HAL_GPIO_Init+0x2b8>)
 8003d1c:	2384      	movs	r3, #132	; 0x84
 8003d1e:	58d3      	ldr	r3, [r2, r3]
 8003d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	43da      	mvns	r2, r3
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	2380      	movs	r3, #128	; 0x80
 8003d32:	029b      	lsls	r3, r3, #10
 8003d34:	4013      	ands	r3, r2
 8003d36:	d003      	beq.n	8003d40 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d40:	4914      	ldr	r1, [pc, #80]	; (8003d94 <HAL_GPIO_Init+0x2b8>)
 8003d42:	2284      	movs	r2, #132	; 0x84
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003d48:	4a12      	ldr	r2, [pc, #72]	; (8003d94 <HAL_GPIO_Init+0x2b8>)
 8003d4a:	2380      	movs	r3, #128	; 0x80
 8003d4c:	58d3      	ldr	r3, [r2, r3]
 8003d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	43da      	mvns	r2, r3
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4013      	ands	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	2380      	movs	r3, #128	; 0x80
 8003d60:	025b      	lsls	r3, r3, #9
 8003d62:	4013      	ands	r3, r2
 8003d64:	d003      	beq.n	8003d6e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d6e:	4909      	ldr	r1, [pc, #36]	; (8003d94 <HAL_GPIO_Init+0x2b8>)
 8003d70:	2280      	movs	r2, #128	; 0x80
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	40da      	lsrs	r2, r3
 8003d84:	1e13      	subs	r3, r2, #0
 8003d86:	d000      	beq.n	8003d8a <HAL_GPIO_Init+0x2ae>
 8003d88:	e6b0      	b.n	8003aec <HAL_GPIO_Init+0x10>
  }
}
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	46c0      	nop			; (mov r8, r8)
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	b006      	add	sp, #24
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40021800 	.word	0x40021800
 8003d98:	50000400 	.word	0x50000400
 8003d9c:	50000800 	.word	0x50000800
 8003da0:	50000c00 	.word	0x50000c00

08003da4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003dac:	4b19      	ldr	r3, [pc, #100]	; (8003e14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a19      	ldr	r2, [pc, #100]	; (8003e18 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	0019      	movs	r1, r3
 8003db6:	4b17      	ldr	r3, [pc, #92]	; (8003e14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d11f      	bne.n	8003e08 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003dc8:	4b14      	ldr	r3, [pc, #80]	; (8003e1c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	0013      	movs	r3, r2
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	189b      	adds	r3, r3, r2
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	4912      	ldr	r1, [pc, #72]	; (8003e20 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f7fc f9b2 	bl	8000140 <__udivsi3>
 8003ddc:	0003      	movs	r3, r0
 8003dde:	3301      	adds	r3, #1
 8003de0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003de2:	e008      	b.n	8003df6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d003      	beq.n	8003df2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	60fb      	str	r3, [r7, #12]
 8003df0:	e001      	b.n	8003df6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e009      	b.n	8003e0a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003df6:	4b07      	ldr	r3, [pc, #28]	; (8003e14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	2380      	movs	r3, #128	; 0x80
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	401a      	ands	r2, r3
 8003e00:	2380      	movs	r3, #128	; 0x80
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d0ed      	beq.n	8003de4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	b004      	add	sp, #16
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	40007000 	.word	0x40007000
 8003e18:	fffff9ff 	.word	0xfffff9ff
 8003e1c:	20000000 	.word	0x20000000
 8003e20:	000f4240 	.word	0x000f4240

08003e24 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003e28:	4b03      	ldr	r3, [pc, #12]	; (8003e38 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	23e0      	movs	r3, #224	; 0xe0
 8003e2e:	01db      	lsls	r3, r3, #7
 8003e30:	4013      	ands	r3, r2
}
 8003e32:	0018      	movs	r0, r3
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	40021000 	.word	0x40021000

08003e3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b088      	sub	sp, #32
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e2f3      	b.n	8004436 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2201      	movs	r2, #1
 8003e54:	4013      	ands	r3, r2
 8003e56:	d100      	bne.n	8003e5a <HAL_RCC_OscConfig+0x1e>
 8003e58:	e07c      	b.n	8003f54 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e5a:	4bc3      	ldr	r3, [pc, #780]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	2238      	movs	r2, #56	; 0x38
 8003e60:	4013      	ands	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e64:	4bc0      	ldr	r3, [pc, #768]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	2203      	movs	r2, #3
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	2b10      	cmp	r3, #16
 8003e72:	d102      	bne.n	8003e7a <HAL_RCC_OscConfig+0x3e>
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d002      	beq.n	8003e80 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d10b      	bne.n	8003e98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e80:	4bb9      	ldr	r3, [pc, #740]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	2380      	movs	r3, #128	; 0x80
 8003e86:	029b      	lsls	r3, r3, #10
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d062      	beq.n	8003f52 <HAL_RCC_OscConfig+0x116>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d15e      	bne.n	8003f52 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e2ce      	b.n	8004436 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	2380      	movs	r3, #128	; 0x80
 8003e9e:	025b      	lsls	r3, r3, #9
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d107      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x78>
 8003ea4:	4bb0      	ldr	r3, [pc, #704]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	4baf      	ldr	r3, [pc, #700]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003eaa:	2180      	movs	r1, #128	; 0x80
 8003eac:	0249      	lsls	r1, r1, #9
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	e020      	b.n	8003ef6 <HAL_RCC_OscConfig+0xba>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	23a0      	movs	r3, #160	; 0xa0
 8003eba:	02db      	lsls	r3, r3, #11
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d10e      	bne.n	8003ede <HAL_RCC_OscConfig+0xa2>
 8003ec0:	4ba9      	ldr	r3, [pc, #676]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	4ba8      	ldr	r3, [pc, #672]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003ec6:	2180      	movs	r1, #128	; 0x80
 8003ec8:	02c9      	lsls	r1, r1, #11
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	4ba6      	ldr	r3, [pc, #664]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	4ba5      	ldr	r3, [pc, #660]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003ed4:	2180      	movs	r1, #128	; 0x80
 8003ed6:	0249      	lsls	r1, r1, #9
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	e00b      	b.n	8003ef6 <HAL_RCC_OscConfig+0xba>
 8003ede:	4ba2      	ldr	r3, [pc, #648]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	4ba1      	ldr	r3, [pc, #644]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003ee4:	49a1      	ldr	r1, [pc, #644]	; (800416c <HAL_RCC_OscConfig+0x330>)
 8003ee6:	400a      	ands	r2, r1
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	4b9f      	ldr	r3, [pc, #636]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	4b9e      	ldr	r3, [pc, #632]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003ef0:	499f      	ldr	r1, [pc, #636]	; (8004170 <HAL_RCC_OscConfig+0x334>)
 8003ef2:	400a      	ands	r2, r1
 8003ef4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d014      	beq.n	8003f28 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efe:	f7ff fd05 	bl	800390c <HAL_GetTick>
 8003f02:	0003      	movs	r3, r0
 8003f04:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f08:	f7ff fd00 	bl	800390c <HAL_GetTick>
 8003f0c:	0002      	movs	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b64      	cmp	r3, #100	; 0x64
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e28d      	b.n	8004436 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f1a:	4b93      	ldr	r3, [pc, #588]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	2380      	movs	r3, #128	; 0x80
 8003f20:	029b      	lsls	r3, r3, #10
 8003f22:	4013      	ands	r3, r2
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCC_OscConfig+0xcc>
 8003f26:	e015      	b.n	8003f54 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7ff fcf0 	bl	800390c <HAL_GetTick>
 8003f2c:	0003      	movs	r3, r0
 8003f2e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f32:	f7ff fceb 	bl	800390c <HAL_GetTick>
 8003f36:	0002      	movs	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b64      	cmp	r3, #100	; 0x64
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e278      	b.n	8004436 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f44:	4b88      	ldr	r3, [pc, #544]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	029b      	lsls	r3, r3, #10
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d1f0      	bne.n	8003f32 <HAL_RCC_OscConfig+0xf6>
 8003f50:	e000      	b.n	8003f54 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f52:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2202      	movs	r2, #2
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d100      	bne.n	8003f60 <HAL_RCC_OscConfig+0x124>
 8003f5e:	e099      	b.n	8004094 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f60:	4b81      	ldr	r3, [pc, #516]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2238      	movs	r2, #56	; 0x38
 8003f66:	4013      	ands	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f6a:	4b7f      	ldr	r3, [pc, #508]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	2203      	movs	r2, #3
 8003f70:	4013      	ands	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	2b10      	cmp	r3, #16
 8003f78:	d102      	bne.n	8003f80 <HAL_RCC_OscConfig+0x144>
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d002      	beq.n	8003f86 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d135      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f86:	4b78      	ldr	r3, [pc, #480]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	2380      	movs	r3, #128	; 0x80
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d005      	beq.n	8003f9e <HAL_RCC_OscConfig+0x162>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e24b      	b.n	8004436 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f9e:	4b72      	ldr	r3, [pc, #456]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	4a74      	ldr	r2, [pc, #464]	; (8004174 <HAL_RCC_OscConfig+0x338>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	0019      	movs	r1, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	021a      	lsls	r2, r3, #8
 8003fae:	4b6e      	ldr	r3, [pc, #440]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d112      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003fba:	4b6b      	ldr	r3, [pc, #428]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a6e      	ldr	r2, [pc, #440]	; (8004178 <HAL_RCC_OscConfig+0x33c>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	0019      	movs	r1, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691a      	ldr	r2, [r3, #16]
 8003fc8:	4b67      	ldr	r3, [pc, #412]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003fce:	4b66      	ldr	r3, [pc, #408]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	0adb      	lsrs	r3, r3, #11
 8003fd4:	2207      	movs	r2, #7
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	4a68      	ldr	r2, [pc, #416]	; (800417c <HAL_RCC_OscConfig+0x340>)
 8003fda:	40da      	lsrs	r2, r3
 8003fdc:	4b68      	ldr	r3, [pc, #416]	; (8004180 <HAL_RCC_OscConfig+0x344>)
 8003fde:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003fe0:	4b68      	ldr	r3, [pc, #416]	; (8004184 <HAL_RCC_OscConfig+0x348>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f7ff fc35 	bl	8003854 <HAL_InitTick>
 8003fea:	1e03      	subs	r3, r0, #0
 8003fec:	d051      	beq.n	8004092 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e221      	b.n	8004436 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d030      	beq.n	800405c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003ffa:	4b5b      	ldr	r3, [pc, #364]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a5e      	ldr	r2, [pc, #376]	; (8004178 <HAL_RCC_OscConfig+0x33c>)
 8004000:	4013      	ands	r3, r2
 8004002:	0019      	movs	r1, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	4b57      	ldr	r3, [pc, #348]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 800400a:	430a      	orrs	r2, r1
 800400c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800400e:	4b56      	ldr	r3, [pc, #344]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	4b55      	ldr	r3, [pc, #340]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8004014:	2180      	movs	r1, #128	; 0x80
 8004016:	0049      	lsls	r1, r1, #1
 8004018:	430a      	orrs	r2, r1
 800401a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401c:	f7ff fc76 	bl	800390c <HAL_GetTick>
 8004020:	0003      	movs	r3, r0
 8004022:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004026:	f7ff fc71 	bl	800390c <HAL_GetTick>
 800402a:	0002      	movs	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e1fe      	b.n	8004436 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004038:	4b4b      	ldr	r3, [pc, #300]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	2380      	movs	r3, #128	; 0x80
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4013      	ands	r3, r2
 8004042:	d0f0      	beq.n	8004026 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004044:	4b48      	ldr	r3, [pc, #288]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	4a4a      	ldr	r2, [pc, #296]	; (8004174 <HAL_RCC_OscConfig+0x338>)
 800404a:	4013      	ands	r3, r2
 800404c:	0019      	movs	r1, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	021a      	lsls	r2, r3, #8
 8004054:	4b44      	ldr	r3, [pc, #272]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8004056:	430a      	orrs	r2, r1
 8004058:	605a      	str	r2, [r3, #4]
 800405a:	e01b      	b.n	8004094 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800405c:	4b42      	ldr	r3, [pc, #264]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4b41      	ldr	r3, [pc, #260]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8004062:	4949      	ldr	r1, [pc, #292]	; (8004188 <HAL_RCC_OscConfig+0x34c>)
 8004064:	400a      	ands	r2, r1
 8004066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7ff fc50 	bl	800390c <HAL_GetTick>
 800406c:	0003      	movs	r3, r0
 800406e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004072:	f7ff fc4b 	bl	800390c <HAL_GetTick>
 8004076:	0002      	movs	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e1d8      	b.n	8004436 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004084:	4b38      	ldr	r3, [pc, #224]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	2380      	movs	r3, #128	; 0x80
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	4013      	ands	r3, r2
 800408e:	d1f0      	bne.n	8004072 <HAL_RCC_OscConfig+0x236>
 8004090:	e000      	b.n	8004094 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004092:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2208      	movs	r2, #8
 800409a:	4013      	ands	r3, r2
 800409c:	d047      	beq.n	800412e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800409e:	4b32      	ldr	r3, [pc, #200]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2238      	movs	r2, #56	; 0x38
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b18      	cmp	r3, #24
 80040a8:	d10a      	bne.n	80040c0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80040aa:	4b2f      	ldr	r3, [pc, #188]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 80040ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ae:	2202      	movs	r2, #2
 80040b0:	4013      	ands	r3, r2
 80040b2:	d03c      	beq.n	800412e <HAL_RCC_OscConfig+0x2f2>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d138      	bne.n	800412e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e1ba      	b.n	8004436 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d019      	beq.n	80040fc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80040c8:	4b27      	ldr	r3, [pc, #156]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 80040ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040cc:	4b26      	ldr	r3, [pc, #152]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 80040ce:	2101      	movs	r1, #1
 80040d0:	430a      	orrs	r2, r1
 80040d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7ff fc1a 	bl	800390c <HAL_GetTick>
 80040d8:	0003      	movs	r3, r0
 80040da:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040de:	f7ff fc15 	bl	800390c <HAL_GetTick>
 80040e2:	0002      	movs	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e1a2      	b.n	8004436 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040f0:	4b1d      	ldr	r3, [pc, #116]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 80040f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f4:	2202      	movs	r2, #2
 80040f6:	4013      	ands	r3, r2
 80040f8:	d0f1      	beq.n	80040de <HAL_RCC_OscConfig+0x2a2>
 80040fa:	e018      	b.n	800412e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80040fc:	4b1a      	ldr	r3, [pc, #104]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 80040fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004100:	4b19      	ldr	r3, [pc, #100]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8004102:	2101      	movs	r1, #1
 8004104:	438a      	bics	r2, r1
 8004106:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7ff fc00 	bl	800390c <HAL_GetTick>
 800410c:	0003      	movs	r3, r0
 800410e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004112:	f7ff fbfb 	bl	800390c <HAL_GetTick>
 8004116:	0002      	movs	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e188      	b.n	8004436 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004124:	4b10      	ldr	r3, [pc, #64]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8004126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004128:	2202      	movs	r2, #2
 800412a:	4013      	ands	r3, r2
 800412c:	d1f1      	bne.n	8004112 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2204      	movs	r2, #4
 8004134:	4013      	ands	r3, r2
 8004136:	d100      	bne.n	800413a <HAL_RCC_OscConfig+0x2fe>
 8004138:	e0c6      	b.n	80042c8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800413a:	231f      	movs	r3, #31
 800413c:	18fb      	adds	r3, r7, r3
 800413e:	2200      	movs	r2, #0
 8004140:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004142:	4b09      	ldr	r3, [pc, #36]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2238      	movs	r2, #56	; 0x38
 8004148:	4013      	ands	r3, r2
 800414a:	2b20      	cmp	r3, #32
 800414c:	d11e      	bne.n	800418c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800414e:	4b06      	ldr	r3, [pc, #24]	; (8004168 <HAL_RCC_OscConfig+0x32c>)
 8004150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004152:	2202      	movs	r2, #2
 8004154:	4013      	ands	r3, r2
 8004156:	d100      	bne.n	800415a <HAL_RCC_OscConfig+0x31e>
 8004158:	e0b6      	b.n	80042c8 <HAL_RCC_OscConfig+0x48c>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d000      	beq.n	8004164 <HAL_RCC_OscConfig+0x328>
 8004162:	e0b1      	b.n	80042c8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e166      	b.n	8004436 <HAL_RCC_OscConfig+0x5fa>
 8004168:	40021000 	.word	0x40021000
 800416c:	fffeffff 	.word	0xfffeffff
 8004170:	fffbffff 	.word	0xfffbffff
 8004174:	ffff80ff 	.word	0xffff80ff
 8004178:	ffffc7ff 	.word	0xffffc7ff
 800417c:	00f42400 	.word	0x00f42400
 8004180:	20000000 	.word	0x20000000
 8004184:	20000004 	.word	0x20000004
 8004188:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800418c:	4bac      	ldr	r3, [pc, #688]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 800418e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004190:	2380      	movs	r3, #128	; 0x80
 8004192:	055b      	lsls	r3, r3, #21
 8004194:	4013      	ands	r3, r2
 8004196:	d101      	bne.n	800419c <HAL_RCC_OscConfig+0x360>
 8004198:	2301      	movs	r3, #1
 800419a:	e000      	b.n	800419e <HAL_RCC_OscConfig+0x362>
 800419c:	2300      	movs	r3, #0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d011      	beq.n	80041c6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80041a2:	4ba7      	ldr	r3, [pc, #668]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 80041a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041a6:	4ba6      	ldr	r3, [pc, #664]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 80041a8:	2180      	movs	r1, #128	; 0x80
 80041aa:	0549      	lsls	r1, r1, #21
 80041ac:	430a      	orrs	r2, r1
 80041ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80041b0:	4ba3      	ldr	r3, [pc, #652]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 80041b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	055b      	lsls	r3, r3, #21
 80041b8:	4013      	ands	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]
 80041bc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80041be:	231f      	movs	r3, #31
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	2201      	movs	r2, #1
 80041c4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041c6:	4b9f      	ldr	r3, [pc, #636]	; (8004444 <HAL_RCC_OscConfig+0x608>)
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	2380      	movs	r3, #128	; 0x80
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	4013      	ands	r3, r2
 80041d0:	d11a      	bne.n	8004208 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041d2:	4b9c      	ldr	r3, [pc, #624]	; (8004444 <HAL_RCC_OscConfig+0x608>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	4b9b      	ldr	r3, [pc, #620]	; (8004444 <HAL_RCC_OscConfig+0x608>)
 80041d8:	2180      	movs	r1, #128	; 0x80
 80041da:	0049      	lsls	r1, r1, #1
 80041dc:	430a      	orrs	r2, r1
 80041de:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80041e0:	f7ff fb94 	bl	800390c <HAL_GetTick>
 80041e4:	0003      	movs	r3, r0
 80041e6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041e8:	e008      	b.n	80041fc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ea:	f7ff fb8f 	bl	800390c <HAL_GetTick>
 80041ee:	0002      	movs	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e11c      	b.n	8004436 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041fc:	4b91      	ldr	r3, [pc, #580]	; (8004444 <HAL_RCC_OscConfig+0x608>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	2380      	movs	r3, #128	; 0x80
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	4013      	ands	r3, r2
 8004206:	d0f0      	beq.n	80041ea <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d106      	bne.n	800421e <HAL_RCC_OscConfig+0x3e2>
 8004210:	4b8b      	ldr	r3, [pc, #556]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 8004212:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004214:	4b8a      	ldr	r3, [pc, #552]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 8004216:	2101      	movs	r1, #1
 8004218:	430a      	orrs	r2, r1
 800421a:	65da      	str	r2, [r3, #92]	; 0x5c
 800421c:	e01c      	b.n	8004258 <HAL_RCC_OscConfig+0x41c>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	2b05      	cmp	r3, #5
 8004224:	d10c      	bne.n	8004240 <HAL_RCC_OscConfig+0x404>
 8004226:	4b86      	ldr	r3, [pc, #536]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 8004228:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800422a:	4b85      	ldr	r3, [pc, #532]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 800422c:	2104      	movs	r1, #4
 800422e:	430a      	orrs	r2, r1
 8004230:	65da      	str	r2, [r3, #92]	; 0x5c
 8004232:	4b83      	ldr	r3, [pc, #524]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 8004234:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004236:	4b82      	ldr	r3, [pc, #520]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 8004238:	2101      	movs	r1, #1
 800423a:	430a      	orrs	r2, r1
 800423c:	65da      	str	r2, [r3, #92]	; 0x5c
 800423e:	e00b      	b.n	8004258 <HAL_RCC_OscConfig+0x41c>
 8004240:	4b7f      	ldr	r3, [pc, #508]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 8004242:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004244:	4b7e      	ldr	r3, [pc, #504]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 8004246:	2101      	movs	r1, #1
 8004248:	438a      	bics	r2, r1
 800424a:	65da      	str	r2, [r3, #92]	; 0x5c
 800424c:	4b7c      	ldr	r3, [pc, #496]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 800424e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004250:	4b7b      	ldr	r3, [pc, #492]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 8004252:	2104      	movs	r1, #4
 8004254:	438a      	bics	r2, r1
 8004256:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d014      	beq.n	800428a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004260:	f7ff fb54 	bl	800390c <HAL_GetTick>
 8004264:	0003      	movs	r3, r0
 8004266:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004268:	e009      	b.n	800427e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800426a:	f7ff fb4f 	bl	800390c <HAL_GetTick>
 800426e:	0002      	movs	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	4a74      	ldr	r2, [pc, #464]	; (8004448 <HAL_RCC_OscConfig+0x60c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e0db      	b.n	8004436 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800427e:	4b70      	ldr	r3, [pc, #448]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 8004280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004282:	2202      	movs	r2, #2
 8004284:	4013      	ands	r3, r2
 8004286:	d0f0      	beq.n	800426a <HAL_RCC_OscConfig+0x42e>
 8004288:	e013      	b.n	80042b2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428a:	f7ff fb3f 	bl	800390c <HAL_GetTick>
 800428e:	0003      	movs	r3, r0
 8004290:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004292:	e009      	b.n	80042a8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004294:	f7ff fb3a 	bl	800390c <HAL_GetTick>
 8004298:	0002      	movs	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	4a6a      	ldr	r2, [pc, #424]	; (8004448 <HAL_RCC_OscConfig+0x60c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e0c6      	b.n	8004436 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042a8:	4b65      	ldr	r3, [pc, #404]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 80042aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ac:	2202      	movs	r2, #2
 80042ae:	4013      	ands	r3, r2
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80042b2:	231f      	movs	r3, #31
 80042b4:	18fb      	adds	r3, r7, r3
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d105      	bne.n	80042c8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80042bc:	4b60      	ldr	r3, [pc, #384]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 80042be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042c0:	4b5f      	ldr	r3, [pc, #380]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 80042c2:	4962      	ldr	r1, [pc, #392]	; (800444c <HAL_RCC_OscConfig+0x610>)
 80042c4:	400a      	ands	r2, r1
 80042c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d100      	bne.n	80042d2 <HAL_RCC_OscConfig+0x496>
 80042d0:	e0b0      	b.n	8004434 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042d2:	4b5b      	ldr	r3, [pc, #364]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2238      	movs	r2, #56	; 0x38
 80042d8:	4013      	ands	r3, r2
 80042da:	2b10      	cmp	r3, #16
 80042dc:	d100      	bne.n	80042e0 <HAL_RCC_OscConfig+0x4a4>
 80042de:	e078      	b.n	80043d2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d153      	bne.n	8004390 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e8:	4b55      	ldr	r3, [pc, #340]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	4b54      	ldr	r3, [pc, #336]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 80042ee:	4958      	ldr	r1, [pc, #352]	; (8004450 <HAL_RCC_OscConfig+0x614>)
 80042f0:	400a      	ands	r2, r1
 80042f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f4:	f7ff fb0a 	bl	800390c <HAL_GetTick>
 80042f8:	0003      	movs	r3, r0
 80042fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042fe:	f7ff fb05 	bl	800390c <HAL_GetTick>
 8004302:	0002      	movs	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e092      	b.n	8004436 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004310:	4b4b      	ldr	r3, [pc, #300]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	049b      	lsls	r3, r3, #18
 8004318:	4013      	ands	r3, r2
 800431a:	d1f0      	bne.n	80042fe <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800431c:	4b48      	ldr	r3, [pc, #288]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4a4c      	ldr	r2, [pc, #304]	; (8004454 <HAL_RCC_OscConfig+0x618>)
 8004322:	4013      	ands	r3, r2
 8004324:	0019      	movs	r1, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1a      	ldr	r2, [r3, #32]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004334:	021b      	lsls	r3, r3, #8
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	431a      	orrs	r2, r3
 8004344:	4b3e      	ldr	r3, [pc, #248]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 8004346:	430a      	orrs	r2, r1
 8004348:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800434a:	4b3d      	ldr	r3, [pc, #244]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b3c      	ldr	r3, [pc, #240]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 8004350:	2180      	movs	r1, #128	; 0x80
 8004352:	0449      	lsls	r1, r1, #17
 8004354:	430a      	orrs	r2, r1
 8004356:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004358:	4b39      	ldr	r3, [pc, #228]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	4b38      	ldr	r3, [pc, #224]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 800435e:	2180      	movs	r1, #128	; 0x80
 8004360:	0549      	lsls	r1, r1, #21
 8004362:	430a      	orrs	r2, r1
 8004364:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004366:	f7ff fad1 	bl	800390c <HAL_GetTick>
 800436a:	0003      	movs	r3, r0
 800436c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004370:	f7ff facc 	bl	800390c <HAL_GetTick>
 8004374:	0002      	movs	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e059      	b.n	8004436 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004382:	4b2f      	ldr	r3, [pc, #188]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	2380      	movs	r3, #128	; 0x80
 8004388:	049b      	lsls	r3, r3, #18
 800438a:	4013      	ands	r3, r2
 800438c:	d0f0      	beq.n	8004370 <HAL_RCC_OscConfig+0x534>
 800438e:	e051      	b.n	8004434 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004390:	4b2b      	ldr	r3, [pc, #172]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	4b2a      	ldr	r3, [pc, #168]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 8004396:	492e      	ldr	r1, [pc, #184]	; (8004450 <HAL_RCC_OscConfig+0x614>)
 8004398:	400a      	ands	r2, r1
 800439a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439c:	f7ff fab6 	bl	800390c <HAL_GetTick>
 80043a0:	0003      	movs	r3, r0
 80043a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a6:	f7ff fab1 	bl	800390c <HAL_GetTick>
 80043aa:	0002      	movs	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e03e      	b.n	8004436 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043b8:	4b21      	ldr	r3, [pc, #132]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	2380      	movs	r3, #128	; 0x80
 80043be:	049b      	lsls	r3, r3, #18
 80043c0:	4013      	ands	r3, r2
 80043c2:	d1f0      	bne.n	80043a6 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80043c4:	4b1e      	ldr	r3, [pc, #120]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	4b1d      	ldr	r3, [pc, #116]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 80043ca:	4923      	ldr	r1, [pc, #140]	; (8004458 <HAL_RCC_OscConfig+0x61c>)
 80043cc:	400a      	ands	r2, r1
 80043ce:	60da      	str	r2, [r3, #12]
 80043d0:	e030      	b.n	8004434 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d101      	bne.n	80043de <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e02b      	b.n	8004436 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80043de:	4b18      	ldr	r3, [pc, #96]	; (8004440 <HAL_RCC_OscConfig+0x604>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2203      	movs	r2, #3
 80043e8:	401a      	ands	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d11e      	bne.n	8004430 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	2270      	movs	r2, #112	; 0x70
 80043f6:	401a      	ands	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d117      	bne.n	8004430 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	23fe      	movs	r3, #254	; 0xfe
 8004404:	01db      	lsls	r3, r3, #7
 8004406:	401a      	ands	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800440e:	429a      	cmp	r2, r3
 8004410:	d10e      	bne.n	8004430 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	23f8      	movs	r3, #248	; 0xf8
 8004416:	039b      	lsls	r3, r3, #14
 8004418:	401a      	ands	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800441e:	429a      	cmp	r2, r3
 8004420:	d106      	bne.n	8004430 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	0f5b      	lsrs	r3, r3, #29
 8004426:	075a      	lsls	r2, r3, #29
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800442c:	429a      	cmp	r2, r3
 800442e:	d001      	beq.n	8004434 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	0018      	movs	r0, r3
 8004438:	46bd      	mov	sp, r7
 800443a:	b008      	add	sp, #32
 800443c:	bd80      	pop	{r7, pc}
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	40021000 	.word	0x40021000
 8004444:	40007000 	.word	0x40007000
 8004448:	00001388 	.word	0x00001388
 800444c:	efffffff 	.word	0xefffffff
 8004450:	feffffff 	.word	0xfeffffff
 8004454:	1fc1808c 	.word	0x1fc1808c
 8004458:	effefffc 	.word	0xeffefffc

0800445c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0e9      	b.n	8004644 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004470:	4b76      	ldr	r3, [pc, #472]	; (800464c <HAL_RCC_ClockConfig+0x1f0>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2207      	movs	r2, #7
 8004476:	4013      	ands	r3, r2
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d91e      	bls.n	80044bc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447e:	4b73      	ldr	r3, [pc, #460]	; (800464c <HAL_RCC_ClockConfig+0x1f0>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2207      	movs	r2, #7
 8004484:	4393      	bics	r3, r2
 8004486:	0019      	movs	r1, r3
 8004488:	4b70      	ldr	r3, [pc, #448]	; (800464c <HAL_RCC_ClockConfig+0x1f0>)
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004490:	f7ff fa3c 	bl	800390c <HAL_GetTick>
 8004494:	0003      	movs	r3, r0
 8004496:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004498:	e009      	b.n	80044ae <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800449a:	f7ff fa37 	bl	800390c <HAL_GetTick>
 800449e:	0002      	movs	r2, r0
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	4a6a      	ldr	r2, [pc, #424]	; (8004650 <HAL_RCC_ClockConfig+0x1f4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e0ca      	b.n	8004644 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80044ae:	4b67      	ldr	r3, [pc, #412]	; (800464c <HAL_RCC_ClockConfig+0x1f0>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2207      	movs	r2, #7
 80044b4:	4013      	ands	r3, r2
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d1ee      	bne.n	800449a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2202      	movs	r2, #2
 80044c2:	4013      	ands	r3, r2
 80044c4:	d015      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2204      	movs	r2, #4
 80044cc:	4013      	ands	r3, r2
 80044ce:	d006      	beq.n	80044de <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80044d0:	4b60      	ldr	r3, [pc, #384]	; (8004654 <HAL_RCC_ClockConfig+0x1f8>)
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	4b5f      	ldr	r3, [pc, #380]	; (8004654 <HAL_RCC_ClockConfig+0x1f8>)
 80044d6:	21e0      	movs	r1, #224	; 0xe0
 80044d8:	01c9      	lsls	r1, r1, #7
 80044da:	430a      	orrs	r2, r1
 80044dc:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044de:	4b5d      	ldr	r3, [pc, #372]	; (8004654 <HAL_RCC_ClockConfig+0x1f8>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	4a5d      	ldr	r2, [pc, #372]	; (8004658 <HAL_RCC_ClockConfig+0x1fc>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	0019      	movs	r1, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	4b59      	ldr	r3, [pc, #356]	; (8004654 <HAL_RCC_ClockConfig+0x1f8>)
 80044ee:	430a      	orrs	r2, r1
 80044f0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2201      	movs	r2, #1
 80044f8:	4013      	ands	r3, r2
 80044fa:	d057      	beq.n	80045ac <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d107      	bne.n	8004514 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004504:	4b53      	ldr	r3, [pc, #332]	; (8004654 <HAL_RCC_ClockConfig+0x1f8>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	2380      	movs	r3, #128	; 0x80
 800450a:	029b      	lsls	r3, r3, #10
 800450c:	4013      	ands	r3, r2
 800450e:	d12b      	bne.n	8004568 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e097      	b.n	8004644 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b02      	cmp	r3, #2
 800451a:	d107      	bne.n	800452c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800451c:	4b4d      	ldr	r3, [pc, #308]	; (8004654 <HAL_RCC_ClockConfig+0x1f8>)
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	2380      	movs	r3, #128	; 0x80
 8004522:	049b      	lsls	r3, r3, #18
 8004524:	4013      	ands	r3, r2
 8004526:	d11f      	bne.n	8004568 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e08b      	b.n	8004644 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d107      	bne.n	8004544 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004534:	4b47      	ldr	r3, [pc, #284]	; (8004654 <HAL_RCC_ClockConfig+0x1f8>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	2380      	movs	r3, #128	; 0x80
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	4013      	ands	r3, r2
 800453e:	d113      	bne.n	8004568 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e07f      	b.n	8004644 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2b03      	cmp	r3, #3
 800454a:	d106      	bne.n	800455a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800454c:	4b41      	ldr	r3, [pc, #260]	; (8004654 <HAL_RCC_ClockConfig+0x1f8>)
 800454e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004550:	2202      	movs	r2, #2
 8004552:	4013      	ands	r3, r2
 8004554:	d108      	bne.n	8004568 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e074      	b.n	8004644 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800455a:	4b3e      	ldr	r3, [pc, #248]	; (8004654 <HAL_RCC_ClockConfig+0x1f8>)
 800455c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455e:	2202      	movs	r2, #2
 8004560:	4013      	ands	r3, r2
 8004562:	d101      	bne.n	8004568 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e06d      	b.n	8004644 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004568:	4b3a      	ldr	r3, [pc, #232]	; (8004654 <HAL_RCC_ClockConfig+0x1f8>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	2207      	movs	r2, #7
 800456e:	4393      	bics	r3, r2
 8004570:	0019      	movs	r1, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	4b37      	ldr	r3, [pc, #220]	; (8004654 <HAL_RCC_ClockConfig+0x1f8>)
 8004578:	430a      	orrs	r2, r1
 800457a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800457c:	f7ff f9c6 	bl	800390c <HAL_GetTick>
 8004580:	0003      	movs	r3, r0
 8004582:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004584:	e009      	b.n	800459a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004586:	f7ff f9c1 	bl	800390c <HAL_GetTick>
 800458a:	0002      	movs	r2, r0
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	4a2f      	ldr	r2, [pc, #188]	; (8004650 <HAL_RCC_ClockConfig+0x1f4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d901      	bls.n	800459a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e054      	b.n	8004644 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800459a:	4b2e      	ldr	r3, [pc, #184]	; (8004654 <HAL_RCC_ClockConfig+0x1f8>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	2238      	movs	r2, #56	; 0x38
 80045a0:	401a      	ands	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d1ec      	bne.n	8004586 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045ac:	4b27      	ldr	r3, [pc, #156]	; (800464c <HAL_RCC_ClockConfig+0x1f0>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2207      	movs	r2, #7
 80045b2:	4013      	ands	r3, r2
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d21e      	bcs.n	80045f8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ba:	4b24      	ldr	r3, [pc, #144]	; (800464c <HAL_RCC_ClockConfig+0x1f0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2207      	movs	r2, #7
 80045c0:	4393      	bics	r3, r2
 80045c2:	0019      	movs	r1, r3
 80045c4:	4b21      	ldr	r3, [pc, #132]	; (800464c <HAL_RCC_ClockConfig+0x1f0>)
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045cc:	f7ff f99e 	bl	800390c <HAL_GetTick>
 80045d0:	0003      	movs	r3, r0
 80045d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045d4:	e009      	b.n	80045ea <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d6:	f7ff f999 	bl	800390c <HAL_GetTick>
 80045da:	0002      	movs	r2, r0
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	4a1b      	ldr	r2, [pc, #108]	; (8004650 <HAL_RCC_ClockConfig+0x1f4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e02c      	b.n	8004644 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045ea:	4b18      	ldr	r3, [pc, #96]	; (800464c <HAL_RCC_ClockConfig+0x1f0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2207      	movs	r2, #7
 80045f0:	4013      	ands	r3, r2
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d1ee      	bne.n	80045d6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2204      	movs	r2, #4
 80045fe:	4013      	ands	r3, r2
 8004600:	d009      	beq.n	8004616 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004602:	4b14      	ldr	r3, [pc, #80]	; (8004654 <HAL_RCC_ClockConfig+0x1f8>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	4a15      	ldr	r2, [pc, #84]	; (800465c <HAL_RCC_ClockConfig+0x200>)
 8004608:	4013      	ands	r3, r2
 800460a:	0019      	movs	r1, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	4b10      	ldr	r3, [pc, #64]	; (8004654 <HAL_RCC_ClockConfig+0x1f8>)
 8004612:	430a      	orrs	r2, r1
 8004614:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004616:	f000 f829 	bl	800466c <HAL_RCC_GetSysClockFreq>
 800461a:	0001      	movs	r1, r0
 800461c:	4b0d      	ldr	r3, [pc, #52]	; (8004654 <HAL_RCC_ClockConfig+0x1f8>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	0a1b      	lsrs	r3, r3, #8
 8004622:	220f      	movs	r2, #15
 8004624:	401a      	ands	r2, r3
 8004626:	4b0e      	ldr	r3, [pc, #56]	; (8004660 <HAL_RCC_ClockConfig+0x204>)
 8004628:	0092      	lsls	r2, r2, #2
 800462a:	58d3      	ldr	r3, [r2, r3]
 800462c:	221f      	movs	r2, #31
 800462e:	4013      	ands	r3, r2
 8004630:	000a      	movs	r2, r1
 8004632:	40da      	lsrs	r2, r3
 8004634:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <HAL_RCC_ClockConfig+0x208>)
 8004636:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004638:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <HAL_RCC_ClockConfig+0x20c>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	0018      	movs	r0, r3
 800463e:	f7ff f909 	bl	8003854 <HAL_InitTick>
 8004642:	0003      	movs	r3, r0
}
 8004644:	0018      	movs	r0, r3
 8004646:	46bd      	mov	sp, r7
 8004648:	b004      	add	sp, #16
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40022000 	.word	0x40022000
 8004650:	00001388 	.word	0x00001388
 8004654:	40021000 	.word	0x40021000
 8004658:	fffff0ff 	.word	0xfffff0ff
 800465c:	ffff8fff 	.word	0xffff8fff
 8004660:	0800d4fc 	.word	0x0800d4fc
 8004664:	20000000 	.word	0x20000000
 8004668:	20000004 	.word	0x20000004

0800466c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004672:	4b3c      	ldr	r3, [pc, #240]	; (8004764 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2238      	movs	r2, #56	; 0x38
 8004678:	4013      	ands	r3, r2
 800467a:	d10f      	bne.n	800469c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800467c:	4b39      	ldr	r3, [pc, #228]	; (8004764 <HAL_RCC_GetSysClockFreq+0xf8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	0adb      	lsrs	r3, r3, #11
 8004682:	2207      	movs	r2, #7
 8004684:	4013      	ands	r3, r2
 8004686:	2201      	movs	r2, #1
 8004688:	409a      	lsls	r2, r3
 800468a:	0013      	movs	r3, r2
 800468c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800468e:	6839      	ldr	r1, [r7, #0]
 8004690:	4835      	ldr	r0, [pc, #212]	; (8004768 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004692:	f7fb fd55 	bl	8000140 <__udivsi3>
 8004696:	0003      	movs	r3, r0
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	e05d      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800469c:	4b31      	ldr	r3, [pc, #196]	; (8004764 <HAL_RCC_GetSysClockFreq+0xf8>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	2238      	movs	r2, #56	; 0x38
 80046a2:	4013      	ands	r3, r2
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d102      	bne.n	80046ae <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046a8:	4b30      	ldr	r3, [pc, #192]	; (800476c <HAL_RCC_GetSysClockFreq+0x100>)
 80046aa:	613b      	str	r3, [r7, #16]
 80046ac:	e054      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046ae:	4b2d      	ldr	r3, [pc, #180]	; (8004764 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2238      	movs	r2, #56	; 0x38
 80046b4:	4013      	ands	r3, r2
 80046b6:	2b10      	cmp	r3, #16
 80046b8:	d138      	bne.n	800472c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80046ba:	4b2a      	ldr	r3, [pc, #168]	; (8004764 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	2203      	movs	r2, #3
 80046c0:	4013      	ands	r3, r2
 80046c2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046c4:	4b27      	ldr	r3, [pc, #156]	; (8004764 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	091b      	lsrs	r3, r3, #4
 80046ca:	2207      	movs	r2, #7
 80046cc:	4013      	ands	r3, r2
 80046ce:	3301      	adds	r3, #1
 80046d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d10d      	bne.n	80046f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046d8:	68b9      	ldr	r1, [r7, #8]
 80046da:	4824      	ldr	r0, [pc, #144]	; (800476c <HAL_RCC_GetSysClockFreq+0x100>)
 80046dc:	f7fb fd30 	bl	8000140 <__udivsi3>
 80046e0:	0003      	movs	r3, r0
 80046e2:	0019      	movs	r1, r3
 80046e4:	4b1f      	ldr	r3, [pc, #124]	; (8004764 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	0a1b      	lsrs	r3, r3, #8
 80046ea:	227f      	movs	r2, #127	; 0x7f
 80046ec:	4013      	ands	r3, r2
 80046ee:	434b      	muls	r3, r1
 80046f0:	617b      	str	r3, [r7, #20]
        break;
 80046f2:	e00d      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80046f4:	68b9      	ldr	r1, [r7, #8]
 80046f6:	481c      	ldr	r0, [pc, #112]	; (8004768 <HAL_RCC_GetSysClockFreq+0xfc>)
 80046f8:	f7fb fd22 	bl	8000140 <__udivsi3>
 80046fc:	0003      	movs	r3, r0
 80046fe:	0019      	movs	r1, r3
 8004700:	4b18      	ldr	r3, [pc, #96]	; (8004764 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	0a1b      	lsrs	r3, r3, #8
 8004706:	227f      	movs	r2, #127	; 0x7f
 8004708:	4013      	ands	r3, r2
 800470a:	434b      	muls	r3, r1
 800470c:	617b      	str	r3, [r7, #20]
        break;
 800470e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004710:	4b14      	ldr	r3, [pc, #80]	; (8004764 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	0f5b      	lsrs	r3, r3, #29
 8004716:	2207      	movs	r2, #7
 8004718:	4013      	ands	r3, r2
 800471a:	3301      	adds	r3, #1
 800471c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	6978      	ldr	r0, [r7, #20]
 8004722:	f7fb fd0d 	bl	8000140 <__udivsi3>
 8004726:	0003      	movs	r3, r0
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	e015      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800472c:	4b0d      	ldr	r3, [pc, #52]	; (8004764 <HAL_RCC_GetSysClockFreq+0xf8>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2238      	movs	r2, #56	; 0x38
 8004732:	4013      	ands	r3, r2
 8004734:	2b20      	cmp	r3, #32
 8004736:	d103      	bne.n	8004740 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004738:	2380      	movs	r3, #128	; 0x80
 800473a:	021b      	lsls	r3, r3, #8
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	e00b      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004740:	4b08      	ldr	r3, [pc, #32]	; (8004764 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2238      	movs	r2, #56	; 0x38
 8004746:	4013      	ands	r3, r2
 8004748:	2b18      	cmp	r3, #24
 800474a:	d103      	bne.n	8004754 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800474c:	23fa      	movs	r3, #250	; 0xfa
 800474e:	01db      	lsls	r3, r3, #7
 8004750:	613b      	str	r3, [r7, #16]
 8004752:	e001      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004758:	693b      	ldr	r3, [r7, #16]
}
 800475a:	0018      	movs	r0, r3
 800475c:	46bd      	mov	sp, r7
 800475e:	b006      	add	sp, #24
 8004760:	bd80      	pop	{r7, pc}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	40021000 	.word	0x40021000
 8004768:	00f42400 	.word	0x00f42400
 800476c:	007a1200 	.word	0x007a1200

08004770 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004774:	4b02      	ldr	r3, [pc, #8]	; (8004780 <HAL_RCC_GetHCLKFreq+0x10>)
 8004776:	681b      	ldr	r3, [r3, #0]
}
 8004778:	0018      	movs	r0, r3
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	20000000 	.word	0x20000000

08004784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004784:	b5b0      	push	{r4, r5, r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004788:	f7ff fff2 	bl	8004770 <HAL_RCC_GetHCLKFreq>
 800478c:	0004      	movs	r4, r0
 800478e:	f7ff fb49 	bl	8003e24 <LL_RCC_GetAPB1Prescaler>
 8004792:	0003      	movs	r3, r0
 8004794:	0b1a      	lsrs	r2, r3, #12
 8004796:	4b05      	ldr	r3, [pc, #20]	; (80047ac <HAL_RCC_GetPCLK1Freq+0x28>)
 8004798:	0092      	lsls	r2, r2, #2
 800479a:	58d3      	ldr	r3, [r2, r3]
 800479c:	221f      	movs	r2, #31
 800479e:	4013      	ands	r3, r2
 80047a0:	40dc      	lsrs	r4, r3
 80047a2:	0023      	movs	r3, r4
}
 80047a4:	0018      	movs	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bdb0      	pop	{r4, r5, r7, pc}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	0800d53c 	.word	0x0800d53c

080047b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80047b8:	2313      	movs	r3, #19
 80047ba:	18fb      	adds	r3, r7, r3
 80047bc:	2200      	movs	r2, #0
 80047be:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047c0:	2312      	movs	r3, #18
 80047c2:	18fb      	adds	r3, r7, r3
 80047c4:	2200      	movs	r2, #0
 80047c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	2380      	movs	r3, #128	; 0x80
 80047ce:	029b      	lsls	r3, r3, #10
 80047d0:	4013      	ands	r3, r2
 80047d2:	d100      	bne.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80047d4:	e0a3      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047d6:	2011      	movs	r0, #17
 80047d8:	183b      	adds	r3, r7, r0
 80047da:	2200      	movs	r2, #0
 80047dc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047de:	4b86      	ldr	r3, [pc, #536]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047e2:	2380      	movs	r3, #128	; 0x80
 80047e4:	055b      	lsls	r3, r3, #21
 80047e6:	4013      	ands	r3, r2
 80047e8:	d110      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ea:	4b83      	ldr	r3, [pc, #524]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047ee:	4b82      	ldr	r3, [pc, #520]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047f0:	2180      	movs	r1, #128	; 0x80
 80047f2:	0549      	lsls	r1, r1, #21
 80047f4:	430a      	orrs	r2, r1
 80047f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80047f8:	4b7f      	ldr	r3, [pc, #508]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047fc:	2380      	movs	r3, #128	; 0x80
 80047fe:	055b      	lsls	r3, r3, #21
 8004800:	4013      	ands	r3, r2
 8004802:	60bb      	str	r3, [r7, #8]
 8004804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004806:	183b      	adds	r3, r7, r0
 8004808:	2201      	movs	r2, #1
 800480a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800480c:	4b7b      	ldr	r3, [pc, #492]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	4b7a      	ldr	r3, [pc, #488]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004812:	2180      	movs	r1, #128	; 0x80
 8004814:	0049      	lsls	r1, r1, #1
 8004816:	430a      	orrs	r2, r1
 8004818:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800481a:	f7ff f877 	bl	800390c <HAL_GetTick>
 800481e:	0003      	movs	r3, r0
 8004820:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004822:	e00b      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004824:	f7ff f872 	bl	800390c <HAL_GetTick>
 8004828:	0002      	movs	r2, r0
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d904      	bls.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004832:	2313      	movs	r3, #19
 8004834:	18fb      	adds	r3, r7, r3
 8004836:	2203      	movs	r2, #3
 8004838:	701a      	strb	r2, [r3, #0]
        break;
 800483a:	e005      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800483c:	4b6f      	ldr	r3, [pc, #444]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	2380      	movs	r3, #128	; 0x80
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	4013      	ands	r3, r2
 8004846:	d0ed      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004848:	2313      	movs	r3, #19
 800484a:	18fb      	adds	r3, r7, r3
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d154      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004852:	4b69      	ldr	r3, [pc, #420]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004854:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004856:	23c0      	movs	r3, #192	; 0xc0
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4013      	ands	r3, r2
 800485c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d019      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	429a      	cmp	r2, r3
 800486c:	d014      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800486e:	4b62      	ldr	r3, [pc, #392]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004872:	4a63      	ldr	r2, [pc, #396]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004874:	4013      	ands	r3, r2
 8004876:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004878:	4b5f      	ldr	r3, [pc, #380]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800487a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800487c:	4b5e      	ldr	r3, [pc, #376]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800487e:	2180      	movs	r1, #128	; 0x80
 8004880:	0249      	lsls	r1, r1, #9
 8004882:	430a      	orrs	r2, r1
 8004884:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004886:	4b5c      	ldr	r3, [pc, #368]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004888:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800488a:	4b5b      	ldr	r3, [pc, #364]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800488c:	495d      	ldr	r1, [pc, #372]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800488e:	400a      	ands	r2, r1
 8004890:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004892:	4b59      	ldr	r3, [pc, #356]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2201      	movs	r2, #1
 800489c:	4013      	ands	r3, r2
 800489e:	d016      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a0:	f7ff f834 	bl	800390c <HAL_GetTick>
 80048a4:	0003      	movs	r3, r0
 80048a6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a8:	e00c      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048aa:	f7ff f82f 	bl	800390c <HAL_GetTick>
 80048ae:	0002      	movs	r2, r0
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	4a54      	ldr	r2, [pc, #336]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d904      	bls.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80048ba:	2313      	movs	r3, #19
 80048bc:	18fb      	adds	r3, r7, r3
 80048be:	2203      	movs	r2, #3
 80048c0:	701a      	strb	r2, [r3, #0]
            break;
 80048c2:	e004      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048c4:	4b4c      	ldr	r3, [pc, #304]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80048c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c8:	2202      	movs	r2, #2
 80048ca:	4013      	ands	r3, r2
 80048cc:	d0ed      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80048ce:	2313      	movs	r3, #19
 80048d0:	18fb      	adds	r3, r7, r3
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10a      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048d8:	4b47      	ldr	r3, [pc, #284]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80048da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048dc:	4a48      	ldr	r2, [pc, #288]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80048de:	4013      	ands	r3, r2
 80048e0:	0019      	movs	r1, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699a      	ldr	r2, [r3, #24]
 80048e6:	4b44      	ldr	r3, [pc, #272]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80048e8:	430a      	orrs	r2, r1
 80048ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80048ec:	e00c      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048ee:	2312      	movs	r3, #18
 80048f0:	18fb      	adds	r3, r7, r3
 80048f2:	2213      	movs	r2, #19
 80048f4:	18ba      	adds	r2, r7, r2
 80048f6:	7812      	ldrb	r2, [r2, #0]
 80048f8:	701a      	strb	r2, [r3, #0]
 80048fa:	e005      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fc:	2312      	movs	r3, #18
 80048fe:	18fb      	adds	r3, r7, r3
 8004900:	2213      	movs	r2, #19
 8004902:	18ba      	adds	r2, r7, r2
 8004904:	7812      	ldrb	r2, [r2, #0]
 8004906:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004908:	2311      	movs	r3, #17
 800490a:	18fb      	adds	r3, r7, r3
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d105      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004912:	4b39      	ldr	r3, [pc, #228]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004914:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004916:	4b38      	ldr	r3, [pc, #224]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004918:	493c      	ldr	r1, [pc, #240]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800491a:	400a      	ands	r2, r1
 800491c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2201      	movs	r2, #1
 8004924:	4013      	ands	r3, r2
 8004926:	d009      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004928:	4b33      	ldr	r3, [pc, #204]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800492a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492c:	2203      	movs	r2, #3
 800492e:	4393      	bics	r3, r2
 8004930:	0019      	movs	r1, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	4b30      	ldr	r3, [pc, #192]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004938:	430a      	orrs	r2, r1
 800493a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2202      	movs	r2, #2
 8004942:	4013      	ands	r3, r2
 8004944:	d009      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004946:	4b2c      	ldr	r3, [pc, #176]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494a:	220c      	movs	r2, #12
 800494c:	4393      	bics	r3, r2
 800494e:	0019      	movs	r1, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	4b28      	ldr	r3, [pc, #160]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004956:	430a      	orrs	r2, r1
 8004958:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2220      	movs	r2, #32
 8004960:	4013      	ands	r3, r2
 8004962:	d009      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004964:	4b24      	ldr	r3, [pc, #144]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004968:	4a29      	ldr	r2, [pc, #164]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800496a:	4013      	ands	r3, r2
 800496c:	0019      	movs	r1, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	4b21      	ldr	r3, [pc, #132]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004974:	430a      	orrs	r2, r1
 8004976:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	2380      	movs	r3, #128	; 0x80
 800497e:	01db      	lsls	r3, r3, #7
 8004980:	4013      	ands	r3, r2
 8004982:	d015      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004984:	4b1c      	ldr	r3, [pc, #112]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	0899      	lsrs	r1, r3, #2
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	695a      	ldr	r2, [r3, #20]
 8004990:	4b19      	ldr	r3, [pc, #100]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004992:	430a      	orrs	r2, r1
 8004994:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695a      	ldr	r2, [r3, #20]
 800499a:	2380      	movs	r3, #128	; 0x80
 800499c:	05db      	lsls	r3, r3, #23
 800499e:	429a      	cmp	r2, r3
 80049a0:	d106      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80049a2:	4b15      	ldr	r3, [pc, #84]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	4b14      	ldr	r3, [pc, #80]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049a8:	2180      	movs	r1, #128	; 0x80
 80049aa:	0249      	lsls	r1, r1, #9
 80049ac:	430a      	orrs	r2, r1
 80049ae:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	2380      	movs	r3, #128	; 0x80
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	4013      	ands	r3, r2
 80049ba:	d016      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80049bc:	4b0e      	ldr	r3, [pc, #56]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c0:	4a14      	ldr	r2, [pc, #80]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	0019      	movs	r1, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691a      	ldr	r2, [r3, #16]
 80049ca:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049cc:	430a      	orrs	r2, r1
 80049ce:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	2380      	movs	r3, #128	; 0x80
 80049d6:	01db      	lsls	r3, r3, #7
 80049d8:	429a      	cmp	r2, r3
 80049da:	d106      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80049dc:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80049e2:	2180      	movs	r1, #128	; 0x80
 80049e4:	0249      	lsls	r1, r1, #9
 80049e6:	430a      	orrs	r2, r1
 80049e8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80049ea:	2312      	movs	r3, #18
 80049ec:	18fb      	adds	r3, r7, r3
 80049ee:	781b      	ldrb	r3, [r3, #0]
}
 80049f0:	0018      	movs	r0, r3
 80049f2:	46bd      	mov	sp, r7
 80049f4:	b006      	add	sp, #24
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40021000 	.word	0x40021000
 80049fc:	40007000 	.word	0x40007000
 8004a00:	fffffcff 	.word	0xfffffcff
 8004a04:	fffeffff 	.word	0xfffeffff
 8004a08:	00001388 	.word	0x00001388
 8004a0c:	efffffff 	.word	0xefffffff
 8004a10:	ffffcfff 	.word	0xffffcfff
 8004a14:	ffff3fff 	.word	0xffff3fff

08004a18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e04a      	b.n	8004ac0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	223d      	movs	r2, #61	; 0x3d
 8004a2e:	5c9b      	ldrb	r3, [r3, r2]
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d107      	bne.n	8004a46 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	223c      	movs	r2, #60	; 0x3c
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	0018      	movs	r0, r3
 8004a42:	f7fe fa29 	bl	8002e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	223d      	movs	r2, #61	; 0x3d
 8004a4a:	2102      	movs	r1, #2
 8004a4c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	3304      	adds	r3, #4
 8004a56:	0019      	movs	r1, r3
 8004a58:	0010      	movs	r0, r2
 8004a5a:	f000 fd8d 	bl	8005578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2248      	movs	r2, #72	; 0x48
 8004a62:	2101      	movs	r1, #1
 8004a64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	223e      	movs	r2, #62	; 0x3e
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	5499      	strb	r1, [r3, r2]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	223f      	movs	r2, #63	; 0x3f
 8004a72:	2101      	movs	r1, #1
 8004a74:	5499      	strb	r1, [r3, r2]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2240      	movs	r2, #64	; 0x40
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	5499      	strb	r1, [r3, r2]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2241      	movs	r2, #65	; 0x41
 8004a82:	2101      	movs	r1, #1
 8004a84:	5499      	strb	r1, [r3, r2]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2242      	movs	r2, #66	; 0x42
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	5499      	strb	r1, [r3, r2]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2243      	movs	r2, #67	; 0x43
 8004a92:	2101      	movs	r1, #1
 8004a94:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2244      	movs	r2, #68	; 0x44
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	5499      	strb	r1, [r3, r2]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2245      	movs	r2, #69	; 0x45
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	5499      	strb	r1, [r3, r2]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2246      	movs	r2, #70	; 0x46
 8004aaa:	2101      	movs	r1, #1
 8004aac:	5499      	strb	r1, [r3, r2]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2247      	movs	r2, #71	; 0x47
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	223d      	movs	r2, #61	; 0x3d
 8004aba:	2101      	movs	r1, #1
 8004abc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	b002      	add	sp, #8
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	223d      	movs	r2, #61	; 0x3d
 8004ad4:	5c9b      	ldrb	r3, [r3, r2]
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d001      	beq.n	8004ae0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e03c      	b.n	8004b5a <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	223d      	movs	r2, #61	; 0x3d
 8004ae4:	2102      	movs	r1, #2
 8004ae6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2101      	movs	r1, #1
 8004af4:	430a      	orrs	r2, r1
 8004af6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a19      	ldr	r2, [pc, #100]	; (8004b64 <HAL_TIM_Base_Start_IT+0x9c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d009      	beq.n	8004b16 <HAL_TIM_Base_Start_IT+0x4e>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a18      	ldr	r2, [pc, #96]	; (8004b68 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d004      	beq.n	8004b16 <HAL_TIM_Base_Start_IT+0x4e>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a16      	ldr	r2, [pc, #88]	; (8004b6c <HAL_TIM_Base_Start_IT+0xa4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d116      	bne.n	8004b44 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	4a14      	ldr	r2, [pc, #80]	; (8004b70 <HAL_TIM_Base_Start_IT+0xa8>)
 8004b1e:	4013      	ands	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b06      	cmp	r3, #6
 8004b26:	d016      	beq.n	8004b56 <HAL_TIM_Base_Start_IT+0x8e>
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	2380      	movs	r3, #128	; 0x80
 8004b2c:	025b      	lsls	r3, r3, #9
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d011      	beq.n	8004b56 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b42:	e008      	b.n	8004b56 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2101      	movs	r1, #1
 8004b50:	430a      	orrs	r2, r1
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	e000      	b.n	8004b58 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b56:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	b004      	add	sp, #16
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	40012c00 	.word	0x40012c00
 8004b68:	40000400 	.word	0x40000400
 8004b6c:	40014000 	.word	0x40014000
 8004b70:	00010007 	.word	0x00010007

08004b74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e04a      	b.n	8004c1c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	223d      	movs	r2, #61	; 0x3d
 8004b8a:	5c9b      	ldrb	r3, [r3, r2]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d107      	bne.n	8004ba2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	223c      	movs	r2, #60	; 0x3c
 8004b96:	2100      	movs	r1, #0
 8004b98:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f7fe f9f7 	bl	8002f90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	223d      	movs	r2, #61	; 0x3d
 8004ba6:	2102      	movs	r1, #2
 8004ba8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	0019      	movs	r1, r3
 8004bb4:	0010      	movs	r0, r2
 8004bb6:	f000 fcdf 	bl	8005578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2248      	movs	r2, #72	; 0x48
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	223e      	movs	r2, #62	; 0x3e
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	5499      	strb	r1, [r3, r2]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	223f      	movs	r2, #63	; 0x3f
 8004bce:	2101      	movs	r1, #1
 8004bd0:	5499      	strb	r1, [r3, r2]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2240      	movs	r2, #64	; 0x40
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	5499      	strb	r1, [r3, r2]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2241      	movs	r2, #65	; 0x41
 8004bde:	2101      	movs	r1, #1
 8004be0:	5499      	strb	r1, [r3, r2]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2242      	movs	r2, #66	; 0x42
 8004be6:	2101      	movs	r1, #1
 8004be8:	5499      	strb	r1, [r3, r2]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2243      	movs	r2, #67	; 0x43
 8004bee:	2101      	movs	r1, #1
 8004bf0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2244      	movs	r2, #68	; 0x44
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	5499      	strb	r1, [r3, r2]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2245      	movs	r2, #69	; 0x45
 8004bfe:	2101      	movs	r1, #1
 8004c00:	5499      	strb	r1, [r3, r2]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2246      	movs	r2, #70	; 0x46
 8004c06:	2101      	movs	r1, #1
 8004c08:	5499      	strb	r1, [r3, r2]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2247      	movs	r2, #71	; 0x47
 8004c0e:	2101      	movs	r1, #1
 8004c10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	223d      	movs	r2, #61	; 0x3d
 8004c16:	2101      	movs	r1, #1
 8004c18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	b002      	add	sp, #8
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e04a      	b.n	8004ccc <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	223d      	movs	r2, #61	; 0x3d
 8004c3a:	5c9b      	ldrb	r3, [r3, r2]
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d107      	bne.n	8004c52 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	223c      	movs	r2, #60	; 0x3c
 8004c46:	2100      	movs	r1, #0
 8004c48:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f000 f841 	bl	8004cd4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	223d      	movs	r2, #61	; 0x3d
 8004c56:	2102      	movs	r1, #2
 8004c58:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	3304      	adds	r3, #4
 8004c62:	0019      	movs	r1, r3
 8004c64:	0010      	movs	r0, r2
 8004c66:	f000 fc87 	bl	8005578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2248      	movs	r2, #72	; 0x48
 8004c6e:	2101      	movs	r1, #1
 8004c70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	223e      	movs	r2, #62	; 0x3e
 8004c76:	2101      	movs	r1, #1
 8004c78:	5499      	strb	r1, [r3, r2]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	223f      	movs	r2, #63	; 0x3f
 8004c7e:	2101      	movs	r1, #1
 8004c80:	5499      	strb	r1, [r3, r2]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2240      	movs	r2, #64	; 0x40
 8004c86:	2101      	movs	r1, #1
 8004c88:	5499      	strb	r1, [r3, r2]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2241      	movs	r2, #65	; 0x41
 8004c8e:	2101      	movs	r1, #1
 8004c90:	5499      	strb	r1, [r3, r2]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2242      	movs	r2, #66	; 0x42
 8004c96:	2101      	movs	r1, #1
 8004c98:	5499      	strb	r1, [r3, r2]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2243      	movs	r2, #67	; 0x43
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2244      	movs	r2, #68	; 0x44
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	5499      	strb	r1, [r3, r2]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2245      	movs	r2, #69	; 0x45
 8004cae:	2101      	movs	r1, #1
 8004cb0:	5499      	strb	r1, [r3, r2]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2246      	movs	r2, #70	; 0x46
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	5499      	strb	r1, [r3, r2]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2247      	movs	r2, #71	; 0x47
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	223d      	movs	r2, #61	; 0x3d
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	0018      	movs	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	b002      	add	sp, #8
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004cdc:	46c0      	nop			; (mov r8, r8)
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	b002      	add	sp, #8
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e090      	b.n	8004e1a <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	223d      	movs	r2, #61	; 0x3d
 8004cfc:	5c9b      	ldrb	r3, [r3, r2]
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d107      	bne.n	8004d14 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	223c      	movs	r2, #60	; 0x3c
 8004d08:	2100      	movs	r1, #0
 8004d0a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	0018      	movs	r0, r3
 8004d10:	f7fe f840 	bl	8002d94 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	223d      	movs	r2, #61	; 0x3d
 8004d18:	2102      	movs	r1, #2
 8004d1a:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689a      	ldr	r2, [r3, #8]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	493f      	ldr	r1, [pc, #252]	; (8004e24 <HAL_TIM_Encoder_Init+0x140>)
 8004d28:	400a      	ands	r2, r1
 8004d2a:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	3304      	adds	r3, #4
 8004d34:	0019      	movs	r1, r3
 8004d36:	0010      	movs	r0, r2
 8004d38:	f000 fc1e 	bl	8005578 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	4a31      	ldr	r2, [pc, #196]	; (8004e28 <HAL_TIM_Encoder_Init+0x144>)
 8004d62:	4013      	ands	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	021b      	lsls	r3, r3, #8
 8004d70:	4313      	orrs	r3, r2
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	4a2c      	ldr	r2, [pc, #176]	; (8004e2c <HAL_TIM_Encoder_Init+0x148>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	4a2b      	ldr	r2, [pc, #172]	; (8004e30 <HAL_TIM_Encoder_Init+0x14c>)
 8004d84:	4013      	ands	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	021b      	lsls	r3, r3, #8
 8004d92:	4313      	orrs	r3, r2
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	011a      	lsls	r2, r3, #4
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	031b      	lsls	r3, r3, #12
 8004da6:	4313      	orrs	r3, r2
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2222      	movs	r2, #34	; 0x22
 8004db2:	4393      	bics	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2288      	movs	r2, #136	; 0x88
 8004dba:	4393      	bics	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	011b      	lsls	r3, r3, #4
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2248      	movs	r2, #72	; 0x48
 8004dec:	2101      	movs	r1, #1
 8004dee:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	223e      	movs	r2, #62	; 0x3e
 8004df4:	2101      	movs	r1, #1
 8004df6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	223f      	movs	r2, #63	; 0x3f
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2244      	movs	r2, #68	; 0x44
 8004e04:	2101      	movs	r1, #1
 8004e06:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2245      	movs	r2, #69	; 0x45
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	223d      	movs	r2, #61	; 0x3d
 8004e14:	2101      	movs	r1, #1
 8004e16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	b006      	add	sp, #24
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	fffebff8 	.word	0xfffebff8
 8004e28:	fffffcfc 	.word	0xfffffcfc
 8004e2c:	fffff3f3 	.word	0xfffff3f3
 8004e30:	ffff0f0f 	.word	0xffff0f0f

08004e34 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e34:	b590      	push	{r4, r7, lr}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e3e:	200f      	movs	r0, #15
 8004e40:	183b      	adds	r3, r7, r0
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	213e      	movs	r1, #62	; 0x3e
 8004e46:	5c52      	ldrb	r2, [r2, r1]
 8004e48:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e4a:	230e      	movs	r3, #14
 8004e4c:	18fb      	adds	r3, r7, r3
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	213f      	movs	r1, #63	; 0x3f
 8004e52:	5c52      	ldrb	r2, [r2, r1]
 8004e54:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e56:	240d      	movs	r4, #13
 8004e58:	193b      	adds	r3, r7, r4
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	2144      	movs	r1, #68	; 0x44
 8004e5e:	5c52      	ldrb	r2, [r2, r1]
 8004e60:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e62:	230c      	movs	r3, #12
 8004e64:	18fb      	adds	r3, r7, r3
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	2145      	movs	r1, #69	; 0x45
 8004e6a:	5c52      	ldrb	r2, [r2, r1]
 8004e6c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d112      	bne.n	8004e9a <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e74:	183b      	adds	r3, r7, r0
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d103      	bne.n	8004e84 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e7c:	193b      	adds	r3, r7, r4
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d001      	beq.n	8004e88 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e075      	b.n	8004f74 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	223e      	movs	r2, #62	; 0x3e
 8004e8c:	2102      	movs	r1, #2
 8004e8e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2244      	movs	r2, #68	; 0x44
 8004e94:	2102      	movs	r1, #2
 8004e96:	5499      	strb	r1, [r3, r2]
 8004e98:	e03d      	b.n	8004f16 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d114      	bne.n	8004eca <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ea0:	230e      	movs	r3, #14
 8004ea2:	18fb      	adds	r3, r7, r3
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d104      	bne.n	8004eb4 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004eaa:	230c      	movs	r3, #12
 8004eac:	18fb      	adds	r3, r7, r3
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d001      	beq.n	8004eb8 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e05d      	b.n	8004f74 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	223f      	movs	r2, #63	; 0x3f
 8004ebc:	2102      	movs	r1, #2
 8004ebe:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2245      	movs	r2, #69	; 0x45
 8004ec4:	2102      	movs	r1, #2
 8004ec6:	5499      	strb	r1, [r3, r2]
 8004ec8:	e025      	b.n	8004f16 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004eca:	230f      	movs	r3, #15
 8004ecc:	18fb      	adds	r3, r7, r3
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d10e      	bne.n	8004ef2 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ed4:	230e      	movs	r3, #14
 8004ed6:	18fb      	adds	r3, r7, r3
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d109      	bne.n	8004ef2 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ede:	230d      	movs	r3, #13
 8004ee0:	18fb      	adds	r3, r7, r3
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d104      	bne.n	8004ef2 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ee8:	230c      	movs	r3, #12
 8004eea:	18fb      	adds	r3, r7, r3
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d001      	beq.n	8004ef6 <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e03e      	b.n	8004f74 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	223e      	movs	r2, #62	; 0x3e
 8004efa:	2102      	movs	r1, #2
 8004efc:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	223f      	movs	r2, #63	; 0x3f
 8004f02:	2102      	movs	r1, #2
 8004f04:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2244      	movs	r2, #68	; 0x44
 8004f0a:	2102      	movs	r1, #2
 8004f0c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2245      	movs	r2, #69	; 0x45
 8004f12:	2102      	movs	r1, #2
 8004f14:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_TIM_Encoder_Start+0xf0>
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d008      	beq.n	8004f34 <HAL_TIM_Encoder_Start+0x100>
 8004f22:	e00f      	b.n	8004f44 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	f000 ff7d 	bl	8005e2c <TIM_CCxChannelCmd>
      break;
 8004f32:	e016      	b.n	8004f62 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	2104      	movs	r1, #4
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f000 ff75 	bl	8005e2c <TIM_CCxChannelCmd>
      break;
 8004f42:	e00e      	b.n	8004f62 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	f000 ff6d 	bl	8005e2c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2201      	movs	r2, #1
 8004f58:	2104      	movs	r1, #4
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f000 ff66 	bl	8005e2c <TIM_CCxChannelCmd>
      break;
 8004f60:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	0018      	movs	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	b005      	add	sp, #20
 8004f7a:	bd90      	pop	{r4, r7, pc}

08004f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d124      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	2202      	movs	r2, #2
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d11d      	bne.n	8004fdc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2203      	movs	r2, #3
 8004fa6:	4252      	negs	r2, r2
 8004fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	2203      	movs	r2, #3
 8004fb8:	4013      	ands	r3, r2
 8004fba:	d004      	beq.n	8004fc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	f000 fac2 	bl	8005548 <HAL_TIM_IC_CaptureCallback>
 8004fc4:	e007      	b.n	8004fd6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	0018      	movs	r0, r3
 8004fca:	f000 fab5 	bl	8005538 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	0018      	movs	r0, r3
 8004fd2:	f000 fac1 	bl	8005558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	2204      	movs	r2, #4
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d125      	bne.n	8005036 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	2204      	movs	r2, #4
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d11e      	bne.n	8005036 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2205      	movs	r2, #5
 8004ffe:	4252      	negs	r2, r2
 8005000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2202      	movs	r2, #2
 8005006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699a      	ldr	r2, [r3, #24]
 800500e:	23c0      	movs	r3, #192	; 0xc0
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4013      	ands	r3, r2
 8005014:	d004      	beq.n	8005020 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	0018      	movs	r0, r3
 800501a:	f000 fa95 	bl	8005548 <HAL_TIM_IC_CaptureCallback>
 800501e:	e007      	b.n	8005030 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	0018      	movs	r0, r3
 8005024:	f000 fa88 	bl	8005538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	0018      	movs	r0, r3
 800502c:	f000 fa94 	bl	8005558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	2208      	movs	r2, #8
 800503e:	4013      	ands	r3, r2
 8005040:	2b08      	cmp	r3, #8
 8005042:	d124      	bne.n	800508e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	2208      	movs	r2, #8
 800504c:	4013      	ands	r3, r2
 800504e:	2b08      	cmp	r3, #8
 8005050:	d11d      	bne.n	800508e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2209      	movs	r2, #9
 8005058:	4252      	negs	r2, r2
 800505a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2204      	movs	r2, #4
 8005060:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	2203      	movs	r2, #3
 800506a:	4013      	ands	r3, r2
 800506c:	d004      	beq.n	8005078 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	0018      	movs	r0, r3
 8005072:	f000 fa69 	bl	8005548 <HAL_TIM_IC_CaptureCallback>
 8005076:	e007      	b.n	8005088 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	0018      	movs	r0, r3
 800507c:	f000 fa5c 	bl	8005538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	0018      	movs	r0, r3
 8005084:	f000 fa68 	bl	8005558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	2210      	movs	r2, #16
 8005096:	4013      	ands	r3, r2
 8005098:	2b10      	cmp	r3, #16
 800509a:	d125      	bne.n	80050e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	2210      	movs	r2, #16
 80050a4:	4013      	ands	r3, r2
 80050a6:	2b10      	cmp	r3, #16
 80050a8:	d11e      	bne.n	80050e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2211      	movs	r2, #17
 80050b0:	4252      	negs	r2, r2
 80050b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2208      	movs	r2, #8
 80050b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69da      	ldr	r2, [r3, #28]
 80050c0:	23c0      	movs	r3, #192	; 0xc0
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4013      	ands	r3, r2
 80050c6:	d004      	beq.n	80050d2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	0018      	movs	r0, r3
 80050cc:	f000 fa3c 	bl	8005548 <HAL_TIM_IC_CaptureCallback>
 80050d0:	e007      	b.n	80050e2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	0018      	movs	r0, r3
 80050d6:	f000 fa2f 	bl	8005538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	0018      	movs	r0, r3
 80050de:	f000 fa3b 	bl	8005558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2201      	movs	r2, #1
 80050f0:	4013      	ands	r3, r2
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d10f      	bne.n	8005116 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	2201      	movs	r2, #1
 80050fe:	4013      	ands	r3, r2
 8005100:	2b01      	cmp	r3, #1
 8005102:	d108      	bne.n	8005116 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2202      	movs	r2, #2
 800510a:	4252      	negs	r2, r2
 800510c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	0018      	movs	r0, r3
 8005112:	f000 fa09 	bl	8005528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	2280      	movs	r2, #128	; 0x80
 800511e:	4013      	ands	r3, r2
 8005120:	2b80      	cmp	r3, #128	; 0x80
 8005122:	d10f      	bne.n	8005144 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	2280      	movs	r2, #128	; 0x80
 800512c:	4013      	ands	r3, r2
 800512e:	2b80      	cmp	r3, #128	; 0x80
 8005130:	d108      	bne.n	8005144 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2281      	movs	r2, #129	; 0x81
 8005138:	4252      	negs	r2, r2
 800513a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	0018      	movs	r0, r3
 8005140:	f000 ffae 	bl	80060a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	691a      	ldr	r2, [r3, #16]
 800514a:	2380      	movs	r3, #128	; 0x80
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	401a      	ands	r2, r3
 8005150:	2380      	movs	r3, #128	; 0x80
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	429a      	cmp	r2, r3
 8005156:	d10e      	bne.n	8005176 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	2280      	movs	r2, #128	; 0x80
 8005160:	4013      	ands	r3, r2
 8005162:	2b80      	cmp	r3, #128	; 0x80
 8005164:	d107      	bne.n	8005176 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a1c      	ldr	r2, [pc, #112]	; (80051dc <HAL_TIM_IRQHandler+0x260>)
 800516c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	0018      	movs	r0, r3
 8005172:	f000 ff9d 	bl	80060b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	2240      	movs	r2, #64	; 0x40
 800517e:	4013      	ands	r3, r2
 8005180:	2b40      	cmp	r3, #64	; 0x40
 8005182:	d10f      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	2240      	movs	r2, #64	; 0x40
 800518c:	4013      	ands	r3, r2
 800518e:	2b40      	cmp	r3, #64	; 0x40
 8005190:	d108      	bne.n	80051a4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2241      	movs	r2, #65	; 0x41
 8005198:	4252      	negs	r2, r2
 800519a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	0018      	movs	r0, r3
 80051a0:	f000 f9e2 	bl	8005568 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	2220      	movs	r2, #32
 80051ac:	4013      	ands	r3, r2
 80051ae:	2b20      	cmp	r3, #32
 80051b0:	d10f      	bne.n	80051d2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	2220      	movs	r2, #32
 80051ba:	4013      	ands	r3, r2
 80051bc:	2b20      	cmp	r3, #32
 80051be:	d108      	bne.n	80051d2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2221      	movs	r2, #33	; 0x21
 80051c6:	4252      	negs	r2, r2
 80051c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	0018      	movs	r0, r3
 80051ce:	f000 ff5f 	bl	8006090 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051d2:	46c0      	nop			; (mov r8, r8)
 80051d4:	46bd      	mov	sp, r7
 80051d6:	b002      	add	sp, #8
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	fffffeff 	.word	0xfffffeff

080051e0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051ec:	2317      	movs	r3, #23
 80051ee:	18fb      	adds	r3, r7, r3
 80051f0:	2200      	movs	r2, #0
 80051f2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	223c      	movs	r2, #60	; 0x3c
 80051f8:	5c9b      	ldrb	r3, [r3, r2]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d101      	bne.n	8005202 <HAL_TIM_IC_ConfigChannel+0x22>
 80051fe:	2302      	movs	r3, #2
 8005200:	e08c      	b.n	800531c <HAL_TIM_IC_ConfigChannel+0x13c>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	223c      	movs	r2, #60	; 0x3c
 8005206:	2101      	movs	r1, #1
 8005208:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d11b      	bne.n	8005248 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6818      	ldr	r0, [r3, #0]
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	6819      	ldr	r1, [r3, #0]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f000 fce4 	bl	8005bec <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699a      	ldr	r2, [r3, #24]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	210c      	movs	r1, #12
 8005230:	438a      	bics	r2, r1
 8005232:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6999      	ldr	r1, [r3, #24]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	689a      	ldr	r2, [r3, #8]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	619a      	str	r2, [r3, #24]
 8005246:	e062      	b.n	800530e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b04      	cmp	r3, #4
 800524c:	d11c      	bne.n	8005288 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6818      	ldr	r0, [r3, #0]
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	6819      	ldr	r1, [r3, #0]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f000 fd1d 	bl	8005c9c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	699a      	ldr	r2, [r3, #24]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	492d      	ldr	r1, [pc, #180]	; (8005324 <HAL_TIM_IC_ConfigChannel+0x144>)
 800526e:	400a      	ands	r2, r1
 8005270:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6999      	ldr	r1, [r3, #24]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	021a      	lsls	r2, r3, #8
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	619a      	str	r2, [r3, #24]
 8005286:	e042      	b.n	800530e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b08      	cmp	r3, #8
 800528c:	d11b      	bne.n	80052c6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6818      	ldr	r0, [r3, #0]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	6819      	ldr	r1, [r3, #0]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f000 fd3f 	bl	8005d20 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	69da      	ldr	r2, [r3, #28]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	210c      	movs	r1, #12
 80052ae:	438a      	bics	r2, r1
 80052b0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69d9      	ldr	r1, [r3, #28]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	61da      	str	r2, [r3, #28]
 80052c4:	e023      	b.n	800530e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b0c      	cmp	r3, #12
 80052ca:	d11c      	bne.n	8005306 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6818      	ldr	r0, [r3, #0]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	6819      	ldr	r1, [r3, #0]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f000 fd60 	bl	8005da0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	69da      	ldr	r2, [r3, #28]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	490e      	ldr	r1, [pc, #56]	; (8005324 <HAL_TIM_IC_ConfigChannel+0x144>)
 80052ec:	400a      	ands	r2, r1
 80052ee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	69d9      	ldr	r1, [r3, #28]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	021a      	lsls	r2, r3, #8
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	61da      	str	r2, [r3, #28]
 8005304:	e003      	b.n	800530e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8005306:	2317      	movs	r3, #23
 8005308:	18fb      	adds	r3, r7, r3
 800530a:	2201      	movs	r2, #1
 800530c:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	223c      	movs	r2, #60	; 0x3c
 8005312:	2100      	movs	r1, #0
 8005314:	5499      	strb	r1, [r3, r2]

  return status;
 8005316:	2317      	movs	r3, #23
 8005318:	18fb      	adds	r3, r7, r3
 800531a:	781b      	ldrb	r3, [r3, #0]
}
 800531c:	0018      	movs	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	b006      	add	sp, #24
 8005322:	bd80      	pop	{r7, pc}
 8005324:	fffff3ff 	.word	0xfffff3ff

08005328 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005334:	2317      	movs	r3, #23
 8005336:	18fb      	adds	r3, r7, r3
 8005338:	2200      	movs	r2, #0
 800533a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	223c      	movs	r2, #60	; 0x3c
 8005340:	5c9b      	ldrb	r3, [r3, r2]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d101      	bne.n	800534a <HAL_TIM_PWM_ConfigChannel+0x22>
 8005346:	2302      	movs	r3, #2
 8005348:	e0e5      	b.n	8005516 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	223c      	movs	r2, #60	; 0x3c
 800534e:	2101      	movs	r1, #1
 8005350:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b14      	cmp	r3, #20
 8005356:	d900      	bls.n	800535a <HAL_TIM_PWM_ConfigChannel+0x32>
 8005358:	e0d1      	b.n	80054fe <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	009a      	lsls	r2, r3, #2
 800535e:	4b70      	ldr	r3, [pc, #448]	; (8005520 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005360:	18d3      	adds	r3, r2, r3
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	0011      	movs	r1, r2
 800536e:	0018      	movs	r0, r3
 8005370:	f000 f978 	bl	8005664 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	699a      	ldr	r2, [r3, #24]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2108      	movs	r1, #8
 8005380:	430a      	orrs	r2, r1
 8005382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2104      	movs	r1, #4
 8005390:	438a      	bics	r2, r1
 8005392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6999      	ldr	r1, [r3, #24]
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	691a      	ldr	r2, [r3, #16]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	619a      	str	r2, [r3, #24]
      break;
 80053a6:	e0af      	b.n	8005508 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	0011      	movs	r1, r2
 80053b0:	0018      	movs	r0, r3
 80053b2:	f000 f9e1 	bl	8005778 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	699a      	ldr	r2, [r3, #24]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2180      	movs	r1, #128	; 0x80
 80053c2:	0109      	lsls	r1, r1, #4
 80053c4:	430a      	orrs	r2, r1
 80053c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699a      	ldr	r2, [r3, #24]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4954      	ldr	r1, [pc, #336]	; (8005524 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80053d4:	400a      	ands	r2, r1
 80053d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6999      	ldr	r1, [r3, #24]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	021a      	lsls	r2, r3, #8
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	619a      	str	r2, [r3, #24]
      break;
 80053ec:	e08c      	b.n	8005508 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68ba      	ldr	r2, [r7, #8]
 80053f4:	0011      	movs	r1, r2
 80053f6:	0018      	movs	r0, r3
 80053f8:	f000 fa42 	bl	8005880 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	69da      	ldr	r2, [r3, #28]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2108      	movs	r1, #8
 8005408:	430a      	orrs	r2, r1
 800540a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	69da      	ldr	r2, [r3, #28]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2104      	movs	r1, #4
 8005418:	438a      	bics	r2, r1
 800541a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	69d9      	ldr	r1, [r3, #28]
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	691a      	ldr	r2, [r3, #16]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	61da      	str	r2, [r3, #28]
      break;
 800542e:	e06b      	b.n	8005508 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	0011      	movs	r1, r2
 8005438:	0018      	movs	r0, r3
 800543a:	f000 faa9 	bl	8005990 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69da      	ldr	r2, [r3, #28]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2180      	movs	r1, #128	; 0x80
 800544a:	0109      	lsls	r1, r1, #4
 800544c:	430a      	orrs	r2, r1
 800544e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	69da      	ldr	r2, [r3, #28]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4932      	ldr	r1, [pc, #200]	; (8005524 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800545c:	400a      	ands	r2, r1
 800545e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	69d9      	ldr	r1, [r3, #28]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	021a      	lsls	r2, r3, #8
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	61da      	str	r2, [r3, #28]
      break;
 8005474:	e048      	b.n	8005508 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	0011      	movs	r1, r2
 800547e:	0018      	movs	r0, r3
 8005480:	f000 faf0 	bl	8005a64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2108      	movs	r1, #8
 8005490:	430a      	orrs	r2, r1
 8005492:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2104      	movs	r1, #4
 80054a0:	438a      	bics	r2, r1
 80054a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	691a      	ldr	r2, [r3, #16]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054b6:	e027      	b.n	8005508 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	0011      	movs	r1, r2
 80054c0:	0018      	movs	r0, r3
 80054c2:	f000 fb2f 	bl	8005b24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2180      	movs	r1, #128	; 0x80
 80054d2:	0109      	lsls	r1, r1, #4
 80054d4:	430a      	orrs	r2, r1
 80054d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4910      	ldr	r1, [pc, #64]	; (8005524 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80054e4:	400a      	ands	r2, r1
 80054e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	021a      	lsls	r2, r3, #8
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	430a      	orrs	r2, r1
 80054fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054fc:	e004      	b.n	8005508 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80054fe:	2317      	movs	r3, #23
 8005500:	18fb      	adds	r3, r7, r3
 8005502:	2201      	movs	r2, #1
 8005504:	701a      	strb	r2, [r3, #0]
      break;
 8005506:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	223c      	movs	r2, #60	; 0x3c
 800550c:	2100      	movs	r1, #0
 800550e:	5499      	strb	r1, [r3, r2]

  return status;
 8005510:	2317      	movs	r3, #23
 8005512:	18fb      	adds	r3, r7, r3
 8005514:	781b      	ldrb	r3, [r3, #0]
}
 8005516:	0018      	movs	r0, r3
 8005518:	46bd      	mov	sp, r7
 800551a:	b006      	add	sp, #24
 800551c:	bd80      	pop	{r7, pc}
 800551e:	46c0      	nop			; (mov r8, r8)
 8005520:	0800d55c 	.word	0x0800d55c
 8005524:	fffffbff 	.word	0xfffffbff

08005528 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005530:	46c0      	nop			; (mov r8, r8)
 8005532:	46bd      	mov	sp, r7
 8005534:	b002      	add	sp, #8
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005540:	46c0      	nop			; (mov r8, r8)
 8005542:	46bd      	mov	sp, r7
 8005544:	b002      	add	sp, #8
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005550:	46c0      	nop			; (mov r8, r8)
 8005552:	46bd      	mov	sp, r7
 8005554:	b002      	add	sp, #8
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005560:	46c0      	nop			; (mov r8, r8)
 8005562:	46bd      	mov	sp, r7
 8005564:	b002      	add	sp, #8
 8005566:	bd80      	pop	{r7, pc}

08005568 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005570:	46c0      	nop			; (mov r8, r8)
 8005572:	46bd      	mov	sp, r7
 8005574:	b002      	add	sp, #8
 8005576:	bd80      	pop	{r7, pc}

08005578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a2f      	ldr	r2, [pc, #188]	; (8005648 <TIM_Base_SetConfig+0xd0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d003      	beq.n	8005598 <TIM_Base_SetConfig+0x20>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a2e      	ldr	r2, [pc, #184]	; (800564c <TIM_Base_SetConfig+0xd4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d108      	bne.n	80055aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2270      	movs	r2, #112	; 0x70
 800559c:	4393      	bics	r3, r2
 800559e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a26      	ldr	r2, [pc, #152]	; (8005648 <TIM_Base_SetConfig+0xd0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d013      	beq.n	80055da <TIM_Base_SetConfig+0x62>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a25      	ldr	r2, [pc, #148]	; (800564c <TIM_Base_SetConfig+0xd4>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00f      	beq.n	80055da <TIM_Base_SetConfig+0x62>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a24      	ldr	r2, [pc, #144]	; (8005650 <TIM_Base_SetConfig+0xd8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d00b      	beq.n	80055da <TIM_Base_SetConfig+0x62>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a23      	ldr	r2, [pc, #140]	; (8005654 <TIM_Base_SetConfig+0xdc>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d007      	beq.n	80055da <TIM_Base_SetConfig+0x62>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a22      	ldr	r2, [pc, #136]	; (8005658 <TIM_Base_SetConfig+0xe0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d003      	beq.n	80055da <TIM_Base_SetConfig+0x62>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a21      	ldr	r2, [pc, #132]	; (800565c <TIM_Base_SetConfig+0xe4>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d108      	bne.n	80055ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4a20      	ldr	r2, [pc, #128]	; (8005660 <TIM_Base_SetConfig+0xe8>)
 80055de:	4013      	ands	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2280      	movs	r2, #128	; 0x80
 80055f0:	4393      	bics	r3, r2
 80055f2:	001a      	movs	r2, r3
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a0c      	ldr	r2, [pc, #48]	; (8005648 <TIM_Base_SetConfig+0xd0>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d00b      	beq.n	8005632 <TIM_Base_SetConfig+0xba>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a0d      	ldr	r2, [pc, #52]	; (8005654 <TIM_Base_SetConfig+0xdc>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d007      	beq.n	8005632 <TIM_Base_SetConfig+0xba>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a0c      	ldr	r2, [pc, #48]	; (8005658 <TIM_Base_SetConfig+0xe0>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d003      	beq.n	8005632 <TIM_Base_SetConfig+0xba>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a0b      	ldr	r2, [pc, #44]	; (800565c <TIM_Base_SetConfig+0xe4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d103      	bne.n	800563a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	691a      	ldr	r2, [r3, #16]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	615a      	str	r2, [r3, #20]
}
 8005640:	46c0      	nop			; (mov r8, r8)
 8005642:	46bd      	mov	sp, r7
 8005644:	b004      	add	sp, #16
 8005646:	bd80      	pop	{r7, pc}
 8005648:	40012c00 	.word	0x40012c00
 800564c:	40000400 	.word	0x40000400
 8005650:	40002000 	.word	0x40002000
 8005654:	40014000 	.word	0x40014000
 8005658:	40014400 	.word	0x40014400
 800565c:	40014800 	.word	0x40014800
 8005660:	fffffcff 	.word	0xfffffcff

08005664 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	2201      	movs	r2, #1
 8005674:	4393      	bics	r3, r2
 8005676:	001a      	movs	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	699b      	ldr	r3, [r3, #24]
 800568c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	4a32      	ldr	r2, [pc, #200]	; (800575c <TIM_OC1_SetConfig+0xf8>)
 8005692:	4013      	ands	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2203      	movs	r2, #3
 800569a:	4393      	bics	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	2202      	movs	r2, #2
 80056ac:	4393      	bics	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a28      	ldr	r2, [pc, #160]	; (8005760 <TIM_OC1_SetConfig+0xfc>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d00b      	beq.n	80056da <TIM_OC1_SetConfig+0x76>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a27      	ldr	r2, [pc, #156]	; (8005764 <TIM_OC1_SetConfig+0x100>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d007      	beq.n	80056da <TIM_OC1_SetConfig+0x76>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a26      	ldr	r2, [pc, #152]	; (8005768 <TIM_OC1_SetConfig+0x104>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d003      	beq.n	80056da <TIM_OC1_SetConfig+0x76>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a25      	ldr	r2, [pc, #148]	; (800576c <TIM_OC1_SetConfig+0x108>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d10c      	bne.n	80056f4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2208      	movs	r2, #8
 80056de:	4393      	bics	r3, r2
 80056e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	2204      	movs	r2, #4
 80056f0:	4393      	bics	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a1a      	ldr	r2, [pc, #104]	; (8005760 <TIM_OC1_SetConfig+0xfc>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00b      	beq.n	8005714 <TIM_OC1_SetConfig+0xb0>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a19      	ldr	r2, [pc, #100]	; (8005764 <TIM_OC1_SetConfig+0x100>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d007      	beq.n	8005714 <TIM_OC1_SetConfig+0xb0>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a18      	ldr	r2, [pc, #96]	; (8005768 <TIM_OC1_SetConfig+0x104>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d003      	beq.n	8005714 <TIM_OC1_SetConfig+0xb0>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a17      	ldr	r2, [pc, #92]	; (800576c <TIM_OC1_SetConfig+0x108>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d111      	bne.n	8005738 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	4a16      	ldr	r2, [pc, #88]	; (8005770 <TIM_OC1_SetConfig+0x10c>)
 8005718:	4013      	ands	r3, r2
 800571a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	4a15      	ldr	r2, [pc, #84]	; (8005774 <TIM_OC1_SetConfig+0x110>)
 8005720:	4013      	ands	r3, r2
 8005722:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	4313      	orrs	r3, r2
 8005736:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	621a      	str	r2, [r3, #32]
}
 8005752:	46c0      	nop			; (mov r8, r8)
 8005754:	46bd      	mov	sp, r7
 8005756:	b006      	add	sp, #24
 8005758:	bd80      	pop	{r7, pc}
 800575a:	46c0      	nop			; (mov r8, r8)
 800575c:	fffeff8f 	.word	0xfffeff8f
 8005760:	40012c00 	.word	0x40012c00
 8005764:	40014000 	.word	0x40014000
 8005768:	40014400 	.word	0x40014400
 800576c:	40014800 	.word	0x40014800
 8005770:	fffffeff 	.word	0xfffffeff
 8005774:	fffffdff 	.word	0xfffffdff

08005778 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	2210      	movs	r2, #16
 8005788:	4393      	bics	r3, r2
 800578a:	001a      	movs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4a2e      	ldr	r2, [pc, #184]	; (8005860 <TIM_OC2_SetConfig+0xe8>)
 80057a6:	4013      	ands	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	4a2d      	ldr	r2, [pc, #180]	; (8005864 <TIM_OC2_SetConfig+0xec>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	021b      	lsls	r3, r3, #8
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2220      	movs	r2, #32
 80057c2:	4393      	bics	r3, r2
 80057c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	011b      	lsls	r3, r3, #4
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a24      	ldr	r2, [pc, #144]	; (8005868 <TIM_OC2_SetConfig+0xf0>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d10d      	bne.n	80057f6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2280      	movs	r2, #128	; 0x80
 80057de:	4393      	bics	r3, r2
 80057e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2240      	movs	r2, #64	; 0x40
 80057f2:	4393      	bics	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a1b      	ldr	r2, [pc, #108]	; (8005868 <TIM_OC2_SetConfig+0xf0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00b      	beq.n	8005816 <TIM_OC2_SetConfig+0x9e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a1a      	ldr	r2, [pc, #104]	; (800586c <TIM_OC2_SetConfig+0xf4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d007      	beq.n	8005816 <TIM_OC2_SetConfig+0x9e>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a19      	ldr	r2, [pc, #100]	; (8005870 <TIM_OC2_SetConfig+0xf8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d003      	beq.n	8005816 <TIM_OC2_SetConfig+0x9e>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a18      	ldr	r2, [pc, #96]	; (8005874 <TIM_OC2_SetConfig+0xfc>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d113      	bne.n	800583e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	4a17      	ldr	r2, [pc, #92]	; (8005878 <TIM_OC2_SetConfig+0x100>)
 800581a:	4013      	ands	r3, r2
 800581c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	4a16      	ldr	r2, [pc, #88]	; (800587c <TIM_OC2_SetConfig+0x104>)
 8005822:	4013      	ands	r3, r2
 8005824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	4313      	orrs	r3, r2
 8005830:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	621a      	str	r2, [r3, #32]
}
 8005858:	46c0      	nop			; (mov r8, r8)
 800585a:	46bd      	mov	sp, r7
 800585c:	b006      	add	sp, #24
 800585e:	bd80      	pop	{r7, pc}
 8005860:	feff8fff 	.word	0xfeff8fff
 8005864:	fffffcff 	.word	0xfffffcff
 8005868:	40012c00 	.word	0x40012c00
 800586c:	40014000 	.word	0x40014000
 8005870:	40014400 	.word	0x40014400
 8005874:	40014800 	.word	0x40014800
 8005878:	fffffbff 	.word	0xfffffbff
 800587c:	fffff7ff 	.word	0xfffff7ff

08005880 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	4a35      	ldr	r2, [pc, #212]	; (8005964 <TIM_OC3_SetConfig+0xe4>)
 8005890:	401a      	ands	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4a2f      	ldr	r2, [pc, #188]	; (8005968 <TIM_OC3_SetConfig+0xe8>)
 80058ac:	4013      	ands	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2203      	movs	r2, #3
 80058b4:	4393      	bics	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	4a29      	ldr	r2, [pc, #164]	; (800596c <TIM_OC3_SetConfig+0xec>)
 80058c6:	4013      	ands	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	021b      	lsls	r3, r3, #8
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a25      	ldr	r2, [pc, #148]	; (8005970 <TIM_OC3_SetConfig+0xf0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d10d      	bne.n	80058fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	4a24      	ldr	r2, [pc, #144]	; (8005974 <TIM_OC3_SetConfig+0xf4>)
 80058e2:	4013      	ands	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	021b      	lsls	r3, r3, #8
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	4a20      	ldr	r2, [pc, #128]	; (8005978 <TIM_OC3_SetConfig+0xf8>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a1c      	ldr	r2, [pc, #112]	; (8005970 <TIM_OC3_SetConfig+0xf0>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00b      	beq.n	800591a <TIM_OC3_SetConfig+0x9a>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a1d      	ldr	r2, [pc, #116]	; (800597c <TIM_OC3_SetConfig+0xfc>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d007      	beq.n	800591a <TIM_OC3_SetConfig+0x9a>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a1c      	ldr	r2, [pc, #112]	; (8005980 <TIM_OC3_SetConfig+0x100>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d003      	beq.n	800591a <TIM_OC3_SetConfig+0x9a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a1b      	ldr	r2, [pc, #108]	; (8005984 <TIM_OC3_SetConfig+0x104>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d113      	bne.n	8005942 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	4a1a      	ldr	r2, [pc, #104]	; (8005988 <TIM_OC3_SetConfig+0x108>)
 800591e:	4013      	ands	r3, r2
 8005920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	4a19      	ldr	r2, [pc, #100]	; (800598c <TIM_OC3_SetConfig+0x10c>)
 8005926:	4013      	ands	r3, r2
 8005928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	011b      	lsls	r3, r3, #4
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	4313      	orrs	r3, r2
 8005934:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	621a      	str	r2, [r3, #32]
}
 800595c:	46c0      	nop			; (mov r8, r8)
 800595e:	46bd      	mov	sp, r7
 8005960:	b006      	add	sp, #24
 8005962:	bd80      	pop	{r7, pc}
 8005964:	fffffeff 	.word	0xfffffeff
 8005968:	fffeff8f 	.word	0xfffeff8f
 800596c:	fffffdff 	.word	0xfffffdff
 8005970:	40012c00 	.word	0x40012c00
 8005974:	fffff7ff 	.word	0xfffff7ff
 8005978:	fffffbff 	.word	0xfffffbff
 800597c:	40014000 	.word	0x40014000
 8005980:	40014400 	.word	0x40014400
 8005984:	40014800 	.word	0x40014800
 8005988:	ffffefff 	.word	0xffffefff
 800598c:	ffffdfff 	.word	0xffffdfff

08005990 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	4a28      	ldr	r2, [pc, #160]	; (8005a40 <TIM_OC4_SetConfig+0xb0>)
 80059a0:	401a      	ands	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4a22      	ldr	r2, [pc, #136]	; (8005a44 <TIM_OC4_SetConfig+0xb4>)
 80059bc:	4013      	ands	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4a21      	ldr	r2, [pc, #132]	; (8005a48 <TIM_OC4_SetConfig+0xb8>)
 80059c4:	4013      	ands	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	021b      	lsls	r3, r3, #8
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	4a1d      	ldr	r2, [pc, #116]	; (8005a4c <TIM_OC4_SetConfig+0xbc>)
 80059d8:	4013      	ands	r3, r2
 80059da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	031b      	lsls	r3, r3, #12
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a19      	ldr	r2, [pc, #100]	; (8005a50 <TIM_OC4_SetConfig+0xc0>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00b      	beq.n	8005a08 <TIM_OC4_SetConfig+0x78>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a18      	ldr	r2, [pc, #96]	; (8005a54 <TIM_OC4_SetConfig+0xc4>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d007      	beq.n	8005a08 <TIM_OC4_SetConfig+0x78>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a17      	ldr	r2, [pc, #92]	; (8005a58 <TIM_OC4_SetConfig+0xc8>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d003      	beq.n	8005a08 <TIM_OC4_SetConfig+0x78>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a16      	ldr	r2, [pc, #88]	; (8005a5c <TIM_OC4_SetConfig+0xcc>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d109      	bne.n	8005a1c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	4a15      	ldr	r2, [pc, #84]	; (8005a60 <TIM_OC4_SetConfig+0xd0>)
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	019b      	lsls	r3, r3, #6
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	621a      	str	r2, [r3, #32]
}
 8005a36:	46c0      	nop			; (mov r8, r8)
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	b006      	add	sp, #24
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	ffffefff 	.word	0xffffefff
 8005a44:	feff8fff 	.word	0xfeff8fff
 8005a48:	fffffcff 	.word	0xfffffcff
 8005a4c:	ffffdfff 	.word	0xffffdfff
 8005a50:	40012c00 	.word	0x40012c00
 8005a54:	40014000 	.word	0x40014000
 8005a58:	40014400 	.word	0x40014400
 8005a5c:	40014800 	.word	0x40014800
 8005a60:	ffffbfff 	.word	0xffffbfff

08005a64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	4a25      	ldr	r2, [pc, #148]	; (8005b08 <TIM_OC5_SetConfig+0xa4>)
 8005a74:	401a      	ands	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4a1f      	ldr	r2, [pc, #124]	; (8005b0c <TIM_OC5_SetConfig+0xa8>)
 8005a90:	4013      	ands	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	4a1b      	ldr	r2, [pc, #108]	; (8005b10 <TIM_OC5_SetConfig+0xac>)
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	041b      	lsls	r3, r3, #16
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a17      	ldr	r2, [pc, #92]	; (8005b14 <TIM_OC5_SetConfig+0xb0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00b      	beq.n	8005ad2 <TIM_OC5_SetConfig+0x6e>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a16      	ldr	r2, [pc, #88]	; (8005b18 <TIM_OC5_SetConfig+0xb4>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d007      	beq.n	8005ad2 <TIM_OC5_SetConfig+0x6e>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a15      	ldr	r2, [pc, #84]	; (8005b1c <TIM_OC5_SetConfig+0xb8>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d003      	beq.n	8005ad2 <TIM_OC5_SetConfig+0x6e>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a14      	ldr	r2, [pc, #80]	; (8005b20 <TIM_OC5_SetConfig+0xbc>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d109      	bne.n	8005ae6 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	4a0c      	ldr	r2, [pc, #48]	; (8005b08 <TIM_OC5_SetConfig+0xa4>)
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	021b      	lsls	r3, r3, #8
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	621a      	str	r2, [r3, #32]
}
 8005b00:	46c0      	nop			; (mov r8, r8)
 8005b02:	46bd      	mov	sp, r7
 8005b04:	b006      	add	sp, #24
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	fffeffff 	.word	0xfffeffff
 8005b0c:	fffeff8f 	.word	0xfffeff8f
 8005b10:	fffdffff 	.word	0xfffdffff
 8005b14:	40012c00 	.word	0x40012c00
 8005b18:	40014000 	.word	0x40014000
 8005b1c:	40014400 	.word	0x40014400
 8005b20:	40014800 	.word	0x40014800

08005b24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	4a26      	ldr	r2, [pc, #152]	; (8005bcc <TIM_OC6_SetConfig+0xa8>)
 8005b34:	401a      	ands	r2, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4a20      	ldr	r2, [pc, #128]	; (8005bd0 <TIM_OC6_SetConfig+0xac>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	021b      	lsls	r3, r3, #8
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	4a1c      	ldr	r2, [pc, #112]	; (8005bd4 <TIM_OC6_SetConfig+0xb0>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	051b      	lsls	r3, r3, #20
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a18      	ldr	r2, [pc, #96]	; (8005bd8 <TIM_OC6_SetConfig+0xb4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d00b      	beq.n	8005b94 <TIM_OC6_SetConfig+0x70>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a17      	ldr	r2, [pc, #92]	; (8005bdc <TIM_OC6_SetConfig+0xb8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d007      	beq.n	8005b94 <TIM_OC6_SetConfig+0x70>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a16      	ldr	r2, [pc, #88]	; (8005be0 <TIM_OC6_SetConfig+0xbc>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d003      	beq.n	8005b94 <TIM_OC6_SetConfig+0x70>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a15      	ldr	r2, [pc, #84]	; (8005be4 <TIM_OC6_SetConfig+0xc0>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d109      	bne.n	8005ba8 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	4a14      	ldr	r2, [pc, #80]	; (8005be8 <TIM_OC6_SetConfig+0xc4>)
 8005b98:	4013      	ands	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	029b      	lsls	r3, r3, #10
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	621a      	str	r2, [r3, #32]
}
 8005bc2:	46c0      	nop			; (mov r8, r8)
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	b006      	add	sp, #24
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	ffefffff 	.word	0xffefffff
 8005bd0:	feff8fff 	.word	0xfeff8fff
 8005bd4:	ffdfffff 	.word	0xffdfffff
 8005bd8:	40012c00 	.word	0x40012c00
 8005bdc:	40014000 	.word	0x40014000
 8005be0:	40014400 	.word	0x40014400
 8005be4:	40014800 	.word	0x40014800
 8005be8:	fffbffff 	.word	0xfffbffff

08005bec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	4393      	bics	r3, r2
 8005c02:	001a      	movs	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4a1e      	ldr	r2, [pc, #120]	; (8005c90 <TIM_TI1_SetConfig+0xa4>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d007      	beq.n	8005c2c <TIM_TI1_SetConfig+0x40>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4a1d      	ldr	r2, [pc, #116]	; (8005c94 <TIM_TI1_SetConfig+0xa8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d003      	beq.n	8005c2c <TIM_TI1_SetConfig+0x40>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4a1c      	ldr	r2, [pc, #112]	; (8005c98 <TIM_TI1_SetConfig+0xac>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d101      	bne.n	8005c30 <TIM_TI1_SetConfig+0x44>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e000      	b.n	8005c32 <TIM_TI1_SetConfig+0x46>
 8005c30:	2300      	movs	r3, #0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d008      	beq.n	8005c48 <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2203      	movs	r2, #3
 8005c3a:	4393      	bics	r3, r2
 8005c3c:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]
 8005c46:	e003      	b.n	8005c50 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	22f0      	movs	r2, #240	; 0xf0
 8005c54:	4393      	bics	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	22ff      	movs	r2, #255	; 0xff
 8005c5e:	4013      	ands	r3, r2
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	220a      	movs	r2, #10
 8005c6a:	4393      	bics	r3, r2
 8005c6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	220a      	movs	r2, #10
 8005c72:	4013      	ands	r3, r2
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	621a      	str	r2, [r3, #32]
}
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	b006      	add	sp, #24
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	46c0      	nop			; (mov r8, r8)
 8005c90:	40012c00 	.word	0x40012c00
 8005c94:	40000400 	.word	0x40000400
 8005c98:	40014000 	.word	0x40014000

08005c9c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	2210      	movs	r2, #16
 8005cb0:	4393      	bics	r3, r2
 8005cb2:	001a      	movs	r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	4a14      	ldr	r2, [pc, #80]	; (8005d18 <TIM_TI2_SetConfig+0x7c>)
 8005cc8:	4013      	ands	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	021b      	lsls	r3, r3, #8
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	4a10      	ldr	r2, [pc, #64]	; (8005d1c <TIM_TI2_SetConfig+0x80>)
 8005cda:	4013      	ands	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	031b      	lsls	r3, r3, #12
 8005ce2:	041b      	lsls	r3, r3, #16
 8005ce4:	0c1b      	lsrs	r3, r3, #16
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	22a0      	movs	r2, #160	; 0xa0
 8005cf0:	4393      	bics	r3, r2
 8005cf2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	22a0      	movs	r2, #160	; 0xa0
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	621a      	str	r2, [r3, #32]
}
 8005d0e:	46c0      	nop			; (mov r8, r8)
 8005d10:	46bd      	mov	sp, r7
 8005d12:	b006      	add	sp, #24
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	46c0      	nop			; (mov r8, r8)
 8005d18:	fffffcff 	.word	0xfffffcff
 8005d1c:	ffff0fff 	.word	0xffff0fff

08005d20 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	4a19      	ldr	r2, [pc, #100]	; (8005d98 <TIM_TI3_SetConfig+0x78>)
 8005d34:	401a      	ands	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6a1b      	ldr	r3, [r3, #32]
 8005d44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2203      	movs	r2, #3
 8005d4a:	4393      	bics	r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	22f0      	movs	r2, #240	; 0xf0
 8005d5a:	4393      	bics	r3, r2
 8005d5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	011b      	lsls	r3, r3, #4
 8005d62:	22ff      	movs	r2, #255	; 0xff
 8005d64:	4013      	ands	r3, r2
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	4a0b      	ldr	r2, [pc, #44]	; (8005d9c <TIM_TI3_SetConfig+0x7c>)
 8005d70:	4013      	ands	r3, r2
 8005d72:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	021a      	lsls	r2, r3, #8
 8005d78:	23a0      	movs	r3, #160	; 0xa0
 8005d7a:	011b      	lsls	r3, r3, #4
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	621a      	str	r2, [r3, #32]
}
 8005d90:	46c0      	nop			; (mov r8, r8)
 8005d92:	46bd      	mov	sp, r7
 8005d94:	b006      	add	sp, #24
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	fffffeff 	.word	0xfffffeff
 8005d9c:	fffff5ff 	.word	0xfffff5ff

08005da0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
 8005dac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	4a1a      	ldr	r2, [pc, #104]	; (8005e1c <TIM_TI4_SetConfig+0x7c>)
 8005db4:	401a      	ands	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	4a15      	ldr	r2, [pc, #84]	; (8005e20 <TIM_TI4_SetConfig+0x80>)
 8005dca:	4013      	ands	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	021b      	lsls	r3, r3, #8
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	4a12      	ldr	r2, [pc, #72]	; (8005e24 <TIM_TI4_SetConfig+0x84>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	031b      	lsls	r3, r3, #12
 8005de4:	041b      	lsls	r3, r3, #16
 8005de6:	0c1b      	lsrs	r3, r3, #16
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	4a0d      	ldr	r2, [pc, #52]	; (8005e28 <TIM_TI4_SetConfig+0x88>)
 8005df2:	4013      	ands	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	031a      	lsls	r2, r3, #12
 8005dfa:	23a0      	movs	r3, #160	; 0xa0
 8005dfc:	021b      	lsls	r3, r3, #8
 8005dfe:	4013      	ands	r3, r2
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	697a      	ldr	r2, [r7, #20]
 8005e0a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	621a      	str	r2, [r3, #32]
}
 8005e12:	46c0      	nop			; (mov r8, r8)
 8005e14:	46bd      	mov	sp, r7
 8005e16:	b006      	add	sp, #24
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	46c0      	nop			; (mov r8, r8)
 8005e1c:	ffffefff 	.word	0xffffefff
 8005e20:	fffffcff 	.word	0xfffffcff
 8005e24:	ffff0fff 	.word	0xffff0fff
 8005e28:	ffff5fff 	.word	0xffff5fff

08005e2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	221f      	movs	r2, #31
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	2201      	movs	r2, #1
 8005e40:	409a      	lsls	r2, r3
 8005e42:	0013      	movs	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	43d2      	mvns	r2, r2
 8005e4e:	401a      	ands	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6a1a      	ldr	r2, [r3, #32]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	211f      	movs	r1, #31
 8005e5c:	400b      	ands	r3, r1
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	4099      	lsls	r1, r3
 8005e62:	000b      	movs	r3, r1
 8005e64:	431a      	orrs	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	621a      	str	r2, [r3, #32]
}
 8005e6a:	46c0      	nop			; (mov r8, r8)
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	b006      	add	sp, #24
 8005e70:	bd80      	pop	{r7, pc}
	...

08005e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	223c      	movs	r2, #60	; 0x3c
 8005e82:	5c9b      	ldrb	r3, [r3, r2]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d101      	bne.n	8005e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e04f      	b.n	8005f2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	223c      	movs	r2, #60	; 0x3c
 8005e90:	2101      	movs	r1, #1
 8005e92:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	223d      	movs	r2, #61	; 0x3d
 8005e98:	2102      	movs	r1, #2
 8005e9a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a20      	ldr	r2, [pc, #128]	; (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d108      	bne.n	8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	4a1f      	ldr	r2, [pc, #124]	; (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005eba:	4013      	ands	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2270      	movs	r2, #112	; 0x70
 8005ecc:	4393      	bics	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a13      	ldr	r2, [pc, #76]	; (8005f34 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d009      	beq.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a12      	ldr	r2, [pc, #72]	; (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d004      	beq.n	8005f00 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a11      	ldr	r2, [pc, #68]	; (8005f40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d10c      	bne.n	8005f1a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2280      	movs	r2, #128	; 0x80
 8005f04:	4393      	bics	r3, r2
 8005f06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	223d      	movs	r2, #61	; 0x3d
 8005f1e:	2101      	movs	r1, #1
 8005f20:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	223c      	movs	r2, #60	; 0x3c
 8005f26:	2100      	movs	r1, #0
 8005f28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	b004      	add	sp, #16
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	40012c00 	.word	0x40012c00
 8005f38:	ff0fffff 	.word	0xff0fffff
 8005f3c:	40000400 	.word	0x40000400
 8005f40:	40014000 	.word	0x40014000

08005f44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	223c      	movs	r2, #60	; 0x3c
 8005f56:	5c9b      	ldrb	r3, [r3, r2]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d101      	bne.n	8005f60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	e079      	b.n	8006054 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	223c      	movs	r2, #60	; 0x3c
 8005f64:	2101      	movs	r1, #1
 8005f66:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	22ff      	movs	r2, #255	; 0xff
 8005f6c:	4393      	bics	r3, r2
 8005f6e:	001a      	movs	r2, r3
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4a38      	ldr	r2, [pc, #224]	; (800605c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005f7c:	401a      	ands	r2, r3
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4a35      	ldr	r2, [pc, #212]	; (8006060 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005f8a:	401a      	ands	r2, r3
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4a33      	ldr	r2, [pc, #204]	; (8006064 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005f98:	401a      	ands	r2, r3
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4a30      	ldr	r2, [pc, #192]	; (8006068 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005fa6:	401a      	ands	r2, r3
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4a2e      	ldr	r2, [pc, #184]	; (800606c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005fb4:	401a      	ands	r2, r3
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	4a2b      	ldr	r2, [pc, #172]	; (8006070 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005fc2:	401a      	ands	r2, r3
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4a29      	ldr	r2, [pc, #164]	; (8006074 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005fd0:	401a      	ands	r2, r3
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	041b      	lsls	r3, r3, #16
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a25      	ldr	r2, [pc, #148]	; (8006078 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d106      	bne.n	8005ff4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4a24      	ldr	r2, [pc, #144]	; (800607c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005fea:	401a      	ands	r2, r3
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a1f      	ldr	r2, [pc, #124]	; (8006078 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d121      	bne.n	8006042 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4a1f      	ldr	r2, [pc, #124]	; (8006080 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006002:	401a      	ands	r2, r3
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006008:	051b      	lsls	r3, r3, #20
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	4a1c      	ldr	r2, [pc, #112]	; (8006084 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8006012:	401a      	ands	r2, r3
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	4313      	orrs	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4a1a      	ldr	r2, [pc, #104]	; (8006088 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8006020:	401a      	ands	r2, r3
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	4313      	orrs	r3, r2
 8006028:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a12      	ldr	r2, [pc, #72]	; (8006078 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d106      	bne.n	8006042 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4a15      	ldr	r2, [pc, #84]	; (800608c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8006038:	401a      	ands	r2, r3
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	223c      	movs	r2, #60	; 0x3c
 800604e:	2100      	movs	r1, #0
 8006050:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	0018      	movs	r0, r3
 8006056:	46bd      	mov	sp, r7
 8006058:	b004      	add	sp, #16
 800605a:	bd80      	pop	{r7, pc}
 800605c:	fffffcff 	.word	0xfffffcff
 8006060:	fffffbff 	.word	0xfffffbff
 8006064:	fffff7ff 	.word	0xfffff7ff
 8006068:	ffffefff 	.word	0xffffefff
 800606c:	ffffdfff 	.word	0xffffdfff
 8006070:	ffffbfff 	.word	0xffffbfff
 8006074:	fff0ffff 	.word	0xfff0ffff
 8006078:	40012c00 	.word	0x40012c00
 800607c:	efffffff 	.word	0xefffffff
 8006080:	ff0fffff 	.word	0xff0fffff
 8006084:	feffffff 	.word	0xfeffffff
 8006088:	fdffffff 	.word	0xfdffffff
 800608c:	dfffffff 	.word	0xdfffffff

08006090 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006098:	46c0      	nop			; (mov r8, r8)
 800609a:	46bd      	mov	sp, r7
 800609c:	b002      	add	sp, #8
 800609e:	bd80      	pop	{r7, pc}

080060a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060a8:	46c0      	nop			; (mov r8, r8)
 80060aa:	46bd      	mov	sp, r7
 80060ac:	b002      	add	sp, #8
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b082      	sub	sp, #8
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060b8:	46c0      	nop			; (mov r8, r8)
 80060ba:	46bd      	mov	sp, r7
 80060bc:	b002      	add	sp, #8
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e046      	b.n	8006160 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2288      	movs	r2, #136	; 0x88
 80060d6:	589b      	ldr	r3, [r3, r2]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d107      	bne.n	80060ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2284      	movs	r2, #132	; 0x84
 80060e0:	2100      	movs	r1, #0
 80060e2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	0018      	movs	r0, r3
 80060e8:	f7fd f8d6 	bl	8003298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2288      	movs	r2, #136	; 0x88
 80060f0:	2124      	movs	r1, #36	; 0x24
 80060f2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2101      	movs	r1, #1
 8006100:	438a      	bics	r2, r1
 8006102:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	0018      	movs	r0, r3
 8006108:	f000 fab0 	bl	800666c <UART_SetConfig>
 800610c:	0003      	movs	r3, r0
 800610e:	2b01      	cmp	r3, #1
 8006110:	d101      	bne.n	8006116 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e024      	b.n	8006160 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	0018      	movs	r0, r3
 8006122:	f000 fc47 	bl	80069b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	490d      	ldr	r1, [pc, #52]	; (8006168 <HAL_UART_Init+0xa8>)
 8006132:	400a      	ands	r2, r1
 8006134:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	212a      	movs	r1, #42	; 0x2a
 8006142:	438a      	bics	r2, r1
 8006144:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2101      	movs	r1, #1
 8006152:	430a      	orrs	r2, r1
 8006154:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	0018      	movs	r0, r3
 800615a:	f000 fcdf 	bl	8006b1c <UART_CheckIdleState>
 800615e:	0003      	movs	r3, r0
}
 8006160:	0018      	movs	r0, r3
 8006162:	46bd      	mov	sp, r7
 8006164:	b002      	add	sp, #8
 8006166:	bd80      	pop	{r7, pc}
 8006168:	ffffb7ff 	.word	0xffffb7ff

0800616c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e04e      	b.n	800621c <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2288      	movs	r2, #136	; 0x88
 8006182:	589b      	ldr	r3, [r3, r2]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d107      	bne.n	8006198 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2284      	movs	r2, #132	; 0x84
 800618c:	2100      	movs	r1, #0
 800618e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	0018      	movs	r0, r3
 8006194:	f7fd f880 	bl	8003298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2288      	movs	r2, #136	; 0x88
 800619c:	2124      	movs	r1, #36	; 0x24
 800619e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2101      	movs	r1, #1
 80061ac:	438a      	bics	r2, r1
 80061ae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	0018      	movs	r0, r3
 80061b4:	f000 fa5a 	bl	800666c <UART_SetConfig>
 80061b8:	0003      	movs	r3, r0
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <HAL_HalfDuplex_Init+0x56>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e02c      	b.n	800621c <HAL_HalfDuplex_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <HAL_HalfDuplex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	0018      	movs	r0, r3
 80061ce:	f000 fbf1 	bl	80069b4 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4911      	ldr	r1, [pc, #68]	; (8006224 <HAL_HalfDuplex_Init+0xb8>)
 80061de:	400a      	ands	r2, r1
 80061e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2122      	movs	r1, #34	; 0x22
 80061ee:	438a      	bics	r2, r1
 80061f0:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2108      	movs	r1, #8
 80061fe:	430a      	orrs	r2, r1
 8006200:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2101      	movs	r1, #1
 800620e:	430a      	orrs	r2, r1
 8006210:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	0018      	movs	r0, r3
 8006216:	f000 fc81 	bl	8006b1c <UART_CheckIdleState>
 800621a:	0003      	movs	r3, r0
}
 800621c:	0018      	movs	r0, r3
 800621e:	46bd      	mov	sp, r7
 8006220:	b002      	add	sp, #8
 8006222:	bd80      	pop	{r7, pc}
 8006224:	ffffb7ff 	.word	0xffffb7ff

08006228 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b08a      	sub	sp, #40	; 0x28
 800622c:	af02      	add	r7, sp, #8
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	603b      	str	r3, [r7, #0]
 8006234:	1dbb      	adds	r3, r7, #6
 8006236:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2288      	movs	r2, #136	; 0x88
 800623c:	589b      	ldr	r3, [r3, r2]
 800623e:	2b20      	cmp	r3, #32
 8006240:	d000      	beq.n	8006244 <HAL_UART_Transmit+0x1c>
 8006242:	e088      	b.n	8006356 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d003      	beq.n	8006252 <HAL_UART_Transmit+0x2a>
 800624a:	1dbb      	adds	r3, r7, #6
 800624c:	881b      	ldrh	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e080      	b.n	8006358 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	689a      	ldr	r2, [r3, #8]
 800625a:	2380      	movs	r3, #128	; 0x80
 800625c:	015b      	lsls	r3, r3, #5
 800625e:	429a      	cmp	r2, r3
 8006260:	d109      	bne.n	8006276 <HAL_UART_Transmit+0x4e>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d105      	bne.n	8006276 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2201      	movs	r2, #1
 800626e:	4013      	ands	r3, r2
 8006270:	d001      	beq.n	8006276 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e070      	b.n	8006358 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2290      	movs	r2, #144	; 0x90
 800627a:	2100      	movs	r1, #0
 800627c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2288      	movs	r2, #136	; 0x88
 8006282:	2121      	movs	r1, #33	; 0x21
 8006284:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006286:	f7fd fb41 	bl	800390c <HAL_GetTick>
 800628a:	0003      	movs	r3, r0
 800628c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	1dba      	adds	r2, r7, #6
 8006292:	2154      	movs	r1, #84	; 0x54
 8006294:	8812      	ldrh	r2, [r2, #0]
 8006296:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	1dba      	adds	r2, r7, #6
 800629c:	2156      	movs	r1, #86	; 0x56
 800629e:	8812      	ldrh	r2, [r2, #0]
 80062a0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	689a      	ldr	r2, [r3, #8]
 80062a6:	2380      	movs	r3, #128	; 0x80
 80062a8:	015b      	lsls	r3, r3, #5
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d108      	bne.n	80062c0 <HAL_UART_Transmit+0x98>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d104      	bne.n	80062c0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80062b6:	2300      	movs	r3, #0
 80062b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	61bb      	str	r3, [r7, #24]
 80062be:	e003      	b.n	80062c8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062c4:	2300      	movs	r3, #0
 80062c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062c8:	e02c      	b.n	8006324 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	0013      	movs	r3, r2
 80062d4:	2200      	movs	r2, #0
 80062d6:	2180      	movs	r1, #128	; 0x80
 80062d8:	f000 fc6e 	bl	8006bb8 <UART_WaitOnFlagUntilTimeout>
 80062dc:	1e03      	subs	r3, r0, #0
 80062de:	d001      	beq.n	80062e4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e039      	b.n	8006358 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10b      	bne.n	8006302 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	001a      	movs	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	05d2      	lsls	r2, r2, #23
 80062f6:	0dd2      	lsrs	r2, r2, #23
 80062f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	3302      	adds	r3, #2
 80062fe:	61bb      	str	r3, [r7, #24]
 8006300:	e007      	b.n	8006312 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	781a      	ldrb	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	3301      	adds	r3, #1
 8006310:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2256      	movs	r2, #86	; 0x56
 8006316:	5a9b      	ldrh	r3, [r3, r2]
 8006318:	b29b      	uxth	r3, r3
 800631a:	3b01      	subs	r3, #1
 800631c:	b299      	uxth	r1, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2256      	movs	r2, #86	; 0x56
 8006322:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2256      	movs	r2, #86	; 0x56
 8006328:	5a9b      	ldrh	r3, [r3, r2]
 800632a:	b29b      	uxth	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1cc      	bne.n	80062ca <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	0013      	movs	r3, r2
 800633a:	2200      	movs	r2, #0
 800633c:	2140      	movs	r1, #64	; 0x40
 800633e:	f000 fc3b 	bl	8006bb8 <UART_WaitOnFlagUntilTimeout>
 8006342:	1e03      	subs	r3, r0, #0
 8006344:	d001      	beq.n	800634a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e006      	b.n	8006358 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2288      	movs	r2, #136	; 0x88
 800634e:	2120      	movs	r1, #32
 8006350:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	e000      	b.n	8006358 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8006356:	2302      	movs	r3, #2
  }
}
 8006358:	0018      	movs	r0, r3
 800635a:	46bd      	mov	sp, r7
 800635c:	b008      	add	sp, #32
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08a      	sub	sp, #40	; 0x28
 8006364:	af02      	add	r7, sp, #8
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	603b      	str	r3, [r7, #0]
 800636c:	1dbb      	adds	r3, r7, #6
 800636e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	228c      	movs	r2, #140	; 0x8c
 8006374:	589b      	ldr	r3, [r3, r2]
 8006376:	2b20      	cmp	r3, #32
 8006378:	d000      	beq.n	800637c <HAL_UART_Receive+0x1c>
 800637a:	e0cc      	b.n	8006516 <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_UART_Receive+0x2a>
 8006382:	1dbb      	adds	r3, r7, #6
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d101      	bne.n	800638e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e0c4      	b.n	8006518 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	689a      	ldr	r2, [r3, #8]
 8006392:	2380      	movs	r3, #128	; 0x80
 8006394:	015b      	lsls	r3, r3, #5
 8006396:	429a      	cmp	r2, r3
 8006398:	d109      	bne.n	80063ae <HAL_UART_Receive+0x4e>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d105      	bne.n	80063ae <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2201      	movs	r2, #1
 80063a6:	4013      	ands	r3, r2
 80063a8:	d001      	beq.n	80063ae <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e0b4      	b.n	8006518 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2290      	movs	r2, #144	; 0x90
 80063b2:	2100      	movs	r1, #0
 80063b4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	228c      	movs	r2, #140	; 0x8c
 80063ba:	2122      	movs	r1, #34	; 0x22
 80063bc:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063c4:	f7fd faa2 	bl	800390c <HAL_GetTick>
 80063c8:	0003      	movs	r3, r0
 80063ca:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	1dba      	adds	r2, r7, #6
 80063d0:	215c      	movs	r1, #92	; 0x5c
 80063d2:	8812      	ldrh	r2, [r2, #0]
 80063d4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	1dba      	adds	r2, r7, #6
 80063da:	215e      	movs	r1, #94	; 0x5e
 80063dc:	8812      	ldrh	r2, [r2, #0]
 80063de:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	2380      	movs	r3, #128	; 0x80
 80063e6:	015b      	lsls	r3, r3, #5
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d10d      	bne.n	8006408 <HAL_UART_Receive+0xa8>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d104      	bne.n	80063fe <HAL_UART_Receive+0x9e>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2260      	movs	r2, #96	; 0x60
 80063f8:	4949      	ldr	r1, [pc, #292]	; (8006520 <HAL_UART_Receive+0x1c0>)
 80063fa:	5299      	strh	r1, [r3, r2]
 80063fc:	e02e      	b.n	800645c <HAL_UART_Receive+0xfc>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2260      	movs	r2, #96	; 0x60
 8006402:	21ff      	movs	r1, #255	; 0xff
 8006404:	5299      	strh	r1, [r3, r2]
 8006406:	e029      	b.n	800645c <HAL_UART_Receive+0xfc>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10d      	bne.n	800642c <HAL_UART_Receive+0xcc>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d104      	bne.n	8006422 <HAL_UART_Receive+0xc2>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2260      	movs	r2, #96	; 0x60
 800641c:	21ff      	movs	r1, #255	; 0xff
 800641e:	5299      	strh	r1, [r3, r2]
 8006420:	e01c      	b.n	800645c <HAL_UART_Receive+0xfc>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2260      	movs	r2, #96	; 0x60
 8006426:	217f      	movs	r1, #127	; 0x7f
 8006428:	5299      	strh	r1, [r3, r2]
 800642a:	e017      	b.n	800645c <HAL_UART_Receive+0xfc>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	689a      	ldr	r2, [r3, #8]
 8006430:	2380      	movs	r3, #128	; 0x80
 8006432:	055b      	lsls	r3, r3, #21
 8006434:	429a      	cmp	r2, r3
 8006436:	d10d      	bne.n	8006454 <HAL_UART_Receive+0xf4>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d104      	bne.n	800644a <HAL_UART_Receive+0xea>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2260      	movs	r2, #96	; 0x60
 8006444:	217f      	movs	r1, #127	; 0x7f
 8006446:	5299      	strh	r1, [r3, r2]
 8006448:	e008      	b.n	800645c <HAL_UART_Receive+0xfc>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2260      	movs	r2, #96	; 0x60
 800644e:	213f      	movs	r1, #63	; 0x3f
 8006450:	5299      	strh	r1, [r3, r2]
 8006452:	e003      	b.n	800645c <HAL_UART_Receive+0xfc>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2260      	movs	r2, #96	; 0x60
 8006458:	2100      	movs	r1, #0
 800645a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800645c:	2312      	movs	r3, #18
 800645e:	18fb      	adds	r3, r7, r3
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	2160      	movs	r1, #96	; 0x60
 8006464:	5a52      	ldrh	r2, [r2, r1]
 8006466:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	2380      	movs	r3, #128	; 0x80
 800646e:	015b      	lsls	r3, r3, #5
 8006470:	429a      	cmp	r2, r3
 8006472:	d108      	bne.n	8006486 <HAL_UART_Receive+0x126>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d104      	bne.n	8006486 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800647c:	2300      	movs	r3, #0
 800647e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	61bb      	str	r3, [r7, #24]
 8006484:	e003      	b.n	800648e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800648a:	2300      	movs	r3, #0
 800648c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800648e:	e036      	b.n	80064fe <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	0013      	movs	r3, r2
 800649a:	2200      	movs	r2, #0
 800649c:	2120      	movs	r1, #32
 800649e:	f000 fb8b 	bl	8006bb8 <UART_WaitOnFlagUntilTimeout>
 80064a2:	1e03      	subs	r3, r0, #0
 80064a4:	d001      	beq.n	80064aa <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e036      	b.n	8006518 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10e      	bne.n	80064ce <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	2212      	movs	r2, #18
 80064ba:	18ba      	adds	r2, r7, r2
 80064bc:	8812      	ldrh	r2, [r2, #0]
 80064be:	4013      	ands	r3, r2
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	3302      	adds	r3, #2
 80064ca:	61bb      	str	r3, [r7, #24]
 80064cc:	e00e      	b.n	80064ec <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2212      	movs	r2, #18
 80064d8:	18ba      	adds	r2, r7, r2
 80064da:	8812      	ldrh	r2, [r2, #0]
 80064dc:	b2d2      	uxtb	r2, r2
 80064de:	4013      	ands	r3, r2
 80064e0:	b2da      	uxtb	r2, r3
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	3301      	adds	r3, #1
 80064ea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	225e      	movs	r2, #94	; 0x5e
 80064f0:	5a9b      	ldrh	r3, [r3, r2]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	3b01      	subs	r3, #1
 80064f6:	b299      	uxth	r1, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	225e      	movs	r2, #94	; 0x5e
 80064fc:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	225e      	movs	r2, #94	; 0x5e
 8006502:	5a9b      	ldrh	r3, [r3, r2]
 8006504:	b29b      	uxth	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1c2      	bne.n	8006490 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	228c      	movs	r2, #140	; 0x8c
 800650e:	2120      	movs	r1, #32
 8006510:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006512:	2300      	movs	r3, #0
 8006514:	e000      	b.n	8006518 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8006516:	2302      	movs	r3, #2
  }
}
 8006518:	0018      	movs	r0, r3
 800651a:	46bd      	mov	sp, r7
 800651c:	b008      	add	sp, #32
 800651e:	bd80      	pop	{r7, pc}
 8006520:	000001ff 	.word	0x000001ff

08006524 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b08a      	sub	sp, #40	; 0x28
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2284      	movs	r2, #132	; 0x84
 8006530:	5c9b      	ldrb	r3, [r3, r2]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d101      	bne.n	800653a <HAL_HalfDuplex_EnableTransmitter+0x16>
 8006536:	2302      	movs	r3, #2
 8006538:	e042      	b.n	80065c0 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2284      	movs	r2, #132	; 0x84
 800653e:	2101      	movs	r1, #1
 8006540:	5499      	strb	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_BUSY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2288      	movs	r2, #136	; 0x88
 8006546:	2124      	movs	r1, #36	; 0x24
 8006548:	5099      	str	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800654a:	f3ef 8310 	mrs	r3, PRIMASK
 800654e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006550:	68bb      	ldr	r3, [r7, #8]

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8006552:	627b      	str	r3, [r7, #36]	; 0x24
 8006554:	2301      	movs	r3, #1
 8006556:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f383 8810 	msr	PRIMASK, r3
}
 800655e:	46c0      	nop			; (mov r8, r8)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	210c      	movs	r1, #12
 800656c:	438a      	bics	r2, r1
 800656e:	601a      	str	r2, [r3, #0]
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	f383 8810 	msr	PRIMASK, r3
}
 800657a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800657c:	f3ef 8310 	mrs	r3, PRIMASK
 8006580:	617b      	str	r3, [r7, #20]
  return(result);
 8006582:	697b      	ldr	r3, [r7, #20]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8006584:	623b      	str	r3, [r7, #32]
 8006586:	2301      	movs	r3, #1
 8006588:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	f383 8810 	msr	PRIMASK, r3
}
 8006590:	46c0      	nop			; (mov r8, r8)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2108      	movs	r1, #8
 800659e:	430a      	orrs	r2, r1
 80065a0:	601a      	str	r2, [r3, #0]
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	f383 8810 	msr	PRIMASK, r3
}
 80065ac:	46c0      	nop			; (mov r8, r8)

  huart->gState = HAL_UART_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2288      	movs	r2, #136	; 0x88
 80065b2:	2120      	movs	r1, #32
 80065b4:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2284      	movs	r2, #132	; 0x84
 80065ba:	2100      	movs	r1, #0
 80065bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	0018      	movs	r0, r3
 80065c2:	46bd      	mov	sp, r7
 80065c4:	b00a      	add	sp, #40	; 0x28
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08a      	sub	sp, #40	; 0x28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2284      	movs	r2, #132	; 0x84
 80065d4:	5c9b      	ldrb	r3, [r3, r2]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d101      	bne.n	80065de <HAL_HalfDuplex_EnableReceiver+0x16>
 80065da:	2302      	movs	r3, #2
 80065dc:	e042      	b.n	8006664 <HAL_HalfDuplex_EnableReceiver+0x9c>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2284      	movs	r2, #132	; 0x84
 80065e2:	2101      	movs	r1, #1
 80065e4:	5499      	strb	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_BUSY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2288      	movs	r2, #136	; 0x88
 80065ea:	2124      	movs	r1, #36	; 0x24
 80065ec:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065ee:	f3ef 8310 	mrs	r3, PRIMASK
 80065f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80065f4:	68bb      	ldr	r3, [r7, #8]

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80065f6:	627b      	str	r3, [r7, #36]	; 0x24
 80065f8:	2301      	movs	r3, #1
 80065fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f383 8810 	msr	PRIMASK, r3
}
 8006602:	46c0      	nop			; (mov r8, r8)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	210c      	movs	r1, #12
 8006610:	438a      	bics	r2, r1
 8006612:	601a      	str	r2, [r3, #0]
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f383 8810 	msr	PRIMASK, r3
}
 800661e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006620:	f3ef 8310 	mrs	r3, PRIMASK
 8006624:	617b      	str	r3, [r7, #20]
  return(result);
 8006626:	697b      	ldr	r3, [r7, #20]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8006628:	623b      	str	r3, [r7, #32]
 800662a:	2301      	movs	r3, #1
 800662c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	f383 8810 	msr	PRIMASK, r3
}
 8006634:	46c0      	nop			; (mov r8, r8)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2104      	movs	r1, #4
 8006642:	430a      	orrs	r2, r1
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	f383 8810 	msr	PRIMASK, r3
}
 8006650:	46c0      	nop			; (mov r8, r8)

  huart->gState = HAL_UART_STATE_READY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2288      	movs	r2, #136	; 0x88
 8006656:	2120      	movs	r1, #32
 8006658:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2284      	movs	r2, #132	; 0x84
 800665e:	2100      	movs	r1, #0
 8006660:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	0018      	movs	r0, r3
 8006666:	46bd      	mov	sp, r7
 8006668:	b00a      	add	sp, #40	; 0x28
 800666a:	bd80      	pop	{r7, pc}

0800666c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b088      	sub	sp, #32
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006674:	231a      	movs	r3, #26
 8006676:	18fb      	adds	r3, r7, r3
 8006678:	2200      	movs	r2, #0
 800667a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689a      	ldr	r2, [r3, #8]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	431a      	orrs	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	431a      	orrs	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	69db      	ldr	r3, [r3, #28]
 8006690:	4313      	orrs	r3, r2
 8006692:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4abc      	ldr	r2, [pc, #752]	; (800698c <UART_SetConfig+0x320>)
 800669c:	4013      	ands	r3, r2
 800669e:	0019      	movs	r1, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	69fa      	ldr	r2, [r7, #28]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	4ab7      	ldr	r2, [pc, #732]	; (8006990 <UART_SetConfig+0x324>)
 80066b2:	4013      	ands	r3, r2
 80066b4:	0019      	movs	r1, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	69fa      	ldr	r2, [r7, #28]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	4aae      	ldr	r2, [pc, #696]	; (8006994 <UART_SetConfig+0x328>)
 80066da:	4013      	ands	r3, r2
 80066dc:	0019      	movs	r1, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	69fa      	ldr	r2, [r7, #28]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ee:	220f      	movs	r2, #15
 80066f0:	4393      	bics	r3, r2
 80066f2:	0019      	movs	r1, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4aa4      	ldr	r2, [pc, #656]	; (8006998 <UART_SetConfig+0x32c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d127      	bne.n	800675a <UART_SetConfig+0xee>
 800670a:	4ba4      	ldr	r3, [pc, #656]	; (800699c <UART_SetConfig+0x330>)
 800670c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670e:	2203      	movs	r2, #3
 8006710:	4013      	ands	r3, r2
 8006712:	2b03      	cmp	r3, #3
 8006714:	d017      	beq.n	8006746 <UART_SetConfig+0xda>
 8006716:	d81b      	bhi.n	8006750 <UART_SetConfig+0xe4>
 8006718:	2b02      	cmp	r3, #2
 800671a:	d00a      	beq.n	8006732 <UART_SetConfig+0xc6>
 800671c:	d818      	bhi.n	8006750 <UART_SetConfig+0xe4>
 800671e:	2b00      	cmp	r3, #0
 8006720:	d002      	beq.n	8006728 <UART_SetConfig+0xbc>
 8006722:	2b01      	cmp	r3, #1
 8006724:	d00a      	beq.n	800673c <UART_SetConfig+0xd0>
 8006726:	e013      	b.n	8006750 <UART_SetConfig+0xe4>
 8006728:	231b      	movs	r3, #27
 800672a:	18fb      	adds	r3, r7, r3
 800672c:	2200      	movs	r2, #0
 800672e:	701a      	strb	r2, [r3, #0]
 8006730:	e058      	b.n	80067e4 <UART_SetConfig+0x178>
 8006732:	231b      	movs	r3, #27
 8006734:	18fb      	adds	r3, r7, r3
 8006736:	2202      	movs	r2, #2
 8006738:	701a      	strb	r2, [r3, #0]
 800673a:	e053      	b.n	80067e4 <UART_SetConfig+0x178>
 800673c:	231b      	movs	r3, #27
 800673e:	18fb      	adds	r3, r7, r3
 8006740:	2204      	movs	r2, #4
 8006742:	701a      	strb	r2, [r3, #0]
 8006744:	e04e      	b.n	80067e4 <UART_SetConfig+0x178>
 8006746:	231b      	movs	r3, #27
 8006748:	18fb      	adds	r3, r7, r3
 800674a:	2208      	movs	r2, #8
 800674c:	701a      	strb	r2, [r3, #0]
 800674e:	e049      	b.n	80067e4 <UART_SetConfig+0x178>
 8006750:	231b      	movs	r3, #27
 8006752:	18fb      	adds	r3, r7, r3
 8006754:	2210      	movs	r2, #16
 8006756:	701a      	strb	r2, [r3, #0]
 8006758:	e044      	b.n	80067e4 <UART_SetConfig+0x178>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a90      	ldr	r2, [pc, #576]	; (80069a0 <UART_SetConfig+0x334>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d127      	bne.n	80067b4 <UART_SetConfig+0x148>
 8006764:	4b8d      	ldr	r3, [pc, #564]	; (800699c <UART_SetConfig+0x330>)
 8006766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006768:	220c      	movs	r2, #12
 800676a:	4013      	ands	r3, r2
 800676c:	2b0c      	cmp	r3, #12
 800676e:	d017      	beq.n	80067a0 <UART_SetConfig+0x134>
 8006770:	d81b      	bhi.n	80067aa <UART_SetConfig+0x13e>
 8006772:	2b08      	cmp	r3, #8
 8006774:	d00a      	beq.n	800678c <UART_SetConfig+0x120>
 8006776:	d818      	bhi.n	80067aa <UART_SetConfig+0x13e>
 8006778:	2b00      	cmp	r3, #0
 800677a:	d002      	beq.n	8006782 <UART_SetConfig+0x116>
 800677c:	2b04      	cmp	r3, #4
 800677e:	d00a      	beq.n	8006796 <UART_SetConfig+0x12a>
 8006780:	e013      	b.n	80067aa <UART_SetConfig+0x13e>
 8006782:	231b      	movs	r3, #27
 8006784:	18fb      	adds	r3, r7, r3
 8006786:	2200      	movs	r2, #0
 8006788:	701a      	strb	r2, [r3, #0]
 800678a:	e02b      	b.n	80067e4 <UART_SetConfig+0x178>
 800678c:	231b      	movs	r3, #27
 800678e:	18fb      	adds	r3, r7, r3
 8006790:	2202      	movs	r2, #2
 8006792:	701a      	strb	r2, [r3, #0]
 8006794:	e026      	b.n	80067e4 <UART_SetConfig+0x178>
 8006796:	231b      	movs	r3, #27
 8006798:	18fb      	adds	r3, r7, r3
 800679a:	2204      	movs	r2, #4
 800679c:	701a      	strb	r2, [r3, #0]
 800679e:	e021      	b.n	80067e4 <UART_SetConfig+0x178>
 80067a0:	231b      	movs	r3, #27
 80067a2:	18fb      	adds	r3, r7, r3
 80067a4:	2208      	movs	r2, #8
 80067a6:	701a      	strb	r2, [r3, #0]
 80067a8:	e01c      	b.n	80067e4 <UART_SetConfig+0x178>
 80067aa:	231b      	movs	r3, #27
 80067ac:	18fb      	adds	r3, r7, r3
 80067ae:	2210      	movs	r2, #16
 80067b0:	701a      	strb	r2, [r3, #0]
 80067b2:	e017      	b.n	80067e4 <UART_SetConfig+0x178>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a7a      	ldr	r2, [pc, #488]	; (80069a4 <UART_SetConfig+0x338>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d104      	bne.n	80067c8 <UART_SetConfig+0x15c>
 80067be:	231b      	movs	r3, #27
 80067c0:	18fb      	adds	r3, r7, r3
 80067c2:	2200      	movs	r2, #0
 80067c4:	701a      	strb	r2, [r3, #0]
 80067c6:	e00d      	b.n	80067e4 <UART_SetConfig+0x178>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a76      	ldr	r2, [pc, #472]	; (80069a8 <UART_SetConfig+0x33c>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d104      	bne.n	80067dc <UART_SetConfig+0x170>
 80067d2:	231b      	movs	r3, #27
 80067d4:	18fb      	adds	r3, r7, r3
 80067d6:	2200      	movs	r2, #0
 80067d8:	701a      	strb	r2, [r3, #0]
 80067da:	e003      	b.n	80067e4 <UART_SetConfig+0x178>
 80067dc:	231b      	movs	r3, #27
 80067de:	18fb      	adds	r3, r7, r3
 80067e0:	2210      	movs	r2, #16
 80067e2:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	69da      	ldr	r2, [r3, #28]
 80067e8:	2380      	movs	r3, #128	; 0x80
 80067ea:	021b      	lsls	r3, r3, #8
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d000      	beq.n	80067f2 <UART_SetConfig+0x186>
 80067f0:	e065      	b.n	80068be <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80067f2:	231b      	movs	r3, #27
 80067f4:	18fb      	adds	r3, r7, r3
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	2b08      	cmp	r3, #8
 80067fa:	d015      	beq.n	8006828 <UART_SetConfig+0x1bc>
 80067fc:	dc18      	bgt.n	8006830 <UART_SetConfig+0x1c4>
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d00d      	beq.n	800681e <UART_SetConfig+0x1b2>
 8006802:	dc15      	bgt.n	8006830 <UART_SetConfig+0x1c4>
 8006804:	2b00      	cmp	r3, #0
 8006806:	d002      	beq.n	800680e <UART_SetConfig+0x1a2>
 8006808:	2b02      	cmp	r3, #2
 800680a:	d005      	beq.n	8006818 <UART_SetConfig+0x1ac>
 800680c:	e010      	b.n	8006830 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800680e:	f7fd ffb9 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 8006812:	0003      	movs	r3, r0
 8006814:	617b      	str	r3, [r7, #20]
        break;
 8006816:	e012      	b.n	800683e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006818:	4b64      	ldr	r3, [pc, #400]	; (80069ac <UART_SetConfig+0x340>)
 800681a:	617b      	str	r3, [r7, #20]
        break;
 800681c:	e00f      	b.n	800683e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800681e:	f7fd ff25 	bl	800466c <HAL_RCC_GetSysClockFreq>
 8006822:	0003      	movs	r3, r0
 8006824:	617b      	str	r3, [r7, #20]
        break;
 8006826:	e00a      	b.n	800683e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006828:	2380      	movs	r3, #128	; 0x80
 800682a:	021b      	lsls	r3, r3, #8
 800682c:	617b      	str	r3, [r7, #20]
        break;
 800682e:	e006      	b.n	800683e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006834:	231a      	movs	r3, #26
 8006836:	18fb      	adds	r3, r7, r3
 8006838:	2201      	movs	r2, #1
 800683a:	701a      	strb	r2, [r3, #0]
        break;
 800683c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d100      	bne.n	8006846 <UART_SetConfig+0x1da>
 8006844:	e08d      	b.n	8006962 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800684a:	4b59      	ldr	r3, [pc, #356]	; (80069b0 <UART_SetConfig+0x344>)
 800684c:	0052      	lsls	r2, r2, #1
 800684e:	5ad3      	ldrh	r3, [r2, r3]
 8006850:	0019      	movs	r1, r3
 8006852:	6978      	ldr	r0, [r7, #20]
 8006854:	f7f9 fc74 	bl	8000140 <__udivsi3>
 8006858:	0003      	movs	r3, r0
 800685a:	005a      	lsls	r2, r3, #1
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	085b      	lsrs	r3, r3, #1
 8006862:	18d2      	adds	r2, r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	0019      	movs	r1, r3
 800686a:	0010      	movs	r0, r2
 800686c:	f7f9 fc68 	bl	8000140 <__udivsi3>
 8006870:	0003      	movs	r3, r0
 8006872:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	2b0f      	cmp	r3, #15
 8006878:	d91c      	bls.n	80068b4 <UART_SetConfig+0x248>
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	2380      	movs	r3, #128	; 0x80
 800687e:	025b      	lsls	r3, r3, #9
 8006880:	429a      	cmp	r2, r3
 8006882:	d217      	bcs.n	80068b4 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	b29a      	uxth	r2, r3
 8006888:	200e      	movs	r0, #14
 800688a:	183b      	adds	r3, r7, r0
 800688c:	210f      	movs	r1, #15
 800688e:	438a      	bics	r2, r1
 8006890:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	085b      	lsrs	r3, r3, #1
 8006896:	b29b      	uxth	r3, r3
 8006898:	2207      	movs	r2, #7
 800689a:	4013      	ands	r3, r2
 800689c:	b299      	uxth	r1, r3
 800689e:	183b      	adds	r3, r7, r0
 80068a0:	183a      	adds	r2, r7, r0
 80068a2:	8812      	ldrh	r2, [r2, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	183a      	adds	r2, r7, r0
 80068ae:	8812      	ldrh	r2, [r2, #0]
 80068b0:	60da      	str	r2, [r3, #12]
 80068b2:	e056      	b.n	8006962 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80068b4:	231a      	movs	r3, #26
 80068b6:	18fb      	adds	r3, r7, r3
 80068b8:	2201      	movs	r2, #1
 80068ba:	701a      	strb	r2, [r3, #0]
 80068bc:	e051      	b.n	8006962 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068be:	231b      	movs	r3, #27
 80068c0:	18fb      	adds	r3, r7, r3
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d015      	beq.n	80068f4 <UART_SetConfig+0x288>
 80068c8:	dc18      	bgt.n	80068fc <UART_SetConfig+0x290>
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d00d      	beq.n	80068ea <UART_SetConfig+0x27e>
 80068ce:	dc15      	bgt.n	80068fc <UART_SetConfig+0x290>
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d002      	beq.n	80068da <UART_SetConfig+0x26e>
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d005      	beq.n	80068e4 <UART_SetConfig+0x278>
 80068d8:	e010      	b.n	80068fc <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068da:	f7fd ff53 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 80068de:	0003      	movs	r3, r0
 80068e0:	617b      	str	r3, [r7, #20]
        break;
 80068e2:	e012      	b.n	800690a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068e4:	4b31      	ldr	r3, [pc, #196]	; (80069ac <UART_SetConfig+0x340>)
 80068e6:	617b      	str	r3, [r7, #20]
        break;
 80068e8:	e00f      	b.n	800690a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ea:	f7fd febf 	bl	800466c <HAL_RCC_GetSysClockFreq>
 80068ee:	0003      	movs	r3, r0
 80068f0:	617b      	str	r3, [r7, #20]
        break;
 80068f2:	e00a      	b.n	800690a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068f4:	2380      	movs	r3, #128	; 0x80
 80068f6:	021b      	lsls	r3, r3, #8
 80068f8:	617b      	str	r3, [r7, #20]
        break;
 80068fa:	e006      	b.n	800690a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006900:	231a      	movs	r3, #26
 8006902:	18fb      	adds	r3, r7, r3
 8006904:	2201      	movs	r2, #1
 8006906:	701a      	strb	r2, [r3, #0]
        break;
 8006908:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d028      	beq.n	8006962 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006914:	4b26      	ldr	r3, [pc, #152]	; (80069b0 <UART_SetConfig+0x344>)
 8006916:	0052      	lsls	r2, r2, #1
 8006918:	5ad3      	ldrh	r3, [r2, r3]
 800691a:	0019      	movs	r1, r3
 800691c:	6978      	ldr	r0, [r7, #20]
 800691e:	f7f9 fc0f 	bl	8000140 <__udivsi3>
 8006922:	0003      	movs	r3, r0
 8006924:	001a      	movs	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	085b      	lsrs	r3, r3, #1
 800692c:	18d2      	adds	r2, r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	0019      	movs	r1, r3
 8006934:	0010      	movs	r0, r2
 8006936:	f7f9 fc03 	bl	8000140 <__udivsi3>
 800693a:	0003      	movs	r3, r0
 800693c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	2b0f      	cmp	r3, #15
 8006942:	d90a      	bls.n	800695a <UART_SetConfig+0x2ee>
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	2380      	movs	r3, #128	; 0x80
 8006948:	025b      	lsls	r3, r3, #9
 800694a:	429a      	cmp	r2, r3
 800694c:	d205      	bcs.n	800695a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	b29a      	uxth	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	60da      	str	r2, [r3, #12]
 8006958:	e003      	b.n	8006962 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800695a:	231a      	movs	r3, #26
 800695c:	18fb      	adds	r3, r7, r3
 800695e:	2201      	movs	r2, #1
 8006960:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	226a      	movs	r2, #106	; 0x6a
 8006966:	2101      	movs	r1, #1
 8006968:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2268      	movs	r2, #104	; 0x68
 800696e:	2101      	movs	r1, #1
 8006970:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800697e:	231a      	movs	r3, #26
 8006980:	18fb      	adds	r3, r7, r3
 8006982:	781b      	ldrb	r3, [r3, #0]
}
 8006984:	0018      	movs	r0, r3
 8006986:	46bd      	mov	sp, r7
 8006988:	b008      	add	sp, #32
 800698a:	bd80      	pop	{r7, pc}
 800698c:	cfff69f3 	.word	0xcfff69f3
 8006990:	ffffcfff 	.word	0xffffcfff
 8006994:	11fff4ff 	.word	0x11fff4ff
 8006998:	40013800 	.word	0x40013800
 800699c:	40021000 	.word	0x40021000
 80069a0:	40004400 	.word	0x40004400
 80069a4:	40004800 	.word	0x40004800
 80069a8:	40004c00 	.word	0x40004c00
 80069ac:	00f42400 	.word	0x00f42400
 80069b0:	0800d5b0 	.word	0x0800d5b0

080069b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c0:	2201      	movs	r2, #1
 80069c2:	4013      	ands	r3, r2
 80069c4:	d00b      	beq.n	80069de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	4a4a      	ldr	r2, [pc, #296]	; (8006af8 <UART_AdvFeatureConfig+0x144>)
 80069ce:	4013      	ands	r3, r2
 80069d0:	0019      	movs	r1, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e2:	2202      	movs	r2, #2
 80069e4:	4013      	ands	r3, r2
 80069e6:	d00b      	beq.n	8006a00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	4a43      	ldr	r2, [pc, #268]	; (8006afc <UART_AdvFeatureConfig+0x148>)
 80069f0:	4013      	ands	r3, r2
 80069f2:	0019      	movs	r1, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	430a      	orrs	r2, r1
 80069fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a04:	2204      	movs	r2, #4
 8006a06:	4013      	ands	r3, r2
 8006a08:	d00b      	beq.n	8006a22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	4a3b      	ldr	r2, [pc, #236]	; (8006b00 <UART_AdvFeatureConfig+0x14c>)
 8006a12:	4013      	ands	r3, r2
 8006a14:	0019      	movs	r1, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a26:	2208      	movs	r2, #8
 8006a28:	4013      	ands	r3, r2
 8006a2a:	d00b      	beq.n	8006a44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	4a34      	ldr	r2, [pc, #208]	; (8006b04 <UART_AdvFeatureConfig+0x150>)
 8006a34:	4013      	ands	r3, r2
 8006a36:	0019      	movs	r1, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	430a      	orrs	r2, r1
 8006a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a48:	2210      	movs	r2, #16
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	d00b      	beq.n	8006a66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	4a2c      	ldr	r2, [pc, #176]	; (8006b08 <UART_AdvFeatureConfig+0x154>)
 8006a56:	4013      	ands	r3, r2
 8006a58:	0019      	movs	r1, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	d00b      	beq.n	8006a88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	4a25      	ldr	r2, [pc, #148]	; (8006b0c <UART_AdvFeatureConfig+0x158>)
 8006a78:	4013      	ands	r3, r2
 8006a7a:	0019      	movs	r1, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8c:	2240      	movs	r2, #64	; 0x40
 8006a8e:	4013      	ands	r3, r2
 8006a90:	d01d      	beq.n	8006ace <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	4a1d      	ldr	r2, [pc, #116]	; (8006b10 <UART_AdvFeatureConfig+0x15c>)
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	0019      	movs	r1, r3
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aae:	2380      	movs	r3, #128	; 0x80
 8006ab0:	035b      	lsls	r3, r3, #13
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d10b      	bne.n	8006ace <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	4a15      	ldr	r2, [pc, #84]	; (8006b14 <UART_AdvFeatureConfig+0x160>)
 8006abe:	4013      	ands	r3, r2
 8006ac0:	0019      	movs	r1, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad2:	2280      	movs	r2, #128	; 0x80
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	d00b      	beq.n	8006af0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	4a0e      	ldr	r2, [pc, #56]	; (8006b18 <UART_AdvFeatureConfig+0x164>)
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	0019      	movs	r1, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	605a      	str	r2, [r3, #4]
  }
}
 8006af0:	46c0      	nop			; (mov r8, r8)
 8006af2:	46bd      	mov	sp, r7
 8006af4:	b002      	add	sp, #8
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	fffdffff 	.word	0xfffdffff
 8006afc:	fffeffff 	.word	0xfffeffff
 8006b00:	fffbffff 	.word	0xfffbffff
 8006b04:	ffff7fff 	.word	0xffff7fff
 8006b08:	ffffefff 	.word	0xffffefff
 8006b0c:	ffffdfff 	.word	0xffffdfff
 8006b10:	ffefffff 	.word	0xffefffff
 8006b14:	ff9fffff 	.word	0xff9fffff
 8006b18:	fff7ffff 	.word	0xfff7ffff

08006b1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af02      	add	r7, sp, #8
 8006b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2290      	movs	r2, #144	; 0x90
 8006b28:	2100      	movs	r1, #0
 8006b2a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b2c:	f7fc feee 	bl	800390c <HAL_GetTick>
 8006b30:	0003      	movs	r3, r0
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2208      	movs	r2, #8
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	2b08      	cmp	r3, #8
 8006b40:	d10c      	bne.n	8006b5c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2280      	movs	r2, #128	; 0x80
 8006b46:	0391      	lsls	r1, r2, #14
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	4a1a      	ldr	r2, [pc, #104]	; (8006bb4 <UART_CheckIdleState+0x98>)
 8006b4c:	9200      	str	r2, [sp, #0]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f000 f832 	bl	8006bb8 <UART_WaitOnFlagUntilTimeout>
 8006b54:	1e03      	subs	r3, r0, #0
 8006b56:	d001      	beq.n	8006b5c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e026      	b.n	8006baa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2204      	movs	r2, #4
 8006b64:	4013      	ands	r3, r2
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	d10c      	bne.n	8006b84 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2280      	movs	r2, #128	; 0x80
 8006b6e:	03d1      	lsls	r1, r2, #15
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	4a10      	ldr	r2, [pc, #64]	; (8006bb4 <UART_CheckIdleState+0x98>)
 8006b74:	9200      	str	r2, [sp, #0]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f000 f81e 	bl	8006bb8 <UART_WaitOnFlagUntilTimeout>
 8006b7c:	1e03      	subs	r3, r0, #0
 8006b7e:	d001      	beq.n	8006b84 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e012      	b.n	8006baa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2288      	movs	r2, #136	; 0x88
 8006b88:	2120      	movs	r1, #32
 8006b8a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	228c      	movs	r2, #140	; 0x8c
 8006b90:	2120      	movs	r1, #32
 8006b92:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2284      	movs	r2, #132	; 0x84
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	0018      	movs	r0, r3
 8006bac:	46bd      	mov	sp, r7
 8006bae:	b004      	add	sp, #16
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	46c0      	nop			; (mov r8, r8)
 8006bb4:	01ffffff 	.word	0x01ffffff

08006bb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b094      	sub	sp, #80	; 0x50
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	603b      	str	r3, [r7, #0]
 8006bc4:	1dfb      	adds	r3, r7, #7
 8006bc6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bc8:	e0a7      	b.n	8006d1a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bcc:	3301      	adds	r3, #1
 8006bce:	d100      	bne.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006bd0:	e0a3      	b.n	8006d1a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bd2:	f7fc fe9b 	bl	800390c <HAL_GetTick>
 8006bd6:	0002      	movs	r2, r0
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d302      	bcc.n	8006be8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d13f      	bne.n	8006c68 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006be8:	f3ef 8310 	mrs	r3, PRIMASK
 8006bec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006bf0:	647b      	str	r3, [r7, #68]	; 0x44
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf8:	f383 8810 	msr	PRIMASK, r3
}
 8006bfc:	46c0      	nop			; (mov r8, r8)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	494e      	ldr	r1, [pc, #312]	; (8006d44 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006c0a:	400a      	ands	r2, r1
 8006c0c:	601a      	str	r2, [r3, #0]
 8006c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c10:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	f383 8810 	msr	PRIMASK, r3
}
 8006c18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8006c1e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c22:	643b      	str	r3, [r7, #64]	; 0x40
 8006c24:	2301      	movs	r3, #1
 8006c26:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2a:	f383 8810 	msr	PRIMASK, r3
}
 8006c2e:	46c0      	nop			; (mov r8, r8)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	689a      	ldr	r2, [r3, #8]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	438a      	bics	r2, r1
 8006c3e:	609a      	str	r2, [r3, #8]
 8006c40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c42:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c46:	f383 8810 	msr	PRIMASK, r3
}
 8006c4a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2288      	movs	r2, #136	; 0x88
 8006c50:	2120      	movs	r1, #32
 8006c52:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	228c      	movs	r2, #140	; 0x8c
 8006c58:	2120      	movs	r1, #32
 8006c5a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2284      	movs	r2, #132	; 0x84
 8006c60:	2100      	movs	r1, #0
 8006c62:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e069      	b.n	8006d3c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2204      	movs	r2, #4
 8006c70:	4013      	ands	r3, r2
 8006c72:	d052      	beq.n	8006d1a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	69da      	ldr	r2, [r3, #28]
 8006c7a:	2380      	movs	r3, #128	; 0x80
 8006c7c:	011b      	lsls	r3, r3, #4
 8006c7e:	401a      	ands	r2, r3
 8006c80:	2380      	movs	r3, #128	; 0x80
 8006c82:	011b      	lsls	r3, r3, #4
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d148      	bne.n	8006d1a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2280      	movs	r2, #128	; 0x80
 8006c8e:	0112      	lsls	r2, r2, #4
 8006c90:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c92:	f3ef 8310 	mrs	r3, PRIMASK
 8006c96:	613b      	str	r3, [r7, #16]
  return(result);
 8006c98:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	f383 8810 	msr	PRIMASK, r3
}
 8006ca6:	46c0      	nop			; (mov r8, r8)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4924      	ldr	r1, [pc, #144]	; (8006d44 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006cb4:	400a      	ands	r2, r1
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	f383 8810 	msr	PRIMASK, r3
}
 8006cc2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8006cc8:	61fb      	str	r3, [r7, #28]
  return(result);
 8006cca:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ccc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cce:	2301      	movs	r3, #1
 8006cd0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	f383 8810 	msr	PRIMASK, r3
}
 8006cd8:	46c0      	nop			; (mov r8, r8)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	438a      	bics	r2, r1
 8006ce8:	609a      	str	r2, [r3, #8]
 8006cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf0:	f383 8810 	msr	PRIMASK, r3
}
 8006cf4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2288      	movs	r2, #136	; 0x88
 8006cfa:	2120      	movs	r1, #32
 8006cfc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	228c      	movs	r2, #140	; 0x8c
 8006d02:	2120      	movs	r1, #32
 8006d04:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2290      	movs	r2, #144	; 0x90
 8006d0a:	2120      	movs	r1, #32
 8006d0c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2284      	movs	r2, #132	; 0x84
 8006d12:	2100      	movs	r1, #0
 8006d14:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e010      	b.n	8006d3c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	4013      	ands	r3, r2
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	425a      	negs	r2, r3
 8006d2a:	4153      	adcs	r3, r2
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	001a      	movs	r2, r3
 8006d30:	1dfb      	adds	r3, r7, #7
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d100      	bne.n	8006d3a <UART_WaitOnFlagUntilTimeout+0x182>
 8006d38:	e747      	b.n	8006bca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	0018      	movs	r0, r3
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	b014      	add	sp, #80	; 0x50
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	fffffe5f 	.word	0xfffffe5f

08006d48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2284      	movs	r2, #132	; 0x84
 8006d54:	5c9b      	ldrb	r3, [r3, r2]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d101      	bne.n	8006d5e <HAL_UARTEx_DisableFifoMode+0x16>
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	e027      	b.n	8006dae <HAL_UARTEx_DisableFifoMode+0x66>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2284      	movs	r2, #132	; 0x84
 8006d62:	2101      	movs	r1, #1
 8006d64:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2288      	movs	r2, #136	; 0x88
 8006d6a:	2124      	movs	r1, #36	; 0x24
 8006d6c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2101      	movs	r1, #1
 8006d82:	438a      	bics	r2, r1
 8006d84:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	4a0b      	ldr	r2, [pc, #44]	; (8006db8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2288      	movs	r2, #136	; 0x88
 8006da0:	2120      	movs	r1, #32
 8006da2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2284      	movs	r2, #132	; 0x84
 8006da8:	2100      	movs	r1, #0
 8006daa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	0018      	movs	r0, r3
 8006db0:	46bd      	mov	sp, r7
 8006db2:	b004      	add	sp, #16
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	46c0      	nop			; (mov r8, r8)
 8006db8:	dfffffff 	.word	0xdfffffff

08006dbc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2284      	movs	r2, #132	; 0x84
 8006dca:	5c9b      	ldrb	r3, [r3, r2]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d101      	bne.n	8006dd4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	e02e      	b.n	8006e32 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2284      	movs	r2, #132	; 0x84
 8006dd8:	2101      	movs	r1, #1
 8006dda:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2288      	movs	r2, #136	; 0x88
 8006de0:	2124      	movs	r1, #36	; 0x24
 8006de2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2101      	movs	r1, #1
 8006df8:	438a      	bics	r2, r1
 8006dfa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	00db      	lsls	r3, r3, #3
 8006e04:	08d9      	lsrs	r1, r3, #3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	0018      	movs	r0, r3
 8006e14:	f000 f854 	bl	8006ec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2288      	movs	r2, #136	; 0x88
 8006e24:	2120      	movs	r1, #32
 8006e26:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2284      	movs	r2, #132	; 0x84
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	0018      	movs	r0, r3
 8006e34:	46bd      	mov	sp, r7
 8006e36:	b004      	add	sp, #16
 8006e38:	bd80      	pop	{r7, pc}
	...

08006e3c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2284      	movs	r2, #132	; 0x84
 8006e4a:	5c9b      	ldrb	r3, [r3, r2]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d101      	bne.n	8006e54 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e50:	2302      	movs	r3, #2
 8006e52:	e02f      	b.n	8006eb4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2284      	movs	r2, #132	; 0x84
 8006e58:	2101      	movs	r1, #1
 8006e5a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2288      	movs	r2, #136	; 0x88
 8006e60:	2124      	movs	r1, #36	; 0x24
 8006e62:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2101      	movs	r1, #1
 8006e78:	438a      	bics	r2, r1
 8006e7a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	4a0e      	ldr	r2, [pc, #56]	; (8006ebc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006e84:	4013      	ands	r3, r2
 8006e86:	0019      	movs	r1, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	683a      	ldr	r2, [r7, #0]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	0018      	movs	r0, r3
 8006e96:	f000 f813 	bl	8006ec0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2288      	movs	r2, #136	; 0x88
 8006ea6:	2120      	movs	r1, #32
 8006ea8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2284      	movs	r2, #132	; 0x84
 8006eae:	2100      	movs	r1, #0
 8006eb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	0018      	movs	r0, r3
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	b004      	add	sp, #16
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	f1ffffff 	.word	0xf1ffffff

08006ec0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d108      	bne.n	8006ee2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	226a      	movs	r2, #106	; 0x6a
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2268      	movs	r2, #104	; 0x68
 8006edc:	2101      	movs	r1, #1
 8006ede:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ee0:	e043      	b.n	8006f6a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ee2:	260f      	movs	r6, #15
 8006ee4:	19bb      	adds	r3, r7, r6
 8006ee6:	2208      	movs	r2, #8
 8006ee8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006eea:	200e      	movs	r0, #14
 8006eec:	183b      	adds	r3, r7, r0
 8006eee:	2208      	movs	r2, #8
 8006ef0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	0e5b      	lsrs	r3, r3, #25
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	240d      	movs	r4, #13
 8006efe:	193b      	adds	r3, r7, r4
 8006f00:	2107      	movs	r1, #7
 8006f02:	400a      	ands	r2, r1
 8006f04:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	0f5b      	lsrs	r3, r3, #29
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	250c      	movs	r5, #12
 8006f12:	197b      	adds	r3, r7, r5
 8006f14:	2107      	movs	r1, #7
 8006f16:	400a      	ands	r2, r1
 8006f18:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f1a:	183b      	adds	r3, r7, r0
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	197a      	adds	r2, r7, r5
 8006f20:	7812      	ldrb	r2, [r2, #0]
 8006f22:	4914      	ldr	r1, [pc, #80]	; (8006f74 <UARTEx_SetNbDataToProcess+0xb4>)
 8006f24:	5c8a      	ldrb	r2, [r1, r2]
 8006f26:	435a      	muls	r2, r3
 8006f28:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f2a:	197b      	adds	r3, r7, r5
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	4a12      	ldr	r2, [pc, #72]	; (8006f78 <UARTEx_SetNbDataToProcess+0xb8>)
 8006f30:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f32:	0019      	movs	r1, r3
 8006f34:	f7f9 f98e 	bl	8000254 <__divsi3>
 8006f38:	0003      	movs	r3, r0
 8006f3a:	b299      	uxth	r1, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	226a      	movs	r2, #106	; 0x6a
 8006f40:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f42:	19bb      	adds	r3, r7, r6
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	193a      	adds	r2, r7, r4
 8006f48:	7812      	ldrb	r2, [r2, #0]
 8006f4a:	490a      	ldr	r1, [pc, #40]	; (8006f74 <UARTEx_SetNbDataToProcess+0xb4>)
 8006f4c:	5c8a      	ldrb	r2, [r1, r2]
 8006f4e:	435a      	muls	r2, r3
 8006f50:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f52:	193b      	adds	r3, r7, r4
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	4a08      	ldr	r2, [pc, #32]	; (8006f78 <UARTEx_SetNbDataToProcess+0xb8>)
 8006f58:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f5a:	0019      	movs	r1, r3
 8006f5c:	f7f9 f97a 	bl	8000254 <__divsi3>
 8006f60:	0003      	movs	r3, r0
 8006f62:	b299      	uxth	r1, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2268      	movs	r2, #104	; 0x68
 8006f68:	5299      	strh	r1, [r3, r2]
}
 8006f6a:	46c0      	nop			; (mov r8, r8)
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	b005      	add	sp, #20
 8006f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f72:	46c0      	nop			; (mov r8, r8)
 8006f74:	0800d5c8 	.word	0x0800d5c8
 8006f78:	0800d5d0 	.word	0x0800d5d0

08006f7c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	0002      	movs	r2, r0
 8006f84:	1dbb      	adds	r3, r7, #6
 8006f86:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006f8c:	1dbb      	adds	r3, r7, #6
 8006f8e:	2200      	movs	r2, #0
 8006f90:	5e9b      	ldrsh	r3, [r3, r2]
 8006f92:	2b84      	cmp	r3, #132	; 0x84
 8006f94:	d006      	beq.n	8006fa4 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8006f96:	1dbb      	adds	r3, r7, #6
 8006f98:	2200      	movs	r2, #0
 8006f9a:	5e9a      	ldrsh	r2, [r3, r2]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	18d3      	adds	r3, r2, r3
 8006fa0:	3303      	adds	r3, #3
 8006fa2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
}
 8006fa6:	0018      	movs	r0, r3
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	b004      	add	sp, #16
 8006fac:	bd80      	pop	{r7, pc}

08006fae <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006fb2:	f000 fae1 	bl	8007578 <vTaskStartScheduler>
  
  return osOK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	0018      	movs	r0, r3
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006fbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fc0:	b087      	sub	sp, #28
 8006fc2:	af02      	add	r7, sp, #8
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685c      	ldr	r4, [r3, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006fd4:	b29e      	uxth	r6, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2208      	movs	r2, #8
 8006fda:	5e9b      	ldrsh	r3, [r3, r2]
 8006fdc:	0018      	movs	r0, r3
 8006fde:	f7ff ffcd 	bl	8006f7c <makeFreeRtosPriority>
 8006fe2:	0001      	movs	r1, r0
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	230c      	movs	r3, #12
 8006fe8:	18fb      	adds	r3, r7, r3
 8006fea:	9301      	str	r3, [sp, #4]
 8006fec:	9100      	str	r1, [sp, #0]
 8006fee:	0013      	movs	r3, r2
 8006ff0:	0032      	movs	r2, r6
 8006ff2:	0029      	movs	r1, r5
 8006ff4:	0020      	movs	r0, r4
 8006ff6:	f000 f96b 	bl	80072d0 <xTaskCreate>
 8006ffa:	0003      	movs	r3, r0
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d001      	beq.n	8007004 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8007000:	2300      	movs	r3, #0
 8007002:	e000      	b.n	8007006 <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8007004:	68fb      	ldr	r3, [r7, #12]
}
 8007006:	0018      	movs	r0, r3
 8007008:	46bd      	mov	sp, r7
 800700a:	b005      	add	sp, #20
 800700c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800700e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <osDelay+0x16>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	e000      	b.n	8007026 <osDelay+0x18>
 8007024:	2301      	movs	r3, #1
 8007026:	0018      	movs	r0, r3
 8007028:	f000 fa80 	bl	800752c <vTaskDelay>
  
  return osOK;
 800702c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800702e:	0018      	movs	r0, r3
 8007030:	46bd      	mov	sp, r7
 8007032:	b004      	add	sp, #16
 8007034:	bd80      	pop	{r7, pc}

08007036 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b082      	sub	sp, #8
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	3308      	adds	r3, #8
 8007042:	001a      	movs	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	4252      	negs	r2, r2
 800704e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	3308      	adds	r3, #8
 8007054:	001a      	movs	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	3308      	adds	r3, #8
 800705e:	001a      	movs	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800706a:	46c0      	nop			; (mov r8, r8)
 800706c:	46bd      	mov	sp, r7
 800706e:	b002      	add	sp, #8
 8007070:	bd80      	pop	{r7, pc}

08007072 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b082      	sub	sp, #8
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007080:	46c0      	nop			; (mov r8, r8)
 8007082:	46bd      	mov	sp, r7
 8007084:	b002      	add	sp, #8
 8007086:	bd80      	pop	{r7, pc}

08007088 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	689a      	ldr	r2, [r3, #8]
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	1c5a      	adds	r2, r3, #1
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	601a      	str	r2, [r3, #0]
}
 80070c4:	46c0      	nop			; (mov r8, r8)
 80070c6:	46bd      	mov	sp, r7
 80070c8:	b004      	add	sp, #16
 80070ca:	bd80      	pop	{r7, pc}

080070cc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	3301      	adds	r3, #1
 80070e0:	d103      	bne.n	80070ea <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	60fb      	str	r3, [r7, #12]
 80070e8:	e00c      	b.n	8007104 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	3308      	adds	r3, #8
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	e002      	b.n	80070f8 <vListInsert+0x2c>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	60fb      	str	r3, [r7, #12]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	429a      	cmp	r2, r3
 8007102:	d2f6      	bcs.n	80070f2 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	683a      	ldr	r2, [r7, #0]
 800711e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	1c5a      	adds	r2, r3, #1
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	601a      	str	r2, [r3, #0]
}
 8007130:	46c0      	nop			; (mov r8, r8)
 8007132:	46bd      	mov	sp, r7
 8007134:	b004      	add	sp, #16
 8007136:	bd80      	pop	{r7, pc}

08007138 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	6892      	ldr	r2, [r2, #8]
 800714e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	6852      	ldr	r2, [r2, #4]
 8007158:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	429a      	cmp	r2, r3
 8007162:	d103      	bne.n	800716c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	1e5a      	subs	r2, r3, #1
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
}
 8007180:	0018      	movs	r0, r3
 8007182:	46bd      	mov	sp, r7
 8007184:	b004      	add	sp, #16
 8007186:	bd80      	pop	{r7, pc}

08007188 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <xQueueGenericReset+0x18>
 800719c:	b672      	cpsid	i
 800719e:	e7fe      	b.n	800719e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80071a0:	f000 fdd6 	bl	8007d50 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b0:	434b      	muls	r3, r1
 80071b2:	18d2      	adds	r2, r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ce:	1e59      	subs	r1, r3, #1
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d4:	434b      	muls	r3, r1
 80071d6:	18d2      	adds	r2, r2, r3
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2244      	movs	r2, #68	; 0x44
 80071e0:	21ff      	movs	r1, #255	; 0xff
 80071e2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2245      	movs	r2, #69	; 0x45
 80071e8:	21ff      	movs	r1, #255	; 0xff
 80071ea:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10d      	bne.n	800720e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d013      	beq.n	8007222 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3310      	adds	r3, #16
 80071fe:	0018      	movs	r0, r3
 8007200:	f000 fb8a 	bl	8007918 <xTaskRemoveFromEventList>
 8007204:	1e03      	subs	r3, r0, #0
 8007206:	d00c      	beq.n	8007222 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007208:	f000 fd92 	bl	8007d30 <vPortYield>
 800720c:	e009      	b.n	8007222 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	3310      	adds	r3, #16
 8007212:	0018      	movs	r0, r3
 8007214:	f7ff ff0f 	bl	8007036 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	3324      	adds	r3, #36	; 0x24
 800721c:	0018      	movs	r0, r3
 800721e:	f7ff ff0a 	bl	8007036 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007222:	f000 fda7 	bl	8007d74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007226:	2301      	movs	r3, #1
}
 8007228:	0018      	movs	r0, r3
 800722a:	46bd      	mov	sp, r7
 800722c:	b004      	add	sp, #16
 800722e:	bd80      	pop	{r7, pc}

08007230 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007230:	b590      	push	{r4, r7, lr}
 8007232:	b08b      	sub	sp, #44	; 0x2c
 8007234:	af02      	add	r7, sp, #8
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	1dfb      	adds	r3, r7, #7
 800723c:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d101      	bne.n	8007248 <xQueueGenericCreate+0x18>
 8007244:	b672      	cpsid	i
 8007246:	e7fe      	b.n	8007246 <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	4353      	muls	r3, r2
 800724e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	3348      	adds	r3, #72	; 0x48
 8007254:	0018      	movs	r0, r3
 8007256:	f000 fe13 	bl	8007e80 <pvPortMalloc>
 800725a:	0003      	movs	r3, r0
 800725c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00e      	beq.n	8007282 <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	3348      	adds	r3, #72	; 0x48
 800726c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800726e:	1dfb      	adds	r3, r7, #7
 8007270:	781c      	ldrb	r4, [r3, #0]
 8007272:	697a      	ldr	r2, [r7, #20]
 8007274:	68b9      	ldr	r1, [r7, #8]
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	0023      	movs	r3, r4
 800727e:	f000 f805 	bl	800728c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007282:	69bb      	ldr	r3, [r7, #24]
	}
 8007284:	0018      	movs	r0, r3
 8007286:	46bd      	mov	sp, r7
 8007288:	b009      	add	sp, #36	; 0x24
 800728a:	bd90      	pop	{r4, r7, pc}

0800728c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
 8007298:	001a      	movs	r2, r3
 800729a:	1cfb      	adds	r3, r7, #3
 800729c:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d103      	bne.n	80072ac <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	e002      	b.n	80072b2 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	2101      	movs	r1, #1
 80072c2:	0018      	movs	r0, r3
 80072c4:	f7ff ff60 	bl	8007188 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80072c8:	46c0      	nop			; (mov r8, r8)
 80072ca:	46bd      	mov	sp, r7
 80072cc:	b004      	add	sp, #16
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80072d0:	b590      	push	{r4, r7, lr}
 80072d2:	b08d      	sub	sp, #52	; 0x34
 80072d4:	af04      	add	r7, sp, #16
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	603b      	str	r3, [r7, #0]
 80072dc:	1dbb      	adds	r3, r7, #6
 80072de:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80072e0:	1dbb      	adds	r3, r7, #6
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	0018      	movs	r0, r3
 80072e8:	f000 fdca 	bl	8007e80 <pvPortMalloc>
 80072ec:	0003      	movs	r3, r0
 80072ee:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d010      	beq.n	8007318 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80072f6:	2054      	movs	r0, #84	; 0x54
 80072f8:	f000 fdc2 	bl	8007e80 <pvPortMalloc>
 80072fc:	0003      	movs	r3, r0
 80072fe:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d003      	beq.n	800730e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	631a      	str	r2, [r3, #48]	; 0x30
 800730c:	e006      	b.n	800731c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	0018      	movs	r0, r3
 8007312:	f000 fe61 	bl	8007fd8 <vPortFree>
 8007316:	e001      	b.n	800731c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007318:	2300      	movs	r3, #0
 800731a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d016      	beq.n	8007350 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007322:	1dbb      	adds	r3, r7, #6
 8007324:	881a      	ldrh	r2, [r3, #0]
 8007326:	683c      	ldr	r4, [r7, #0]
 8007328:	68b9      	ldr	r1, [r7, #8]
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	2300      	movs	r3, #0
 800732e:	9303      	str	r3, [sp, #12]
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	9302      	str	r3, [sp, #8]
 8007334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007336:	9301      	str	r3, [sp, #4]
 8007338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	0023      	movs	r3, r4
 800733e:	f000 f80f 	bl	8007360 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	0018      	movs	r0, r3
 8007346:	f000 f88d 	bl	8007464 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800734a:	2301      	movs	r3, #1
 800734c:	61bb      	str	r3, [r7, #24]
 800734e:	e002      	b.n	8007356 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007350:	2301      	movs	r3, #1
 8007352:	425b      	negs	r3, r3
 8007354:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007356:	69bb      	ldr	r3, [r7, #24]
	}
 8007358:	0018      	movs	r0, r3
 800735a:	46bd      	mov	sp, r7
 800735c:	b009      	add	sp, #36	; 0x24
 800735e:	bd90      	pop	{r4, r7, pc}

08007360 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
 800736c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800736e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	493a      	ldr	r1, [pc, #232]	; (8007460 <prvInitialiseNewTask+0x100>)
 8007376:	468c      	mov	ip, r1
 8007378:	4463      	add	r3, ip
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	18d3      	adds	r3, r2, r3
 800737e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	2207      	movs	r2, #7
 8007384:	4393      	bics	r3, r2
 8007386:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	2207      	movs	r2, #7
 800738c:	4013      	ands	r3, r2
 800738e:	d001      	beq.n	8007394 <prvInitialiseNewTask+0x34>
 8007390:	b672      	cpsid	i
 8007392:	e7fe      	b.n	8007392 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d020      	beq.n	80073dc <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800739a:	2300      	movs	r3, #0
 800739c:	617b      	str	r3, [r7, #20]
 800739e:	e013      	b.n	80073c8 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	18d3      	adds	r3, r2, r3
 80073a6:	7818      	ldrb	r0, [r3, #0]
 80073a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073aa:	2134      	movs	r1, #52	; 0x34
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	18d3      	adds	r3, r2, r3
 80073b0:	185b      	adds	r3, r3, r1
 80073b2:	1c02      	adds	r2, r0, #0
 80073b4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	18d3      	adds	r3, r2, r3
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d006      	beq.n	80073d0 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	3301      	adds	r3, #1
 80073c6:	617b      	str	r3, [r7, #20]
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	2b0f      	cmp	r3, #15
 80073cc:	d9e8      	bls.n	80073a0 <prvInitialiseNewTask+0x40>
 80073ce:	e000      	b.n	80073d2 <prvInitialiseNewTask+0x72>
			{
				break;
 80073d0:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80073d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d4:	2243      	movs	r2, #67	; 0x43
 80073d6:	2100      	movs	r1, #0
 80073d8:	5499      	strb	r1, [r3, r2]
 80073da:	e003      	b.n	80073e4 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80073dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073de:	2234      	movs	r2, #52	; 0x34
 80073e0:	2100      	movs	r1, #0
 80073e2:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073e4:	6a3b      	ldr	r3, [r7, #32]
 80073e6:	2b06      	cmp	r3, #6
 80073e8:	d901      	bls.n	80073ee <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073ea:	2306      	movs	r3, #6
 80073ec:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f0:	6a3a      	ldr	r2, [r7, #32]
 80073f2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f6:	6a3a      	ldr	r2, [r7, #32]
 80073f8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80073fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fc:	2200      	movs	r2, #0
 80073fe:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007402:	3304      	adds	r3, #4
 8007404:	0018      	movs	r0, r3
 8007406:	f7ff fe34 	bl	8007072 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800740a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740c:	3318      	adds	r3, #24
 800740e:	0018      	movs	r0, r3
 8007410:	f7ff fe2f 	bl	8007072 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007418:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	2207      	movs	r2, #7
 800741e:	1ad2      	subs	r2, r2, r3
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007428:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800742a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742c:	2200      	movs	r2, #0
 800742e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007432:	2250      	movs	r2, #80	; 0x50
 8007434:	2100      	movs	r1, #0
 8007436:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	68f9      	ldr	r1, [r7, #12]
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	0018      	movs	r0, r3
 8007440:	f000 fbe8 	bl	8007c14 <pxPortInitialiseStack>
 8007444:	0002      	movs	r2, r0
 8007446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007448:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007456:	46c0      	nop			; (mov r8, r8)
 8007458:	46bd      	mov	sp, r7
 800745a:	b006      	add	sp, #24
 800745c:	bd80      	pop	{r7, pc}
 800745e:	46c0      	nop			; (mov r8, r8)
 8007460:	3fffffff 	.word	0x3fffffff

08007464 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800746c:	f000 fc70 	bl	8007d50 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007470:	4b28      	ldr	r3, [pc, #160]	; (8007514 <prvAddNewTaskToReadyList+0xb0>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	1c5a      	adds	r2, r3, #1
 8007476:	4b27      	ldr	r3, [pc, #156]	; (8007514 <prvAddNewTaskToReadyList+0xb0>)
 8007478:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800747a:	4b27      	ldr	r3, [pc, #156]	; (8007518 <prvAddNewTaskToReadyList+0xb4>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d109      	bne.n	8007496 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007482:	4b25      	ldr	r3, [pc, #148]	; (8007518 <prvAddNewTaskToReadyList+0xb4>)
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007488:	4b22      	ldr	r3, [pc, #136]	; (8007514 <prvAddNewTaskToReadyList+0xb0>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d110      	bne.n	80074b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007490:	f000 faae 	bl	80079f0 <prvInitialiseTaskLists>
 8007494:	e00d      	b.n	80074b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007496:	4b21      	ldr	r3, [pc, #132]	; (800751c <prvAddNewTaskToReadyList+0xb8>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d109      	bne.n	80074b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800749e:	4b1e      	ldr	r3, [pc, #120]	; (8007518 <prvAddNewTaskToReadyList+0xb4>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d802      	bhi.n	80074b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80074ac:	4b1a      	ldr	r3, [pc, #104]	; (8007518 <prvAddNewTaskToReadyList+0xb4>)
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80074b2:	4b1b      	ldr	r3, [pc, #108]	; (8007520 <prvAddNewTaskToReadyList+0xbc>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	1c5a      	adds	r2, r3, #1
 80074b8:	4b19      	ldr	r3, [pc, #100]	; (8007520 <prvAddNewTaskToReadyList+0xbc>)
 80074ba:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c0:	4b18      	ldr	r3, [pc, #96]	; (8007524 <prvAddNewTaskToReadyList+0xc0>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d903      	bls.n	80074d0 <prvAddNewTaskToReadyList+0x6c>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074cc:	4b15      	ldr	r3, [pc, #84]	; (8007524 <prvAddNewTaskToReadyList+0xc0>)
 80074ce:	601a      	str	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d4:	0013      	movs	r3, r2
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	189b      	adds	r3, r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	4a12      	ldr	r2, [pc, #72]	; (8007528 <prvAddNewTaskToReadyList+0xc4>)
 80074de:	189a      	adds	r2, r3, r2
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	3304      	adds	r3, #4
 80074e4:	0019      	movs	r1, r3
 80074e6:	0010      	movs	r0, r2
 80074e8:	f7ff fdce 	bl	8007088 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074ec:	f000 fc42 	bl	8007d74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074f0:	4b0a      	ldr	r3, [pc, #40]	; (800751c <prvAddNewTaskToReadyList+0xb8>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d008      	beq.n	800750a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074f8:	4b07      	ldr	r3, [pc, #28]	; (8007518 <prvAddNewTaskToReadyList+0xb4>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007502:	429a      	cmp	r2, r3
 8007504:	d201      	bcs.n	800750a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007506:	f000 fc13 	bl	8007d30 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800750a:	46c0      	nop			; (mov r8, r8)
 800750c:	46bd      	mov	sp, r7
 800750e:	b002      	add	sp, #8
 8007510:	bd80      	pop	{r7, pc}
 8007512:	46c0      	nop			; (mov r8, r8)
 8007514:	20000624 	.word	0x20000624
 8007518:	20000524 	.word	0x20000524
 800751c:	20000630 	.word	0x20000630
 8007520:	20000640 	.word	0x20000640
 8007524:	2000062c 	.word	0x2000062c
 8007528:	20000528 	.word	0x20000528

0800752c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007534:	2300      	movs	r3, #0
 8007536:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d010      	beq.n	8007560 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800753e:	4b0d      	ldr	r3, [pc, #52]	; (8007574 <vTaskDelay+0x48>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d001      	beq.n	800754a <vTaskDelay+0x1e>
 8007546:	b672      	cpsid	i
 8007548:	e7fe      	b.n	8007548 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800754a:	f000 f84b 	bl	80075e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2100      	movs	r1, #0
 8007552:	0018      	movs	r0, r3
 8007554:	f000 fb0a 	bl	8007b6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007558:	f000 f850 	bl	80075fc <xTaskResumeAll>
 800755c:	0003      	movs	r3, r0
 800755e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8007566:	f000 fbe3 	bl	8007d30 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800756a:	46c0      	nop			; (mov r8, r8)
 800756c:	46bd      	mov	sp, r7
 800756e:	b004      	add	sp, #16
 8007570:	bd80      	pop	{r7, pc}
 8007572:	46c0      	nop			; (mov r8, r8)
 8007574:	2000064c 	.word	0x2000064c

08007578 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800757e:	4913      	ldr	r1, [pc, #76]	; (80075cc <vTaskStartScheduler+0x54>)
 8007580:	4813      	ldr	r0, [pc, #76]	; (80075d0 <vTaskStartScheduler+0x58>)
 8007582:	4b14      	ldr	r3, [pc, #80]	; (80075d4 <vTaskStartScheduler+0x5c>)
 8007584:	9301      	str	r3, [sp, #4]
 8007586:	2300      	movs	r3, #0
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	2300      	movs	r3, #0
 800758c:	2280      	movs	r2, #128	; 0x80
 800758e:	f7ff fe9f 	bl	80072d0 <xTaskCreate>
 8007592:	0003      	movs	r3, r0
 8007594:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d10d      	bne.n	80075b8 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800759c:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800759e:	4b0e      	ldr	r3, [pc, #56]	; (80075d8 <vTaskStartScheduler+0x60>)
 80075a0:	2201      	movs	r2, #1
 80075a2:	4252      	negs	r2, r2
 80075a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80075a6:	4b0d      	ldr	r3, [pc, #52]	; (80075dc <vTaskStartScheduler+0x64>)
 80075a8:	2201      	movs	r2, #1
 80075aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80075ac:	4b0c      	ldr	r3, [pc, #48]	; (80075e0 <vTaskStartScheduler+0x68>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80075b2:	f000 fb99 	bl	8007ce8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80075b6:	e004      	b.n	80075c2 <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	3301      	adds	r3, #1
 80075bc:	d101      	bne.n	80075c2 <vTaskStartScheduler+0x4a>
 80075be:	b672      	cpsid	i
 80075c0:	e7fe      	b.n	80075c0 <vTaskStartScheduler+0x48>
}
 80075c2:	46c0      	nop			; (mov r8, r8)
 80075c4:	46bd      	mov	sp, r7
 80075c6:	b002      	add	sp, #8
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	46c0      	nop			; (mov r8, r8)
 80075cc:	0800d474 	.word	0x0800d474
 80075d0:	080079d1 	.word	0x080079d1
 80075d4:	20000648 	.word	0x20000648
 80075d8:	20000644 	.word	0x20000644
 80075dc:	20000630 	.word	0x20000630
 80075e0:	20000628 	.word	0x20000628

080075e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80075e8:	4b03      	ldr	r3, [pc, #12]	; (80075f8 <vTaskSuspendAll+0x14>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	1c5a      	adds	r2, r3, #1
 80075ee:	4b02      	ldr	r3, [pc, #8]	; (80075f8 <vTaskSuspendAll+0x14>)
 80075f0:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80075f2:	46c0      	nop			; (mov r8, r8)
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	2000064c 	.word	0x2000064c

080075fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007602:	2300      	movs	r3, #0
 8007604:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007606:	2300      	movs	r3, #0
 8007608:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800760a:	4b3a      	ldr	r3, [pc, #232]	; (80076f4 <xTaskResumeAll+0xf8>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <xTaskResumeAll+0x1a>
 8007612:	b672      	cpsid	i
 8007614:	e7fe      	b.n	8007614 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007616:	f000 fb9b 	bl	8007d50 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800761a:	4b36      	ldr	r3, [pc, #216]	; (80076f4 <xTaskResumeAll+0xf8>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	1e5a      	subs	r2, r3, #1
 8007620:	4b34      	ldr	r3, [pc, #208]	; (80076f4 <xTaskResumeAll+0xf8>)
 8007622:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007624:	4b33      	ldr	r3, [pc, #204]	; (80076f4 <xTaskResumeAll+0xf8>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d15b      	bne.n	80076e4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800762c:	4b32      	ldr	r3, [pc, #200]	; (80076f8 <xTaskResumeAll+0xfc>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d057      	beq.n	80076e4 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007634:	e02f      	b.n	8007696 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007636:	4b31      	ldr	r3, [pc, #196]	; (80076fc <xTaskResumeAll+0x100>)
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3318      	adds	r3, #24
 8007642:	0018      	movs	r0, r3
 8007644:	f7ff fd78 	bl	8007138 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	3304      	adds	r3, #4
 800764c:	0018      	movs	r0, r3
 800764e:	f7ff fd73 	bl	8007138 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007656:	4b2a      	ldr	r3, [pc, #168]	; (8007700 <xTaskResumeAll+0x104>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	429a      	cmp	r2, r3
 800765c:	d903      	bls.n	8007666 <xTaskResumeAll+0x6a>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007662:	4b27      	ldr	r3, [pc, #156]	; (8007700 <xTaskResumeAll+0x104>)
 8007664:	601a      	str	r2, [r3, #0]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800766a:	0013      	movs	r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	189b      	adds	r3, r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	4a24      	ldr	r2, [pc, #144]	; (8007704 <xTaskResumeAll+0x108>)
 8007674:	189a      	adds	r2, r3, r2
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3304      	adds	r3, #4
 800767a:	0019      	movs	r1, r3
 800767c:	0010      	movs	r0, r2
 800767e:	f7ff fd03 	bl	8007088 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007686:	4b20      	ldr	r3, [pc, #128]	; (8007708 <xTaskResumeAll+0x10c>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768c:	429a      	cmp	r2, r3
 800768e:	d302      	bcc.n	8007696 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8007690:	4b1e      	ldr	r3, [pc, #120]	; (800770c <xTaskResumeAll+0x110>)
 8007692:	2201      	movs	r2, #1
 8007694:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007696:	4b19      	ldr	r3, [pc, #100]	; (80076fc <xTaskResumeAll+0x100>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1cb      	bne.n	8007636 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d001      	beq.n	80076a8 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80076a4:	f000 fa28 	bl	8007af8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80076a8:	4b19      	ldr	r3, [pc, #100]	; (8007710 <xTaskResumeAll+0x114>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00f      	beq.n	80076d4 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80076b4:	f000 f82e 	bl	8007714 <xTaskIncrementTick>
 80076b8:	1e03      	subs	r3, r0, #0
 80076ba:	d002      	beq.n	80076c2 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80076bc:	4b13      	ldr	r3, [pc, #76]	; (800770c <xTaskResumeAll+0x110>)
 80076be:	2201      	movs	r2, #1
 80076c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	3b01      	subs	r3, #1
 80076c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1f2      	bne.n	80076b4 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 80076ce:	4b10      	ldr	r3, [pc, #64]	; (8007710 <xTaskResumeAll+0x114>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80076d4:	4b0d      	ldr	r3, [pc, #52]	; (800770c <xTaskResumeAll+0x110>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d003      	beq.n	80076e4 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80076dc:	2301      	movs	r3, #1
 80076de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80076e0:	f000 fb26 	bl	8007d30 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076e4:	f000 fb46 	bl	8007d74 <vPortExitCritical>

	return xAlreadyYielded;
 80076e8:	68bb      	ldr	r3, [r7, #8]
}
 80076ea:	0018      	movs	r0, r3
 80076ec:	46bd      	mov	sp, r7
 80076ee:	b004      	add	sp, #16
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	46c0      	nop			; (mov r8, r8)
 80076f4:	2000064c 	.word	0x2000064c
 80076f8:	20000624 	.word	0x20000624
 80076fc:	200005e4 	.word	0x200005e4
 8007700:	2000062c 	.word	0x2000062c
 8007704:	20000528 	.word	0x20000528
 8007708:	20000524 	.word	0x20000524
 800770c:	20000638 	.word	0x20000638
 8007710:	20000634 	.word	0x20000634

08007714 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800771a:	2300      	movs	r3, #0
 800771c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800771e:	4b4a      	ldr	r3, [pc, #296]	; (8007848 <xTaskIncrementTick+0x134>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d000      	beq.n	8007728 <xTaskIncrementTick+0x14>
 8007726:	e084      	b.n	8007832 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007728:	4b48      	ldr	r3, [pc, #288]	; (800784c <xTaskIncrementTick+0x138>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	3301      	adds	r3, #1
 800772e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007730:	4b46      	ldr	r3, [pc, #280]	; (800784c <xTaskIncrementTick+0x138>)
 8007732:	693a      	ldr	r2, [r7, #16]
 8007734:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d117      	bne.n	800776c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800773c:	4b44      	ldr	r3, [pc, #272]	; (8007850 <xTaskIncrementTick+0x13c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <xTaskIncrementTick+0x36>
 8007746:	b672      	cpsid	i
 8007748:	e7fe      	b.n	8007748 <xTaskIncrementTick+0x34>
 800774a:	4b41      	ldr	r3, [pc, #260]	; (8007850 <xTaskIncrementTick+0x13c>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	4b40      	ldr	r3, [pc, #256]	; (8007854 <xTaskIncrementTick+0x140>)
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	4b3e      	ldr	r3, [pc, #248]	; (8007850 <xTaskIncrementTick+0x13c>)
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	4b3e      	ldr	r3, [pc, #248]	; (8007854 <xTaskIncrementTick+0x140>)
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	4b3e      	ldr	r3, [pc, #248]	; (8007858 <xTaskIncrementTick+0x144>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	1c5a      	adds	r2, r3, #1
 8007764:	4b3c      	ldr	r3, [pc, #240]	; (8007858 <xTaskIncrementTick+0x144>)
 8007766:	601a      	str	r2, [r3, #0]
 8007768:	f000 f9c6 	bl	8007af8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800776c:	4b3b      	ldr	r3, [pc, #236]	; (800785c <xTaskIncrementTick+0x148>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	429a      	cmp	r2, r3
 8007774:	d349      	bcc.n	800780a <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007776:	4b36      	ldr	r3, [pc, #216]	; (8007850 <xTaskIncrementTick+0x13c>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d104      	bne.n	800778a <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007780:	4b36      	ldr	r3, [pc, #216]	; (800785c <xTaskIncrementTick+0x148>)
 8007782:	2201      	movs	r2, #1
 8007784:	4252      	negs	r2, r2
 8007786:	601a      	str	r2, [r3, #0]
					break;
 8007788:	e03f      	b.n	800780a <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800778a:	4b31      	ldr	r3, [pc, #196]	; (8007850 <xTaskIncrementTick+0x13c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800779a:	693a      	ldr	r2, [r7, #16]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d203      	bcs.n	80077aa <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80077a2:	4b2e      	ldr	r3, [pc, #184]	; (800785c <xTaskIncrementTick+0x148>)
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80077a8:	e02f      	b.n	800780a <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	3304      	adds	r3, #4
 80077ae:	0018      	movs	r0, r3
 80077b0:	f7ff fcc2 	bl	8007138 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d004      	beq.n	80077c6 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	3318      	adds	r3, #24
 80077c0:	0018      	movs	r0, r3
 80077c2:	f7ff fcb9 	bl	8007138 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ca:	4b25      	ldr	r3, [pc, #148]	; (8007860 <xTaskIncrementTick+0x14c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d903      	bls.n	80077da <xTaskIncrementTick+0xc6>
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d6:	4b22      	ldr	r3, [pc, #136]	; (8007860 <xTaskIncrementTick+0x14c>)
 80077d8:	601a      	str	r2, [r3, #0]
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077de:	0013      	movs	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	189b      	adds	r3, r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	4a1f      	ldr	r2, [pc, #124]	; (8007864 <xTaskIncrementTick+0x150>)
 80077e8:	189a      	adds	r2, r3, r2
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	3304      	adds	r3, #4
 80077ee:	0019      	movs	r1, r3
 80077f0:	0010      	movs	r0, r2
 80077f2:	f7ff fc49 	bl	8007088 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077fa:	4b1b      	ldr	r3, [pc, #108]	; (8007868 <xTaskIncrementTick+0x154>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	429a      	cmp	r2, r3
 8007802:	d3b8      	bcc.n	8007776 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8007804:	2301      	movs	r3, #1
 8007806:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007808:	e7b5      	b.n	8007776 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800780a:	4b17      	ldr	r3, [pc, #92]	; (8007868 <xTaskIncrementTick+0x154>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007810:	4914      	ldr	r1, [pc, #80]	; (8007864 <xTaskIncrementTick+0x150>)
 8007812:	0013      	movs	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	189b      	adds	r3, r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	585b      	ldr	r3, [r3, r1]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d901      	bls.n	8007824 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8007820:	2301      	movs	r3, #1
 8007822:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007824:	4b11      	ldr	r3, [pc, #68]	; (800786c <xTaskIncrementTick+0x158>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d007      	beq.n	800783c <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 800782c:	2301      	movs	r3, #1
 800782e:	617b      	str	r3, [r7, #20]
 8007830:	e004      	b.n	800783c <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007832:	4b0f      	ldr	r3, [pc, #60]	; (8007870 <xTaskIncrementTick+0x15c>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	1c5a      	adds	r2, r3, #1
 8007838:	4b0d      	ldr	r3, [pc, #52]	; (8007870 <xTaskIncrementTick+0x15c>)
 800783a:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800783c:	697b      	ldr	r3, [r7, #20]
}
 800783e:	0018      	movs	r0, r3
 8007840:	46bd      	mov	sp, r7
 8007842:	b006      	add	sp, #24
 8007844:	bd80      	pop	{r7, pc}
 8007846:	46c0      	nop			; (mov r8, r8)
 8007848:	2000064c 	.word	0x2000064c
 800784c:	20000628 	.word	0x20000628
 8007850:	200005dc 	.word	0x200005dc
 8007854:	200005e0 	.word	0x200005e0
 8007858:	2000063c 	.word	0x2000063c
 800785c:	20000644 	.word	0x20000644
 8007860:	2000062c 	.word	0x2000062c
 8007864:	20000528 	.word	0x20000528
 8007868:	20000524 	.word	0x20000524
 800786c:	20000638 	.word	0x20000638
 8007870:	20000634 	.word	0x20000634

08007874 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800787a:	4b22      	ldr	r3, [pc, #136]	; (8007904 <vTaskSwitchContext+0x90>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d003      	beq.n	800788a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007882:	4b21      	ldr	r3, [pc, #132]	; (8007908 <vTaskSwitchContext+0x94>)
 8007884:	2201      	movs	r2, #1
 8007886:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007888:	e037      	b.n	80078fa <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800788a:	4b1f      	ldr	r3, [pc, #124]	; (8007908 <vTaskSwitchContext+0x94>)
 800788c:	2200      	movs	r2, #0
 800788e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007890:	4b1e      	ldr	r3, [pc, #120]	; (800790c <vTaskSwitchContext+0x98>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	607b      	str	r3, [r7, #4]
 8007896:	e007      	b.n	80078a8 <vTaskSwitchContext+0x34>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <vTaskSwitchContext+0x2e>
 800789e:	b672      	cpsid	i
 80078a0:	e7fe      	b.n	80078a0 <vTaskSwitchContext+0x2c>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	3b01      	subs	r3, #1
 80078a6:	607b      	str	r3, [r7, #4]
 80078a8:	4919      	ldr	r1, [pc, #100]	; (8007910 <vTaskSwitchContext+0x9c>)
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	0013      	movs	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	189b      	adds	r3, r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	585b      	ldr	r3, [r3, r1]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d0ee      	beq.n	8007898 <vTaskSwitchContext+0x24>
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	0013      	movs	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	189b      	adds	r3, r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4a12      	ldr	r2, [pc, #72]	; (8007910 <vTaskSwitchContext+0x9c>)
 80078c6:	189b      	adds	r3, r3, r2
 80078c8:	603b      	str	r3, [r7, #0]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	605a      	str	r2, [r3, #4]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	3308      	adds	r3, #8
 80078dc:	429a      	cmp	r2, r3
 80078de:	d104      	bne.n	80078ea <vTaskSwitchContext+0x76>
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	605a      	str	r2, [r3, #4]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	68da      	ldr	r2, [r3, #12]
 80078f0:	4b08      	ldr	r3, [pc, #32]	; (8007914 <vTaskSwitchContext+0xa0>)
 80078f2:	601a      	str	r2, [r3, #0]
 80078f4:	4b05      	ldr	r3, [pc, #20]	; (800790c <vTaskSwitchContext+0x98>)
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	601a      	str	r2, [r3, #0]
}
 80078fa:	46c0      	nop			; (mov r8, r8)
 80078fc:	46bd      	mov	sp, r7
 80078fe:	b002      	add	sp, #8
 8007900:	bd80      	pop	{r7, pc}
 8007902:	46c0      	nop			; (mov r8, r8)
 8007904:	2000064c 	.word	0x2000064c
 8007908:	20000638 	.word	0x20000638
 800790c:	2000062c 	.word	0x2000062c
 8007910:	20000528 	.word	0x20000528
 8007914:	20000524 	.word	0x20000524

08007918 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d101      	bne.n	8007932 <xTaskRemoveFromEventList+0x1a>
 800792e:	b672      	cpsid	i
 8007930:	e7fe      	b.n	8007930 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	3318      	adds	r3, #24
 8007936:	0018      	movs	r0, r3
 8007938:	f7ff fbfe 	bl	8007138 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800793c:	4b1e      	ldr	r3, [pc, #120]	; (80079b8 <xTaskRemoveFromEventList+0xa0>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d11d      	bne.n	8007980 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	3304      	adds	r3, #4
 8007948:	0018      	movs	r0, r3
 800794a:	f7ff fbf5 	bl	8007138 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007952:	4b1a      	ldr	r3, [pc, #104]	; (80079bc <xTaskRemoveFromEventList+0xa4>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	429a      	cmp	r2, r3
 8007958:	d903      	bls.n	8007962 <xTaskRemoveFromEventList+0x4a>
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800795e:	4b17      	ldr	r3, [pc, #92]	; (80079bc <xTaskRemoveFromEventList+0xa4>)
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007966:	0013      	movs	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	189b      	adds	r3, r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4a14      	ldr	r2, [pc, #80]	; (80079c0 <xTaskRemoveFromEventList+0xa8>)
 8007970:	189a      	adds	r2, r3, r2
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	3304      	adds	r3, #4
 8007976:	0019      	movs	r1, r3
 8007978:	0010      	movs	r0, r2
 800797a:	f7ff fb85 	bl	8007088 <vListInsertEnd>
 800797e:	e007      	b.n	8007990 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	3318      	adds	r3, #24
 8007984:	001a      	movs	r2, r3
 8007986:	4b0f      	ldr	r3, [pc, #60]	; (80079c4 <xTaskRemoveFromEventList+0xac>)
 8007988:	0011      	movs	r1, r2
 800798a:	0018      	movs	r0, r3
 800798c:	f7ff fb7c 	bl	8007088 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007994:	4b0c      	ldr	r3, [pc, #48]	; (80079c8 <xTaskRemoveFromEventList+0xb0>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799a:	429a      	cmp	r2, r3
 800799c:	d905      	bls.n	80079aa <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800799e:	2301      	movs	r3, #1
 80079a0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80079a2:	4b0a      	ldr	r3, [pc, #40]	; (80079cc <xTaskRemoveFromEventList+0xb4>)
 80079a4:	2201      	movs	r2, #1
 80079a6:	601a      	str	r2, [r3, #0]
 80079a8:	e001      	b.n	80079ae <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80079aa:	2300      	movs	r3, #0
 80079ac:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80079ae:	68fb      	ldr	r3, [r7, #12]
}
 80079b0:	0018      	movs	r0, r3
 80079b2:	46bd      	mov	sp, r7
 80079b4:	b004      	add	sp, #16
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	2000064c 	.word	0x2000064c
 80079bc:	2000062c 	.word	0x2000062c
 80079c0:	20000528 	.word	0x20000528
 80079c4:	200005e4 	.word	0x200005e4
 80079c8:	20000524 	.word	0x20000524
 80079cc:	20000638 	.word	0x20000638

080079d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80079d8:	f000 f84e 	bl	8007a78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80079dc:	4b03      	ldr	r3, [pc, #12]	; (80079ec <prvIdleTask+0x1c>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d9f9      	bls.n	80079d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80079e4:	f000 f9a4 	bl	8007d30 <vPortYield>
		prvCheckTasksWaitingTermination();
 80079e8:	e7f6      	b.n	80079d8 <prvIdleTask+0x8>
 80079ea:	46c0      	nop			; (mov r8, r8)
 80079ec:	20000528 	.word	0x20000528

080079f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80079f6:	2300      	movs	r3, #0
 80079f8:	607b      	str	r3, [r7, #4]
 80079fa:	e00c      	b.n	8007a16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	0013      	movs	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	189b      	adds	r3, r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4a14      	ldr	r2, [pc, #80]	; (8007a58 <prvInitialiseTaskLists+0x68>)
 8007a08:	189b      	adds	r3, r3, r2
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	f7ff fb13 	bl	8007036 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	3301      	adds	r3, #1
 8007a14:	607b      	str	r3, [r7, #4]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2b06      	cmp	r3, #6
 8007a1a:	d9ef      	bls.n	80079fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a1c:	4b0f      	ldr	r3, [pc, #60]	; (8007a5c <prvInitialiseTaskLists+0x6c>)
 8007a1e:	0018      	movs	r0, r3
 8007a20:	f7ff fb09 	bl	8007036 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a24:	4b0e      	ldr	r3, [pc, #56]	; (8007a60 <prvInitialiseTaskLists+0x70>)
 8007a26:	0018      	movs	r0, r3
 8007a28:	f7ff fb05 	bl	8007036 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a2c:	4b0d      	ldr	r3, [pc, #52]	; (8007a64 <prvInitialiseTaskLists+0x74>)
 8007a2e:	0018      	movs	r0, r3
 8007a30:	f7ff fb01 	bl	8007036 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a34:	4b0c      	ldr	r3, [pc, #48]	; (8007a68 <prvInitialiseTaskLists+0x78>)
 8007a36:	0018      	movs	r0, r3
 8007a38:	f7ff fafd 	bl	8007036 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a3c:	4b0b      	ldr	r3, [pc, #44]	; (8007a6c <prvInitialiseTaskLists+0x7c>)
 8007a3e:	0018      	movs	r0, r3
 8007a40:	f7ff faf9 	bl	8007036 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a44:	4b0a      	ldr	r3, [pc, #40]	; (8007a70 <prvInitialiseTaskLists+0x80>)
 8007a46:	4a05      	ldr	r2, [pc, #20]	; (8007a5c <prvInitialiseTaskLists+0x6c>)
 8007a48:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a4a:	4b0a      	ldr	r3, [pc, #40]	; (8007a74 <prvInitialiseTaskLists+0x84>)
 8007a4c:	4a04      	ldr	r2, [pc, #16]	; (8007a60 <prvInitialiseTaskLists+0x70>)
 8007a4e:	601a      	str	r2, [r3, #0]
}
 8007a50:	46c0      	nop			; (mov r8, r8)
 8007a52:	46bd      	mov	sp, r7
 8007a54:	b002      	add	sp, #8
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	20000528 	.word	0x20000528
 8007a5c:	200005b4 	.word	0x200005b4
 8007a60:	200005c8 	.word	0x200005c8
 8007a64:	200005e4 	.word	0x200005e4
 8007a68:	200005f8 	.word	0x200005f8
 8007a6c:	20000610 	.word	0x20000610
 8007a70:	200005dc 	.word	0x200005dc
 8007a74:	200005e0 	.word	0x200005e0

08007a78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007a7e:	e01a      	b.n	8007ab6 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8007a80:	f000 f966 	bl	8007d50 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a84:	4b10      	ldr	r3, [pc, #64]	; (8007ac8 <prvCheckTasksWaitingTermination+0x50>)
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	3304      	adds	r3, #4
 8007a90:	0018      	movs	r0, r3
 8007a92:	f7ff fb51 	bl	8007138 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007a96:	4b0d      	ldr	r3, [pc, #52]	; (8007acc <prvCheckTasksWaitingTermination+0x54>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	1e5a      	subs	r2, r3, #1
 8007a9c:	4b0b      	ldr	r3, [pc, #44]	; (8007acc <prvCheckTasksWaitingTermination+0x54>)
 8007a9e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007aa0:	4b0b      	ldr	r3, [pc, #44]	; (8007ad0 <prvCheckTasksWaitingTermination+0x58>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	1e5a      	subs	r2, r3, #1
 8007aa6:	4b0a      	ldr	r3, [pc, #40]	; (8007ad0 <prvCheckTasksWaitingTermination+0x58>)
 8007aa8:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8007aaa:	f000 f963 	bl	8007d74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	0018      	movs	r0, r3
 8007ab2:	f000 f80f 	bl	8007ad4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ab6:	4b06      	ldr	r3, [pc, #24]	; (8007ad0 <prvCheckTasksWaitingTermination+0x58>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1e0      	bne.n	8007a80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007abe:	46c0      	nop			; (mov r8, r8)
 8007ac0:	46c0      	nop			; (mov r8, r8)
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	b002      	add	sp, #8
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	200005f8 	.word	0x200005f8
 8007acc:	20000624 	.word	0x20000624
 8007ad0:	2000060c 	.word	0x2000060c

08007ad4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae0:	0018      	movs	r0, r3
 8007ae2:	f000 fa79 	bl	8007fd8 <vPortFree>
			vPortFree( pxTCB );
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	0018      	movs	r0, r3
 8007aea:	f000 fa75 	bl	8007fd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007aee:	46c0      	nop			; (mov r8, r8)
 8007af0:	46bd      	mov	sp, r7
 8007af2:	b002      	add	sp, #8
 8007af4:	bd80      	pop	{r7, pc}
	...

08007af8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007afe:	4b0b      	ldr	r3, [pc, #44]	; (8007b2c <prvResetNextTaskUnblockTime+0x34>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d104      	bne.n	8007b12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007b08:	4b09      	ldr	r3, [pc, #36]	; (8007b30 <prvResetNextTaskUnblockTime+0x38>)
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	4252      	negs	r2, r2
 8007b0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007b10:	e008      	b.n	8007b24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b12:	4b06      	ldr	r3, [pc, #24]	; (8007b2c <prvResetNextTaskUnblockTime+0x34>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	4b03      	ldr	r3, [pc, #12]	; (8007b30 <prvResetNextTaskUnblockTime+0x38>)
 8007b22:	601a      	str	r2, [r3, #0]
}
 8007b24:	46c0      	nop			; (mov r8, r8)
 8007b26:	46bd      	mov	sp, r7
 8007b28:	b002      	add	sp, #8
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	200005dc 	.word	0x200005dc
 8007b30:	20000644 	.word	0x20000644

08007b34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007b3a:	4b0a      	ldr	r3, [pc, #40]	; (8007b64 <xTaskGetSchedulerState+0x30>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d102      	bne.n	8007b48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007b42:	2301      	movs	r3, #1
 8007b44:	607b      	str	r3, [r7, #4]
 8007b46:	e008      	b.n	8007b5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b48:	4b07      	ldr	r3, [pc, #28]	; (8007b68 <xTaskGetSchedulerState+0x34>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d102      	bne.n	8007b56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007b50:	2302      	movs	r3, #2
 8007b52:	607b      	str	r3, [r7, #4]
 8007b54:	e001      	b.n	8007b5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007b56:	2300      	movs	r3, #0
 8007b58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007b5a:	687b      	ldr	r3, [r7, #4]
	}
 8007b5c:	0018      	movs	r0, r3
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	b002      	add	sp, #8
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	20000630 	.word	0x20000630
 8007b68:	2000064c 	.word	0x2000064c

08007b6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b76:	4b21      	ldr	r3, [pc, #132]	; (8007bfc <prvAddCurrentTaskToDelayedList+0x90>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b7c:	4b20      	ldr	r3, [pc, #128]	; (8007c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3304      	adds	r3, #4
 8007b82:	0018      	movs	r0, r3
 8007b84:	f7ff fad8 	bl	8007138 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	d10b      	bne.n	8007ba6 <prvAddCurrentTaskToDelayedList+0x3a>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d008      	beq.n	8007ba6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b94:	4b1a      	ldr	r3, [pc, #104]	; (8007c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	1d1a      	adds	r2, r3, #4
 8007b9a:	4b1a      	ldr	r3, [pc, #104]	; (8007c04 <prvAddCurrentTaskToDelayedList+0x98>)
 8007b9c:	0011      	movs	r1, r2
 8007b9e:	0018      	movs	r0, r3
 8007ba0:	f7ff fa72 	bl	8007088 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ba4:	e026      	b.n	8007bf4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	18d3      	adds	r3, r2, r3
 8007bac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007bae:	4b14      	ldr	r3, [pc, #80]	; (8007c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d209      	bcs.n	8007bd2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bbe:	4b12      	ldr	r3, [pc, #72]	; (8007c08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	4b0f      	ldr	r3, [pc, #60]	; (8007c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	3304      	adds	r3, #4
 8007bc8:	0019      	movs	r1, r3
 8007bca:	0010      	movs	r0, r2
 8007bcc:	f7ff fa7e 	bl	80070cc <vListInsert>
}
 8007bd0:	e010      	b.n	8007bf4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bd2:	4b0e      	ldr	r3, [pc, #56]	; (8007c0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	4b0a      	ldr	r3, [pc, #40]	; (8007c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	3304      	adds	r3, #4
 8007bdc:	0019      	movs	r1, r3
 8007bde:	0010      	movs	r0, r2
 8007be0:	f7ff fa74 	bl	80070cc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007be4:	4b0a      	ldr	r3, [pc, #40]	; (8007c10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d202      	bcs.n	8007bf4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007bee:	4b08      	ldr	r3, [pc, #32]	; (8007c10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	601a      	str	r2, [r3, #0]
}
 8007bf4:	46c0      	nop			; (mov r8, r8)
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	b004      	add	sp, #16
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	20000628 	.word	0x20000628
 8007c00:	20000524 	.word	0x20000524
 8007c04:	20000610 	.word	0x20000610
 8007c08:	200005e0 	.word	0x200005e0
 8007c0c:	200005dc 	.word	0x200005dc
 8007c10:	20000644 	.word	0x20000644

08007c14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3b04      	subs	r3, #4
 8007c24:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2280      	movs	r2, #128	; 0x80
 8007c2a:	0452      	lsls	r2, r2, #17
 8007c2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	3b04      	subs	r3, #4
 8007c32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3b04      	subs	r3, #4
 8007c3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c40:	4a08      	ldr	r2, [pc, #32]	; (8007c64 <pxPortInitialiseStack+0x50>)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	3b14      	subs	r3, #20
 8007c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	3b20      	subs	r3, #32
 8007c56:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007c58:	68fb      	ldr	r3, [r7, #12]
}
 8007c5a:	0018      	movs	r0, r3
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	b004      	add	sp, #16
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	46c0      	nop			; (mov r8, r8)
 8007c64:	08007c69 	.word	0x08007c69

08007c68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007c72:	4b08      	ldr	r3, [pc, #32]	; (8007c94 <prvTaskExitError+0x2c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	3301      	adds	r3, #1
 8007c78:	d001      	beq.n	8007c7e <prvTaskExitError+0x16>
 8007c7a:	b672      	cpsid	i
 8007c7c:	e7fe      	b.n	8007c7c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8007c7e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8007c80:	46c0      	nop			; (mov r8, r8)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d0fc      	beq.n	8007c82 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007c88:	46c0      	nop			; (mov r8, r8)
 8007c8a:	46c0      	nop			; (mov r8, r8)
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	b002      	add	sp, #8
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	46c0      	nop			; (mov r8, r8)
 8007c94:	2000000c 	.word	0x2000000c

08007c98 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8007c9c:	46c0      	nop			; (mov r8, r8)
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
	...

08007cb0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8007cb0:	4a0b      	ldr	r2, [pc, #44]	; (8007ce0 <pxCurrentTCBConst2>)
 8007cb2:	6813      	ldr	r3, [r2, #0]
 8007cb4:	6818      	ldr	r0, [r3, #0]
 8007cb6:	3020      	adds	r0, #32
 8007cb8:	f380 8809 	msr	PSP, r0
 8007cbc:	2002      	movs	r0, #2
 8007cbe:	f380 8814 	msr	CONTROL, r0
 8007cc2:	f3bf 8f6f 	isb	sy
 8007cc6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8007cc8:	46ae      	mov	lr, r5
 8007cca:	bc08      	pop	{r3}
 8007ccc:	bc04      	pop	{r2}
 8007cce:	b662      	cpsie	i
 8007cd0:	4718      	bx	r3
 8007cd2:	46c0      	nop			; (mov r8, r8)
 8007cd4:	46c0      	nop			; (mov r8, r8)
 8007cd6:	46c0      	nop			; (mov r8, r8)
 8007cd8:	46c0      	nop			; (mov r8, r8)
 8007cda:	46c0      	nop			; (mov r8, r8)
 8007cdc:	46c0      	nop			; (mov r8, r8)
 8007cde:	46c0      	nop			; (mov r8, r8)

08007ce0 <pxCurrentTCBConst2>:
 8007ce0:	20000524 	.word	0x20000524
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8007ce4:	46c0      	nop			; (mov r8, r8)
 8007ce6:	46c0      	nop			; (mov r8, r8)

08007ce8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007cec:	4b0e      	ldr	r3, [pc, #56]	; (8007d28 <xPortStartScheduler+0x40>)
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	4b0d      	ldr	r3, [pc, #52]	; (8007d28 <xPortStartScheduler+0x40>)
 8007cf2:	21ff      	movs	r1, #255	; 0xff
 8007cf4:	0409      	lsls	r1, r1, #16
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007cfa:	4b0b      	ldr	r3, [pc, #44]	; (8007d28 <xPortStartScheduler+0x40>)
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	4b0a      	ldr	r3, [pc, #40]	; (8007d28 <xPortStartScheduler+0x40>)
 8007d00:	21ff      	movs	r1, #255	; 0xff
 8007d02:	0609      	lsls	r1, r1, #24
 8007d04:	430a      	orrs	r2, r1
 8007d06:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d08:	f000 f898 	bl	8007e3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d0c:	4b07      	ldr	r3, [pc, #28]	; (8007d2c <xPortStartScheduler+0x44>)
 8007d0e:	2200      	movs	r2, #0
 8007d10:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8007d12:	f7ff ffcd 	bl	8007cb0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d16:	f7ff fdad 	bl	8007874 <vTaskSwitchContext>
	prvTaskExitError();
 8007d1a:	f7ff ffa5 	bl	8007c68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	0018      	movs	r0, r3
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	46c0      	nop			; (mov r8, r8)
 8007d28:	e000ed20 	.word	0xe000ed20
 8007d2c:	2000000c 	.word	0x2000000c

08007d30 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d34:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <vPortYield+0x1c>)
 8007d36:	2280      	movs	r2, #128	; 0x80
 8007d38:	0552      	lsls	r2, r2, #21
 8007d3a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8007d3c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007d40:	f3bf 8f6f 	isb	sy
}
 8007d44:	46c0      	nop			; (mov r8, r8)
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	46c0      	nop			; (mov r8, r8)
 8007d4c:	e000ed04 	.word	0xe000ed04

08007d50 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8007d54:	b672      	cpsid	i
	uxCriticalNesting++;
 8007d56:	4b06      	ldr	r3, [pc, #24]	; (8007d70 <vPortEnterCritical+0x20>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	1c5a      	adds	r2, r3, #1
 8007d5c:	4b04      	ldr	r3, [pc, #16]	; (8007d70 <vPortEnterCritical+0x20>)
 8007d5e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8007d60:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007d64:	f3bf 8f6f 	isb	sy
}
 8007d68:	46c0      	nop			; (mov r8, r8)
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	46c0      	nop			; (mov r8, r8)
 8007d70:	2000000c 	.word	0x2000000c

08007d74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d78:	4b09      	ldr	r3, [pc, #36]	; (8007da0 <vPortExitCritical+0x2c>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <vPortExitCritical+0x10>
 8007d80:	b672      	cpsid	i
 8007d82:	e7fe      	b.n	8007d82 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8007d84:	4b06      	ldr	r3, [pc, #24]	; (8007da0 <vPortExitCritical+0x2c>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	1e5a      	subs	r2, r3, #1
 8007d8a:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <vPortExitCritical+0x2c>)
 8007d8c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8007d8e:	4b04      	ldr	r3, [pc, #16]	; (8007da0 <vPortExitCritical+0x2c>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d100      	bne.n	8007d98 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8007d96:	b662      	cpsie	i
	}
}
 8007d98:	46c0      	nop			; (mov r8, r8)
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	46c0      	nop			; (mov r8, r8)
 8007da0:	2000000c 	.word	0x2000000c

08007da4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8007da4:	f3ef 8010 	mrs	r0, PRIMASK
 8007da8:	b672      	cpsid	i
 8007daa:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8007dac:	46c0      	nop			; (mov r8, r8)
 8007dae:	0018      	movs	r0, r3

08007db0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8007db0:	f380 8810 	msr	PRIMASK, r0
 8007db4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8007db6:	46c0      	nop			; (mov r8, r8)
	...

08007dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007dc0:	f3ef 8009 	mrs	r0, PSP
 8007dc4:	4b0e      	ldr	r3, [pc, #56]	; (8007e00 <pxCurrentTCBConst>)
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	3820      	subs	r0, #32
 8007dca:	6010      	str	r0, [r2, #0]
 8007dcc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007dce:	4644      	mov	r4, r8
 8007dd0:	464d      	mov	r5, r9
 8007dd2:	4656      	mov	r6, sl
 8007dd4:	465f      	mov	r7, fp
 8007dd6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007dd8:	b508      	push	{r3, lr}
 8007dda:	b672      	cpsid	i
 8007ddc:	f7ff fd4a 	bl	8007874 <vTaskSwitchContext>
 8007de0:	b662      	cpsie	i
 8007de2:	bc0c      	pop	{r2, r3}
 8007de4:	6811      	ldr	r1, [r2, #0]
 8007de6:	6808      	ldr	r0, [r1, #0]
 8007de8:	3010      	adds	r0, #16
 8007dea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8007dec:	46a0      	mov	r8, r4
 8007dee:	46a9      	mov	r9, r5
 8007df0:	46b2      	mov	sl, r6
 8007df2:	46bb      	mov	fp, r7
 8007df4:	f380 8809 	msr	PSP, r0
 8007df8:	3820      	subs	r0, #32
 8007dfa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8007dfc:	4718      	bx	r3
 8007dfe:	46c0      	nop			; (mov r8, r8)

08007e00 <pxCurrentTCBConst>:
 8007e00:	20000524 	.word	0x20000524
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8007e04:	46c0      	nop			; (mov r8, r8)
 8007e06:	46c0      	nop			; (mov r8, r8)

08007e08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e0e:	f7ff ffc9 	bl	8007da4 <ulSetInterruptMaskFromISR>
 8007e12:	0003      	movs	r3, r0
 8007e14:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e16:	f7ff fc7d 	bl	8007714 <xTaskIncrementTick>
 8007e1a:	1e03      	subs	r3, r0, #0
 8007e1c:	d003      	beq.n	8007e26 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e1e:	4b06      	ldr	r3, [pc, #24]	; (8007e38 <xPortSysTickHandler+0x30>)
 8007e20:	2280      	movs	r2, #128	; 0x80
 8007e22:	0552      	lsls	r2, r2, #21
 8007e24:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	0018      	movs	r0, r3
 8007e2a:	f7ff ffc1 	bl	8007db0 <vClearInterruptMaskFromISR>
}
 8007e2e:	46c0      	nop			; (mov r8, r8)
 8007e30:	46bd      	mov	sp, r7
 8007e32:	b002      	add	sp, #8
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	46c0      	nop			; (mov r8, r8)
 8007e38:	e000ed04 	.word	0xe000ed04

08007e3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e40:	4b0b      	ldr	r3, [pc, #44]	; (8007e70 <vPortSetupTimerInterrupt+0x34>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e46:	4b0b      	ldr	r3, [pc, #44]	; (8007e74 <vPortSetupTimerInterrupt+0x38>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e4c:	4b0a      	ldr	r3, [pc, #40]	; (8007e78 <vPortSetupTimerInterrupt+0x3c>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	22fa      	movs	r2, #250	; 0xfa
 8007e52:	0091      	lsls	r1, r2, #2
 8007e54:	0018      	movs	r0, r3
 8007e56:	f7f8 f973 	bl	8000140 <__udivsi3>
 8007e5a:	0003      	movs	r3, r0
 8007e5c:	001a      	movs	r2, r3
 8007e5e:	4b07      	ldr	r3, [pc, #28]	; (8007e7c <vPortSetupTimerInterrupt+0x40>)
 8007e60:	3a01      	subs	r2, #1
 8007e62:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8007e64:	4b02      	ldr	r3, [pc, #8]	; (8007e70 <vPortSetupTimerInterrupt+0x34>)
 8007e66:	2207      	movs	r2, #7
 8007e68:	601a      	str	r2, [r3, #0]
}
 8007e6a:	46c0      	nop			; (mov r8, r8)
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	e000e010 	.word	0xe000e010
 8007e74:	e000e018 	.word	0xe000e018
 8007e78:	20000000 	.word	0x20000000
 8007e7c:	e000e014 	.word	0xe000e014

08007e80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8007e8c:	f7ff fbaa 	bl	80075e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e90:	4b4b      	ldr	r3, [pc, #300]	; (8007fc0 <pvPortMalloc+0x140>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d101      	bne.n	8007e9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e98:	f000 f8ec 	bl	8008074 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e9c:	4b49      	ldr	r3, [pc, #292]	; (8007fc4 <pvPortMalloc+0x144>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	d000      	beq.n	8007ea8 <pvPortMalloc+0x28>
 8007ea6:	e07e      	b.n	8007fa6 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d012      	beq.n	8007ed4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8007eae:	2208      	movs	r2, #8
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	189b      	adds	r3, r3, r2
 8007eb4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2207      	movs	r2, #7
 8007eba:	4013      	ands	r3, r2
 8007ebc:	d00a      	beq.n	8007ed4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2207      	movs	r2, #7
 8007ec2:	4393      	bics	r3, r2
 8007ec4:	3308      	adds	r3, #8
 8007ec6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2207      	movs	r2, #7
 8007ecc:	4013      	ands	r3, r2
 8007ece:	d001      	beq.n	8007ed4 <pvPortMalloc+0x54>
 8007ed0:	b672      	cpsid	i
 8007ed2:	e7fe      	b.n	8007ed2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d065      	beq.n	8007fa6 <pvPortMalloc+0x126>
 8007eda:	4b3b      	ldr	r3, [pc, #236]	; (8007fc8 <pvPortMalloc+0x148>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	687a      	ldr	r2, [r7, #4]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d860      	bhi.n	8007fa6 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ee4:	4b39      	ldr	r3, [pc, #228]	; (8007fcc <pvPortMalloc+0x14c>)
 8007ee6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8007ee8:	4b38      	ldr	r3, [pc, #224]	; (8007fcc <pvPortMalloc+0x14c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007eee:	e004      	b.n	8007efa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d903      	bls.n	8007f0c <pvPortMalloc+0x8c>
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1f1      	bne.n	8007ef0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f0c:	4b2c      	ldr	r3, [pc, #176]	; (8007fc0 <pvPortMalloc+0x140>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d047      	beq.n	8007fa6 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2208      	movs	r2, #8
 8007f1c:	189b      	adds	r3, r3, r2
 8007f1e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	1ad2      	subs	r2, r2, r3
 8007f30:	2308      	movs	r3, #8
 8007f32:	005b      	lsls	r3, r3, #1
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d916      	bls.n	8007f66 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	18d3      	adds	r3, r2, r3
 8007f3e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2207      	movs	r2, #7
 8007f44:	4013      	ands	r3, r2
 8007f46:	d001      	beq.n	8007f4c <pvPortMalloc+0xcc>
 8007f48:	b672      	cpsid	i
 8007f4a:	e7fe      	b.n	8007f4a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	1ad2      	subs	r2, r2, r3
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	0018      	movs	r0, r3
 8007f62:	f000 f8e7 	bl	8008134 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f66:	4b18      	ldr	r3, [pc, #96]	; (8007fc8 <pvPortMalloc+0x148>)
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	1ad2      	subs	r2, r2, r3
 8007f70:	4b15      	ldr	r3, [pc, #84]	; (8007fc8 <pvPortMalloc+0x148>)
 8007f72:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f74:	4b14      	ldr	r3, [pc, #80]	; (8007fc8 <pvPortMalloc+0x148>)
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	4b15      	ldr	r3, [pc, #84]	; (8007fd0 <pvPortMalloc+0x150>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d203      	bcs.n	8007f88 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f80:	4b11      	ldr	r3, [pc, #68]	; (8007fc8 <pvPortMalloc+0x148>)
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	4b12      	ldr	r3, [pc, #72]	; (8007fd0 <pvPortMalloc+0x150>)
 8007f86:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	4b0d      	ldr	r3, [pc, #52]	; (8007fc4 <pvPortMalloc+0x144>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	431a      	orrs	r2, r3
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007f9c:	4b0d      	ldr	r3, [pc, #52]	; (8007fd4 <pvPortMalloc+0x154>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	4b0c      	ldr	r3, [pc, #48]	; (8007fd4 <pvPortMalloc+0x154>)
 8007fa4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007fa6:	f7ff fb29 	bl	80075fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2207      	movs	r2, #7
 8007fae:	4013      	ands	r3, r2
 8007fb0:	d001      	beq.n	8007fb6 <pvPortMalloc+0x136>
 8007fb2:	b672      	cpsid	i
 8007fb4:	e7fe      	b.n	8007fb4 <pvPortMalloc+0x134>
	return pvReturn;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
}
 8007fb8:	0018      	movs	r0, r3
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	b006      	add	sp, #24
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	20001258 	.word	0x20001258
 8007fc4:	2000126c 	.word	0x2000126c
 8007fc8:	2000125c 	.word	0x2000125c
 8007fcc:	20001250 	.word	0x20001250
 8007fd0:	20001260 	.word	0x20001260
 8007fd4:	20001264 	.word	0x20001264

08007fd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d03a      	beq.n	8008060 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007fea:	2308      	movs	r3, #8
 8007fec:	425b      	negs	r3, r3
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	18d3      	adds	r3, r2, r3
 8007ff2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	4b1a      	ldr	r3, [pc, #104]	; (8008068 <vPortFree+0x90>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4013      	ands	r3, r2
 8008002:	d101      	bne.n	8008008 <vPortFree+0x30>
 8008004:	b672      	cpsid	i
 8008006:	e7fe      	b.n	8008006 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d001      	beq.n	8008014 <vPortFree+0x3c>
 8008010:	b672      	cpsid	i
 8008012:	e7fe      	b.n	8008012 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	4b13      	ldr	r3, [pc, #76]	; (8008068 <vPortFree+0x90>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4013      	ands	r3, r2
 800801e:	d01f      	beq.n	8008060 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d11b      	bne.n	8008060 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	685a      	ldr	r2, [r3, #4]
 800802c:	4b0e      	ldr	r3, [pc, #56]	; (8008068 <vPortFree+0x90>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	43db      	mvns	r3, r3
 8008032:	401a      	ands	r2, r3
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008038:	f7ff fad4 	bl	80075e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	685a      	ldr	r2, [r3, #4]
 8008040:	4b0a      	ldr	r3, [pc, #40]	; (800806c <vPortFree+0x94>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	18d2      	adds	r2, r2, r3
 8008046:	4b09      	ldr	r3, [pc, #36]	; (800806c <vPortFree+0x94>)
 8008048:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	0018      	movs	r0, r3
 800804e:	f000 f871 	bl	8008134 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008052:	4b07      	ldr	r3, [pc, #28]	; (8008070 <vPortFree+0x98>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	1c5a      	adds	r2, r3, #1
 8008058:	4b05      	ldr	r3, [pc, #20]	; (8008070 <vPortFree+0x98>)
 800805a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800805c:	f7ff face 	bl	80075fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008060:	46c0      	nop			; (mov r8, r8)
 8008062:	46bd      	mov	sp, r7
 8008064:	b004      	add	sp, #16
 8008066:	bd80      	pop	{r7, pc}
 8008068:	2000126c 	.word	0x2000126c
 800806c:	2000125c 	.word	0x2000125c
 8008070:	20001268 	.word	0x20001268

08008074 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800807a:	23c0      	movs	r3, #192	; 0xc0
 800807c:	011b      	lsls	r3, r3, #4
 800807e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008080:	4b26      	ldr	r3, [pc, #152]	; (800811c <prvHeapInit+0xa8>)
 8008082:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2207      	movs	r2, #7
 8008088:	4013      	ands	r3, r2
 800808a:	d00c      	beq.n	80080a6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	3307      	adds	r3, #7
 8008090:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2207      	movs	r2, #7
 8008096:	4393      	bics	r3, r2
 8008098:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	1ad2      	subs	r2, r2, r3
 80080a0:	4b1e      	ldr	r3, [pc, #120]	; (800811c <prvHeapInit+0xa8>)
 80080a2:	18d3      	adds	r3, r2, r3
 80080a4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080aa:	4b1d      	ldr	r3, [pc, #116]	; (8008120 <prvHeapInit+0xac>)
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80080b0:	4b1b      	ldr	r3, [pc, #108]	; (8008120 <prvHeapInit+0xac>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	18d3      	adds	r3, r2, r3
 80080bc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80080be:	2208      	movs	r2, #8
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	1a9b      	subs	r3, r3, r2
 80080c4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2207      	movs	r2, #7
 80080ca:	4393      	bics	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	4b14      	ldr	r3, [pc, #80]	; (8008124 <prvHeapInit+0xb0>)
 80080d2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80080d4:	4b13      	ldr	r3, [pc, #76]	; (8008124 <prvHeapInit+0xb0>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2200      	movs	r2, #0
 80080da:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80080dc:	4b11      	ldr	r3, [pc, #68]	; (8008124 <prvHeapInit+0xb0>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2200      	movs	r2, #0
 80080e2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	1ad2      	subs	r2, r2, r3
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080f2:	4b0c      	ldr	r3, [pc, #48]	; (8008124 <prvHeapInit+0xb0>)
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	685a      	ldr	r2, [r3, #4]
 80080fe:	4b0a      	ldr	r3, [pc, #40]	; (8008128 <prvHeapInit+0xb4>)
 8008100:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	4b09      	ldr	r3, [pc, #36]	; (800812c <prvHeapInit+0xb8>)
 8008108:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800810a:	4b09      	ldr	r3, [pc, #36]	; (8008130 <prvHeapInit+0xbc>)
 800810c:	2280      	movs	r2, #128	; 0x80
 800810e:	0612      	lsls	r2, r2, #24
 8008110:	601a      	str	r2, [r3, #0]
}
 8008112:	46c0      	nop			; (mov r8, r8)
 8008114:	46bd      	mov	sp, r7
 8008116:	b004      	add	sp, #16
 8008118:	bd80      	pop	{r7, pc}
 800811a:	46c0      	nop			; (mov r8, r8)
 800811c:	20000650 	.word	0x20000650
 8008120:	20001250 	.word	0x20001250
 8008124:	20001258 	.word	0x20001258
 8008128:	20001260 	.word	0x20001260
 800812c:	2000125c 	.word	0x2000125c
 8008130:	2000126c 	.word	0x2000126c

08008134 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800813c:	4b27      	ldr	r3, [pc, #156]	; (80081dc <prvInsertBlockIntoFreeList+0xa8>)
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	e002      	b.n	8008148 <prvInsertBlockIntoFreeList+0x14>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	60fb      	str	r3, [r7, #12]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	429a      	cmp	r2, r3
 8008150:	d8f7      	bhi.n	8008142 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	18d3      	adds	r3, r2, r3
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	429a      	cmp	r2, r3
 8008162:	d108      	bne.n	8008176 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	18d2      	adds	r2, r2, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	18d2      	adds	r2, r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	429a      	cmp	r2, r3
 8008188:	d118      	bne.n	80081bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	4b14      	ldr	r3, [pc, #80]	; (80081e0 <prvInsertBlockIntoFreeList+0xac>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	429a      	cmp	r2, r3
 8008194:	d00d      	beq.n	80081b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	685a      	ldr	r2, [r3, #4]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	18d2      	adds	r2, r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	601a      	str	r2, [r3, #0]
 80081b0:	e008      	b.n	80081c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80081b2:	4b0b      	ldr	r3, [pc, #44]	; (80081e0 <prvInsertBlockIntoFreeList+0xac>)
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	601a      	str	r2, [r3, #0]
 80081ba:	e003      	b.n	80081c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d002      	beq.n	80081d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081d2:	46c0      	nop			; (mov r8, r8)
 80081d4:	46bd      	mov	sp, r7
 80081d6:	b004      	add	sp, #16
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	46c0      	nop			; (mov r8, r8)
 80081dc:	20001250 	.word	0x20001250
 80081e0:	20001258 	.word	0x20001258

080081e4 <__errno>:
 80081e4:	4b01      	ldr	r3, [pc, #4]	; (80081ec <__errno+0x8>)
 80081e6:	6818      	ldr	r0, [r3, #0]
 80081e8:	4770      	bx	lr
 80081ea:	46c0      	nop			; (mov r8, r8)
 80081ec:	20000010 	.word	0x20000010

080081f0 <__libc_init_array>:
 80081f0:	b570      	push	{r4, r5, r6, lr}
 80081f2:	2600      	movs	r6, #0
 80081f4:	4d0c      	ldr	r5, [pc, #48]	; (8008228 <__libc_init_array+0x38>)
 80081f6:	4c0d      	ldr	r4, [pc, #52]	; (800822c <__libc_init_array+0x3c>)
 80081f8:	1b64      	subs	r4, r4, r5
 80081fa:	10a4      	asrs	r4, r4, #2
 80081fc:	42a6      	cmp	r6, r4
 80081fe:	d109      	bne.n	8008214 <__libc_init_array+0x24>
 8008200:	2600      	movs	r6, #0
 8008202:	f004 fde9 	bl	800cdd8 <_init>
 8008206:	4d0a      	ldr	r5, [pc, #40]	; (8008230 <__libc_init_array+0x40>)
 8008208:	4c0a      	ldr	r4, [pc, #40]	; (8008234 <__libc_init_array+0x44>)
 800820a:	1b64      	subs	r4, r4, r5
 800820c:	10a4      	asrs	r4, r4, #2
 800820e:	42a6      	cmp	r6, r4
 8008210:	d105      	bne.n	800821e <__libc_init_array+0x2e>
 8008212:	bd70      	pop	{r4, r5, r6, pc}
 8008214:	00b3      	lsls	r3, r6, #2
 8008216:	58eb      	ldr	r3, [r5, r3]
 8008218:	4798      	blx	r3
 800821a:	3601      	adds	r6, #1
 800821c:	e7ee      	b.n	80081fc <__libc_init_array+0xc>
 800821e:	00b3      	lsls	r3, r6, #2
 8008220:	58eb      	ldr	r3, [r5, r3]
 8008222:	4798      	blx	r3
 8008224:	3601      	adds	r6, #1
 8008226:	e7f2      	b.n	800820e <__libc_init_array+0x1e>
 8008228:	0800da84 	.word	0x0800da84
 800822c:	0800da84 	.word	0x0800da84
 8008230:	0800da84 	.word	0x0800da84
 8008234:	0800da88 	.word	0x0800da88

08008238 <malloc>:
 8008238:	b510      	push	{r4, lr}
 800823a:	4b03      	ldr	r3, [pc, #12]	; (8008248 <malloc+0x10>)
 800823c:	0001      	movs	r1, r0
 800823e:	6818      	ldr	r0, [r3, #0]
 8008240:	f000 f88c 	bl	800835c <_malloc_r>
 8008244:	bd10      	pop	{r4, pc}
 8008246:	46c0      	nop			; (mov r8, r8)
 8008248:	20000010 	.word	0x20000010

0800824c <free>:
 800824c:	b510      	push	{r4, lr}
 800824e:	4b03      	ldr	r3, [pc, #12]	; (800825c <free+0x10>)
 8008250:	0001      	movs	r1, r0
 8008252:	6818      	ldr	r0, [r3, #0]
 8008254:	f000 f816 	bl	8008284 <_free_r>
 8008258:	bd10      	pop	{r4, pc}
 800825a:	46c0      	nop			; (mov r8, r8)
 800825c:	20000010 	.word	0x20000010

08008260 <memcpy>:
 8008260:	2300      	movs	r3, #0
 8008262:	b510      	push	{r4, lr}
 8008264:	429a      	cmp	r2, r3
 8008266:	d100      	bne.n	800826a <memcpy+0xa>
 8008268:	bd10      	pop	{r4, pc}
 800826a:	5ccc      	ldrb	r4, [r1, r3]
 800826c:	54c4      	strb	r4, [r0, r3]
 800826e:	3301      	adds	r3, #1
 8008270:	e7f8      	b.n	8008264 <memcpy+0x4>

08008272 <memset>:
 8008272:	0003      	movs	r3, r0
 8008274:	1882      	adds	r2, r0, r2
 8008276:	4293      	cmp	r3, r2
 8008278:	d100      	bne.n	800827c <memset+0xa>
 800827a:	4770      	bx	lr
 800827c:	7019      	strb	r1, [r3, #0]
 800827e:	3301      	adds	r3, #1
 8008280:	e7f9      	b.n	8008276 <memset+0x4>
	...

08008284 <_free_r>:
 8008284:	b570      	push	{r4, r5, r6, lr}
 8008286:	0005      	movs	r5, r0
 8008288:	2900      	cmp	r1, #0
 800828a:	d010      	beq.n	80082ae <_free_r+0x2a>
 800828c:	1f0c      	subs	r4, r1, #4
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	da00      	bge.n	8008296 <_free_r+0x12>
 8008294:	18e4      	adds	r4, r4, r3
 8008296:	0028      	movs	r0, r5
 8008298:	f003 fc26 	bl	800bae8 <__malloc_lock>
 800829c:	4a1d      	ldr	r2, [pc, #116]	; (8008314 <_free_r+0x90>)
 800829e:	6813      	ldr	r3, [r2, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d105      	bne.n	80082b0 <_free_r+0x2c>
 80082a4:	6063      	str	r3, [r4, #4]
 80082a6:	6014      	str	r4, [r2, #0]
 80082a8:	0028      	movs	r0, r5
 80082aa:	f003 fc25 	bl	800baf8 <__malloc_unlock>
 80082ae:	bd70      	pop	{r4, r5, r6, pc}
 80082b0:	42a3      	cmp	r3, r4
 80082b2:	d908      	bls.n	80082c6 <_free_r+0x42>
 80082b4:	6821      	ldr	r1, [r4, #0]
 80082b6:	1860      	adds	r0, r4, r1
 80082b8:	4283      	cmp	r3, r0
 80082ba:	d1f3      	bne.n	80082a4 <_free_r+0x20>
 80082bc:	6818      	ldr	r0, [r3, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	1841      	adds	r1, r0, r1
 80082c2:	6021      	str	r1, [r4, #0]
 80082c4:	e7ee      	b.n	80082a4 <_free_r+0x20>
 80082c6:	001a      	movs	r2, r3
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d001      	beq.n	80082d2 <_free_r+0x4e>
 80082ce:	42a3      	cmp	r3, r4
 80082d0:	d9f9      	bls.n	80082c6 <_free_r+0x42>
 80082d2:	6811      	ldr	r1, [r2, #0]
 80082d4:	1850      	adds	r0, r2, r1
 80082d6:	42a0      	cmp	r0, r4
 80082d8:	d10b      	bne.n	80082f2 <_free_r+0x6e>
 80082da:	6820      	ldr	r0, [r4, #0]
 80082dc:	1809      	adds	r1, r1, r0
 80082de:	1850      	adds	r0, r2, r1
 80082e0:	6011      	str	r1, [r2, #0]
 80082e2:	4283      	cmp	r3, r0
 80082e4:	d1e0      	bne.n	80082a8 <_free_r+0x24>
 80082e6:	6818      	ldr	r0, [r3, #0]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	1841      	adds	r1, r0, r1
 80082ec:	6011      	str	r1, [r2, #0]
 80082ee:	6053      	str	r3, [r2, #4]
 80082f0:	e7da      	b.n	80082a8 <_free_r+0x24>
 80082f2:	42a0      	cmp	r0, r4
 80082f4:	d902      	bls.n	80082fc <_free_r+0x78>
 80082f6:	230c      	movs	r3, #12
 80082f8:	602b      	str	r3, [r5, #0]
 80082fa:	e7d5      	b.n	80082a8 <_free_r+0x24>
 80082fc:	6821      	ldr	r1, [r4, #0]
 80082fe:	1860      	adds	r0, r4, r1
 8008300:	4283      	cmp	r3, r0
 8008302:	d103      	bne.n	800830c <_free_r+0x88>
 8008304:	6818      	ldr	r0, [r3, #0]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	1841      	adds	r1, r0, r1
 800830a:	6021      	str	r1, [r4, #0]
 800830c:	6063      	str	r3, [r4, #4]
 800830e:	6054      	str	r4, [r2, #4]
 8008310:	e7ca      	b.n	80082a8 <_free_r+0x24>
 8008312:	46c0      	nop			; (mov r8, r8)
 8008314:	20001270 	.word	0x20001270

08008318 <sbrk_aligned>:
 8008318:	b570      	push	{r4, r5, r6, lr}
 800831a:	4e0f      	ldr	r6, [pc, #60]	; (8008358 <sbrk_aligned+0x40>)
 800831c:	000d      	movs	r5, r1
 800831e:	6831      	ldr	r1, [r6, #0]
 8008320:	0004      	movs	r4, r0
 8008322:	2900      	cmp	r1, #0
 8008324:	d102      	bne.n	800832c <sbrk_aligned+0x14>
 8008326:	f000 ff9b 	bl	8009260 <_sbrk_r>
 800832a:	6030      	str	r0, [r6, #0]
 800832c:	0029      	movs	r1, r5
 800832e:	0020      	movs	r0, r4
 8008330:	f000 ff96 	bl	8009260 <_sbrk_r>
 8008334:	1c43      	adds	r3, r0, #1
 8008336:	d00a      	beq.n	800834e <sbrk_aligned+0x36>
 8008338:	2303      	movs	r3, #3
 800833a:	1cc5      	adds	r5, r0, #3
 800833c:	439d      	bics	r5, r3
 800833e:	42a8      	cmp	r0, r5
 8008340:	d007      	beq.n	8008352 <sbrk_aligned+0x3a>
 8008342:	1a29      	subs	r1, r5, r0
 8008344:	0020      	movs	r0, r4
 8008346:	f000 ff8b 	bl	8009260 <_sbrk_r>
 800834a:	1c43      	adds	r3, r0, #1
 800834c:	d101      	bne.n	8008352 <sbrk_aligned+0x3a>
 800834e:	2501      	movs	r5, #1
 8008350:	426d      	negs	r5, r5
 8008352:	0028      	movs	r0, r5
 8008354:	bd70      	pop	{r4, r5, r6, pc}
 8008356:	46c0      	nop			; (mov r8, r8)
 8008358:	20001274 	.word	0x20001274

0800835c <_malloc_r>:
 800835c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800835e:	2203      	movs	r2, #3
 8008360:	1ccb      	adds	r3, r1, #3
 8008362:	4393      	bics	r3, r2
 8008364:	3308      	adds	r3, #8
 8008366:	0006      	movs	r6, r0
 8008368:	001f      	movs	r7, r3
 800836a:	2b0c      	cmp	r3, #12
 800836c:	d232      	bcs.n	80083d4 <_malloc_r+0x78>
 800836e:	270c      	movs	r7, #12
 8008370:	42b9      	cmp	r1, r7
 8008372:	d831      	bhi.n	80083d8 <_malloc_r+0x7c>
 8008374:	0030      	movs	r0, r6
 8008376:	f003 fbb7 	bl	800bae8 <__malloc_lock>
 800837a:	4d32      	ldr	r5, [pc, #200]	; (8008444 <_malloc_r+0xe8>)
 800837c:	682b      	ldr	r3, [r5, #0]
 800837e:	001c      	movs	r4, r3
 8008380:	2c00      	cmp	r4, #0
 8008382:	d12e      	bne.n	80083e2 <_malloc_r+0x86>
 8008384:	0039      	movs	r1, r7
 8008386:	0030      	movs	r0, r6
 8008388:	f7ff ffc6 	bl	8008318 <sbrk_aligned>
 800838c:	0004      	movs	r4, r0
 800838e:	1c43      	adds	r3, r0, #1
 8008390:	d11e      	bne.n	80083d0 <_malloc_r+0x74>
 8008392:	682c      	ldr	r4, [r5, #0]
 8008394:	0025      	movs	r5, r4
 8008396:	2d00      	cmp	r5, #0
 8008398:	d14a      	bne.n	8008430 <_malloc_r+0xd4>
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	0029      	movs	r1, r5
 800839e:	18e3      	adds	r3, r4, r3
 80083a0:	0030      	movs	r0, r6
 80083a2:	9301      	str	r3, [sp, #4]
 80083a4:	f000 ff5c 	bl	8009260 <_sbrk_r>
 80083a8:	9b01      	ldr	r3, [sp, #4]
 80083aa:	4283      	cmp	r3, r0
 80083ac:	d143      	bne.n	8008436 <_malloc_r+0xda>
 80083ae:	6823      	ldr	r3, [r4, #0]
 80083b0:	3703      	adds	r7, #3
 80083b2:	1aff      	subs	r7, r7, r3
 80083b4:	2303      	movs	r3, #3
 80083b6:	439f      	bics	r7, r3
 80083b8:	3708      	adds	r7, #8
 80083ba:	2f0c      	cmp	r7, #12
 80083bc:	d200      	bcs.n	80083c0 <_malloc_r+0x64>
 80083be:	270c      	movs	r7, #12
 80083c0:	0039      	movs	r1, r7
 80083c2:	0030      	movs	r0, r6
 80083c4:	f7ff ffa8 	bl	8008318 <sbrk_aligned>
 80083c8:	1c43      	adds	r3, r0, #1
 80083ca:	d034      	beq.n	8008436 <_malloc_r+0xda>
 80083cc:	6823      	ldr	r3, [r4, #0]
 80083ce:	19df      	adds	r7, r3, r7
 80083d0:	6027      	str	r7, [r4, #0]
 80083d2:	e013      	b.n	80083fc <_malloc_r+0xa0>
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	dacb      	bge.n	8008370 <_malloc_r+0x14>
 80083d8:	230c      	movs	r3, #12
 80083da:	2500      	movs	r5, #0
 80083dc:	6033      	str	r3, [r6, #0]
 80083de:	0028      	movs	r0, r5
 80083e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80083e2:	6822      	ldr	r2, [r4, #0]
 80083e4:	1bd1      	subs	r1, r2, r7
 80083e6:	d420      	bmi.n	800842a <_malloc_r+0xce>
 80083e8:	290b      	cmp	r1, #11
 80083ea:	d917      	bls.n	800841c <_malloc_r+0xc0>
 80083ec:	19e2      	adds	r2, r4, r7
 80083ee:	6027      	str	r7, [r4, #0]
 80083f0:	42a3      	cmp	r3, r4
 80083f2:	d111      	bne.n	8008418 <_malloc_r+0xbc>
 80083f4:	602a      	str	r2, [r5, #0]
 80083f6:	6863      	ldr	r3, [r4, #4]
 80083f8:	6011      	str	r1, [r2, #0]
 80083fa:	6053      	str	r3, [r2, #4]
 80083fc:	0030      	movs	r0, r6
 80083fe:	0025      	movs	r5, r4
 8008400:	f003 fb7a 	bl	800baf8 <__malloc_unlock>
 8008404:	2207      	movs	r2, #7
 8008406:	350b      	adds	r5, #11
 8008408:	1d23      	adds	r3, r4, #4
 800840a:	4395      	bics	r5, r2
 800840c:	1aea      	subs	r2, r5, r3
 800840e:	429d      	cmp	r5, r3
 8008410:	d0e5      	beq.n	80083de <_malloc_r+0x82>
 8008412:	1b5b      	subs	r3, r3, r5
 8008414:	50a3      	str	r3, [r4, r2]
 8008416:	e7e2      	b.n	80083de <_malloc_r+0x82>
 8008418:	605a      	str	r2, [r3, #4]
 800841a:	e7ec      	b.n	80083f6 <_malloc_r+0x9a>
 800841c:	6862      	ldr	r2, [r4, #4]
 800841e:	42a3      	cmp	r3, r4
 8008420:	d101      	bne.n	8008426 <_malloc_r+0xca>
 8008422:	602a      	str	r2, [r5, #0]
 8008424:	e7ea      	b.n	80083fc <_malloc_r+0xa0>
 8008426:	605a      	str	r2, [r3, #4]
 8008428:	e7e8      	b.n	80083fc <_malloc_r+0xa0>
 800842a:	0023      	movs	r3, r4
 800842c:	6864      	ldr	r4, [r4, #4]
 800842e:	e7a7      	b.n	8008380 <_malloc_r+0x24>
 8008430:	002c      	movs	r4, r5
 8008432:	686d      	ldr	r5, [r5, #4]
 8008434:	e7af      	b.n	8008396 <_malloc_r+0x3a>
 8008436:	230c      	movs	r3, #12
 8008438:	0030      	movs	r0, r6
 800843a:	6033      	str	r3, [r6, #0]
 800843c:	f003 fb5c 	bl	800baf8 <__malloc_unlock>
 8008440:	e7cd      	b.n	80083de <_malloc_r+0x82>
 8008442:	46c0      	nop			; (mov r8, r8)
 8008444:	20001270 	.word	0x20001270

08008448 <__cvt>:
 8008448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800844a:	001e      	movs	r6, r3
 800844c:	2300      	movs	r3, #0
 800844e:	0014      	movs	r4, r2
 8008450:	b08b      	sub	sp, #44	; 0x2c
 8008452:	429e      	cmp	r6, r3
 8008454:	da04      	bge.n	8008460 <__cvt+0x18>
 8008456:	2180      	movs	r1, #128	; 0x80
 8008458:	0609      	lsls	r1, r1, #24
 800845a:	1873      	adds	r3, r6, r1
 800845c:	001e      	movs	r6, r3
 800845e:	232d      	movs	r3, #45	; 0x2d
 8008460:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008462:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008464:	7013      	strb	r3, [r2, #0]
 8008466:	2320      	movs	r3, #32
 8008468:	2203      	movs	r2, #3
 800846a:	439f      	bics	r7, r3
 800846c:	2f46      	cmp	r7, #70	; 0x46
 800846e:	d007      	beq.n	8008480 <__cvt+0x38>
 8008470:	003b      	movs	r3, r7
 8008472:	3b45      	subs	r3, #69	; 0x45
 8008474:	4259      	negs	r1, r3
 8008476:	414b      	adcs	r3, r1
 8008478:	9910      	ldr	r1, [sp, #64]	; 0x40
 800847a:	3a01      	subs	r2, #1
 800847c:	18cb      	adds	r3, r1, r3
 800847e:	9310      	str	r3, [sp, #64]	; 0x40
 8008480:	ab09      	add	r3, sp, #36	; 0x24
 8008482:	9304      	str	r3, [sp, #16]
 8008484:	ab08      	add	r3, sp, #32
 8008486:	9303      	str	r3, [sp, #12]
 8008488:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800848a:	9200      	str	r2, [sp, #0]
 800848c:	9302      	str	r3, [sp, #8]
 800848e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008490:	0022      	movs	r2, r4
 8008492:	9301      	str	r3, [sp, #4]
 8008494:	0033      	movs	r3, r6
 8008496:	f001 ff39 	bl	800a30c <_dtoa_r>
 800849a:	0005      	movs	r5, r0
 800849c:	2f47      	cmp	r7, #71	; 0x47
 800849e:	d102      	bne.n	80084a6 <__cvt+0x5e>
 80084a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084a2:	07db      	lsls	r3, r3, #31
 80084a4:	d528      	bpl.n	80084f8 <__cvt+0xb0>
 80084a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084a8:	18eb      	adds	r3, r5, r3
 80084aa:	9307      	str	r3, [sp, #28]
 80084ac:	2f46      	cmp	r7, #70	; 0x46
 80084ae:	d114      	bne.n	80084da <__cvt+0x92>
 80084b0:	782b      	ldrb	r3, [r5, #0]
 80084b2:	2b30      	cmp	r3, #48	; 0x30
 80084b4:	d10c      	bne.n	80084d0 <__cvt+0x88>
 80084b6:	2200      	movs	r2, #0
 80084b8:	2300      	movs	r3, #0
 80084ba:	0020      	movs	r0, r4
 80084bc:	0031      	movs	r1, r6
 80084be:	f7f7 ffc5 	bl	800044c <__aeabi_dcmpeq>
 80084c2:	2800      	cmp	r0, #0
 80084c4:	d104      	bne.n	80084d0 <__cvt+0x88>
 80084c6:	2301      	movs	r3, #1
 80084c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80084ca:	1a9b      	subs	r3, r3, r2
 80084cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084ce:	6013      	str	r3, [r2, #0]
 80084d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084d2:	9a07      	ldr	r2, [sp, #28]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	18d3      	adds	r3, r2, r3
 80084d8:	9307      	str	r3, [sp, #28]
 80084da:	2200      	movs	r2, #0
 80084dc:	2300      	movs	r3, #0
 80084de:	0020      	movs	r0, r4
 80084e0:	0031      	movs	r1, r6
 80084e2:	f7f7 ffb3 	bl	800044c <__aeabi_dcmpeq>
 80084e6:	2800      	cmp	r0, #0
 80084e8:	d001      	beq.n	80084ee <__cvt+0xa6>
 80084ea:	9b07      	ldr	r3, [sp, #28]
 80084ec:	9309      	str	r3, [sp, #36]	; 0x24
 80084ee:	2230      	movs	r2, #48	; 0x30
 80084f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084f2:	9907      	ldr	r1, [sp, #28]
 80084f4:	428b      	cmp	r3, r1
 80084f6:	d306      	bcc.n	8008506 <__cvt+0xbe>
 80084f8:	0028      	movs	r0, r5
 80084fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80084fe:	1b5b      	subs	r3, r3, r5
 8008500:	6013      	str	r3, [r2, #0]
 8008502:	b00b      	add	sp, #44	; 0x2c
 8008504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008506:	1c59      	adds	r1, r3, #1
 8008508:	9109      	str	r1, [sp, #36]	; 0x24
 800850a:	701a      	strb	r2, [r3, #0]
 800850c:	e7f0      	b.n	80084f0 <__cvt+0xa8>

0800850e <__exponent>:
 800850e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008510:	1c83      	adds	r3, r0, #2
 8008512:	b087      	sub	sp, #28
 8008514:	9303      	str	r3, [sp, #12]
 8008516:	0005      	movs	r5, r0
 8008518:	000c      	movs	r4, r1
 800851a:	232b      	movs	r3, #43	; 0x2b
 800851c:	7002      	strb	r2, [r0, #0]
 800851e:	2900      	cmp	r1, #0
 8008520:	da01      	bge.n	8008526 <__exponent+0x18>
 8008522:	424c      	negs	r4, r1
 8008524:	3302      	adds	r3, #2
 8008526:	706b      	strb	r3, [r5, #1]
 8008528:	2c09      	cmp	r4, #9
 800852a:	dd31      	ble.n	8008590 <__exponent+0x82>
 800852c:	270a      	movs	r7, #10
 800852e:	ab04      	add	r3, sp, #16
 8008530:	1dde      	adds	r6, r3, #7
 8008532:	0020      	movs	r0, r4
 8008534:	0039      	movs	r1, r7
 8008536:	9601      	str	r6, [sp, #4]
 8008538:	f7f7 ff72 	bl	8000420 <__aeabi_idivmod>
 800853c:	3e01      	subs	r6, #1
 800853e:	3130      	adds	r1, #48	; 0x30
 8008540:	0020      	movs	r0, r4
 8008542:	7031      	strb	r1, [r6, #0]
 8008544:	0039      	movs	r1, r7
 8008546:	9402      	str	r4, [sp, #8]
 8008548:	f7f7 fe84 	bl	8000254 <__divsi3>
 800854c:	9b02      	ldr	r3, [sp, #8]
 800854e:	0004      	movs	r4, r0
 8008550:	2b63      	cmp	r3, #99	; 0x63
 8008552:	dcee      	bgt.n	8008532 <__exponent+0x24>
 8008554:	9b01      	ldr	r3, [sp, #4]
 8008556:	3430      	adds	r4, #48	; 0x30
 8008558:	1e9a      	subs	r2, r3, #2
 800855a:	0013      	movs	r3, r2
 800855c:	9903      	ldr	r1, [sp, #12]
 800855e:	7014      	strb	r4, [r2, #0]
 8008560:	a804      	add	r0, sp, #16
 8008562:	3007      	adds	r0, #7
 8008564:	4298      	cmp	r0, r3
 8008566:	d80e      	bhi.n	8008586 <__exponent+0x78>
 8008568:	ab04      	add	r3, sp, #16
 800856a:	3307      	adds	r3, #7
 800856c:	2000      	movs	r0, #0
 800856e:	429a      	cmp	r2, r3
 8008570:	d804      	bhi.n	800857c <__exponent+0x6e>
 8008572:	ab04      	add	r3, sp, #16
 8008574:	3009      	adds	r0, #9
 8008576:	18c0      	adds	r0, r0, r3
 8008578:	9b01      	ldr	r3, [sp, #4]
 800857a:	1ac0      	subs	r0, r0, r3
 800857c:	9b03      	ldr	r3, [sp, #12]
 800857e:	1818      	adds	r0, r3, r0
 8008580:	1b40      	subs	r0, r0, r5
 8008582:	b007      	add	sp, #28
 8008584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008586:	7818      	ldrb	r0, [r3, #0]
 8008588:	3301      	adds	r3, #1
 800858a:	7008      	strb	r0, [r1, #0]
 800858c:	3101      	adds	r1, #1
 800858e:	e7e7      	b.n	8008560 <__exponent+0x52>
 8008590:	2330      	movs	r3, #48	; 0x30
 8008592:	18e4      	adds	r4, r4, r3
 8008594:	70ab      	strb	r3, [r5, #2]
 8008596:	1d28      	adds	r0, r5, #4
 8008598:	70ec      	strb	r4, [r5, #3]
 800859a:	e7f1      	b.n	8008580 <__exponent+0x72>

0800859c <_printf_float>:
 800859c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800859e:	b095      	sub	sp, #84	; 0x54
 80085a0:	000c      	movs	r4, r1
 80085a2:	9209      	str	r2, [sp, #36]	; 0x24
 80085a4:	001e      	movs	r6, r3
 80085a6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80085a8:	0007      	movs	r7, r0
 80085aa:	f003 fa0b 	bl	800b9c4 <_localeconv_r>
 80085ae:	6803      	ldr	r3, [r0, #0]
 80085b0:	0018      	movs	r0, r3
 80085b2:	930c      	str	r3, [sp, #48]	; 0x30
 80085b4:	f7f7 fda8 	bl	8000108 <strlen>
 80085b8:	2300      	movs	r3, #0
 80085ba:	9312      	str	r3, [sp, #72]	; 0x48
 80085bc:	7e23      	ldrb	r3, [r4, #24]
 80085be:	2207      	movs	r2, #7
 80085c0:	930a      	str	r3, [sp, #40]	; 0x28
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	900e      	str	r0, [sp, #56]	; 0x38
 80085c6:	930d      	str	r3, [sp, #52]	; 0x34
 80085c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80085ca:	682b      	ldr	r3, [r5, #0]
 80085cc:	05c9      	lsls	r1, r1, #23
 80085ce:	d547      	bpl.n	8008660 <_printf_float+0xc4>
 80085d0:	189b      	adds	r3, r3, r2
 80085d2:	4393      	bics	r3, r2
 80085d4:	001a      	movs	r2, r3
 80085d6:	3208      	adds	r2, #8
 80085d8:	602a      	str	r2, [r5, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	64a2      	str	r2, [r4, #72]	; 0x48
 80085e0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80085e2:	2201      	movs	r2, #1
 80085e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80085e6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80085e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80085ea:	006b      	lsls	r3, r5, #1
 80085ec:	085b      	lsrs	r3, r3, #1
 80085ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80085f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80085f2:	4ba7      	ldr	r3, [pc, #668]	; (8008890 <_printf_float+0x2f4>)
 80085f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80085f6:	4252      	negs	r2, r2
 80085f8:	f7f9 fd04 	bl	8002004 <__aeabi_dcmpun>
 80085fc:	2800      	cmp	r0, #0
 80085fe:	d131      	bne.n	8008664 <_printf_float+0xc8>
 8008600:	2201      	movs	r2, #1
 8008602:	4ba3      	ldr	r3, [pc, #652]	; (8008890 <_printf_float+0x2f4>)
 8008604:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008606:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008608:	4252      	negs	r2, r2
 800860a:	f7f7 ff2f 	bl	800046c <__aeabi_dcmple>
 800860e:	2800      	cmp	r0, #0
 8008610:	d128      	bne.n	8008664 <_printf_float+0xc8>
 8008612:	2200      	movs	r2, #0
 8008614:	2300      	movs	r3, #0
 8008616:	0029      	movs	r1, r5
 8008618:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800861a:	f7f7 ff1d 	bl	8000458 <__aeabi_dcmplt>
 800861e:	2800      	cmp	r0, #0
 8008620:	d003      	beq.n	800862a <_printf_float+0x8e>
 8008622:	0023      	movs	r3, r4
 8008624:	222d      	movs	r2, #45	; 0x2d
 8008626:	3343      	adds	r3, #67	; 0x43
 8008628:	701a      	strb	r2, [r3, #0]
 800862a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800862c:	4d99      	ldr	r5, [pc, #612]	; (8008894 <_printf_float+0x2f8>)
 800862e:	2b47      	cmp	r3, #71	; 0x47
 8008630:	d900      	bls.n	8008634 <_printf_float+0x98>
 8008632:	4d99      	ldr	r5, [pc, #612]	; (8008898 <_printf_float+0x2fc>)
 8008634:	2303      	movs	r3, #3
 8008636:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008638:	6123      	str	r3, [r4, #16]
 800863a:	3301      	adds	r3, #1
 800863c:	439a      	bics	r2, r3
 800863e:	2300      	movs	r3, #0
 8008640:	6022      	str	r2, [r4, #0]
 8008642:	930b      	str	r3, [sp, #44]	; 0x2c
 8008644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008646:	0021      	movs	r1, r4
 8008648:	0038      	movs	r0, r7
 800864a:	9600      	str	r6, [sp, #0]
 800864c:	aa13      	add	r2, sp, #76	; 0x4c
 800864e:	f000 f9e7 	bl	8008a20 <_printf_common>
 8008652:	1c43      	adds	r3, r0, #1
 8008654:	d000      	beq.n	8008658 <_printf_float+0xbc>
 8008656:	e0a2      	b.n	800879e <_printf_float+0x202>
 8008658:	2001      	movs	r0, #1
 800865a:	4240      	negs	r0, r0
 800865c:	b015      	add	sp, #84	; 0x54
 800865e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008660:	3307      	adds	r3, #7
 8008662:	e7b6      	b.n	80085d2 <_printf_float+0x36>
 8008664:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008666:	002b      	movs	r3, r5
 8008668:	0010      	movs	r0, r2
 800866a:	0029      	movs	r1, r5
 800866c:	f7f9 fcca 	bl	8002004 <__aeabi_dcmpun>
 8008670:	2800      	cmp	r0, #0
 8008672:	d00b      	beq.n	800868c <_printf_float+0xf0>
 8008674:	2d00      	cmp	r5, #0
 8008676:	da03      	bge.n	8008680 <_printf_float+0xe4>
 8008678:	0023      	movs	r3, r4
 800867a:	222d      	movs	r2, #45	; 0x2d
 800867c:	3343      	adds	r3, #67	; 0x43
 800867e:	701a      	strb	r2, [r3, #0]
 8008680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008682:	4d86      	ldr	r5, [pc, #536]	; (800889c <_printf_float+0x300>)
 8008684:	2b47      	cmp	r3, #71	; 0x47
 8008686:	d9d5      	bls.n	8008634 <_printf_float+0x98>
 8008688:	4d85      	ldr	r5, [pc, #532]	; (80088a0 <_printf_float+0x304>)
 800868a:	e7d3      	b.n	8008634 <_printf_float+0x98>
 800868c:	2220      	movs	r2, #32
 800868e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008690:	6863      	ldr	r3, [r4, #4]
 8008692:	4391      	bics	r1, r2
 8008694:	910f      	str	r1, [sp, #60]	; 0x3c
 8008696:	1c5a      	adds	r2, r3, #1
 8008698:	d149      	bne.n	800872e <_printf_float+0x192>
 800869a:	3307      	adds	r3, #7
 800869c:	6063      	str	r3, [r4, #4]
 800869e:	2380      	movs	r3, #128	; 0x80
 80086a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086a2:	00db      	lsls	r3, r3, #3
 80086a4:	4313      	orrs	r3, r2
 80086a6:	2200      	movs	r2, #0
 80086a8:	9206      	str	r2, [sp, #24]
 80086aa:	aa12      	add	r2, sp, #72	; 0x48
 80086ac:	9205      	str	r2, [sp, #20]
 80086ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086b0:	a908      	add	r1, sp, #32
 80086b2:	9204      	str	r2, [sp, #16]
 80086b4:	aa11      	add	r2, sp, #68	; 0x44
 80086b6:	9203      	str	r2, [sp, #12]
 80086b8:	2223      	movs	r2, #35	; 0x23
 80086ba:	6023      	str	r3, [r4, #0]
 80086bc:	9301      	str	r3, [sp, #4]
 80086be:	6863      	ldr	r3, [r4, #4]
 80086c0:	1852      	adds	r2, r2, r1
 80086c2:	9202      	str	r2, [sp, #8]
 80086c4:	9300      	str	r3, [sp, #0]
 80086c6:	0038      	movs	r0, r7
 80086c8:	002b      	movs	r3, r5
 80086ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086cc:	f7ff febc 	bl	8008448 <__cvt>
 80086d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086d2:	0005      	movs	r5, r0
 80086d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80086d6:	2b47      	cmp	r3, #71	; 0x47
 80086d8:	d108      	bne.n	80086ec <_printf_float+0x150>
 80086da:	1ccb      	adds	r3, r1, #3
 80086dc:	db02      	blt.n	80086e4 <_printf_float+0x148>
 80086de:	6863      	ldr	r3, [r4, #4]
 80086e0:	4299      	cmp	r1, r3
 80086e2:	dd48      	ble.n	8008776 <_printf_float+0x1da>
 80086e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086e6:	3b02      	subs	r3, #2
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	930a      	str	r3, [sp, #40]	; 0x28
 80086ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086ee:	2b65      	cmp	r3, #101	; 0x65
 80086f0:	d824      	bhi.n	800873c <_printf_float+0x1a0>
 80086f2:	0020      	movs	r0, r4
 80086f4:	001a      	movs	r2, r3
 80086f6:	3901      	subs	r1, #1
 80086f8:	3050      	adds	r0, #80	; 0x50
 80086fa:	9111      	str	r1, [sp, #68]	; 0x44
 80086fc:	f7ff ff07 	bl	800850e <__exponent>
 8008700:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008702:	900b      	str	r0, [sp, #44]	; 0x2c
 8008704:	1813      	adds	r3, r2, r0
 8008706:	6123      	str	r3, [r4, #16]
 8008708:	2a01      	cmp	r2, #1
 800870a:	dc02      	bgt.n	8008712 <_printf_float+0x176>
 800870c:	6822      	ldr	r2, [r4, #0]
 800870e:	07d2      	lsls	r2, r2, #31
 8008710:	d501      	bpl.n	8008716 <_printf_float+0x17a>
 8008712:	3301      	adds	r3, #1
 8008714:	6123      	str	r3, [r4, #16]
 8008716:	2323      	movs	r3, #35	; 0x23
 8008718:	aa08      	add	r2, sp, #32
 800871a:	189b      	adds	r3, r3, r2
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d100      	bne.n	8008724 <_printf_float+0x188>
 8008722:	e78f      	b.n	8008644 <_printf_float+0xa8>
 8008724:	0023      	movs	r3, r4
 8008726:	222d      	movs	r2, #45	; 0x2d
 8008728:	3343      	adds	r3, #67	; 0x43
 800872a:	701a      	strb	r2, [r3, #0]
 800872c:	e78a      	b.n	8008644 <_printf_float+0xa8>
 800872e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008730:	2a47      	cmp	r2, #71	; 0x47
 8008732:	d1b4      	bne.n	800869e <_printf_float+0x102>
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1b2      	bne.n	800869e <_printf_float+0x102>
 8008738:	3301      	adds	r3, #1
 800873a:	e7af      	b.n	800869c <_printf_float+0x100>
 800873c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800873e:	2b66      	cmp	r3, #102	; 0x66
 8008740:	d11b      	bne.n	800877a <_printf_float+0x1de>
 8008742:	6863      	ldr	r3, [r4, #4]
 8008744:	2900      	cmp	r1, #0
 8008746:	dd0d      	ble.n	8008764 <_printf_float+0x1c8>
 8008748:	6121      	str	r1, [r4, #16]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d102      	bne.n	8008754 <_printf_float+0x1b8>
 800874e:	6822      	ldr	r2, [r4, #0]
 8008750:	07d2      	lsls	r2, r2, #31
 8008752:	d502      	bpl.n	800875a <_printf_float+0x1be>
 8008754:	3301      	adds	r3, #1
 8008756:	1859      	adds	r1, r3, r1
 8008758:	6121      	str	r1, [r4, #16]
 800875a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800875c:	65a3      	str	r3, [r4, #88]	; 0x58
 800875e:	2300      	movs	r3, #0
 8008760:	930b      	str	r3, [sp, #44]	; 0x2c
 8008762:	e7d8      	b.n	8008716 <_printf_float+0x17a>
 8008764:	2b00      	cmp	r3, #0
 8008766:	d103      	bne.n	8008770 <_printf_float+0x1d4>
 8008768:	2201      	movs	r2, #1
 800876a:	6821      	ldr	r1, [r4, #0]
 800876c:	4211      	tst	r1, r2
 800876e:	d000      	beq.n	8008772 <_printf_float+0x1d6>
 8008770:	1c9a      	adds	r2, r3, #2
 8008772:	6122      	str	r2, [r4, #16]
 8008774:	e7f1      	b.n	800875a <_printf_float+0x1be>
 8008776:	2367      	movs	r3, #103	; 0x67
 8008778:	930a      	str	r3, [sp, #40]	; 0x28
 800877a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800877c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800877e:	4293      	cmp	r3, r2
 8008780:	db06      	blt.n	8008790 <_printf_float+0x1f4>
 8008782:	6822      	ldr	r2, [r4, #0]
 8008784:	6123      	str	r3, [r4, #16]
 8008786:	07d2      	lsls	r2, r2, #31
 8008788:	d5e7      	bpl.n	800875a <_printf_float+0x1be>
 800878a:	3301      	adds	r3, #1
 800878c:	6123      	str	r3, [r4, #16]
 800878e:	e7e4      	b.n	800875a <_printf_float+0x1be>
 8008790:	2101      	movs	r1, #1
 8008792:	2b00      	cmp	r3, #0
 8008794:	dc01      	bgt.n	800879a <_printf_float+0x1fe>
 8008796:	1849      	adds	r1, r1, r1
 8008798:	1ac9      	subs	r1, r1, r3
 800879a:	1852      	adds	r2, r2, r1
 800879c:	e7e9      	b.n	8008772 <_printf_float+0x1d6>
 800879e:	6822      	ldr	r2, [r4, #0]
 80087a0:	0553      	lsls	r3, r2, #21
 80087a2:	d407      	bmi.n	80087b4 <_printf_float+0x218>
 80087a4:	6923      	ldr	r3, [r4, #16]
 80087a6:	002a      	movs	r2, r5
 80087a8:	0038      	movs	r0, r7
 80087aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087ac:	47b0      	blx	r6
 80087ae:	1c43      	adds	r3, r0, #1
 80087b0:	d128      	bne.n	8008804 <_printf_float+0x268>
 80087b2:	e751      	b.n	8008658 <_printf_float+0xbc>
 80087b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087b6:	2b65      	cmp	r3, #101	; 0x65
 80087b8:	d800      	bhi.n	80087bc <_printf_float+0x220>
 80087ba:	e0e1      	b.n	8008980 <_printf_float+0x3e4>
 80087bc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80087be:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80087c0:	2200      	movs	r2, #0
 80087c2:	2300      	movs	r3, #0
 80087c4:	f7f7 fe42 	bl	800044c <__aeabi_dcmpeq>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	d031      	beq.n	8008830 <_printf_float+0x294>
 80087cc:	2301      	movs	r3, #1
 80087ce:	0038      	movs	r0, r7
 80087d0:	4a34      	ldr	r2, [pc, #208]	; (80088a4 <_printf_float+0x308>)
 80087d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087d4:	47b0      	blx	r6
 80087d6:	1c43      	adds	r3, r0, #1
 80087d8:	d100      	bne.n	80087dc <_printf_float+0x240>
 80087da:	e73d      	b.n	8008658 <_printf_float+0xbc>
 80087dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80087e0:	4293      	cmp	r3, r2
 80087e2:	db02      	blt.n	80087ea <_printf_float+0x24e>
 80087e4:	6823      	ldr	r3, [r4, #0]
 80087e6:	07db      	lsls	r3, r3, #31
 80087e8:	d50c      	bpl.n	8008804 <_printf_float+0x268>
 80087ea:	0038      	movs	r0, r7
 80087ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80087f2:	47b0      	blx	r6
 80087f4:	2500      	movs	r5, #0
 80087f6:	1c43      	adds	r3, r0, #1
 80087f8:	d100      	bne.n	80087fc <_printf_float+0x260>
 80087fa:	e72d      	b.n	8008658 <_printf_float+0xbc>
 80087fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087fe:	3b01      	subs	r3, #1
 8008800:	42ab      	cmp	r3, r5
 8008802:	dc0a      	bgt.n	800881a <_printf_float+0x27e>
 8008804:	6823      	ldr	r3, [r4, #0]
 8008806:	079b      	lsls	r3, r3, #30
 8008808:	d500      	bpl.n	800880c <_printf_float+0x270>
 800880a:	e106      	b.n	8008a1a <_printf_float+0x47e>
 800880c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800880e:	68e0      	ldr	r0, [r4, #12]
 8008810:	4298      	cmp	r0, r3
 8008812:	db00      	blt.n	8008816 <_printf_float+0x27a>
 8008814:	e722      	b.n	800865c <_printf_float+0xc0>
 8008816:	0018      	movs	r0, r3
 8008818:	e720      	b.n	800865c <_printf_float+0xc0>
 800881a:	0022      	movs	r2, r4
 800881c:	2301      	movs	r3, #1
 800881e:	0038      	movs	r0, r7
 8008820:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008822:	321a      	adds	r2, #26
 8008824:	47b0      	blx	r6
 8008826:	1c43      	adds	r3, r0, #1
 8008828:	d100      	bne.n	800882c <_printf_float+0x290>
 800882a:	e715      	b.n	8008658 <_printf_float+0xbc>
 800882c:	3501      	adds	r5, #1
 800882e:	e7e5      	b.n	80087fc <_printf_float+0x260>
 8008830:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008832:	2b00      	cmp	r3, #0
 8008834:	dc38      	bgt.n	80088a8 <_printf_float+0x30c>
 8008836:	2301      	movs	r3, #1
 8008838:	0038      	movs	r0, r7
 800883a:	4a1a      	ldr	r2, [pc, #104]	; (80088a4 <_printf_float+0x308>)
 800883c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800883e:	47b0      	blx	r6
 8008840:	1c43      	adds	r3, r0, #1
 8008842:	d100      	bne.n	8008846 <_printf_float+0x2aa>
 8008844:	e708      	b.n	8008658 <_printf_float+0xbc>
 8008846:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008848:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800884a:	4313      	orrs	r3, r2
 800884c:	d102      	bne.n	8008854 <_printf_float+0x2b8>
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	07db      	lsls	r3, r3, #31
 8008852:	d5d7      	bpl.n	8008804 <_printf_float+0x268>
 8008854:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008856:	0038      	movs	r0, r7
 8008858:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800885a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800885c:	47b0      	blx	r6
 800885e:	1c43      	adds	r3, r0, #1
 8008860:	d100      	bne.n	8008864 <_printf_float+0x2c8>
 8008862:	e6f9      	b.n	8008658 <_printf_float+0xbc>
 8008864:	2300      	movs	r3, #0
 8008866:	930a      	str	r3, [sp, #40]	; 0x28
 8008868:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800886a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800886c:	425b      	negs	r3, r3
 800886e:	4293      	cmp	r3, r2
 8008870:	dc01      	bgt.n	8008876 <_printf_float+0x2da>
 8008872:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008874:	e797      	b.n	80087a6 <_printf_float+0x20a>
 8008876:	0022      	movs	r2, r4
 8008878:	2301      	movs	r3, #1
 800887a:	0038      	movs	r0, r7
 800887c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800887e:	321a      	adds	r2, #26
 8008880:	47b0      	blx	r6
 8008882:	1c43      	adds	r3, r0, #1
 8008884:	d100      	bne.n	8008888 <_printf_float+0x2ec>
 8008886:	e6e7      	b.n	8008658 <_printf_float+0xbc>
 8008888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800888a:	3301      	adds	r3, #1
 800888c:	e7eb      	b.n	8008866 <_printf_float+0x2ca>
 800888e:	46c0      	nop			; (mov r8, r8)
 8008890:	7fefffff 	.word	0x7fefffff
 8008894:	0800d5dc 	.word	0x0800d5dc
 8008898:	0800d5e0 	.word	0x0800d5e0
 800889c:	0800d5e4 	.word	0x0800d5e4
 80088a0:	0800d5e8 	.word	0x0800d5e8
 80088a4:	0800d5ec 	.word	0x0800d5ec
 80088a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088ac:	920a      	str	r2, [sp, #40]	; 0x28
 80088ae:	429a      	cmp	r2, r3
 80088b0:	dd00      	ble.n	80088b4 <_printf_float+0x318>
 80088b2:	930a      	str	r3, [sp, #40]	; 0x28
 80088b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	dc3c      	bgt.n	8008934 <_printf_float+0x398>
 80088ba:	2300      	movs	r3, #0
 80088bc:	930d      	str	r3, [sp, #52]	; 0x34
 80088be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088c0:	43db      	mvns	r3, r3
 80088c2:	17db      	asrs	r3, r3, #31
 80088c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80088c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80088cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ce:	4013      	ands	r3, r2
 80088d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088d6:	4293      	cmp	r3, r2
 80088d8:	dc34      	bgt.n	8008944 <_printf_float+0x3a8>
 80088da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088de:	4293      	cmp	r3, r2
 80088e0:	db3d      	blt.n	800895e <_printf_float+0x3c2>
 80088e2:	6823      	ldr	r3, [r4, #0]
 80088e4:	07db      	lsls	r3, r3, #31
 80088e6:	d43a      	bmi.n	800895e <_printf_float+0x3c2>
 80088e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 80088ee:	1ad3      	subs	r3, r2, r3
 80088f0:	1a52      	subs	r2, r2, r1
 80088f2:	920a      	str	r2, [sp, #40]	; 0x28
 80088f4:	429a      	cmp	r2, r3
 80088f6:	dd00      	ble.n	80088fa <_printf_float+0x35e>
 80088f8:	930a      	str	r3, [sp, #40]	; 0x28
 80088fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	dc36      	bgt.n	800896e <_printf_float+0x3d2>
 8008900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008902:	2500      	movs	r5, #0
 8008904:	43db      	mvns	r3, r3
 8008906:	17db      	asrs	r3, r3, #31
 8008908:	930b      	str	r3, [sp, #44]	; 0x2c
 800890a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800890c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800890e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008910:	1a9b      	subs	r3, r3, r2
 8008912:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008914:	400a      	ands	r2, r1
 8008916:	1a9b      	subs	r3, r3, r2
 8008918:	42ab      	cmp	r3, r5
 800891a:	dc00      	bgt.n	800891e <_printf_float+0x382>
 800891c:	e772      	b.n	8008804 <_printf_float+0x268>
 800891e:	0022      	movs	r2, r4
 8008920:	2301      	movs	r3, #1
 8008922:	0038      	movs	r0, r7
 8008924:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008926:	321a      	adds	r2, #26
 8008928:	47b0      	blx	r6
 800892a:	1c43      	adds	r3, r0, #1
 800892c:	d100      	bne.n	8008930 <_printf_float+0x394>
 800892e:	e693      	b.n	8008658 <_printf_float+0xbc>
 8008930:	3501      	adds	r5, #1
 8008932:	e7ea      	b.n	800890a <_printf_float+0x36e>
 8008934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008936:	002a      	movs	r2, r5
 8008938:	0038      	movs	r0, r7
 800893a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800893c:	47b0      	blx	r6
 800893e:	1c43      	adds	r3, r0, #1
 8008940:	d1bb      	bne.n	80088ba <_printf_float+0x31e>
 8008942:	e689      	b.n	8008658 <_printf_float+0xbc>
 8008944:	0022      	movs	r2, r4
 8008946:	2301      	movs	r3, #1
 8008948:	0038      	movs	r0, r7
 800894a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800894c:	321a      	adds	r2, #26
 800894e:	47b0      	blx	r6
 8008950:	1c43      	adds	r3, r0, #1
 8008952:	d100      	bne.n	8008956 <_printf_float+0x3ba>
 8008954:	e680      	b.n	8008658 <_printf_float+0xbc>
 8008956:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008958:	3301      	adds	r3, #1
 800895a:	930d      	str	r3, [sp, #52]	; 0x34
 800895c:	e7b3      	b.n	80088c6 <_printf_float+0x32a>
 800895e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008960:	0038      	movs	r0, r7
 8008962:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008964:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008966:	47b0      	blx	r6
 8008968:	1c43      	adds	r3, r0, #1
 800896a:	d1bd      	bne.n	80088e8 <_printf_float+0x34c>
 800896c:	e674      	b.n	8008658 <_printf_float+0xbc>
 800896e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008970:	0038      	movs	r0, r7
 8008972:	18ea      	adds	r2, r5, r3
 8008974:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008978:	47b0      	blx	r6
 800897a:	1c43      	adds	r3, r0, #1
 800897c:	d1c0      	bne.n	8008900 <_printf_float+0x364>
 800897e:	e66b      	b.n	8008658 <_printf_float+0xbc>
 8008980:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008982:	2b01      	cmp	r3, #1
 8008984:	dc02      	bgt.n	800898c <_printf_float+0x3f0>
 8008986:	2301      	movs	r3, #1
 8008988:	421a      	tst	r2, r3
 800898a:	d034      	beq.n	80089f6 <_printf_float+0x45a>
 800898c:	2301      	movs	r3, #1
 800898e:	002a      	movs	r2, r5
 8008990:	0038      	movs	r0, r7
 8008992:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008994:	47b0      	blx	r6
 8008996:	1c43      	adds	r3, r0, #1
 8008998:	d100      	bne.n	800899c <_printf_float+0x400>
 800899a:	e65d      	b.n	8008658 <_printf_float+0xbc>
 800899c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800899e:	0038      	movs	r0, r7
 80089a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089a4:	47b0      	blx	r6
 80089a6:	1c43      	adds	r3, r0, #1
 80089a8:	d100      	bne.n	80089ac <_printf_float+0x410>
 80089aa:	e655      	b.n	8008658 <_printf_float+0xbc>
 80089ac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80089ae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80089b0:	2200      	movs	r2, #0
 80089b2:	2300      	movs	r3, #0
 80089b4:	f7f7 fd4a 	bl	800044c <__aeabi_dcmpeq>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d11a      	bne.n	80089f2 <_printf_float+0x456>
 80089bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089be:	1c6a      	adds	r2, r5, #1
 80089c0:	3b01      	subs	r3, #1
 80089c2:	0038      	movs	r0, r7
 80089c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089c6:	47b0      	blx	r6
 80089c8:	1c43      	adds	r3, r0, #1
 80089ca:	d10e      	bne.n	80089ea <_printf_float+0x44e>
 80089cc:	e644      	b.n	8008658 <_printf_float+0xbc>
 80089ce:	0022      	movs	r2, r4
 80089d0:	2301      	movs	r3, #1
 80089d2:	0038      	movs	r0, r7
 80089d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089d6:	321a      	adds	r2, #26
 80089d8:	47b0      	blx	r6
 80089da:	1c43      	adds	r3, r0, #1
 80089dc:	d100      	bne.n	80089e0 <_printf_float+0x444>
 80089de:	e63b      	b.n	8008658 <_printf_float+0xbc>
 80089e0:	3501      	adds	r5, #1
 80089e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089e4:	3b01      	subs	r3, #1
 80089e6:	42ab      	cmp	r3, r5
 80089e8:	dcf1      	bgt.n	80089ce <_printf_float+0x432>
 80089ea:	0022      	movs	r2, r4
 80089ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089ee:	3250      	adds	r2, #80	; 0x50
 80089f0:	e6da      	b.n	80087a8 <_printf_float+0x20c>
 80089f2:	2500      	movs	r5, #0
 80089f4:	e7f5      	b.n	80089e2 <_printf_float+0x446>
 80089f6:	002a      	movs	r2, r5
 80089f8:	e7e3      	b.n	80089c2 <_printf_float+0x426>
 80089fa:	0022      	movs	r2, r4
 80089fc:	2301      	movs	r3, #1
 80089fe:	0038      	movs	r0, r7
 8008a00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a02:	3219      	adds	r2, #25
 8008a04:	47b0      	blx	r6
 8008a06:	1c43      	adds	r3, r0, #1
 8008a08:	d100      	bne.n	8008a0c <_printf_float+0x470>
 8008a0a:	e625      	b.n	8008658 <_printf_float+0xbc>
 8008a0c:	3501      	adds	r5, #1
 8008a0e:	68e3      	ldr	r3, [r4, #12]
 8008a10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008a12:	1a9b      	subs	r3, r3, r2
 8008a14:	42ab      	cmp	r3, r5
 8008a16:	dcf0      	bgt.n	80089fa <_printf_float+0x45e>
 8008a18:	e6f8      	b.n	800880c <_printf_float+0x270>
 8008a1a:	2500      	movs	r5, #0
 8008a1c:	e7f7      	b.n	8008a0e <_printf_float+0x472>
 8008a1e:	46c0      	nop			; (mov r8, r8)

08008a20 <_printf_common>:
 8008a20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a22:	0015      	movs	r5, r2
 8008a24:	9301      	str	r3, [sp, #4]
 8008a26:	688a      	ldr	r2, [r1, #8]
 8008a28:	690b      	ldr	r3, [r1, #16]
 8008a2a:	000c      	movs	r4, r1
 8008a2c:	9000      	str	r0, [sp, #0]
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	da00      	bge.n	8008a34 <_printf_common+0x14>
 8008a32:	0013      	movs	r3, r2
 8008a34:	0022      	movs	r2, r4
 8008a36:	602b      	str	r3, [r5, #0]
 8008a38:	3243      	adds	r2, #67	; 0x43
 8008a3a:	7812      	ldrb	r2, [r2, #0]
 8008a3c:	2a00      	cmp	r2, #0
 8008a3e:	d001      	beq.n	8008a44 <_printf_common+0x24>
 8008a40:	3301      	adds	r3, #1
 8008a42:	602b      	str	r3, [r5, #0]
 8008a44:	6823      	ldr	r3, [r4, #0]
 8008a46:	069b      	lsls	r3, r3, #26
 8008a48:	d502      	bpl.n	8008a50 <_printf_common+0x30>
 8008a4a:	682b      	ldr	r3, [r5, #0]
 8008a4c:	3302      	adds	r3, #2
 8008a4e:	602b      	str	r3, [r5, #0]
 8008a50:	6822      	ldr	r2, [r4, #0]
 8008a52:	2306      	movs	r3, #6
 8008a54:	0017      	movs	r7, r2
 8008a56:	401f      	ands	r7, r3
 8008a58:	421a      	tst	r2, r3
 8008a5a:	d027      	beq.n	8008aac <_printf_common+0x8c>
 8008a5c:	0023      	movs	r3, r4
 8008a5e:	3343      	adds	r3, #67	; 0x43
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	1e5a      	subs	r2, r3, #1
 8008a64:	4193      	sbcs	r3, r2
 8008a66:	6822      	ldr	r2, [r4, #0]
 8008a68:	0692      	lsls	r2, r2, #26
 8008a6a:	d430      	bmi.n	8008ace <_printf_common+0xae>
 8008a6c:	0022      	movs	r2, r4
 8008a6e:	9901      	ldr	r1, [sp, #4]
 8008a70:	9800      	ldr	r0, [sp, #0]
 8008a72:	9e08      	ldr	r6, [sp, #32]
 8008a74:	3243      	adds	r2, #67	; 0x43
 8008a76:	47b0      	blx	r6
 8008a78:	1c43      	adds	r3, r0, #1
 8008a7a:	d025      	beq.n	8008ac8 <_printf_common+0xa8>
 8008a7c:	2306      	movs	r3, #6
 8008a7e:	6820      	ldr	r0, [r4, #0]
 8008a80:	682a      	ldr	r2, [r5, #0]
 8008a82:	68e1      	ldr	r1, [r4, #12]
 8008a84:	2500      	movs	r5, #0
 8008a86:	4003      	ands	r3, r0
 8008a88:	2b04      	cmp	r3, #4
 8008a8a:	d103      	bne.n	8008a94 <_printf_common+0x74>
 8008a8c:	1a8d      	subs	r5, r1, r2
 8008a8e:	43eb      	mvns	r3, r5
 8008a90:	17db      	asrs	r3, r3, #31
 8008a92:	401d      	ands	r5, r3
 8008a94:	68a3      	ldr	r3, [r4, #8]
 8008a96:	6922      	ldr	r2, [r4, #16]
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	dd01      	ble.n	8008aa0 <_printf_common+0x80>
 8008a9c:	1a9b      	subs	r3, r3, r2
 8008a9e:	18ed      	adds	r5, r5, r3
 8008aa0:	2700      	movs	r7, #0
 8008aa2:	42bd      	cmp	r5, r7
 8008aa4:	d120      	bne.n	8008ae8 <_printf_common+0xc8>
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	e010      	b.n	8008acc <_printf_common+0xac>
 8008aaa:	3701      	adds	r7, #1
 8008aac:	68e3      	ldr	r3, [r4, #12]
 8008aae:	682a      	ldr	r2, [r5, #0]
 8008ab0:	1a9b      	subs	r3, r3, r2
 8008ab2:	42bb      	cmp	r3, r7
 8008ab4:	ddd2      	ble.n	8008a5c <_printf_common+0x3c>
 8008ab6:	0022      	movs	r2, r4
 8008ab8:	2301      	movs	r3, #1
 8008aba:	9901      	ldr	r1, [sp, #4]
 8008abc:	9800      	ldr	r0, [sp, #0]
 8008abe:	9e08      	ldr	r6, [sp, #32]
 8008ac0:	3219      	adds	r2, #25
 8008ac2:	47b0      	blx	r6
 8008ac4:	1c43      	adds	r3, r0, #1
 8008ac6:	d1f0      	bne.n	8008aaa <_printf_common+0x8a>
 8008ac8:	2001      	movs	r0, #1
 8008aca:	4240      	negs	r0, r0
 8008acc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008ace:	2030      	movs	r0, #48	; 0x30
 8008ad0:	18e1      	adds	r1, r4, r3
 8008ad2:	3143      	adds	r1, #67	; 0x43
 8008ad4:	7008      	strb	r0, [r1, #0]
 8008ad6:	0021      	movs	r1, r4
 8008ad8:	1c5a      	adds	r2, r3, #1
 8008ada:	3145      	adds	r1, #69	; 0x45
 8008adc:	7809      	ldrb	r1, [r1, #0]
 8008ade:	18a2      	adds	r2, r4, r2
 8008ae0:	3243      	adds	r2, #67	; 0x43
 8008ae2:	3302      	adds	r3, #2
 8008ae4:	7011      	strb	r1, [r2, #0]
 8008ae6:	e7c1      	b.n	8008a6c <_printf_common+0x4c>
 8008ae8:	0022      	movs	r2, r4
 8008aea:	2301      	movs	r3, #1
 8008aec:	9901      	ldr	r1, [sp, #4]
 8008aee:	9800      	ldr	r0, [sp, #0]
 8008af0:	9e08      	ldr	r6, [sp, #32]
 8008af2:	321a      	adds	r2, #26
 8008af4:	47b0      	blx	r6
 8008af6:	1c43      	adds	r3, r0, #1
 8008af8:	d0e6      	beq.n	8008ac8 <_printf_common+0xa8>
 8008afa:	3701      	adds	r7, #1
 8008afc:	e7d1      	b.n	8008aa2 <_printf_common+0x82>
	...

08008b00 <_printf_i>:
 8008b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b02:	b08b      	sub	sp, #44	; 0x2c
 8008b04:	9206      	str	r2, [sp, #24]
 8008b06:	000a      	movs	r2, r1
 8008b08:	3243      	adds	r2, #67	; 0x43
 8008b0a:	9307      	str	r3, [sp, #28]
 8008b0c:	9005      	str	r0, [sp, #20]
 8008b0e:	9204      	str	r2, [sp, #16]
 8008b10:	7e0a      	ldrb	r2, [r1, #24]
 8008b12:	000c      	movs	r4, r1
 8008b14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b16:	2a78      	cmp	r2, #120	; 0x78
 8008b18:	d807      	bhi.n	8008b2a <_printf_i+0x2a>
 8008b1a:	2a62      	cmp	r2, #98	; 0x62
 8008b1c:	d809      	bhi.n	8008b32 <_printf_i+0x32>
 8008b1e:	2a00      	cmp	r2, #0
 8008b20:	d100      	bne.n	8008b24 <_printf_i+0x24>
 8008b22:	e0c1      	b.n	8008ca8 <_printf_i+0x1a8>
 8008b24:	2a58      	cmp	r2, #88	; 0x58
 8008b26:	d100      	bne.n	8008b2a <_printf_i+0x2a>
 8008b28:	e08c      	b.n	8008c44 <_printf_i+0x144>
 8008b2a:	0026      	movs	r6, r4
 8008b2c:	3642      	adds	r6, #66	; 0x42
 8008b2e:	7032      	strb	r2, [r6, #0]
 8008b30:	e022      	b.n	8008b78 <_printf_i+0x78>
 8008b32:	0010      	movs	r0, r2
 8008b34:	3863      	subs	r0, #99	; 0x63
 8008b36:	2815      	cmp	r0, #21
 8008b38:	d8f7      	bhi.n	8008b2a <_printf_i+0x2a>
 8008b3a:	f7f7 faf7 	bl	800012c <__gnu_thumb1_case_shi>
 8008b3e:	0016      	.short	0x0016
 8008b40:	fff6001f 	.word	0xfff6001f
 8008b44:	fff6fff6 	.word	0xfff6fff6
 8008b48:	001ffff6 	.word	0x001ffff6
 8008b4c:	fff6fff6 	.word	0xfff6fff6
 8008b50:	fff6fff6 	.word	0xfff6fff6
 8008b54:	003600a8 	.word	0x003600a8
 8008b58:	fff6009a 	.word	0xfff6009a
 8008b5c:	00b9fff6 	.word	0x00b9fff6
 8008b60:	0036fff6 	.word	0x0036fff6
 8008b64:	fff6fff6 	.word	0xfff6fff6
 8008b68:	009e      	.short	0x009e
 8008b6a:	0026      	movs	r6, r4
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	3642      	adds	r6, #66	; 0x42
 8008b70:	1d11      	adds	r1, r2, #4
 8008b72:	6019      	str	r1, [r3, #0]
 8008b74:	6813      	ldr	r3, [r2, #0]
 8008b76:	7033      	strb	r3, [r6, #0]
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e0a7      	b.n	8008ccc <_printf_i+0x1cc>
 8008b7c:	6808      	ldr	r0, [r1, #0]
 8008b7e:	6819      	ldr	r1, [r3, #0]
 8008b80:	1d0a      	adds	r2, r1, #4
 8008b82:	0605      	lsls	r5, r0, #24
 8008b84:	d50b      	bpl.n	8008b9e <_printf_i+0x9e>
 8008b86:	680d      	ldr	r5, [r1, #0]
 8008b88:	601a      	str	r2, [r3, #0]
 8008b8a:	2d00      	cmp	r5, #0
 8008b8c:	da03      	bge.n	8008b96 <_printf_i+0x96>
 8008b8e:	232d      	movs	r3, #45	; 0x2d
 8008b90:	9a04      	ldr	r2, [sp, #16]
 8008b92:	426d      	negs	r5, r5
 8008b94:	7013      	strb	r3, [r2, #0]
 8008b96:	4b61      	ldr	r3, [pc, #388]	; (8008d1c <_printf_i+0x21c>)
 8008b98:	270a      	movs	r7, #10
 8008b9a:	9303      	str	r3, [sp, #12]
 8008b9c:	e01b      	b.n	8008bd6 <_printf_i+0xd6>
 8008b9e:	680d      	ldr	r5, [r1, #0]
 8008ba0:	601a      	str	r2, [r3, #0]
 8008ba2:	0641      	lsls	r1, r0, #25
 8008ba4:	d5f1      	bpl.n	8008b8a <_printf_i+0x8a>
 8008ba6:	b22d      	sxth	r5, r5
 8008ba8:	e7ef      	b.n	8008b8a <_printf_i+0x8a>
 8008baa:	680d      	ldr	r5, [r1, #0]
 8008bac:	6819      	ldr	r1, [r3, #0]
 8008bae:	1d08      	adds	r0, r1, #4
 8008bb0:	6018      	str	r0, [r3, #0]
 8008bb2:	062e      	lsls	r6, r5, #24
 8008bb4:	d501      	bpl.n	8008bba <_printf_i+0xba>
 8008bb6:	680d      	ldr	r5, [r1, #0]
 8008bb8:	e003      	b.n	8008bc2 <_printf_i+0xc2>
 8008bba:	066d      	lsls	r5, r5, #25
 8008bbc:	d5fb      	bpl.n	8008bb6 <_printf_i+0xb6>
 8008bbe:	680d      	ldr	r5, [r1, #0]
 8008bc0:	b2ad      	uxth	r5, r5
 8008bc2:	4b56      	ldr	r3, [pc, #344]	; (8008d1c <_printf_i+0x21c>)
 8008bc4:	2708      	movs	r7, #8
 8008bc6:	9303      	str	r3, [sp, #12]
 8008bc8:	2a6f      	cmp	r2, #111	; 0x6f
 8008bca:	d000      	beq.n	8008bce <_printf_i+0xce>
 8008bcc:	3702      	adds	r7, #2
 8008bce:	0023      	movs	r3, r4
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	3343      	adds	r3, #67	; 0x43
 8008bd4:	701a      	strb	r2, [r3, #0]
 8008bd6:	6863      	ldr	r3, [r4, #4]
 8008bd8:	60a3      	str	r3, [r4, #8]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	db03      	blt.n	8008be6 <_printf_i+0xe6>
 8008bde:	2204      	movs	r2, #4
 8008be0:	6821      	ldr	r1, [r4, #0]
 8008be2:	4391      	bics	r1, r2
 8008be4:	6021      	str	r1, [r4, #0]
 8008be6:	2d00      	cmp	r5, #0
 8008be8:	d102      	bne.n	8008bf0 <_printf_i+0xf0>
 8008bea:	9e04      	ldr	r6, [sp, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00c      	beq.n	8008c0a <_printf_i+0x10a>
 8008bf0:	9e04      	ldr	r6, [sp, #16]
 8008bf2:	0028      	movs	r0, r5
 8008bf4:	0039      	movs	r1, r7
 8008bf6:	f7f7 fb29 	bl	800024c <__aeabi_uidivmod>
 8008bfa:	9b03      	ldr	r3, [sp, #12]
 8008bfc:	3e01      	subs	r6, #1
 8008bfe:	5c5b      	ldrb	r3, [r3, r1]
 8008c00:	7033      	strb	r3, [r6, #0]
 8008c02:	002b      	movs	r3, r5
 8008c04:	0005      	movs	r5, r0
 8008c06:	429f      	cmp	r7, r3
 8008c08:	d9f3      	bls.n	8008bf2 <_printf_i+0xf2>
 8008c0a:	2f08      	cmp	r7, #8
 8008c0c:	d109      	bne.n	8008c22 <_printf_i+0x122>
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	07db      	lsls	r3, r3, #31
 8008c12:	d506      	bpl.n	8008c22 <_printf_i+0x122>
 8008c14:	6863      	ldr	r3, [r4, #4]
 8008c16:	6922      	ldr	r2, [r4, #16]
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	dc02      	bgt.n	8008c22 <_printf_i+0x122>
 8008c1c:	2330      	movs	r3, #48	; 0x30
 8008c1e:	3e01      	subs	r6, #1
 8008c20:	7033      	strb	r3, [r6, #0]
 8008c22:	9b04      	ldr	r3, [sp, #16]
 8008c24:	1b9b      	subs	r3, r3, r6
 8008c26:	6123      	str	r3, [r4, #16]
 8008c28:	9b07      	ldr	r3, [sp, #28]
 8008c2a:	0021      	movs	r1, r4
 8008c2c:	9300      	str	r3, [sp, #0]
 8008c2e:	9805      	ldr	r0, [sp, #20]
 8008c30:	9b06      	ldr	r3, [sp, #24]
 8008c32:	aa09      	add	r2, sp, #36	; 0x24
 8008c34:	f7ff fef4 	bl	8008a20 <_printf_common>
 8008c38:	1c43      	adds	r3, r0, #1
 8008c3a:	d14c      	bne.n	8008cd6 <_printf_i+0x1d6>
 8008c3c:	2001      	movs	r0, #1
 8008c3e:	4240      	negs	r0, r0
 8008c40:	b00b      	add	sp, #44	; 0x2c
 8008c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c44:	3145      	adds	r1, #69	; 0x45
 8008c46:	700a      	strb	r2, [r1, #0]
 8008c48:	4a34      	ldr	r2, [pc, #208]	; (8008d1c <_printf_i+0x21c>)
 8008c4a:	9203      	str	r2, [sp, #12]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	6821      	ldr	r1, [r4, #0]
 8008c50:	ca20      	ldmia	r2!, {r5}
 8008c52:	601a      	str	r2, [r3, #0]
 8008c54:	0608      	lsls	r0, r1, #24
 8008c56:	d516      	bpl.n	8008c86 <_printf_i+0x186>
 8008c58:	07cb      	lsls	r3, r1, #31
 8008c5a:	d502      	bpl.n	8008c62 <_printf_i+0x162>
 8008c5c:	2320      	movs	r3, #32
 8008c5e:	4319      	orrs	r1, r3
 8008c60:	6021      	str	r1, [r4, #0]
 8008c62:	2710      	movs	r7, #16
 8008c64:	2d00      	cmp	r5, #0
 8008c66:	d1b2      	bne.n	8008bce <_printf_i+0xce>
 8008c68:	2320      	movs	r3, #32
 8008c6a:	6822      	ldr	r2, [r4, #0]
 8008c6c:	439a      	bics	r2, r3
 8008c6e:	6022      	str	r2, [r4, #0]
 8008c70:	e7ad      	b.n	8008bce <_printf_i+0xce>
 8008c72:	2220      	movs	r2, #32
 8008c74:	6809      	ldr	r1, [r1, #0]
 8008c76:	430a      	orrs	r2, r1
 8008c78:	6022      	str	r2, [r4, #0]
 8008c7a:	0022      	movs	r2, r4
 8008c7c:	2178      	movs	r1, #120	; 0x78
 8008c7e:	3245      	adds	r2, #69	; 0x45
 8008c80:	7011      	strb	r1, [r2, #0]
 8008c82:	4a27      	ldr	r2, [pc, #156]	; (8008d20 <_printf_i+0x220>)
 8008c84:	e7e1      	b.n	8008c4a <_printf_i+0x14a>
 8008c86:	0648      	lsls	r0, r1, #25
 8008c88:	d5e6      	bpl.n	8008c58 <_printf_i+0x158>
 8008c8a:	b2ad      	uxth	r5, r5
 8008c8c:	e7e4      	b.n	8008c58 <_printf_i+0x158>
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	680d      	ldr	r5, [r1, #0]
 8008c92:	1d10      	adds	r0, r2, #4
 8008c94:	6949      	ldr	r1, [r1, #20]
 8008c96:	6018      	str	r0, [r3, #0]
 8008c98:	6813      	ldr	r3, [r2, #0]
 8008c9a:	062e      	lsls	r6, r5, #24
 8008c9c:	d501      	bpl.n	8008ca2 <_printf_i+0x1a2>
 8008c9e:	6019      	str	r1, [r3, #0]
 8008ca0:	e002      	b.n	8008ca8 <_printf_i+0x1a8>
 8008ca2:	066d      	lsls	r5, r5, #25
 8008ca4:	d5fb      	bpl.n	8008c9e <_printf_i+0x19e>
 8008ca6:	8019      	strh	r1, [r3, #0]
 8008ca8:	2300      	movs	r3, #0
 8008caa:	9e04      	ldr	r6, [sp, #16]
 8008cac:	6123      	str	r3, [r4, #16]
 8008cae:	e7bb      	b.n	8008c28 <_printf_i+0x128>
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	1d11      	adds	r1, r2, #4
 8008cb4:	6019      	str	r1, [r3, #0]
 8008cb6:	6816      	ldr	r6, [r2, #0]
 8008cb8:	2100      	movs	r1, #0
 8008cba:	0030      	movs	r0, r6
 8008cbc:	6862      	ldr	r2, [r4, #4]
 8008cbe:	f002 ff07 	bl	800bad0 <memchr>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d001      	beq.n	8008cca <_printf_i+0x1ca>
 8008cc6:	1b80      	subs	r0, r0, r6
 8008cc8:	6060      	str	r0, [r4, #4]
 8008cca:	6863      	ldr	r3, [r4, #4]
 8008ccc:	6123      	str	r3, [r4, #16]
 8008cce:	2300      	movs	r3, #0
 8008cd0:	9a04      	ldr	r2, [sp, #16]
 8008cd2:	7013      	strb	r3, [r2, #0]
 8008cd4:	e7a8      	b.n	8008c28 <_printf_i+0x128>
 8008cd6:	6923      	ldr	r3, [r4, #16]
 8008cd8:	0032      	movs	r2, r6
 8008cda:	9906      	ldr	r1, [sp, #24]
 8008cdc:	9805      	ldr	r0, [sp, #20]
 8008cde:	9d07      	ldr	r5, [sp, #28]
 8008ce0:	47a8      	blx	r5
 8008ce2:	1c43      	adds	r3, r0, #1
 8008ce4:	d0aa      	beq.n	8008c3c <_printf_i+0x13c>
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	079b      	lsls	r3, r3, #30
 8008cea:	d415      	bmi.n	8008d18 <_printf_i+0x218>
 8008cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cee:	68e0      	ldr	r0, [r4, #12]
 8008cf0:	4298      	cmp	r0, r3
 8008cf2:	daa5      	bge.n	8008c40 <_printf_i+0x140>
 8008cf4:	0018      	movs	r0, r3
 8008cf6:	e7a3      	b.n	8008c40 <_printf_i+0x140>
 8008cf8:	0022      	movs	r2, r4
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	9906      	ldr	r1, [sp, #24]
 8008cfe:	9805      	ldr	r0, [sp, #20]
 8008d00:	9e07      	ldr	r6, [sp, #28]
 8008d02:	3219      	adds	r2, #25
 8008d04:	47b0      	blx	r6
 8008d06:	1c43      	adds	r3, r0, #1
 8008d08:	d098      	beq.n	8008c3c <_printf_i+0x13c>
 8008d0a:	3501      	adds	r5, #1
 8008d0c:	68e3      	ldr	r3, [r4, #12]
 8008d0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d10:	1a9b      	subs	r3, r3, r2
 8008d12:	42ab      	cmp	r3, r5
 8008d14:	dcf0      	bgt.n	8008cf8 <_printf_i+0x1f8>
 8008d16:	e7e9      	b.n	8008cec <_printf_i+0x1ec>
 8008d18:	2500      	movs	r5, #0
 8008d1a:	e7f7      	b.n	8008d0c <_printf_i+0x20c>
 8008d1c:	0800d5ee 	.word	0x0800d5ee
 8008d20:	0800d5ff 	.word	0x0800d5ff

08008d24 <_scanf_float>:
 8008d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d26:	b08b      	sub	sp, #44	; 0x2c
 8008d28:	0015      	movs	r5, r2
 8008d2a:	9001      	str	r0, [sp, #4]
 8008d2c:	22ae      	movs	r2, #174	; 0xae
 8008d2e:	2000      	movs	r0, #0
 8008d30:	9306      	str	r3, [sp, #24]
 8008d32:	688b      	ldr	r3, [r1, #8]
 8008d34:	000e      	movs	r6, r1
 8008d36:	1e59      	subs	r1, r3, #1
 8008d38:	0052      	lsls	r2, r2, #1
 8008d3a:	9005      	str	r0, [sp, #20]
 8008d3c:	4291      	cmp	r1, r2
 8008d3e:	d905      	bls.n	8008d4c <_scanf_float+0x28>
 8008d40:	3b5e      	subs	r3, #94	; 0x5e
 8008d42:	3bff      	subs	r3, #255	; 0xff
 8008d44:	9305      	str	r3, [sp, #20]
 8008d46:	235e      	movs	r3, #94	; 0x5e
 8008d48:	33ff      	adds	r3, #255	; 0xff
 8008d4a:	60b3      	str	r3, [r6, #8]
 8008d4c:	23f0      	movs	r3, #240	; 0xf0
 8008d4e:	6832      	ldr	r2, [r6, #0]
 8008d50:	00db      	lsls	r3, r3, #3
 8008d52:	4313      	orrs	r3, r2
 8008d54:	6033      	str	r3, [r6, #0]
 8008d56:	0033      	movs	r3, r6
 8008d58:	2400      	movs	r4, #0
 8008d5a:	331c      	adds	r3, #28
 8008d5c:	001f      	movs	r7, r3
 8008d5e:	9303      	str	r3, [sp, #12]
 8008d60:	9402      	str	r4, [sp, #8]
 8008d62:	9408      	str	r4, [sp, #32]
 8008d64:	9407      	str	r4, [sp, #28]
 8008d66:	9400      	str	r4, [sp, #0]
 8008d68:	9404      	str	r4, [sp, #16]
 8008d6a:	68b2      	ldr	r2, [r6, #8]
 8008d6c:	2a00      	cmp	r2, #0
 8008d6e:	d00a      	beq.n	8008d86 <_scanf_float+0x62>
 8008d70:	682b      	ldr	r3, [r5, #0]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	2b4e      	cmp	r3, #78	; 0x4e
 8008d76:	d844      	bhi.n	8008e02 <_scanf_float+0xde>
 8008d78:	0018      	movs	r0, r3
 8008d7a:	2b40      	cmp	r3, #64	; 0x40
 8008d7c:	d82c      	bhi.n	8008dd8 <_scanf_float+0xb4>
 8008d7e:	382b      	subs	r0, #43	; 0x2b
 8008d80:	b2c1      	uxtb	r1, r0
 8008d82:	290e      	cmp	r1, #14
 8008d84:	d92a      	bls.n	8008ddc <_scanf_float+0xb8>
 8008d86:	9b00      	ldr	r3, [sp, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d003      	beq.n	8008d94 <_scanf_float+0x70>
 8008d8c:	6832      	ldr	r2, [r6, #0]
 8008d8e:	4ba4      	ldr	r3, [pc, #656]	; (8009020 <_scanf_float+0x2fc>)
 8008d90:	4013      	ands	r3, r2
 8008d92:	6033      	str	r3, [r6, #0]
 8008d94:	9b02      	ldr	r3, [sp, #8]
 8008d96:	3b01      	subs	r3, #1
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d900      	bls.n	8008d9e <_scanf_float+0x7a>
 8008d9c:	e0f9      	b.n	8008f92 <_scanf_float+0x26e>
 8008d9e:	24be      	movs	r4, #190	; 0xbe
 8008da0:	0064      	lsls	r4, r4, #1
 8008da2:	9b03      	ldr	r3, [sp, #12]
 8008da4:	429f      	cmp	r7, r3
 8008da6:	d900      	bls.n	8008daa <_scanf_float+0x86>
 8008da8:	e0e9      	b.n	8008f7e <_scanf_float+0x25a>
 8008daa:	2301      	movs	r3, #1
 8008dac:	9302      	str	r3, [sp, #8]
 8008dae:	e185      	b.n	80090bc <_scanf_float+0x398>
 8008db0:	0018      	movs	r0, r3
 8008db2:	3861      	subs	r0, #97	; 0x61
 8008db4:	280d      	cmp	r0, #13
 8008db6:	d8e6      	bhi.n	8008d86 <_scanf_float+0x62>
 8008db8:	f7f7 f9b8 	bl	800012c <__gnu_thumb1_case_shi>
 8008dbc:	ffe50083 	.word	0xffe50083
 8008dc0:	ffe5ffe5 	.word	0xffe5ffe5
 8008dc4:	00a200b6 	.word	0x00a200b6
 8008dc8:	ffe5ffe5 	.word	0xffe5ffe5
 8008dcc:	ffe50089 	.word	0xffe50089
 8008dd0:	ffe5ffe5 	.word	0xffe5ffe5
 8008dd4:	0065ffe5 	.word	0x0065ffe5
 8008dd8:	3841      	subs	r0, #65	; 0x41
 8008dda:	e7eb      	b.n	8008db4 <_scanf_float+0x90>
 8008ddc:	280e      	cmp	r0, #14
 8008dde:	d8d2      	bhi.n	8008d86 <_scanf_float+0x62>
 8008de0:	f7f7 f9a4 	bl	800012c <__gnu_thumb1_case_shi>
 8008de4:	ffd1004b 	.word	0xffd1004b
 8008de8:	0098004b 	.word	0x0098004b
 8008dec:	0020ffd1 	.word	0x0020ffd1
 8008df0:	00400040 	.word	0x00400040
 8008df4:	00400040 	.word	0x00400040
 8008df8:	00400040 	.word	0x00400040
 8008dfc:	00400040 	.word	0x00400040
 8008e00:	0040      	.short	0x0040
 8008e02:	2b6e      	cmp	r3, #110	; 0x6e
 8008e04:	d809      	bhi.n	8008e1a <_scanf_float+0xf6>
 8008e06:	2b60      	cmp	r3, #96	; 0x60
 8008e08:	d8d2      	bhi.n	8008db0 <_scanf_float+0x8c>
 8008e0a:	2b54      	cmp	r3, #84	; 0x54
 8008e0c:	d07d      	beq.n	8008f0a <_scanf_float+0x1e6>
 8008e0e:	2b59      	cmp	r3, #89	; 0x59
 8008e10:	d1b9      	bne.n	8008d86 <_scanf_float+0x62>
 8008e12:	2c07      	cmp	r4, #7
 8008e14:	d1b7      	bne.n	8008d86 <_scanf_float+0x62>
 8008e16:	2408      	movs	r4, #8
 8008e18:	e02c      	b.n	8008e74 <_scanf_float+0x150>
 8008e1a:	2b74      	cmp	r3, #116	; 0x74
 8008e1c:	d075      	beq.n	8008f0a <_scanf_float+0x1e6>
 8008e1e:	2b79      	cmp	r3, #121	; 0x79
 8008e20:	d0f7      	beq.n	8008e12 <_scanf_float+0xee>
 8008e22:	e7b0      	b.n	8008d86 <_scanf_float+0x62>
 8008e24:	6831      	ldr	r1, [r6, #0]
 8008e26:	05c8      	lsls	r0, r1, #23
 8008e28:	d51c      	bpl.n	8008e64 <_scanf_float+0x140>
 8008e2a:	2380      	movs	r3, #128	; 0x80
 8008e2c:	4399      	bics	r1, r3
 8008e2e:	9b00      	ldr	r3, [sp, #0]
 8008e30:	6031      	str	r1, [r6, #0]
 8008e32:	3301      	adds	r3, #1
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	9b05      	ldr	r3, [sp, #20]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d003      	beq.n	8008e44 <_scanf_float+0x120>
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	3201      	adds	r2, #1
 8008e40:	9305      	str	r3, [sp, #20]
 8008e42:	60b2      	str	r2, [r6, #8]
 8008e44:	68b3      	ldr	r3, [r6, #8]
 8008e46:	3b01      	subs	r3, #1
 8008e48:	60b3      	str	r3, [r6, #8]
 8008e4a:	6933      	ldr	r3, [r6, #16]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	6133      	str	r3, [r6, #16]
 8008e50:	686b      	ldr	r3, [r5, #4]
 8008e52:	3b01      	subs	r3, #1
 8008e54:	606b      	str	r3, [r5, #4]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	dc00      	bgt.n	8008e5c <_scanf_float+0x138>
 8008e5a:	e086      	b.n	8008f6a <_scanf_float+0x246>
 8008e5c:	682b      	ldr	r3, [r5, #0]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	602b      	str	r3, [r5, #0]
 8008e62:	e782      	b.n	8008d6a <_scanf_float+0x46>
 8008e64:	9a02      	ldr	r2, [sp, #8]
 8008e66:	1912      	adds	r2, r2, r4
 8008e68:	2a00      	cmp	r2, #0
 8008e6a:	d18c      	bne.n	8008d86 <_scanf_float+0x62>
 8008e6c:	4a6d      	ldr	r2, [pc, #436]	; (8009024 <_scanf_float+0x300>)
 8008e6e:	6831      	ldr	r1, [r6, #0]
 8008e70:	400a      	ands	r2, r1
 8008e72:	6032      	str	r2, [r6, #0]
 8008e74:	703b      	strb	r3, [r7, #0]
 8008e76:	3701      	adds	r7, #1
 8008e78:	e7e4      	b.n	8008e44 <_scanf_float+0x120>
 8008e7a:	2180      	movs	r1, #128	; 0x80
 8008e7c:	6832      	ldr	r2, [r6, #0]
 8008e7e:	420a      	tst	r2, r1
 8008e80:	d081      	beq.n	8008d86 <_scanf_float+0x62>
 8008e82:	438a      	bics	r2, r1
 8008e84:	e7f5      	b.n	8008e72 <_scanf_float+0x14e>
 8008e86:	9a02      	ldr	r2, [sp, #8]
 8008e88:	2a00      	cmp	r2, #0
 8008e8a:	d10f      	bne.n	8008eac <_scanf_float+0x188>
 8008e8c:	9a00      	ldr	r2, [sp, #0]
 8008e8e:	2a00      	cmp	r2, #0
 8008e90:	d10f      	bne.n	8008eb2 <_scanf_float+0x18e>
 8008e92:	6832      	ldr	r2, [r6, #0]
 8008e94:	21e0      	movs	r1, #224	; 0xe0
 8008e96:	0010      	movs	r0, r2
 8008e98:	00c9      	lsls	r1, r1, #3
 8008e9a:	4008      	ands	r0, r1
 8008e9c:	4288      	cmp	r0, r1
 8008e9e:	d108      	bne.n	8008eb2 <_scanf_float+0x18e>
 8008ea0:	4961      	ldr	r1, [pc, #388]	; (8009028 <_scanf_float+0x304>)
 8008ea2:	400a      	ands	r2, r1
 8008ea4:	6032      	str	r2, [r6, #0]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	9202      	str	r2, [sp, #8]
 8008eaa:	e7e3      	b.n	8008e74 <_scanf_float+0x150>
 8008eac:	9a02      	ldr	r2, [sp, #8]
 8008eae:	2a02      	cmp	r2, #2
 8008eb0:	d059      	beq.n	8008f66 <_scanf_float+0x242>
 8008eb2:	2c01      	cmp	r4, #1
 8008eb4:	d002      	beq.n	8008ebc <_scanf_float+0x198>
 8008eb6:	2c04      	cmp	r4, #4
 8008eb8:	d000      	beq.n	8008ebc <_scanf_float+0x198>
 8008eba:	e764      	b.n	8008d86 <_scanf_float+0x62>
 8008ebc:	3401      	adds	r4, #1
 8008ebe:	b2e4      	uxtb	r4, r4
 8008ec0:	e7d8      	b.n	8008e74 <_scanf_float+0x150>
 8008ec2:	9a02      	ldr	r2, [sp, #8]
 8008ec4:	2a01      	cmp	r2, #1
 8008ec6:	d000      	beq.n	8008eca <_scanf_float+0x1a6>
 8008ec8:	e75d      	b.n	8008d86 <_scanf_float+0x62>
 8008eca:	2202      	movs	r2, #2
 8008ecc:	e7ec      	b.n	8008ea8 <_scanf_float+0x184>
 8008ece:	2c00      	cmp	r4, #0
 8008ed0:	d110      	bne.n	8008ef4 <_scanf_float+0x1d0>
 8008ed2:	9a00      	ldr	r2, [sp, #0]
 8008ed4:	2a00      	cmp	r2, #0
 8008ed6:	d000      	beq.n	8008eda <_scanf_float+0x1b6>
 8008ed8:	e758      	b.n	8008d8c <_scanf_float+0x68>
 8008eda:	6832      	ldr	r2, [r6, #0]
 8008edc:	21e0      	movs	r1, #224	; 0xe0
 8008ede:	0010      	movs	r0, r2
 8008ee0:	00c9      	lsls	r1, r1, #3
 8008ee2:	4008      	ands	r0, r1
 8008ee4:	4288      	cmp	r0, r1
 8008ee6:	d000      	beq.n	8008eea <_scanf_float+0x1c6>
 8008ee8:	e754      	b.n	8008d94 <_scanf_float+0x70>
 8008eea:	494f      	ldr	r1, [pc, #316]	; (8009028 <_scanf_float+0x304>)
 8008eec:	3401      	adds	r4, #1
 8008eee:	400a      	ands	r2, r1
 8008ef0:	6032      	str	r2, [r6, #0]
 8008ef2:	e7bf      	b.n	8008e74 <_scanf_float+0x150>
 8008ef4:	21fd      	movs	r1, #253	; 0xfd
 8008ef6:	1ee2      	subs	r2, r4, #3
 8008ef8:	420a      	tst	r2, r1
 8008efa:	d000      	beq.n	8008efe <_scanf_float+0x1da>
 8008efc:	e743      	b.n	8008d86 <_scanf_float+0x62>
 8008efe:	e7dd      	b.n	8008ebc <_scanf_float+0x198>
 8008f00:	2c02      	cmp	r4, #2
 8008f02:	d000      	beq.n	8008f06 <_scanf_float+0x1e2>
 8008f04:	e73f      	b.n	8008d86 <_scanf_float+0x62>
 8008f06:	2403      	movs	r4, #3
 8008f08:	e7b4      	b.n	8008e74 <_scanf_float+0x150>
 8008f0a:	2c06      	cmp	r4, #6
 8008f0c:	d000      	beq.n	8008f10 <_scanf_float+0x1ec>
 8008f0e:	e73a      	b.n	8008d86 <_scanf_float+0x62>
 8008f10:	2407      	movs	r4, #7
 8008f12:	e7af      	b.n	8008e74 <_scanf_float+0x150>
 8008f14:	6832      	ldr	r2, [r6, #0]
 8008f16:	0591      	lsls	r1, r2, #22
 8008f18:	d400      	bmi.n	8008f1c <_scanf_float+0x1f8>
 8008f1a:	e734      	b.n	8008d86 <_scanf_float+0x62>
 8008f1c:	4943      	ldr	r1, [pc, #268]	; (800902c <_scanf_float+0x308>)
 8008f1e:	400a      	ands	r2, r1
 8008f20:	6032      	str	r2, [r6, #0]
 8008f22:	9a00      	ldr	r2, [sp, #0]
 8008f24:	9204      	str	r2, [sp, #16]
 8008f26:	e7a5      	b.n	8008e74 <_scanf_float+0x150>
 8008f28:	21a0      	movs	r1, #160	; 0xa0
 8008f2a:	2080      	movs	r0, #128	; 0x80
 8008f2c:	6832      	ldr	r2, [r6, #0]
 8008f2e:	00c9      	lsls	r1, r1, #3
 8008f30:	4011      	ands	r1, r2
 8008f32:	00c0      	lsls	r0, r0, #3
 8008f34:	4281      	cmp	r1, r0
 8008f36:	d006      	beq.n	8008f46 <_scanf_float+0x222>
 8008f38:	4202      	tst	r2, r0
 8008f3a:	d100      	bne.n	8008f3e <_scanf_float+0x21a>
 8008f3c:	e723      	b.n	8008d86 <_scanf_float+0x62>
 8008f3e:	9900      	ldr	r1, [sp, #0]
 8008f40:	2900      	cmp	r1, #0
 8008f42:	d100      	bne.n	8008f46 <_scanf_float+0x222>
 8008f44:	e726      	b.n	8008d94 <_scanf_float+0x70>
 8008f46:	0591      	lsls	r1, r2, #22
 8008f48:	d404      	bmi.n	8008f54 <_scanf_float+0x230>
 8008f4a:	9900      	ldr	r1, [sp, #0]
 8008f4c:	9804      	ldr	r0, [sp, #16]
 8008f4e:	9708      	str	r7, [sp, #32]
 8008f50:	1a09      	subs	r1, r1, r0
 8008f52:	9107      	str	r1, [sp, #28]
 8008f54:	4934      	ldr	r1, [pc, #208]	; (8009028 <_scanf_float+0x304>)
 8008f56:	400a      	ands	r2, r1
 8008f58:	21c0      	movs	r1, #192	; 0xc0
 8008f5a:	0049      	lsls	r1, r1, #1
 8008f5c:	430a      	orrs	r2, r1
 8008f5e:	6032      	str	r2, [r6, #0]
 8008f60:	2200      	movs	r2, #0
 8008f62:	9200      	str	r2, [sp, #0]
 8008f64:	e786      	b.n	8008e74 <_scanf_float+0x150>
 8008f66:	2203      	movs	r2, #3
 8008f68:	e79e      	b.n	8008ea8 <_scanf_float+0x184>
 8008f6a:	23c0      	movs	r3, #192	; 0xc0
 8008f6c:	005b      	lsls	r3, r3, #1
 8008f6e:	0029      	movs	r1, r5
 8008f70:	58f3      	ldr	r3, [r6, r3]
 8008f72:	9801      	ldr	r0, [sp, #4]
 8008f74:	4798      	blx	r3
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d100      	bne.n	8008f7c <_scanf_float+0x258>
 8008f7a:	e6f6      	b.n	8008d6a <_scanf_float+0x46>
 8008f7c:	e703      	b.n	8008d86 <_scanf_float+0x62>
 8008f7e:	3f01      	subs	r7, #1
 8008f80:	5933      	ldr	r3, [r6, r4]
 8008f82:	002a      	movs	r2, r5
 8008f84:	7839      	ldrb	r1, [r7, #0]
 8008f86:	9801      	ldr	r0, [sp, #4]
 8008f88:	4798      	blx	r3
 8008f8a:	6933      	ldr	r3, [r6, #16]
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	6133      	str	r3, [r6, #16]
 8008f90:	e707      	b.n	8008da2 <_scanf_float+0x7e>
 8008f92:	1e63      	subs	r3, r4, #1
 8008f94:	2b06      	cmp	r3, #6
 8008f96:	d80e      	bhi.n	8008fb6 <_scanf_float+0x292>
 8008f98:	9702      	str	r7, [sp, #8]
 8008f9a:	2c02      	cmp	r4, #2
 8008f9c:	d920      	bls.n	8008fe0 <_scanf_float+0x2bc>
 8008f9e:	1be3      	subs	r3, r4, r7
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	9305      	str	r3, [sp, #20]
 8008fa4:	9b02      	ldr	r3, [sp, #8]
 8008fa6:	9a05      	ldr	r2, [sp, #20]
 8008fa8:	189b      	adds	r3, r3, r2
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	2b03      	cmp	r3, #3
 8008fae:	d827      	bhi.n	8009000 <_scanf_float+0x2dc>
 8008fb0:	3c03      	subs	r4, #3
 8008fb2:	b2e4      	uxtb	r4, r4
 8008fb4:	1b3f      	subs	r7, r7, r4
 8008fb6:	6833      	ldr	r3, [r6, #0]
 8008fb8:	05da      	lsls	r2, r3, #23
 8008fba:	d554      	bpl.n	8009066 <_scanf_float+0x342>
 8008fbc:	055b      	lsls	r3, r3, #21
 8008fbe:	d537      	bpl.n	8009030 <_scanf_float+0x30c>
 8008fc0:	24be      	movs	r4, #190	; 0xbe
 8008fc2:	0064      	lsls	r4, r4, #1
 8008fc4:	9b03      	ldr	r3, [sp, #12]
 8008fc6:	429f      	cmp	r7, r3
 8008fc8:	d800      	bhi.n	8008fcc <_scanf_float+0x2a8>
 8008fca:	e6ee      	b.n	8008daa <_scanf_float+0x86>
 8008fcc:	3f01      	subs	r7, #1
 8008fce:	5933      	ldr	r3, [r6, r4]
 8008fd0:	002a      	movs	r2, r5
 8008fd2:	7839      	ldrb	r1, [r7, #0]
 8008fd4:	9801      	ldr	r0, [sp, #4]
 8008fd6:	4798      	blx	r3
 8008fd8:	6933      	ldr	r3, [r6, #16]
 8008fda:	3b01      	subs	r3, #1
 8008fdc:	6133      	str	r3, [r6, #16]
 8008fde:	e7f1      	b.n	8008fc4 <_scanf_float+0x2a0>
 8008fe0:	24be      	movs	r4, #190	; 0xbe
 8008fe2:	0064      	lsls	r4, r4, #1
 8008fe4:	9b03      	ldr	r3, [sp, #12]
 8008fe6:	429f      	cmp	r7, r3
 8008fe8:	d800      	bhi.n	8008fec <_scanf_float+0x2c8>
 8008fea:	e6de      	b.n	8008daa <_scanf_float+0x86>
 8008fec:	3f01      	subs	r7, #1
 8008fee:	5933      	ldr	r3, [r6, r4]
 8008ff0:	002a      	movs	r2, r5
 8008ff2:	7839      	ldrb	r1, [r7, #0]
 8008ff4:	9801      	ldr	r0, [sp, #4]
 8008ff6:	4798      	blx	r3
 8008ff8:	6933      	ldr	r3, [r6, #16]
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	6133      	str	r3, [r6, #16]
 8008ffe:	e7f1      	b.n	8008fe4 <_scanf_float+0x2c0>
 8009000:	9b02      	ldr	r3, [sp, #8]
 8009002:	002a      	movs	r2, r5
 8009004:	3b01      	subs	r3, #1
 8009006:	7819      	ldrb	r1, [r3, #0]
 8009008:	9302      	str	r3, [sp, #8]
 800900a:	23be      	movs	r3, #190	; 0xbe
 800900c:	005b      	lsls	r3, r3, #1
 800900e:	58f3      	ldr	r3, [r6, r3]
 8009010:	9801      	ldr	r0, [sp, #4]
 8009012:	9309      	str	r3, [sp, #36]	; 0x24
 8009014:	4798      	blx	r3
 8009016:	6933      	ldr	r3, [r6, #16]
 8009018:	3b01      	subs	r3, #1
 800901a:	6133      	str	r3, [r6, #16]
 800901c:	e7c2      	b.n	8008fa4 <_scanf_float+0x280>
 800901e:	46c0      	nop			; (mov r8, r8)
 8009020:	fffffeff 	.word	0xfffffeff
 8009024:	fffffe7f 	.word	0xfffffe7f
 8009028:	fffff87f 	.word	0xfffff87f
 800902c:	fffffd7f 	.word	0xfffffd7f
 8009030:	6933      	ldr	r3, [r6, #16]
 8009032:	1e7c      	subs	r4, r7, #1
 8009034:	7821      	ldrb	r1, [r4, #0]
 8009036:	3b01      	subs	r3, #1
 8009038:	6133      	str	r3, [r6, #16]
 800903a:	2965      	cmp	r1, #101	; 0x65
 800903c:	d00c      	beq.n	8009058 <_scanf_float+0x334>
 800903e:	2945      	cmp	r1, #69	; 0x45
 8009040:	d00a      	beq.n	8009058 <_scanf_float+0x334>
 8009042:	23be      	movs	r3, #190	; 0xbe
 8009044:	005b      	lsls	r3, r3, #1
 8009046:	58f3      	ldr	r3, [r6, r3]
 8009048:	002a      	movs	r2, r5
 800904a:	9801      	ldr	r0, [sp, #4]
 800904c:	4798      	blx	r3
 800904e:	6933      	ldr	r3, [r6, #16]
 8009050:	1ebc      	subs	r4, r7, #2
 8009052:	3b01      	subs	r3, #1
 8009054:	7821      	ldrb	r1, [r4, #0]
 8009056:	6133      	str	r3, [r6, #16]
 8009058:	23be      	movs	r3, #190	; 0xbe
 800905a:	005b      	lsls	r3, r3, #1
 800905c:	002a      	movs	r2, r5
 800905e:	58f3      	ldr	r3, [r6, r3]
 8009060:	9801      	ldr	r0, [sp, #4]
 8009062:	4798      	blx	r3
 8009064:	0027      	movs	r7, r4
 8009066:	6832      	ldr	r2, [r6, #0]
 8009068:	2310      	movs	r3, #16
 800906a:	0011      	movs	r1, r2
 800906c:	4019      	ands	r1, r3
 800906e:	9102      	str	r1, [sp, #8]
 8009070:	421a      	tst	r2, r3
 8009072:	d158      	bne.n	8009126 <_scanf_float+0x402>
 8009074:	23c0      	movs	r3, #192	; 0xc0
 8009076:	7039      	strb	r1, [r7, #0]
 8009078:	6832      	ldr	r2, [r6, #0]
 800907a:	00db      	lsls	r3, r3, #3
 800907c:	4013      	ands	r3, r2
 800907e:	2280      	movs	r2, #128	; 0x80
 8009080:	00d2      	lsls	r2, r2, #3
 8009082:	4293      	cmp	r3, r2
 8009084:	d11d      	bne.n	80090c2 <_scanf_float+0x39e>
 8009086:	9b04      	ldr	r3, [sp, #16]
 8009088:	9a00      	ldr	r2, [sp, #0]
 800908a:	9900      	ldr	r1, [sp, #0]
 800908c:	1a9a      	subs	r2, r3, r2
 800908e:	428b      	cmp	r3, r1
 8009090:	d124      	bne.n	80090dc <_scanf_float+0x3b8>
 8009092:	2200      	movs	r2, #0
 8009094:	9903      	ldr	r1, [sp, #12]
 8009096:	9801      	ldr	r0, [sp, #4]
 8009098:	f000 ff44 	bl	8009f24 <_strtod_r>
 800909c:	9b06      	ldr	r3, [sp, #24]
 800909e:	000d      	movs	r5, r1
 80090a0:	6831      	ldr	r1, [r6, #0]
 80090a2:	0004      	movs	r4, r0
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	078a      	lsls	r2, r1, #30
 80090a8:	d525      	bpl.n	80090f6 <_scanf_float+0x3d2>
 80090aa:	1d1a      	adds	r2, r3, #4
 80090ac:	9906      	ldr	r1, [sp, #24]
 80090ae:	600a      	str	r2, [r1, #0]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	601c      	str	r4, [r3, #0]
 80090b4:	605d      	str	r5, [r3, #4]
 80090b6:	68f3      	ldr	r3, [r6, #12]
 80090b8:	3301      	adds	r3, #1
 80090ba:	60f3      	str	r3, [r6, #12]
 80090bc:	9802      	ldr	r0, [sp, #8]
 80090be:	b00b      	add	sp, #44	; 0x2c
 80090c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090c2:	9b07      	ldr	r3, [sp, #28]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d0e4      	beq.n	8009092 <_scanf_float+0x36e>
 80090c8:	9b08      	ldr	r3, [sp, #32]
 80090ca:	9a02      	ldr	r2, [sp, #8]
 80090cc:	1c59      	adds	r1, r3, #1
 80090ce:	9801      	ldr	r0, [sp, #4]
 80090d0:	230a      	movs	r3, #10
 80090d2:	f000 ffbd 	bl	800a050 <_strtol_r>
 80090d6:	9b07      	ldr	r3, [sp, #28]
 80090d8:	9f08      	ldr	r7, [sp, #32]
 80090da:	1ac2      	subs	r2, r0, r3
 80090dc:	0033      	movs	r3, r6
 80090de:	3370      	adds	r3, #112	; 0x70
 80090e0:	33ff      	adds	r3, #255	; 0xff
 80090e2:	429f      	cmp	r7, r3
 80090e4:	d302      	bcc.n	80090ec <_scanf_float+0x3c8>
 80090e6:	0037      	movs	r7, r6
 80090e8:	376f      	adds	r7, #111	; 0x6f
 80090ea:	37ff      	adds	r7, #255	; 0xff
 80090ec:	0038      	movs	r0, r7
 80090ee:	490f      	ldr	r1, [pc, #60]	; (800912c <_scanf_float+0x408>)
 80090f0:	f000 f8cc 	bl	800928c <siprintf>
 80090f4:	e7cd      	b.n	8009092 <_scanf_float+0x36e>
 80090f6:	1d1a      	adds	r2, r3, #4
 80090f8:	0749      	lsls	r1, r1, #29
 80090fa:	d4d7      	bmi.n	80090ac <_scanf_float+0x388>
 80090fc:	9906      	ldr	r1, [sp, #24]
 80090fe:	0020      	movs	r0, r4
 8009100:	600a      	str	r2, [r1, #0]
 8009102:	681f      	ldr	r7, [r3, #0]
 8009104:	0022      	movs	r2, r4
 8009106:	002b      	movs	r3, r5
 8009108:	0029      	movs	r1, r5
 800910a:	f7f8 ff7b 	bl	8002004 <__aeabi_dcmpun>
 800910e:	2800      	cmp	r0, #0
 8009110:	d004      	beq.n	800911c <_scanf_float+0x3f8>
 8009112:	4807      	ldr	r0, [pc, #28]	; (8009130 <_scanf_float+0x40c>)
 8009114:	f000 f8b6 	bl	8009284 <nanf>
 8009118:	6038      	str	r0, [r7, #0]
 800911a:	e7cc      	b.n	80090b6 <_scanf_float+0x392>
 800911c:	0020      	movs	r0, r4
 800911e:	0029      	movs	r1, r5
 8009120:	f7f9 f862 	bl	80021e8 <__aeabi_d2f>
 8009124:	e7f8      	b.n	8009118 <_scanf_float+0x3f4>
 8009126:	2300      	movs	r3, #0
 8009128:	e640      	b.n	8008dac <_scanf_float+0x88>
 800912a:	46c0      	nop			; (mov r8, r8)
 800912c:	0800d610 	.word	0x0800d610
 8009130:	0800da80 	.word	0x0800da80

08009134 <iprintf>:
 8009134:	b40f      	push	{r0, r1, r2, r3}
 8009136:	4b0b      	ldr	r3, [pc, #44]	; (8009164 <iprintf+0x30>)
 8009138:	b513      	push	{r0, r1, r4, lr}
 800913a:	681c      	ldr	r4, [r3, #0]
 800913c:	2c00      	cmp	r4, #0
 800913e:	d005      	beq.n	800914c <iprintf+0x18>
 8009140:	69a3      	ldr	r3, [r4, #24]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d102      	bne.n	800914c <iprintf+0x18>
 8009146:	0020      	movs	r0, r4
 8009148:	f002 f828 	bl	800b19c <__sinit>
 800914c:	ab05      	add	r3, sp, #20
 800914e:	0020      	movs	r0, r4
 8009150:	9a04      	ldr	r2, [sp, #16]
 8009152:	68a1      	ldr	r1, [r4, #8]
 8009154:	9301      	str	r3, [sp, #4]
 8009156:	f003 fb57 	bl	800c808 <_vfiprintf_r>
 800915a:	bc16      	pop	{r1, r2, r4}
 800915c:	bc08      	pop	{r3}
 800915e:	b004      	add	sp, #16
 8009160:	4718      	bx	r3
 8009162:	46c0      	nop			; (mov r8, r8)
 8009164:	20000010 	.word	0x20000010

08009168 <_puts_r>:
 8009168:	b570      	push	{r4, r5, r6, lr}
 800916a:	0005      	movs	r5, r0
 800916c:	000e      	movs	r6, r1
 800916e:	2800      	cmp	r0, #0
 8009170:	d004      	beq.n	800917c <_puts_r+0x14>
 8009172:	6983      	ldr	r3, [r0, #24]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d101      	bne.n	800917c <_puts_r+0x14>
 8009178:	f002 f810 	bl	800b19c <__sinit>
 800917c:	69ab      	ldr	r3, [r5, #24]
 800917e:	68ac      	ldr	r4, [r5, #8]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d102      	bne.n	800918a <_puts_r+0x22>
 8009184:	0028      	movs	r0, r5
 8009186:	f002 f809 	bl	800b19c <__sinit>
 800918a:	4b2d      	ldr	r3, [pc, #180]	; (8009240 <_puts_r+0xd8>)
 800918c:	429c      	cmp	r4, r3
 800918e:	d122      	bne.n	80091d6 <_puts_r+0x6e>
 8009190:	686c      	ldr	r4, [r5, #4]
 8009192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009194:	07db      	lsls	r3, r3, #31
 8009196:	d405      	bmi.n	80091a4 <_puts_r+0x3c>
 8009198:	89a3      	ldrh	r3, [r4, #12]
 800919a:	059b      	lsls	r3, r3, #22
 800919c:	d402      	bmi.n	80091a4 <_puts_r+0x3c>
 800919e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091a0:	f002 fc15 	bl	800b9ce <__retarget_lock_acquire_recursive>
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	071b      	lsls	r3, r3, #28
 80091a8:	d502      	bpl.n	80091b0 <_puts_r+0x48>
 80091aa:	6923      	ldr	r3, [r4, #16]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d129      	bne.n	8009204 <_puts_r+0x9c>
 80091b0:	0021      	movs	r1, r4
 80091b2:	0028      	movs	r0, r5
 80091b4:	f000 ffa6 	bl	800a104 <__swsetup_r>
 80091b8:	2800      	cmp	r0, #0
 80091ba:	d023      	beq.n	8009204 <_puts_r+0x9c>
 80091bc:	2501      	movs	r5, #1
 80091be:	426d      	negs	r5, r5
 80091c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091c2:	07db      	lsls	r3, r3, #31
 80091c4:	d405      	bmi.n	80091d2 <_puts_r+0x6a>
 80091c6:	89a3      	ldrh	r3, [r4, #12]
 80091c8:	059b      	lsls	r3, r3, #22
 80091ca:	d402      	bmi.n	80091d2 <_puts_r+0x6a>
 80091cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091ce:	f002 fbff 	bl	800b9d0 <__retarget_lock_release_recursive>
 80091d2:	0028      	movs	r0, r5
 80091d4:	bd70      	pop	{r4, r5, r6, pc}
 80091d6:	4b1b      	ldr	r3, [pc, #108]	; (8009244 <_puts_r+0xdc>)
 80091d8:	429c      	cmp	r4, r3
 80091da:	d101      	bne.n	80091e0 <_puts_r+0x78>
 80091dc:	68ac      	ldr	r4, [r5, #8]
 80091de:	e7d8      	b.n	8009192 <_puts_r+0x2a>
 80091e0:	4b19      	ldr	r3, [pc, #100]	; (8009248 <_puts_r+0xe0>)
 80091e2:	429c      	cmp	r4, r3
 80091e4:	d1d5      	bne.n	8009192 <_puts_r+0x2a>
 80091e6:	68ec      	ldr	r4, [r5, #12]
 80091e8:	e7d3      	b.n	8009192 <_puts_r+0x2a>
 80091ea:	3601      	adds	r6, #1
 80091ec:	60a3      	str	r3, [r4, #8]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	da04      	bge.n	80091fc <_puts_r+0x94>
 80091f2:	69a2      	ldr	r2, [r4, #24]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	dc16      	bgt.n	8009226 <_puts_r+0xbe>
 80091f8:	290a      	cmp	r1, #10
 80091fa:	d014      	beq.n	8009226 <_puts_r+0xbe>
 80091fc:	6823      	ldr	r3, [r4, #0]
 80091fe:	1c5a      	adds	r2, r3, #1
 8009200:	6022      	str	r2, [r4, #0]
 8009202:	7019      	strb	r1, [r3, #0]
 8009204:	68a3      	ldr	r3, [r4, #8]
 8009206:	7831      	ldrb	r1, [r6, #0]
 8009208:	3b01      	subs	r3, #1
 800920a:	2900      	cmp	r1, #0
 800920c:	d1ed      	bne.n	80091ea <_puts_r+0x82>
 800920e:	60a3      	str	r3, [r4, #8]
 8009210:	2b00      	cmp	r3, #0
 8009212:	da0f      	bge.n	8009234 <_puts_r+0xcc>
 8009214:	0028      	movs	r0, r5
 8009216:	0022      	movs	r2, r4
 8009218:	310a      	adds	r1, #10
 800921a:	f000 ff1d 	bl	800a058 <__swbuf_r>
 800921e:	250a      	movs	r5, #10
 8009220:	1c43      	adds	r3, r0, #1
 8009222:	d1cd      	bne.n	80091c0 <_puts_r+0x58>
 8009224:	e7ca      	b.n	80091bc <_puts_r+0x54>
 8009226:	0022      	movs	r2, r4
 8009228:	0028      	movs	r0, r5
 800922a:	f000 ff15 	bl	800a058 <__swbuf_r>
 800922e:	1c43      	adds	r3, r0, #1
 8009230:	d1e8      	bne.n	8009204 <_puts_r+0x9c>
 8009232:	e7c3      	b.n	80091bc <_puts_r+0x54>
 8009234:	250a      	movs	r5, #10
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	1c5a      	adds	r2, r3, #1
 800923a:	6022      	str	r2, [r4, #0]
 800923c:	701d      	strb	r5, [r3, #0]
 800923e:	e7bf      	b.n	80091c0 <_puts_r+0x58>
 8009240:	0800d81c 	.word	0x0800d81c
 8009244:	0800d83c 	.word	0x0800d83c
 8009248:	0800d7fc 	.word	0x0800d7fc

0800924c <puts>:
 800924c:	b510      	push	{r4, lr}
 800924e:	4b03      	ldr	r3, [pc, #12]	; (800925c <puts+0x10>)
 8009250:	0001      	movs	r1, r0
 8009252:	6818      	ldr	r0, [r3, #0]
 8009254:	f7ff ff88 	bl	8009168 <_puts_r>
 8009258:	bd10      	pop	{r4, pc}
 800925a:	46c0      	nop			; (mov r8, r8)
 800925c:	20000010 	.word	0x20000010

08009260 <_sbrk_r>:
 8009260:	2300      	movs	r3, #0
 8009262:	b570      	push	{r4, r5, r6, lr}
 8009264:	4d06      	ldr	r5, [pc, #24]	; (8009280 <_sbrk_r+0x20>)
 8009266:	0004      	movs	r4, r0
 8009268:	0008      	movs	r0, r1
 800926a:	602b      	str	r3, [r5, #0]
 800926c:	f7f9 fade 	bl	800282c <_sbrk>
 8009270:	1c43      	adds	r3, r0, #1
 8009272:	d103      	bne.n	800927c <_sbrk_r+0x1c>
 8009274:	682b      	ldr	r3, [r5, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d000      	beq.n	800927c <_sbrk_r+0x1c>
 800927a:	6023      	str	r3, [r4, #0]
 800927c:	bd70      	pop	{r4, r5, r6, pc}
 800927e:	46c0      	nop			; (mov r8, r8)
 8009280:	2000127c 	.word	0x2000127c

08009284 <nanf>:
 8009284:	4800      	ldr	r0, [pc, #0]	; (8009288 <nanf+0x4>)
 8009286:	4770      	bx	lr
 8009288:	7fc00000 	.word	0x7fc00000

0800928c <siprintf>:
 800928c:	b40e      	push	{r1, r2, r3}
 800928e:	b500      	push	{lr}
 8009290:	490b      	ldr	r1, [pc, #44]	; (80092c0 <siprintf+0x34>)
 8009292:	b09c      	sub	sp, #112	; 0x70
 8009294:	ab1d      	add	r3, sp, #116	; 0x74
 8009296:	9002      	str	r0, [sp, #8]
 8009298:	9006      	str	r0, [sp, #24]
 800929a:	9107      	str	r1, [sp, #28]
 800929c:	9104      	str	r1, [sp, #16]
 800929e:	4809      	ldr	r0, [pc, #36]	; (80092c4 <siprintf+0x38>)
 80092a0:	4909      	ldr	r1, [pc, #36]	; (80092c8 <siprintf+0x3c>)
 80092a2:	cb04      	ldmia	r3!, {r2}
 80092a4:	9105      	str	r1, [sp, #20]
 80092a6:	6800      	ldr	r0, [r0, #0]
 80092a8:	a902      	add	r1, sp, #8
 80092aa:	9301      	str	r3, [sp, #4]
 80092ac:	f003 f984 	bl	800c5b8 <_svfiprintf_r>
 80092b0:	2300      	movs	r3, #0
 80092b2:	9a02      	ldr	r2, [sp, #8]
 80092b4:	7013      	strb	r3, [r2, #0]
 80092b6:	b01c      	add	sp, #112	; 0x70
 80092b8:	bc08      	pop	{r3}
 80092ba:	b003      	add	sp, #12
 80092bc:	4718      	bx	r3
 80092be:	46c0      	nop			; (mov r8, r8)
 80092c0:	7fffffff 	.word	0x7fffffff
 80092c4:	20000010 	.word	0x20000010
 80092c8:	ffff0208 	.word	0xffff0208

080092cc <sulp>:
 80092cc:	b570      	push	{r4, r5, r6, lr}
 80092ce:	0016      	movs	r6, r2
 80092d0:	000d      	movs	r5, r1
 80092d2:	f002 ff9d 	bl	800c210 <__ulp>
 80092d6:	2e00      	cmp	r6, #0
 80092d8:	d00d      	beq.n	80092f6 <sulp+0x2a>
 80092da:	236b      	movs	r3, #107	; 0x6b
 80092dc:	006a      	lsls	r2, r5, #1
 80092de:	0d52      	lsrs	r2, r2, #21
 80092e0:	1a9b      	subs	r3, r3, r2
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	dd07      	ble.n	80092f6 <sulp+0x2a>
 80092e6:	2400      	movs	r4, #0
 80092e8:	4a03      	ldr	r2, [pc, #12]	; (80092f8 <sulp+0x2c>)
 80092ea:	051b      	lsls	r3, r3, #20
 80092ec:	189d      	adds	r5, r3, r2
 80092ee:	002b      	movs	r3, r5
 80092f0:	0022      	movs	r2, r4
 80092f2:	f7f8 f889 	bl	8001408 <__aeabi_dmul>
 80092f6:	bd70      	pop	{r4, r5, r6, pc}
 80092f8:	3ff00000 	.word	0x3ff00000

080092fc <_strtod_l>:
 80092fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092fe:	001d      	movs	r5, r3
 8009300:	2300      	movs	r3, #0
 8009302:	b0a5      	sub	sp, #148	; 0x94
 8009304:	9320      	str	r3, [sp, #128]	; 0x80
 8009306:	4bac      	ldr	r3, [pc, #688]	; (80095b8 <_strtod_l+0x2bc>)
 8009308:	9005      	str	r0, [sp, #20]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	9108      	str	r1, [sp, #32]
 800930e:	0018      	movs	r0, r3
 8009310:	9307      	str	r3, [sp, #28]
 8009312:	921b      	str	r2, [sp, #108]	; 0x6c
 8009314:	f7f6 fef8 	bl	8000108 <strlen>
 8009318:	2600      	movs	r6, #0
 800931a:	0004      	movs	r4, r0
 800931c:	2700      	movs	r7, #0
 800931e:	9b08      	ldr	r3, [sp, #32]
 8009320:	931f      	str	r3, [sp, #124]	; 0x7c
 8009322:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009324:	7813      	ldrb	r3, [r2, #0]
 8009326:	2b2b      	cmp	r3, #43	; 0x2b
 8009328:	d058      	beq.n	80093dc <_strtod_l+0xe0>
 800932a:	d844      	bhi.n	80093b6 <_strtod_l+0xba>
 800932c:	2b0d      	cmp	r3, #13
 800932e:	d83d      	bhi.n	80093ac <_strtod_l+0xb0>
 8009330:	2b08      	cmp	r3, #8
 8009332:	d83d      	bhi.n	80093b0 <_strtod_l+0xb4>
 8009334:	2b00      	cmp	r3, #0
 8009336:	d047      	beq.n	80093c8 <_strtod_l+0xcc>
 8009338:	2300      	movs	r3, #0
 800933a:	930e      	str	r3, [sp, #56]	; 0x38
 800933c:	2200      	movs	r2, #0
 800933e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009340:	920a      	str	r2, [sp, #40]	; 0x28
 8009342:	9306      	str	r3, [sp, #24]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	2b30      	cmp	r3, #48	; 0x30
 8009348:	d000      	beq.n	800934c <_strtod_l+0x50>
 800934a:	e07f      	b.n	800944c <_strtod_l+0x150>
 800934c:	9b06      	ldr	r3, [sp, #24]
 800934e:	3220      	adds	r2, #32
 8009350:	785b      	ldrb	r3, [r3, #1]
 8009352:	4393      	bics	r3, r2
 8009354:	2b58      	cmp	r3, #88	; 0x58
 8009356:	d000      	beq.n	800935a <_strtod_l+0x5e>
 8009358:	e06e      	b.n	8009438 <_strtod_l+0x13c>
 800935a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800935c:	9502      	str	r5, [sp, #8]
 800935e:	9301      	str	r3, [sp, #4]
 8009360:	ab20      	add	r3, sp, #128	; 0x80
 8009362:	9300      	str	r3, [sp, #0]
 8009364:	4a95      	ldr	r2, [pc, #596]	; (80095bc <_strtod_l+0x2c0>)
 8009366:	ab21      	add	r3, sp, #132	; 0x84
 8009368:	9805      	ldr	r0, [sp, #20]
 800936a:	a91f      	add	r1, sp, #124	; 0x7c
 800936c:	f002 f820 	bl	800b3b0 <__gethex>
 8009370:	2307      	movs	r3, #7
 8009372:	0005      	movs	r5, r0
 8009374:	0004      	movs	r4, r0
 8009376:	401d      	ands	r5, r3
 8009378:	4218      	tst	r0, r3
 800937a:	d006      	beq.n	800938a <_strtod_l+0x8e>
 800937c:	2d06      	cmp	r5, #6
 800937e:	d12f      	bne.n	80093e0 <_strtod_l+0xe4>
 8009380:	9b06      	ldr	r3, [sp, #24]
 8009382:	3301      	adds	r3, #1
 8009384:	931f      	str	r3, [sp, #124]	; 0x7c
 8009386:	2300      	movs	r3, #0
 8009388:	930e      	str	r3, [sp, #56]	; 0x38
 800938a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <_strtod_l+0x9a>
 8009390:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009392:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009394:	601a      	str	r2, [r3, #0]
 8009396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009398:	2b00      	cmp	r3, #0
 800939a:	d01c      	beq.n	80093d6 <_strtod_l+0xda>
 800939c:	2380      	movs	r3, #128	; 0x80
 800939e:	0032      	movs	r2, r6
 80093a0:	061b      	lsls	r3, r3, #24
 80093a2:	18fb      	adds	r3, r7, r3
 80093a4:	0010      	movs	r0, r2
 80093a6:	0019      	movs	r1, r3
 80093a8:	b025      	add	sp, #148	; 0x94
 80093aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093ac:	2b20      	cmp	r3, #32
 80093ae:	d1c3      	bne.n	8009338 <_strtod_l+0x3c>
 80093b0:	3201      	adds	r2, #1
 80093b2:	921f      	str	r2, [sp, #124]	; 0x7c
 80093b4:	e7b5      	b.n	8009322 <_strtod_l+0x26>
 80093b6:	2b2d      	cmp	r3, #45	; 0x2d
 80093b8:	d1be      	bne.n	8009338 <_strtod_l+0x3c>
 80093ba:	3b2c      	subs	r3, #44	; 0x2c
 80093bc:	930e      	str	r3, [sp, #56]	; 0x38
 80093be:	1c53      	adds	r3, r2, #1
 80093c0:	931f      	str	r3, [sp, #124]	; 0x7c
 80093c2:	7853      	ldrb	r3, [r2, #1]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1b9      	bne.n	800933c <_strtod_l+0x40>
 80093c8:	9b08      	ldr	r3, [sp, #32]
 80093ca:	931f      	str	r3, [sp, #124]	; 0x7c
 80093cc:	2300      	movs	r3, #0
 80093ce:	930e      	str	r3, [sp, #56]	; 0x38
 80093d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1dc      	bne.n	8009390 <_strtod_l+0x94>
 80093d6:	0032      	movs	r2, r6
 80093d8:	003b      	movs	r3, r7
 80093da:	e7e3      	b.n	80093a4 <_strtod_l+0xa8>
 80093dc:	2300      	movs	r3, #0
 80093de:	e7ed      	b.n	80093bc <_strtod_l+0xc0>
 80093e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80093e2:	2a00      	cmp	r2, #0
 80093e4:	d007      	beq.n	80093f6 <_strtod_l+0xfa>
 80093e6:	2135      	movs	r1, #53	; 0x35
 80093e8:	a822      	add	r0, sp, #136	; 0x88
 80093ea:	f003 f812 	bl	800c412 <__copybits>
 80093ee:	9920      	ldr	r1, [sp, #128]	; 0x80
 80093f0:	9805      	ldr	r0, [sp, #20]
 80093f2:	f002 fbcd 	bl	800bb90 <_Bfree>
 80093f6:	1e68      	subs	r0, r5, #1
 80093f8:	2804      	cmp	r0, #4
 80093fa:	d806      	bhi.n	800940a <_strtod_l+0x10e>
 80093fc:	f7f6 fe8c 	bl	8000118 <__gnu_thumb1_case_uqi>
 8009400:	1816030b 	.word	0x1816030b
 8009404:	0b          	.byte	0x0b
 8009405:	00          	.byte	0x00
 8009406:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8009408:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 800940a:	0723      	lsls	r3, r4, #28
 800940c:	d5bd      	bpl.n	800938a <_strtod_l+0x8e>
 800940e:	2380      	movs	r3, #128	; 0x80
 8009410:	061b      	lsls	r3, r3, #24
 8009412:	431f      	orrs	r7, r3
 8009414:	e7b9      	b.n	800938a <_strtod_l+0x8e>
 8009416:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009418:	4a69      	ldr	r2, [pc, #420]	; (80095c0 <_strtod_l+0x2c4>)
 800941a:	496a      	ldr	r1, [pc, #424]	; (80095c4 <_strtod_l+0x2c8>)
 800941c:	401a      	ands	r2, r3
 800941e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009420:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8009422:	185b      	adds	r3, r3, r1
 8009424:	051b      	lsls	r3, r3, #20
 8009426:	431a      	orrs	r2, r3
 8009428:	0017      	movs	r7, r2
 800942a:	e7ee      	b.n	800940a <_strtod_l+0x10e>
 800942c:	4f66      	ldr	r7, [pc, #408]	; (80095c8 <_strtod_l+0x2cc>)
 800942e:	e7ec      	b.n	800940a <_strtod_l+0x10e>
 8009430:	2601      	movs	r6, #1
 8009432:	4f66      	ldr	r7, [pc, #408]	; (80095cc <_strtod_l+0x2d0>)
 8009434:	4276      	negs	r6, r6
 8009436:	e7e8      	b.n	800940a <_strtod_l+0x10e>
 8009438:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800943a:	1c5a      	adds	r2, r3, #1
 800943c:	921f      	str	r2, [sp, #124]	; 0x7c
 800943e:	785b      	ldrb	r3, [r3, #1]
 8009440:	2b30      	cmp	r3, #48	; 0x30
 8009442:	d0f9      	beq.n	8009438 <_strtod_l+0x13c>
 8009444:	2b00      	cmp	r3, #0
 8009446:	d0a0      	beq.n	800938a <_strtod_l+0x8e>
 8009448:	2301      	movs	r3, #1
 800944a:	930a      	str	r3, [sp, #40]	; 0x28
 800944c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800944e:	220a      	movs	r2, #10
 8009450:	9310      	str	r3, [sp, #64]	; 0x40
 8009452:	2300      	movs	r3, #0
 8009454:	930f      	str	r3, [sp, #60]	; 0x3c
 8009456:	930b      	str	r3, [sp, #44]	; 0x2c
 8009458:	9309      	str	r3, [sp, #36]	; 0x24
 800945a:	981f      	ldr	r0, [sp, #124]	; 0x7c
 800945c:	7805      	ldrb	r5, [r0, #0]
 800945e:	002b      	movs	r3, r5
 8009460:	3b30      	subs	r3, #48	; 0x30
 8009462:	b2d9      	uxtb	r1, r3
 8009464:	2909      	cmp	r1, #9
 8009466:	d927      	bls.n	80094b8 <_strtod_l+0x1bc>
 8009468:	0022      	movs	r2, r4
 800946a:	9907      	ldr	r1, [sp, #28]
 800946c:	f003 fb58 	bl	800cb20 <strncmp>
 8009470:	2800      	cmp	r0, #0
 8009472:	d033      	beq.n	80094dc <_strtod_l+0x1e0>
 8009474:	2000      	movs	r0, #0
 8009476:	002b      	movs	r3, r5
 8009478:	4684      	mov	ip, r0
 800947a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800947c:	900c      	str	r0, [sp, #48]	; 0x30
 800947e:	9206      	str	r2, [sp, #24]
 8009480:	2220      	movs	r2, #32
 8009482:	0019      	movs	r1, r3
 8009484:	4391      	bics	r1, r2
 8009486:	000a      	movs	r2, r1
 8009488:	2100      	movs	r1, #0
 800948a:	9107      	str	r1, [sp, #28]
 800948c:	2a45      	cmp	r2, #69	; 0x45
 800948e:	d000      	beq.n	8009492 <_strtod_l+0x196>
 8009490:	e0c5      	b.n	800961e <_strtod_l+0x322>
 8009492:	9b06      	ldr	r3, [sp, #24]
 8009494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009496:	4303      	orrs	r3, r0
 8009498:	4313      	orrs	r3, r2
 800949a:	428b      	cmp	r3, r1
 800949c:	d094      	beq.n	80093c8 <_strtod_l+0xcc>
 800949e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80094a0:	9308      	str	r3, [sp, #32]
 80094a2:	3301      	adds	r3, #1
 80094a4:	931f      	str	r3, [sp, #124]	; 0x7c
 80094a6:	9b08      	ldr	r3, [sp, #32]
 80094a8:	785b      	ldrb	r3, [r3, #1]
 80094aa:	2b2b      	cmp	r3, #43	; 0x2b
 80094ac:	d076      	beq.n	800959c <_strtod_l+0x2a0>
 80094ae:	000c      	movs	r4, r1
 80094b0:	2b2d      	cmp	r3, #45	; 0x2d
 80094b2:	d179      	bne.n	80095a8 <_strtod_l+0x2ac>
 80094b4:	2401      	movs	r4, #1
 80094b6:	e072      	b.n	800959e <_strtod_l+0x2a2>
 80094b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094ba:	2908      	cmp	r1, #8
 80094bc:	dc09      	bgt.n	80094d2 <_strtod_l+0x1d6>
 80094be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094c0:	4351      	muls	r1, r2
 80094c2:	185b      	adds	r3, r3, r1
 80094c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80094c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c8:	3001      	adds	r0, #1
 80094ca:	3301      	adds	r3, #1
 80094cc:	9309      	str	r3, [sp, #36]	; 0x24
 80094ce:	901f      	str	r0, [sp, #124]	; 0x7c
 80094d0:	e7c3      	b.n	800945a <_strtod_l+0x15e>
 80094d2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80094d4:	4351      	muls	r1, r2
 80094d6:	185b      	adds	r3, r3, r1
 80094d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80094da:	e7f4      	b.n	80094c6 <_strtod_l+0x1ca>
 80094dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80094de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094e0:	191c      	adds	r4, r3, r4
 80094e2:	941f      	str	r4, [sp, #124]	; 0x7c
 80094e4:	7823      	ldrb	r3, [r4, #0]
 80094e6:	2a00      	cmp	r2, #0
 80094e8:	d039      	beq.n	800955e <_strtod_l+0x262>
 80094ea:	900c      	str	r0, [sp, #48]	; 0x30
 80094ec:	9206      	str	r2, [sp, #24]
 80094ee:	001a      	movs	r2, r3
 80094f0:	3a30      	subs	r2, #48	; 0x30
 80094f2:	2a09      	cmp	r2, #9
 80094f4:	d912      	bls.n	800951c <_strtod_l+0x220>
 80094f6:	2201      	movs	r2, #1
 80094f8:	4694      	mov	ip, r2
 80094fa:	e7c1      	b.n	8009480 <_strtod_l+0x184>
 80094fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80094fe:	3001      	adds	r0, #1
 8009500:	1c5a      	adds	r2, r3, #1
 8009502:	921f      	str	r2, [sp, #124]	; 0x7c
 8009504:	785b      	ldrb	r3, [r3, #1]
 8009506:	2b30      	cmp	r3, #48	; 0x30
 8009508:	d0f8      	beq.n	80094fc <_strtod_l+0x200>
 800950a:	001a      	movs	r2, r3
 800950c:	3a31      	subs	r2, #49	; 0x31
 800950e:	2a08      	cmp	r2, #8
 8009510:	d83f      	bhi.n	8009592 <_strtod_l+0x296>
 8009512:	900c      	str	r0, [sp, #48]	; 0x30
 8009514:	2000      	movs	r0, #0
 8009516:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009518:	9006      	str	r0, [sp, #24]
 800951a:	9210      	str	r2, [sp, #64]	; 0x40
 800951c:	001a      	movs	r2, r3
 800951e:	1c41      	adds	r1, r0, #1
 8009520:	3a30      	subs	r2, #48	; 0x30
 8009522:	2b30      	cmp	r3, #48	; 0x30
 8009524:	d015      	beq.n	8009552 <_strtod_l+0x256>
 8009526:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009528:	185b      	adds	r3, r3, r1
 800952a:	210a      	movs	r1, #10
 800952c:	930c      	str	r3, [sp, #48]	; 0x30
 800952e:	9b06      	ldr	r3, [sp, #24]
 8009530:	18c4      	adds	r4, r0, r3
 8009532:	42a3      	cmp	r3, r4
 8009534:	d115      	bne.n	8009562 <_strtod_l+0x266>
 8009536:	9906      	ldr	r1, [sp, #24]
 8009538:	9b06      	ldr	r3, [sp, #24]
 800953a:	3101      	adds	r1, #1
 800953c:	1809      	adds	r1, r1, r0
 800953e:	181b      	adds	r3, r3, r0
 8009540:	9106      	str	r1, [sp, #24]
 8009542:	2b08      	cmp	r3, #8
 8009544:	dc1b      	bgt.n	800957e <_strtod_l+0x282>
 8009546:	230a      	movs	r3, #10
 8009548:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800954a:	434b      	muls	r3, r1
 800954c:	2100      	movs	r1, #0
 800954e:	18d3      	adds	r3, r2, r3
 8009550:	930b      	str	r3, [sp, #44]	; 0x2c
 8009552:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009554:	0008      	movs	r0, r1
 8009556:	1c5a      	adds	r2, r3, #1
 8009558:	921f      	str	r2, [sp, #124]	; 0x7c
 800955a:	785b      	ldrb	r3, [r3, #1]
 800955c:	e7c7      	b.n	80094ee <_strtod_l+0x1f2>
 800955e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009560:	e7d1      	b.n	8009506 <_strtod_l+0x20a>
 8009562:	2b08      	cmp	r3, #8
 8009564:	dc04      	bgt.n	8009570 <_strtod_l+0x274>
 8009566:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009568:	434d      	muls	r5, r1
 800956a:	950b      	str	r5, [sp, #44]	; 0x2c
 800956c:	3301      	adds	r3, #1
 800956e:	e7e0      	b.n	8009532 <_strtod_l+0x236>
 8009570:	1c5d      	adds	r5, r3, #1
 8009572:	2d10      	cmp	r5, #16
 8009574:	dcfa      	bgt.n	800956c <_strtod_l+0x270>
 8009576:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009578:	434d      	muls	r5, r1
 800957a:	950f      	str	r5, [sp, #60]	; 0x3c
 800957c:	e7f6      	b.n	800956c <_strtod_l+0x270>
 800957e:	9b06      	ldr	r3, [sp, #24]
 8009580:	2100      	movs	r1, #0
 8009582:	2b10      	cmp	r3, #16
 8009584:	dce5      	bgt.n	8009552 <_strtod_l+0x256>
 8009586:	230a      	movs	r3, #10
 8009588:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800958a:	4343      	muls	r3, r0
 800958c:	18d3      	adds	r3, r2, r3
 800958e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009590:	e7df      	b.n	8009552 <_strtod_l+0x256>
 8009592:	2200      	movs	r2, #0
 8009594:	920c      	str	r2, [sp, #48]	; 0x30
 8009596:	9206      	str	r2, [sp, #24]
 8009598:	3201      	adds	r2, #1
 800959a:	e7ad      	b.n	80094f8 <_strtod_l+0x1fc>
 800959c:	2400      	movs	r4, #0
 800959e:	9b08      	ldr	r3, [sp, #32]
 80095a0:	3302      	adds	r3, #2
 80095a2:	931f      	str	r3, [sp, #124]	; 0x7c
 80095a4:	9b08      	ldr	r3, [sp, #32]
 80095a6:	789b      	ldrb	r3, [r3, #2]
 80095a8:	001a      	movs	r2, r3
 80095aa:	3a30      	subs	r2, #48	; 0x30
 80095ac:	2a09      	cmp	r2, #9
 80095ae:	d913      	bls.n	80095d8 <_strtod_l+0x2dc>
 80095b0:	9a08      	ldr	r2, [sp, #32]
 80095b2:	921f      	str	r2, [sp, #124]	; 0x7c
 80095b4:	2200      	movs	r2, #0
 80095b6:	e031      	b.n	800961c <_strtod_l+0x320>
 80095b8:	0800d8c4 	.word	0x0800d8c4
 80095bc:	0800d618 	.word	0x0800d618
 80095c0:	ffefffff 	.word	0xffefffff
 80095c4:	00000433 	.word	0x00000433
 80095c8:	7ff00000 	.word	0x7ff00000
 80095cc:	7fffffff 	.word	0x7fffffff
 80095d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80095d2:	1c5a      	adds	r2, r3, #1
 80095d4:	921f      	str	r2, [sp, #124]	; 0x7c
 80095d6:	785b      	ldrb	r3, [r3, #1]
 80095d8:	2b30      	cmp	r3, #48	; 0x30
 80095da:	d0f9      	beq.n	80095d0 <_strtod_l+0x2d4>
 80095dc:	2200      	movs	r2, #0
 80095de:	9207      	str	r2, [sp, #28]
 80095e0:	001a      	movs	r2, r3
 80095e2:	3a31      	subs	r2, #49	; 0x31
 80095e4:	2a08      	cmp	r2, #8
 80095e6:	d81a      	bhi.n	800961e <_strtod_l+0x322>
 80095e8:	3b30      	subs	r3, #48	; 0x30
 80095ea:	001a      	movs	r2, r3
 80095ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80095ee:	9307      	str	r3, [sp, #28]
 80095f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80095f2:	1c59      	adds	r1, r3, #1
 80095f4:	911f      	str	r1, [sp, #124]	; 0x7c
 80095f6:	785b      	ldrb	r3, [r3, #1]
 80095f8:	001d      	movs	r5, r3
 80095fa:	3d30      	subs	r5, #48	; 0x30
 80095fc:	2d09      	cmp	r5, #9
 80095fe:	d939      	bls.n	8009674 <_strtod_l+0x378>
 8009600:	9d07      	ldr	r5, [sp, #28]
 8009602:	1b49      	subs	r1, r1, r5
 8009604:	4db0      	ldr	r5, [pc, #704]	; (80098c8 <_strtod_l+0x5cc>)
 8009606:	9507      	str	r5, [sp, #28]
 8009608:	2908      	cmp	r1, #8
 800960a:	dc03      	bgt.n	8009614 <_strtod_l+0x318>
 800960c:	9207      	str	r2, [sp, #28]
 800960e:	42aa      	cmp	r2, r5
 8009610:	dd00      	ble.n	8009614 <_strtod_l+0x318>
 8009612:	9507      	str	r5, [sp, #28]
 8009614:	2c00      	cmp	r4, #0
 8009616:	d002      	beq.n	800961e <_strtod_l+0x322>
 8009618:	9a07      	ldr	r2, [sp, #28]
 800961a:	4252      	negs	r2, r2
 800961c:	9207      	str	r2, [sp, #28]
 800961e:	9a06      	ldr	r2, [sp, #24]
 8009620:	2a00      	cmp	r2, #0
 8009622:	d14b      	bne.n	80096bc <_strtod_l+0x3c0>
 8009624:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009626:	4310      	orrs	r0, r2
 8009628:	d000      	beq.n	800962c <_strtod_l+0x330>
 800962a:	e6ae      	b.n	800938a <_strtod_l+0x8e>
 800962c:	4662      	mov	r2, ip
 800962e:	2a00      	cmp	r2, #0
 8009630:	d000      	beq.n	8009634 <_strtod_l+0x338>
 8009632:	e6c9      	b.n	80093c8 <_strtod_l+0xcc>
 8009634:	2b69      	cmp	r3, #105	; 0x69
 8009636:	d025      	beq.n	8009684 <_strtod_l+0x388>
 8009638:	dc21      	bgt.n	800967e <_strtod_l+0x382>
 800963a:	2b49      	cmp	r3, #73	; 0x49
 800963c:	d022      	beq.n	8009684 <_strtod_l+0x388>
 800963e:	2b4e      	cmp	r3, #78	; 0x4e
 8009640:	d000      	beq.n	8009644 <_strtod_l+0x348>
 8009642:	e6c1      	b.n	80093c8 <_strtod_l+0xcc>
 8009644:	49a1      	ldr	r1, [pc, #644]	; (80098cc <_strtod_l+0x5d0>)
 8009646:	a81f      	add	r0, sp, #124	; 0x7c
 8009648:	f002 f900 	bl	800b84c <__match>
 800964c:	2800      	cmp	r0, #0
 800964e:	d100      	bne.n	8009652 <_strtod_l+0x356>
 8009650:	e6ba      	b.n	80093c8 <_strtod_l+0xcc>
 8009652:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	2b28      	cmp	r3, #40	; 0x28
 8009658:	d12a      	bne.n	80096b0 <_strtod_l+0x3b4>
 800965a:	499d      	ldr	r1, [pc, #628]	; (80098d0 <_strtod_l+0x5d4>)
 800965c:	aa22      	add	r2, sp, #136	; 0x88
 800965e:	a81f      	add	r0, sp, #124	; 0x7c
 8009660:	f002 f908 	bl	800b874 <__hexnan>
 8009664:	2805      	cmp	r0, #5
 8009666:	d123      	bne.n	80096b0 <_strtod_l+0x3b4>
 8009668:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800966a:	4a9a      	ldr	r2, [pc, #616]	; (80098d4 <_strtod_l+0x5d8>)
 800966c:	9e22      	ldr	r6, [sp, #136]	; 0x88
 800966e:	431a      	orrs	r2, r3
 8009670:	0017      	movs	r7, r2
 8009672:	e68a      	b.n	800938a <_strtod_l+0x8e>
 8009674:	210a      	movs	r1, #10
 8009676:	434a      	muls	r2, r1
 8009678:	18d2      	adds	r2, r2, r3
 800967a:	3a30      	subs	r2, #48	; 0x30
 800967c:	e7b8      	b.n	80095f0 <_strtod_l+0x2f4>
 800967e:	2b6e      	cmp	r3, #110	; 0x6e
 8009680:	d0e0      	beq.n	8009644 <_strtod_l+0x348>
 8009682:	e6a1      	b.n	80093c8 <_strtod_l+0xcc>
 8009684:	4994      	ldr	r1, [pc, #592]	; (80098d8 <_strtod_l+0x5dc>)
 8009686:	a81f      	add	r0, sp, #124	; 0x7c
 8009688:	f002 f8e0 	bl	800b84c <__match>
 800968c:	2800      	cmp	r0, #0
 800968e:	d100      	bne.n	8009692 <_strtod_l+0x396>
 8009690:	e69a      	b.n	80093c8 <_strtod_l+0xcc>
 8009692:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009694:	4991      	ldr	r1, [pc, #580]	; (80098dc <_strtod_l+0x5e0>)
 8009696:	3b01      	subs	r3, #1
 8009698:	a81f      	add	r0, sp, #124	; 0x7c
 800969a:	931f      	str	r3, [sp, #124]	; 0x7c
 800969c:	f002 f8d6 	bl	800b84c <__match>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d102      	bne.n	80096aa <_strtod_l+0x3ae>
 80096a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80096a6:	3301      	adds	r3, #1
 80096a8:	931f      	str	r3, [sp, #124]	; 0x7c
 80096aa:	2600      	movs	r6, #0
 80096ac:	4f89      	ldr	r7, [pc, #548]	; (80098d4 <_strtod_l+0x5d8>)
 80096ae:	e66c      	b.n	800938a <_strtod_l+0x8e>
 80096b0:	488b      	ldr	r0, [pc, #556]	; (80098e0 <_strtod_l+0x5e4>)
 80096b2:	f003 f9e3 	bl	800ca7c <nan>
 80096b6:	0006      	movs	r6, r0
 80096b8:	000f      	movs	r7, r1
 80096ba:	e666      	b.n	800938a <_strtod_l+0x8e>
 80096bc:	9b07      	ldr	r3, [sp, #28]
 80096be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096c0:	1a9b      	subs	r3, r3, r2
 80096c2:	930a      	str	r3, [sp, #40]	; 0x28
 80096c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <_strtod_l+0x3d2>
 80096ca:	9b06      	ldr	r3, [sp, #24]
 80096cc:	9309      	str	r3, [sp, #36]	; 0x24
 80096ce:	9c06      	ldr	r4, [sp, #24]
 80096d0:	2c10      	cmp	r4, #16
 80096d2:	dd00      	ble.n	80096d6 <_strtod_l+0x3da>
 80096d4:	2410      	movs	r4, #16
 80096d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80096d8:	f7f8 fd18 	bl	800210c <__aeabi_ui2d>
 80096dc:	9b06      	ldr	r3, [sp, #24]
 80096de:	0006      	movs	r6, r0
 80096e0:	000f      	movs	r7, r1
 80096e2:	2b09      	cmp	r3, #9
 80096e4:	dd15      	ble.n	8009712 <_strtod_l+0x416>
 80096e6:	0022      	movs	r2, r4
 80096e8:	4b7e      	ldr	r3, [pc, #504]	; (80098e4 <_strtod_l+0x5e8>)
 80096ea:	3a09      	subs	r2, #9
 80096ec:	00d2      	lsls	r2, r2, #3
 80096ee:	189b      	adds	r3, r3, r2
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	f7f7 fe88 	bl	8001408 <__aeabi_dmul>
 80096f8:	0006      	movs	r6, r0
 80096fa:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80096fc:	000f      	movs	r7, r1
 80096fe:	f7f8 fd05 	bl	800210c <__aeabi_ui2d>
 8009702:	0002      	movs	r2, r0
 8009704:	000b      	movs	r3, r1
 8009706:	0030      	movs	r0, r6
 8009708:	0039      	movs	r1, r7
 800970a:	f7f6 ff3f 	bl	800058c <__aeabi_dadd>
 800970e:	0006      	movs	r6, r0
 8009710:	000f      	movs	r7, r1
 8009712:	9b06      	ldr	r3, [sp, #24]
 8009714:	2b0f      	cmp	r3, #15
 8009716:	dc39      	bgt.n	800978c <_strtod_l+0x490>
 8009718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800971a:	2b00      	cmp	r3, #0
 800971c:	d100      	bne.n	8009720 <_strtod_l+0x424>
 800971e:	e634      	b.n	800938a <_strtod_l+0x8e>
 8009720:	dd24      	ble.n	800976c <_strtod_l+0x470>
 8009722:	2b16      	cmp	r3, #22
 8009724:	dc09      	bgt.n	800973a <_strtod_l+0x43e>
 8009726:	496f      	ldr	r1, [pc, #444]	; (80098e4 <_strtod_l+0x5e8>)
 8009728:	00db      	lsls	r3, r3, #3
 800972a:	18c9      	adds	r1, r1, r3
 800972c:	0032      	movs	r2, r6
 800972e:	6808      	ldr	r0, [r1, #0]
 8009730:	6849      	ldr	r1, [r1, #4]
 8009732:	003b      	movs	r3, r7
 8009734:	f7f7 fe68 	bl	8001408 <__aeabi_dmul>
 8009738:	e7bd      	b.n	80096b6 <_strtod_l+0x3ba>
 800973a:	2325      	movs	r3, #37	; 0x25
 800973c:	9a06      	ldr	r2, [sp, #24]
 800973e:	1a9b      	subs	r3, r3, r2
 8009740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009742:	4293      	cmp	r3, r2
 8009744:	db22      	blt.n	800978c <_strtod_l+0x490>
 8009746:	240f      	movs	r4, #15
 8009748:	9b06      	ldr	r3, [sp, #24]
 800974a:	4d66      	ldr	r5, [pc, #408]	; (80098e4 <_strtod_l+0x5e8>)
 800974c:	1ae4      	subs	r4, r4, r3
 800974e:	00e1      	lsls	r1, r4, #3
 8009750:	1869      	adds	r1, r5, r1
 8009752:	0032      	movs	r2, r6
 8009754:	6808      	ldr	r0, [r1, #0]
 8009756:	6849      	ldr	r1, [r1, #4]
 8009758:	003b      	movs	r3, r7
 800975a:	f7f7 fe55 	bl	8001408 <__aeabi_dmul>
 800975e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009760:	1b1c      	subs	r4, r3, r4
 8009762:	00e4      	lsls	r4, r4, #3
 8009764:	192c      	adds	r4, r5, r4
 8009766:	6822      	ldr	r2, [r4, #0]
 8009768:	6863      	ldr	r3, [r4, #4]
 800976a:	e7e3      	b.n	8009734 <_strtod_l+0x438>
 800976c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800976e:	3316      	adds	r3, #22
 8009770:	db0c      	blt.n	800978c <_strtod_l+0x490>
 8009772:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009774:	9a07      	ldr	r2, [sp, #28]
 8009776:	0030      	movs	r0, r6
 8009778:	1a9a      	subs	r2, r3, r2
 800977a:	4b5a      	ldr	r3, [pc, #360]	; (80098e4 <_strtod_l+0x5e8>)
 800977c:	00d2      	lsls	r2, r2, #3
 800977e:	189b      	adds	r3, r3, r2
 8009780:	0039      	movs	r1, r7
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	f7f7 fa3d 	bl	8000c04 <__aeabi_ddiv>
 800978a:	e794      	b.n	80096b6 <_strtod_l+0x3ba>
 800978c:	9b06      	ldr	r3, [sp, #24]
 800978e:	1b1c      	subs	r4, r3, r4
 8009790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009792:	18e4      	adds	r4, r4, r3
 8009794:	2c00      	cmp	r4, #0
 8009796:	dd72      	ble.n	800987e <_strtod_l+0x582>
 8009798:	230f      	movs	r3, #15
 800979a:	0021      	movs	r1, r4
 800979c:	4019      	ands	r1, r3
 800979e:	421c      	tst	r4, r3
 80097a0:	d00a      	beq.n	80097b8 <_strtod_l+0x4bc>
 80097a2:	00cb      	lsls	r3, r1, #3
 80097a4:	494f      	ldr	r1, [pc, #316]	; (80098e4 <_strtod_l+0x5e8>)
 80097a6:	0032      	movs	r2, r6
 80097a8:	18c9      	adds	r1, r1, r3
 80097aa:	6808      	ldr	r0, [r1, #0]
 80097ac:	6849      	ldr	r1, [r1, #4]
 80097ae:	003b      	movs	r3, r7
 80097b0:	f7f7 fe2a 	bl	8001408 <__aeabi_dmul>
 80097b4:	0006      	movs	r6, r0
 80097b6:	000f      	movs	r7, r1
 80097b8:	230f      	movs	r3, #15
 80097ba:	439c      	bics	r4, r3
 80097bc:	d04a      	beq.n	8009854 <_strtod_l+0x558>
 80097be:	3326      	adds	r3, #38	; 0x26
 80097c0:	33ff      	adds	r3, #255	; 0xff
 80097c2:	429c      	cmp	r4, r3
 80097c4:	dd22      	ble.n	800980c <_strtod_l+0x510>
 80097c6:	2300      	movs	r3, #0
 80097c8:	9306      	str	r3, [sp, #24]
 80097ca:	9307      	str	r3, [sp, #28]
 80097cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80097ce:	9309      	str	r3, [sp, #36]	; 0x24
 80097d0:	2322      	movs	r3, #34	; 0x22
 80097d2:	2600      	movs	r6, #0
 80097d4:	9a05      	ldr	r2, [sp, #20]
 80097d6:	4f3f      	ldr	r7, [pc, #252]	; (80098d4 <_strtod_l+0x5d8>)
 80097d8:	6013      	str	r3, [r2, #0]
 80097da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097dc:	42b3      	cmp	r3, r6
 80097de:	d100      	bne.n	80097e2 <_strtod_l+0x4e6>
 80097e0:	e5d3      	b.n	800938a <_strtod_l+0x8e>
 80097e2:	9920      	ldr	r1, [sp, #128]	; 0x80
 80097e4:	9805      	ldr	r0, [sp, #20]
 80097e6:	f002 f9d3 	bl	800bb90 <_Bfree>
 80097ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097ec:	9805      	ldr	r0, [sp, #20]
 80097ee:	f002 f9cf 	bl	800bb90 <_Bfree>
 80097f2:	9907      	ldr	r1, [sp, #28]
 80097f4:	9805      	ldr	r0, [sp, #20]
 80097f6:	f002 f9cb 	bl	800bb90 <_Bfree>
 80097fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097fc:	9805      	ldr	r0, [sp, #20]
 80097fe:	f002 f9c7 	bl	800bb90 <_Bfree>
 8009802:	9906      	ldr	r1, [sp, #24]
 8009804:	9805      	ldr	r0, [sp, #20]
 8009806:	f002 f9c3 	bl	800bb90 <_Bfree>
 800980a:	e5be      	b.n	800938a <_strtod_l+0x8e>
 800980c:	2300      	movs	r3, #0
 800980e:	0030      	movs	r0, r6
 8009810:	0039      	movs	r1, r7
 8009812:	4d35      	ldr	r5, [pc, #212]	; (80098e8 <_strtod_l+0x5ec>)
 8009814:	1124      	asrs	r4, r4, #4
 8009816:	9308      	str	r3, [sp, #32]
 8009818:	2c01      	cmp	r4, #1
 800981a:	dc1e      	bgt.n	800985a <_strtod_l+0x55e>
 800981c:	2b00      	cmp	r3, #0
 800981e:	d001      	beq.n	8009824 <_strtod_l+0x528>
 8009820:	0006      	movs	r6, r0
 8009822:	000f      	movs	r7, r1
 8009824:	4b31      	ldr	r3, [pc, #196]	; (80098ec <_strtod_l+0x5f0>)
 8009826:	0032      	movs	r2, r6
 8009828:	18ff      	adds	r7, r7, r3
 800982a:	9b08      	ldr	r3, [sp, #32]
 800982c:	00dd      	lsls	r5, r3, #3
 800982e:	4b2e      	ldr	r3, [pc, #184]	; (80098e8 <_strtod_l+0x5ec>)
 8009830:	195d      	adds	r5, r3, r5
 8009832:	6828      	ldr	r0, [r5, #0]
 8009834:	6869      	ldr	r1, [r5, #4]
 8009836:	003b      	movs	r3, r7
 8009838:	f7f7 fde6 	bl	8001408 <__aeabi_dmul>
 800983c:	4b25      	ldr	r3, [pc, #148]	; (80098d4 <_strtod_l+0x5d8>)
 800983e:	4a2c      	ldr	r2, [pc, #176]	; (80098f0 <_strtod_l+0x5f4>)
 8009840:	0006      	movs	r6, r0
 8009842:	400b      	ands	r3, r1
 8009844:	4293      	cmp	r3, r2
 8009846:	d8be      	bhi.n	80097c6 <_strtod_l+0x4ca>
 8009848:	4a2a      	ldr	r2, [pc, #168]	; (80098f4 <_strtod_l+0x5f8>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d913      	bls.n	8009876 <_strtod_l+0x57a>
 800984e:	2601      	movs	r6, #1
 8009850:	4f29      	ldr	r7, [pc, #164]	; (80098f8 <_strtod_l+0x5fc>)
 8009852:	4276      	negs	r6, r6
 8009854:	2300      	movs	r3, #0
 8009856:	9308      	str	r3, [sp, #32]
 8009858:	e087      	b.n	800996a <_strtod_l+0x66e>
 800985a:	2201      	movs	r2, #1
 800985c:	4214      	tst	r4, r2
 800985e:	d004      	beq.n	800986a <_strtod_l+0x56e>
 8009860:	682a      	ldr	r2, [r5, #0]
 8009862:	686b      	ldr	r3, [r5, #4]
 8009864:	f7f7 fdd0 	bl	8001408 <__aeabi_dmul>
 8009868:	2301      	movs	r3, #1
 800986a:	9a08      	ldr	r2, [sp, #32]
 800986c:	1064      	asrs	r4, r4, #1
 800986e:	3201      	adds	r2, #1
 8009870:	9208      	str	r2, [sp, #32]
 8009872:	3508      	adds	r5, #8
 8009874:	e7d0      	b.n	8009818 <_strtod_l+0x51c>
 8009876:	23d4      	movs	r3, #212	; 0xd4
 8009878:	049b      	lsls	r3, r3, #18
 800987a:	18cf      	adds	r7, r1, r3
 800987c:	e7ea      	b.n	8009854 <_strtod_l+0x558>
 800987e:	2c00      	cmp	r4, #0
 8009880:	d0e8      	beq.n	8009854 <_strtod_l+0x558>
 8009882:	4264      	negs	r4, r4
 8009884:	220f      	movs	r2, #15
 8009886:	0023      	movs	r3, r4
 8009888:	4013      	ands	r3, r2
 800988a:	4214      	tst	r4, r2
 800988c:	d00a      	beq.n	80098a4 <_strtod_l+0x5a8>
 800988e:	00da      	lsls	r2, r3, #3
 8009890:	4b14      	ldr	r3, [pc, #80]	; (80098e4 <_strtod_l+0x5e8>)
 8009892:	0030      	movs	r0, r6
 8009894:	189b      	adds	r3, r3, r2
 8009896:	0039      	movs	r1, r7
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	f7f7 f9b2 	bl	8000c04 <__aeabi_ddiv>
 80098a0:	0006      	movs	r6, r0
 80098a2:	000f      	movs	r7, r1
 80098a4:	1124      	asrs	r4, r4, #4
 80098a6:	d0d5      	beq.n	8009854 <_strtod_l+0x558>
 80098a8:	2c1f      	cmp	r4, #31
 80098aa:	dd27      	ble.n	80098fc <_strtod_l+0x600>
 80098ac:	2300      	movs	r3, #0
 80098ae:	9306      	str	r3, [sp, #24]
 80098b0:	9307      	str	r3, [sp, #28]
 80098b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80098b4:	9309      	str	r3, [sp, #36]	; 0x24
 80098b6:	2322      	movs	r3, #34	; 0x22
 80098b8:	9a05      	ldr	r2, [sp, #20]
 80098ba:	2600      	movs	r6, #0
 80098bc:	6013      	str	r3, [r2, #0]
 80098be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098c0:	2700      	movs	r7, #0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d18d      	bne.n	80097e2 <_strtod_l+0x4e6>
 80098c6:	e560      	b.n	800938a <_strtod_l+0x8e>
 80098c8:	00004e1f 	.word	0x00004e1f
 80098cc:	0800d5e9 	.word	0x0800d5e9
 80098d0:	0800d62c 	.word	0x0800d62c
 80098d4:	7ff00000 	.word	0x7ff00000
 80098d8:	0800d5e1 	.word	0x0800d5e1
 80098dc:	0800d76c 	.word	0x0800d76c
 80098e0:	0800da80 	.word	0x0800da80
 80098e4:	0800d960 	.word	0x0800d960
 80098e8:	0800d938 	.word	0x0800d938
 80098ec:	fcb00000 	.word	0xfcb00000
 80098f0:	7ca00000 	.word	0x7ca00000
 80098f4:	7c900000 	.word	0x7c900000
 80098f8:	7fefffff 	.word	0x7fefffff
 80098fc:	2310      	movs	r3, #16
 80098fe:	0022      	movs	r2, r4
 8009900:	401a      	ands	r2, r3
 8009902:	9208      	str	r2, [sp, #32]
 8009904:	421c      	tst	r4, r3
 8009906:	d001      	beq.n	800990c <_strtod_l+0x610>
 8009908:	335a      	adds	r3, #90	; 0x5a
 800990a:	9308      	str	r3, [sp, #32]
 800990c:	0030      	movs	r0, r6
 800990e:	0039      	movs	r1, r7
 8009910:	2300      	movs	r3, #0
 8009912:	4dc5      	ldr	r5, [pc, #788]	; (8009c28 <_strtod_l+0x92c>)
 8009914:	2201      	movs	r2, #1
 8009916:	4214      	tst	r4, r2
 8009918:	d004      	beq.n	8009924 <_strtod_l+0x628>
 800991a:	682a      	ldr	r2, [r5, #0]
 800991c:	686b      	ldr	r3, [r5, #4]
 800991e:	f7f7 fd73 	bl	8001408 <__aeabi_dmul>
 8009922:	2301      	movs	r3, #1
 8009924:	1064      	asrs	r4, r4, #1
 8009926:	3508      	adds	r5, #8
 8009928:	2c00      	cmp	r4, #0
 800992a:	d1f3      	bne.n	8009914 <_strtod_l+0x618>
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <_strtod_l+0x638>
 8009930:	0006      	movs	r6, r0
 8009932:	000f      	movs	r7, r1
 8009934:	9b08      	ldr	r3, [sp, #32]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00f      	beq.n	800995a <_strtod_l+0x65e>
 800993a:	236b      	movs	r3, #107	; 0x6b
 800993c:	007a      	lsls	r2, r7, #1
 800993e:	0d52      	lsrs	r2, r2, #21
 8009940:	0039      	movs	r1, r7
 8009942:	1a9b      	subs	r3, r3, r2
 8009944:	2b00      	cmp	r3, #0
 8009946:	dd08      	ble.n	800995a <_strtod_l+0x65e>
 8009948:	2b1f      	cmp	r3, #31
 800994a:	dc00      	bgt.n	800994e <_strtod_l+0x652>
 800994c:	e124      	b.n	8009b98 <_strtod_l+0x89c>
 800994e:	2600      	movs	r6, #0
 8009950:	2b34      	cmp	r3, #52	; 0x34
 8009952:	dc00      	bgt.n	8009956 <_strtod_l+0x65a>
 8009954:	e119      	b.n	8009b8a <_strtod_l+0x88e>
 8009956:	27dc      	movs	r7, #220	; 0xdc
 8009958:	04bf      	lsls	r7, r7, #18
 800995a:	2200      	movs	r2, #0
 800995c:	2300      	movs	r3, #0
 800995e:	0030      	movs	r0, r6
 8009960:	0039      	movs	r1, r7
 8009962:	f7f6 fd73 	bl	800044c <__aeabi_dcmpeq>
 8009966:	2800      	cmp	r0, #0
 8009968:	d1a0      	bne.n	80098ac <_strtod_l+0x5b0>
 800996a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800996c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800996e:	9300      	str	r3, [sp, #0]
 8009970:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009972:	9b06      	ldr	r3, [sp, #24]
 8009974:	9805      	ldr	r0, [sp, #20]
 8009976:	f002 f973 	bl	800bc60 <__s2b>
 800997a:	900b      	str	r0, [sp, #44]	; 0x2c
 800997c:	2800      	cmp	r0, #0
 800997e:	d100      	bne.n	8009982 <_strtod_l+0x686>
 8009980:	e721      	b.n	80097c6 <_strtod_l+0x4ca>
 8009982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009984:	9907      	ldr	r1, [sp, #28]
 8009986:	17da      	asrs	r2, r3, #31
 8009988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800998a:	1a5b      	subs	r3, r3, r1
 800998c:	401a      	ands	r2, r3
 800998e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009990:	9215      	str	r2, [sp, #84]	; 0x54
 8009992:	43db      	mvns	r3, r3
 8009994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009996:	17db      	asrs	r3, r3, #31
 8009998:	401a      	ands	r2, r3
 800999a:	2300      	movs	r3, #0
 800999c:	921a      	str	r2, [sp, #104]	; 0x68
 800999e:	9306      	str	r3, [sp, #24]
 80099a0:	9307      	str	r3, [sp, #28]
 80099a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099a4:	9805      	ldr	r0, [sp, #20]
 80099a6:	6859      	ldr	r1, [r3, #4]
 80099a8:	f002 f8ae 	bl	800bb08 <_Balloc>
 80099ac:	9009      	str	r0, [sp, #36]	; 0x24
 80099ae:	2800      	cmp	r0, #0
 80099b0:	d100      	bne.n	80099b4 <_strtod_l+0x6b8>
 80099b2:	e70d      	b.n	80097d0 <_strtod_l+0x4d4>
 80099b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	310c      	adds	r1, #12
 80099bc:	1c9a      	adds	r2, r3, #2
 80099be:	0092      	lsls	r2, r2, #2
 80099c0:	300c      	adds	r0, #12
 80099c2:	930c      	str	r3, [sp, #48]	; 0x30
 80099c4:	f7fe fc4c 	bl	8008260 <memcpy>
 80099c8:	ab22      	add	r3, sp, #136	; 0x88
 80099ca:	9301      	str	r3, [sp, #4]
 80099cc:	ab21      	add	r3, sp, #132	; 0x84
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	0032      	movs	r2, r6
 80099d2:	003b      	movs	r3, r7
 80099d4:	9805      	ldr	r0, [sp, #20]
 80099d6:	9612      	str	r6, [sp, #72]	; 0x48
 80099d8:	9713      	str	r7, [sp, #76]	; 0x4c
 80099da:	f002 fc8d 	bl	800c2f8 <__d2b>
 80099de:	9020      	str	r0, [sp, #128]	; 0x80
 80099e0:	2800      	cmp	r0, #0
 80099e2:	d100      	bne.n	80099e6 <_strtod_l+0x6ea>
 80099e4:	e6f4      	b.n	80097d0 <_strtod_l+0x4d4>
 80099e6:	2101      	movs	r1, #1
 80099e8:	9805      	ldr	r0, [sp, #20]
 80099ea:	f002 f9cd 	bl	800bd88 <__i2b>
 80099ee:	9007      	str	r0, [sp, #28]
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d100      	bne.n	80099f6 <_strtod_l+0x6fa>
 80099f4:	e6ec      	b.n	80097d0 <_strtod_l+0x4d4>
 80099f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099f8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80099fa:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80099fc:	1ad4      	subs	r4, r2, r3
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	db01      	blt.n	8009a06 <_strtod_l+0x70a>
 8009a02:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8009a04:	195d      	adds	r5, r3, r5
 8009a06:	9908      	ldr	r1, [sp, #32]
 8009a08:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009a0a:	1a5b      	subs	r3, r3, r1
 8009a0c:	2136      	movs	r1, #54	; 0x36
 8009a0e:	189b      	adds	r3, r3, r2
 8009a10:	1a8a      	subs	r2, r1, r2
 8009a12:	4986      	ldr	r1, [pc, #536]	; (8009c2c <_strtod_l+0x930>)
 8009a14:	2001      	movs	r0, #1
 8009a16:	468c      	mov	ip, r1
 8009a18:	2100      	movs	r1, #0
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	9110      	str	r1, [sp, #64]	; 0x40
 8009a1e:	9014      	str	r0, [sp, #80]	; 0x50
 8009a20:	4563      	cmp	r3, ip
 8009a22:	da07      	bge.n	8009a34 <_strtod_l+0x738>
 8009a24:	4661      	mov	r1, ip
 8009a26:	1ac9      	subs	r1, r1, r3
 8009a28:	1a52      	subs	r2, r2, r1
 8009a2a:	291f      	cmp	r1, #31
 8009a2c:	dd00      	ble.n	8009a30 <_strtod_l+0x734>
 8009a2e:	e0b8      	b.n	8009ba2 <_strtod_l+0x8a6>
 8009a30:	4088      	lsls	r0, r1
 8009a32:	9014      	str	r0, [sp, #80]	; 0x50
 8009a34:	18ab      	adds	r3, r5, r2
 8009a36:	930c      	str	r3, [sp, #48]	; 0x30
 8009a38:	18a4      	adds	r4, r4, r2
 8009a3a:	9b08      	ldr	r3, [sp, #32]
 8009a3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a3e:	191c      	adds	r4, r3, r4
 8009a40:	002b      	movs	r3, r5
 8009a42:	4295      	cmp	r5, r2
 8009a44:	dd00      	ble.n	8009a48 <_strtod_l+0x74c>
 8009a46:	0013      	movs	r3, r2
 8009a48:	42a3      	cmp	r3, r4
 8009a4a:	dd00      	ble.n	8009a4e <_strtod_l+0x752>
 8009a4c:	0023      	movs	r3, r4
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	dd04      	ble.n	8009a5c <_strtod_l+0x760>
 8009a52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a54:	1ae4      	subs	r4, r4, r3
 8009a56:	1ad2      	subs	r2, r2, r3
 8009a58:	920c      	str	r2, [sp, #48]	; 0x30
 8009a5a:	1aed      	subs	r5, r5, r3
 8009a5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	dd17      	ble.n	8009a92 <_strtod_l+0x796>
 8009a62:	001a      	movs	r2, r3
 8009a64:	9907      	ldr	r1, [sp, #28]
 8009a66:	9805      	ldr	r0, [sp, #20]
 8009a68:	f002 fa54 	bl	800bf14 <__pow5mult>
 8009a6c:	9007      	str	r0, [sp, #28]
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	d100      	bne.n	8009a74 <_strtod_l+0x778>
 8009a72:	e6ad      	b.n	80097d0 <_strtod_l+0x4d4>
 8009a74:	0001      	movs	r1, r0
 8009a76:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009a78:	9805      	ldr	r0, [sp, #20]
 8009a7a:	f002 f99b 	bl	800bdb4 <__multiply>
 8009a7e:	900f      	str	r0, [sp, #60]	; 0x3c
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d100      	bne.n	8009a86 <_strtod_l+0x78a>
 8009a84:	e6a4      	b.n	80097d0 <_strtod_l+0x4d4>
 8009a86:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009a88:	9805      	ldr	r0, [sp, #20]
 8009a8a:	f002 f881 	bl	800bb90 <_Bfree>
 8009a8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a90:	9320      	str	r3, [sp, #128]	; 0x80
 8009a92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	dd00      	ble.n	8009a9a <_strtod_l+0x79e>
 8009a98:	e089      	b.n	8009bae <_strtod_l+0x8b2>
 8009a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	dd08      	ble.n	8009ab2 <_strtod_l+0x7b6>
 8009aa0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009aa2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009aa4:	9805      	ldr	r0, [sp, #20]
 8009aa6:	f002 fa35 	bl	800bf14 <__pow5mult>
 8009aaa:	9009      	str	r0, [sp, #36]	; 0x24
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d100      	bne.n	8009ab2 <_strtod_l+0x7b6>
 8009ab0:	e68e      	b.n	80097d0 <_strtod_l+0x4d4>
 8009ab2:	2c00      	cmp	r4, #0
 8009ab4:	dd08      	ble.n	8009ac8 <_strtod_l+0x7cc>
 8009ab6:	0022      	movs	r2, r4
 8009ab8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009aba:	9805      	ldr	r0, [sp, #20]
 8009abc:	f002 fa86 	bl	800bfcc <__lshift>
 8009ac0:	9009      	str	r0, [sp, #36]	; 0x24
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	d100      	bne.n	8009ac8 <_strtod_l+0x7cc>
 8009ac6:	e683      	b.n	80097d0 <_strtod_l+0x4d4>
 8009ac8:	2d00      	cmp	r5, #0
 8009aca:	dd08      	ble.n	8009ade <_strtod_l+0x7e2>
 8009acc:	002a      	movs	r2, r5
 8009ace:	9907      	ldr	r1, [sp, #28]
 8009ad0:	9805      	ldr	r0, [sp, #20]
 8009ad2:	f002 fa7b 	bl	800bfcc <__lshift>
 8009ad6:	9007      	str	r0, [sp, #28]
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d100      	bne.n	8009ade <_strtod_l+0x7e2>
 8009adc:	e678      	b.n	80097d0 <_strtod_l+0x4d4>
 8009ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ae0:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009ae2:	9805      	ldr	r0, [sp, #20]
 8009ae4:	f002 fafc 	bl	800c0e0 <__mdiff>
 8009ae8:	9006      	str	r0, [sp, #24]
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d100      	bne.n	8009af0 <_strtod_l+0x7f4>
 8009aee:	e66f      	b.n	80097d0 <_strtod_l+0x4d4>
 8009af0:	2200      	movs	r2, #0
 8009af2:	68c3      	ldr	r3, [r0, #12]
 8009af4:	9907      	ldr	r1, [sp, #28]
 8009af6:	60c2      	str	r2, [r0, #12]
 8009af8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009afa:	f002 fad5 	bl	800c0a8 <__mcmp>
 8009afe:	2800      	cmp	r0, #0
 8009b00:	da5f      	bge.n	8009bc2 <_strtod_l+0x8c6>
 8009b02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b04:	4333      	orrs	r3, r6
 8009b06:	d000      	beq.n	8009b0a <_strtod_l+0x80e>
 8009b08:	e08a      	b.n	8009c20 <_strtod_l+0x924>
 8009b0a:	033b      	lsls	r3, r7, #12
 8009b0c:	d000      	beq.n	8009b10 <_strtod_l+0x814>
 8009b0e:	e087      	b.n	8009c20 <_strtod_l+0x924>
 8009b10:	22d6      	movs	r2, #214	; 0xd6
 8009b12:	4b47      	ldr	r3, [pc, #284]	; (8009c30 <_strtod_l+0x934>)
 8009b14:	04d2      	lsls	r2, r2, #19
 8009b16:	403b      	ands	r3, r7
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d800      	bhi.n	8009b1e <_strtod_l+0x822>
 8009b1c:	e080      	b.n	8009c20 <_strtod_l+0x924>
 8009b1e:	9b06      	ldr	r3, [sp, #24]
 8009b20:	695b      	ldr	r3, [r3, #20]
 8009b22:	930a      	str	r3, [sp, #40]	; 0x28
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d104      	bne.n	8009b32 <_strtod_l+0x836>
 8009b28:	9b06      	ldr	r3, [sp, #24]
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	930a      	str	r3, [sp, #40]	; 0x28
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	dd76      	ble.n	8009c20 <_strtod_l+0x924>
 8009b32:	9906      	ldr	r1, [sp, #24]
 8009b34:	2201      	movs	r2, #1
 8009b36:	9805      	ldr	r0, [sp, #20]
 8009b38:	f002 fa48 	bl	800bfcc <__lshift>
 8009b3c:	9907      	ldr	r1, [sp, #28]
 8009b3e:	9006      	str	r0, [sp, #24]
 8009b40:	f002 fab2 	bl	800c0a8 <__mcmp>
 8009b44:	2800      	cmp	r0, #0
 8009b46:	dd6b      	ble.n	8009c20 <_strtod_l+0x924>
 8009b48:	9908      	ldr	r1, [sp, #32]
 8009b4a:	003b      	movs	r3, r7
 8009b4c:	4a38      	ldr	r2, [pc, #224]	; (8009c30 <_strtod_l+0x934>)
 8009b4e:	2900      	cmp	r1, #0
 8009b50:	d100      	bne.n	8009b54 <_strtod_l+0x858>
 8009b52:	e092      	b.n	8009c7a <_strtod_l+0x97e>
 8009b54:	0011      	movs	r1, r2
 8009b56:	20d6      	movs	r0, #214	; 0xd6
 8009b58:	4039      	ands	r1, r7
 8009b5a:	04c0      	lsls	r0, r0, #19
 8009b5c:	4281      	cmp	r1, r0
 8009b5e:	dd00      	ble.n	8009b62 <_strtod_l+0x866>
 8009b60:	e08b      	b.n	8009c7a <_strtod_l+0x97e>
 8009b62:	23dc      	movs	r3, #220	; 0xdc
 8009b64:	049b      	lsls	r3, r3, #18
 8009b66:	4299      	cmp	r1, r3
 8009b68:	dc00      	bgt.n	8009b6c <_strtod_l+0x870>
 8009b6a:	e6a4      	b.n	80098b6 <_strtod_l+0x5ba>
 8009b6c:	0030      	movs	r0, r6
 8009b6e:	0039      	movs	r1, r7
 8009b70:	2200      	movs	r2, #0
 8009b72:	4b30      	ldr	r3, [pc, #192]	; (8009c34 <_strtod_l+0x938>)
 8009b74:	f7f7 fc48 	bl	8001408 <__aeabi_dmul>
 8009b78:	0006      	movs	r6, r0
 8009b7a:	000f      	movs	r7, r1
 8009b7c:	4308      	orrs	r0, r1
 8009b7e:	d000      	beq.n	8009b82 <_strtod_l+0x886>
 8009b80:	e62f      	b.n	80097e2 <_strtod_l+0x4e6>
 8009b82:	2322      	movs	r3, #34	; 0x22
 8009b84:	9a05      	ldr	r2, [sp, #20]
 8009b86:	6013      	str	r3, [r2, #0]
 8009b88:	e62b      	b.n	80097e2 <_strtod_l+0x4e6>
 8009b8a:	234b      	movs	r3, #75	; 0x4b
 8009b8c:	1a9a      	subs	r2, r3, r2
 8009b8e:	3b4c      	subs	r3, #76	; 0x4c
 8009b90:	4093      	lsls	r3, r2
 8009b92:	4019      	ands	r1, r3
 8009b94:	000f      	movs	r7, r1
 8009b96:	e6e0      	b.n	800995a <_strtod_l+0x65e>
 8009b98:	2201      	movs	r2, #1
 8009b9a:	4252      	negs	r2, r2
 8009b9c:	409a      	lsls	r2, r3
 8009b9e:	4016      	ands	r6, r2
 8009ba0:	e6db      	b.n	800995a <_strtod_l+0x65e>
 8009ba2:	4925      	ldr	r1, [pc, #148]	; (8009c38 <_strtod_l+0x93c>)
 8009ba4:	1acb      	subs	r3, r1, r3
 8009ba6:	0001      	movs	r1, r0
 8009ba8:	4099      	lsls	r1, r3
 8009baa:	9110      	str	r1, [sp, #64]	; 0x40
 8009bac:	e741      	b.n	8009a32 <_strtod_l+0x736>
 8009bae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bb0:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009bb2:	9805      	ldr	r0, [sp, #20]
 8009bb4:	f002 fa0a 	bl	800bfcc <__lshift>
 8009bb8:	9020      	str	r0, [sp, #128]	; 0x80
 8009bba:	2800      	cmp	r0, #0
 8009bbc:	d000      	beq.n	8009bc0 <_strtod_l+0x8c4>
 8009bbe:	e76c      	b.n	8009a9a <_strtod_l+0x79e>
 8009bc0:	e606      	b.n	80097d0 <_strtod_l+0x4d4>
 8009bc2:	970c      	str	r7, [sp, #48]	; 0x30
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	d176      	bne.n	8009cb6 <_strtod_l+0x9ba>
 8009bc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009bca:	033b      	lsls	r3, r7, #12
 8009bcc:	0b1b      	lsrs	r3, r3, #12
 8009bce:	2a00      	cmp	r2, #0
 8009bd0:	d038      	beq.n	8009c44 <_strtod_l+0x948>
 8009bd2:	4a1a      	ldr	r2, [pc, #104]	; (8009c3c <_strtod_l+0x940>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d138      	bne.n	8009c4a <_strtod_l+0x94e>
 8009bd8:	2201      	movs	r2, #1
 8009bda:	9b08      	ldr	r3, [sp, #32]
 8009bdc:	4252      	negs	r2, r2
 8009bde:	0031      	movs	r1, r6
 8009be0:	0010      	movs	r0, r2
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00b      	beq.n	8009bfe <_strtod_l+0x902>
 8009be6:	24d4      	movs	r4, #212	; 0xd4
 8009be8:	4b11      	ldr	r3, [pc, #68]	; (8009c30 <_strtod_l+0x934>)
 8009bea:	0010      	movs	r0, r2
 8009bec:	403b      	ands	r3, r7
 8009bee:	04e4      	lsls	r4, r4, #19
 8009bf0:	42a3      	cmp	r3, r4
 8009bf2:	d804      	bhi.n	8009bfe <_strtod_l+0x902>
 8009bf4:	306c      	adds	r0, #108	; 0x6c
 8009bf6:	0d1b      	lsrs	r3, r3, #20
 8009bf8:	1ac3      	subs	r3, r0, r3
 8009bfa:	409a      	lsls	r2, r3
 8009bfc:	0010      	movs	r0, r2
 8009bfe:	4281      	cmp	r1, r0
 8009c00:	d123      	bne.n	8009c4a <_strtod_l+0x94e>
 8009c02:	4b0f      	ldr	r3, [pc, #60]	; (8009c40 <_strtod_l+0x944>)
 8009c04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d102      	bne.n	8009c10 <_strtod_l+0x914>
 8009c0a:	1c4b      	adds	r3, r1, #1
 8009c0c:	d100      	bne.n	8009c10 <_strtod_l+0x914>
 8009c0e:	e5df      	b.n	80097d0 <_strtod_l+0x4d4>
 8009c10:	4b07      	ldr	r3, [pc, #28]	; (8009c30 <_strtod_l+0x934>)
 8009c12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c14:	2600      	movs	r6, #0
 8009c16:	401a      	ands	r2, r3
 8009c18:	0013      	movs	r3, r2
 8009c1a:	2280      	movs	r2, #128	; 0x80
 8009c1c:	0352      	lsls	r2, r2, #13
 8009c1e:	189f      	adds	r7, r3, r2
 8009c20:	9b08      	ldr	r3, [sp, #32]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d1a2      	bne.n	8009b6c <_strtod_l+0x870>
 8009c26:	e5dc      	b.n	80097e2 <_strtod_l+0x4e6>
 8009c28:	0800d640 	.word	0x0800d640
 8009c2c:	fffffc02 	.word	0xfffffc02
 8009c30:	7ff00000 	.word	0x7ff00000
 8009c34:	39500000 	.word	0x39500000
 8009c38:	fffffbe2 	.word	0xfffffbe2
 8009c3c:	000fffff 	.word	0x000fffff
 8009c40:	7fefffff 	.word	0x7fefffff
 8009c44:	4333      	orrs	r3, r6
 8009c46:	d100      	bne.n	8009c4a <_strtod_l+0x94e>
 8009c48:	e77e      	b.n	8009b48 <_strtod_l+0x84c>
 8009c4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d01d      	beq.n	8009c8c <_strtod_l+0x990>
 8009c50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c52:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c54:	4213      	tst	r3, r2
 8009c56:	d0e3      	beq.n	8009c20 <_strtod_l+0x924>
 8009c58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c5a:	0030      	movs	r0, r6
 8009c5c:	0039      	movs	r1, r7
 8009c5e:	9a08      	ldr	r2, [sp, #32]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d017      	beq.n	8009c94 <_strtod_l+0x998>
 8009c64:	f7ff fb32 	bl	80092cc <sulp>
 8009c68:	0002      	movs	r2, r0
 8009c6a:	000b      	movs	r3, r1
 8009c6c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009c6e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009c70:	f7f6 fc8c 	bl	800058c <__aeabi_dadd>
 8009c74:	0006      	movs	r6, r0
 8009c76:	000f      	movs	r7, r1
 8009c78:	e7d2      	b.n	8009c20 <_strtod_l+0x924>
 8009c7a:	2601      	movs	r6, #1
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	4a99      	ldr	r2, [pc, #612]	; (8009ee4 <_strtod_l+0xbe8>)
 8009c80:	4276      	negs	r6, r6
 8009c82:	189b      	adds	r3, r3, r2
 8009c84:	4a98      	ldr	r2, [pc, #608]	; (8009ee8 <_strtod_l+0xbec>)
 8009c86:	431a      	orrs	r2, r3
 8009c88:	0017      	movs	r7, r2
 8009c8a:	e7c9      	b.n	8009c20 <_strtod_l+0x924>
 8009c8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c8e:	4233      	tst	r3, r6
 8009c90:	d0c6      	beq.n	8009c20 <_strtod_l+0x924>
 8009c92:	e7e1      	b.n	8009c58 <_strtod_l+0x95c>
 8009c94:	f7ff fb1a 	bl	80092cc <sulp>
 8009c98:	0002      	movs	r2, r0
 8009c9a:	000b      	movs	r3, r1
 8009c9c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009c9e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009ca0:	f7f7 fe1e 	bl	80018e0 <__aeabi_dsub>
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	0006      	movs	r6, r0
 8009caa:	000f      	movs	r7, r1
 8009cac:	f7f6 fbce 	bl	800044c <__aeabi_dcmpeq>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	d0b5      	beq.n	8009c20 <_strtod_l+0x924>
 8009cb4:	e5ff      	b.n	80098b6 <_strtod_l+0x5ba>
 8009cb6:	9907      	ldr	r1, [sp, #28]
 8009cb8:	9806      	ldr	r0, [sp, #24]
 8009cba:	f002 fb81 	bl	800c3c0 <__ratio>
 8009cbe:	2380      	movs	r3, #128	; 0x80
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	05db      	lsls	r3, r3, #23
 8009cc4:	0004      	movs	r4, r0
 8009cc6:	000d      	movs	r5, r1
 8009cc8:	f7f6 fbd0 	bl	800046c <__aeabi_dcmple>
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	d075      	beq.n	8009dbc <_strtod_l+0xac0>
 8009cd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d047      	beq.n	8009d66 <_strtod_l+0xa6a>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	4c84      	ldr	r4, [pc, #528]	; (8009eec <_strtod_l+0xbf0>)
 8009cda:	2500      	movs	r5, #0
 8009cdc:	9310      	str	r3, [sp, #64]	; 0x40
 8009cde:	9411      	str	r4, [sp, #68]	; 0x44
 8009ce0:	4c82      	ldr	r4, [pc, #520]	; (8009eec <_strtod_l+0xbf0>)
 8009ce2:	4a83      	ldr	r2, [pc, #524]	; (8009ef0 <_strtod_l+0xbf4>)
 8009ce4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ce6:	4013      	ands	r3, r2
 8009ce8:	9314      	str	r3, [sp, #80]	; 0x50
 8009cea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009cec:	4b81      	ldr	r3, [pc, #516]	; (8009ef4 <_strtod_l+0xbf8>)
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d000      	beq.n	8009cf4 <_strtod_l+0x9f8>
 8009cf2:	e0ac      	b.n	8009e4e <_strtod_l+0xb52>
 8009cf4:	4a80      	ldr	r2, [pc, #512]	; (8009ef8 <_strtod_l+0xbfc>)
 8009cf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cf8:	4694      	mov	ip, r2
 8009cfa:	4463      	add	r3, ip
 8009cfc:	001f      	movs	r7, r3
 8009cfe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d02:	0030      	movs	r0, r6
 8009d04:	0039      	movs	r1, r7
 8009d06:	920c      	str	r2, [sp, #48]	; 0x30
 8009d08:	930d      	str	r3, [sp, #52]	; 0x34
 8009d0a:	f002 fa81 	bl	800c210 <__ulp>
 8009d0e:	0002      	movs	r2, r0
 8009d10:	000b      	movs	r3, r1
 8009d12:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009d14:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009d16:	f7f7 fb77 	bl	8001408 <__aeabi_dmul>
 8009d1a:	0032      	movs	r2, r6
 8009d1c:	003b      	movs	r3, r7
 8009d1e:	f7f6 fc35 	bl	800058c <__aeabi_dadd>
 8009d22:	4a73      	ldr	r2, [pc, #460]	; (8009ef0 <_strtod_l+0xbf4>)
 8009d24:	4b75      	ldr	r3, [pc, #468]	; (8009efc <_strtod_l+0xc00>)
 8009d26:	0006      	movs	r6, r0
 8009d28:	400a      	ands	r2, r1
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	d95e      	bls.n	8009dec <_strtod_l+0xaf0>
 8009d2e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d30:	4b73      	ldr	r3, [pc, #460]	; (8009f00 <_strtod_l+0xc04>)
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d103      	bne.n	8009d3e <_strtod_l+0xa42>
 8009d36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d38:	3301      	adds	r3, #1
 8009d3a:	d100      	bne.n	8009d3e <_strtod_l+0xa42>
 8009d3c:	e548      	b.n	80097d0 <_strtod_l+0x4d4>
 8009d3e:	2601      	movs	r6, #1
 8009d40:	4f6f      	ldr	r7, [pc, #444]	; (8009f00 <_strtod_l+0xc04>)
 8009d42:	4276      	negs	r6, r6
 8009d44:	9920      	ldr	r1, [sp, #128]	; 0x80
 8009d46:	9805      	ldr	r0, [sp, #20]
 8009d48:	f001 ff22 	bl	800bb90 <_Bfree>
 8009d4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d4e:	9805      	ldr	r0, [sp, #20]
 8009d50:	f001 ff1e 	bl	800bb90 <_Bfree>
 8009d54:	9907      	ldr	r1, [sp, #28]
 8009d56:	9805      	ldr	r0, [sp, #20]
 8009d58:	f001 ff1a 	bl	800bb90 <_Bfree>
 8009d5c:	9906      	ldr	r1, [sp, #24]
 8009d5e:	9805      	ldr	r0, [sp, #20]
 8009d60:	f001 ff16 	bl	800bb90 <_Bfree>
 8009d64:	e61d      	b.n	80099a2 <_strtod_l+0x6a6>
 8009d66:	2e00      	cmp	r6, #0
 8009d68:	d11c      	bne.n	8009da4 <_strtod_l+0xaa8>
 8009d6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d6c:	031b      	lsls	r3, r3, #12
 8009d6e:	d11f      	bne.n	8009db0 <_strtod_l+0xab4>
 8009d70:	2200      	movs	r2, #0
 8009d72:	0020      	movs	r0, r4
 8009d74:	0029      	movs	r1, r5
 8009d76:	4b5d      	ldr	r3, [pc, #372]	; (8009eec <_strtod_l+0xbf0>)
 8009d78:	f7f6 fb6e 	bl	8000458 <__aeabi_dcmplt>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	d11a      	bne.n	8009db6 <_strtod_l+0xaba>
 8009d80:	0020      	movs	r0, r4
 8009d82:	0029      	movs	r1, r5
 8009d84:	2200      	movs	r2, #0
 8009d86:	4b5f      	ldr	r3, [pc, #380]	; (8009f04 <_strtod_l+0xc08>)
 8009d88:	f7f7 fb3e 	bl	8001408 <__aeabi_dmul>
 8009d8c:	0005      	movs	r5, r0
 8009d8e:	000c      	movs	r4, r1
 8009d90:	2380      	movs	r3, #128	; 0x80
 8009d92:	061b      	lsls	r3, r3, #24
 8009d94:	18e3      	adds	r3, r4, r3
 8009d96:	951c      	str	r5, [sp, #112]	; 0x70
 8009d98:	931d      	str	r3, [sp, #116]	; 0x74
 8009d9a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009d9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009d9e:	9210      	str	r2, [sp, #64]	; 0x40
 8009da0:	9311      	str	r3, [sp, #68]	; 0x44
 8009da2:	e79e      	b.n	8009ce2 <_strtod_l+0x9e6>
 8009da4:	2e01      	cmp	r6, #1
 8009da6:	d103      	bne.n	8009db0 <_strtod_l+0xab4>
 8009da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d100      	bne.n	8009db0 <_strtod_l+0xab4>
 8009dae:	e582      	b.n	80098b6 <_strtod_l+0x5ba>
 8009db0:	2300      	movs	r3, #0
 8009db2:	4c55      	ldr	r4, [pc, #340]	; (8009f08 <_strtod_l+0xc0c>)
 8009db4:	e791      	b.n	8009cda <_strtod_l+0x9de>
 8009db6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009db8:	4c52      	ldr	r4, [pc, #328]	; (8009f04 <_strtod_l+0xc08>)
 8009dba:	e7e9      	b.n	8009d90 <_strtod_l+0xa94>
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	0020      	movs	r0, r4
 8009dc0:	0029      	movs	r1, r5
 8009dc2:	4b50      	ldr	r3, [pc, #320]	; (8009f04 <_strtod_l+0xc08>)
 8009dc4:	f7f7 fb20 	bl	8001408 <__aeabi_dmul>
 8009dc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009dca:	0005      	movs	r5, r0
 8009dcc:	000b      	movs	r3, r1
 8009dce:	000c      	movs	r4, r1
 8009dd0:	2a00      	cmp	r2, #0
 8009dd2:	d107      	bne.n	8009de4 <_strtod_l+0xae8>
 8009dd4:	2280      	movs	r2, #128	; 0x80
 8009dd6:	0612      	lsls	r2, r2, #24
 8009dd8:	188b      	adds	r3, r1, r2
 8009dda:	9016      	str	r0, [sp, #88]	; 0x58
 8009ddc:	9317      	str	r3, [sp, #92]	; 0x5c
 8009dde:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009de0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009de2:	e7dc      	b.n	8009d9e <_strtod_l+0xaa2>
 8009de4:	0002      	movs	r2, r0
 8009de6:	9216      	str	r2, [sp, #88]	; 0x58
 8009de8:	9317      	str	r3, [sp, #92]	; 0x5c
 8009dea:	e7f8      	b.n	8009dde <_strtod_l+0xae2>
 8009dec:	23d4      	movs	r3, #212	; 0xd4
 8009dee:	049b      	lsls	r3, r3, #18
 8009df0:	18cf      	adds	r7, r1, r3
 8009df2:	9b08      	ldr	r3, [sp, #32]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d1a5      	bne.n	8009d44 <_strtod_l+0xa48>
 8009df8:	4b3d      	ldr	r3, [pc, #244]	; (8009ef0 <_strtod_l+0xbf4>)
 8009dfa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009dfc:	403b      	ands	r3, r7
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d1a0      	bne.n	8009d44 <_strtod_l+0xa48>
 8009e02:	0028      	movs	r0, r5
 8009e04:	0021      	movs	r1, r4
 8009e06:	f7f6 fb6f 	bl	80004e8 <__aeabi_d2lz>
 8009e0a:	f7f6 fba9 	bl	8000560 <__aeabi_l2d>
 8009e0e:	0002      	movs	r2, r0
 8009e10:	000b      	movs	r3, r1
 8009e12:	0028      	movs	r0, r5
 8009e14:	0021      	movs	r1, r4
 8009e16:	f7f7 fd63 	bl	80018e0 <__aeabi_dsub>
 8009e1a:	033b      	lsls	r3, r7, #12
 8009e1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e1e:	0b1b      	lsrs	r3, r3, #12
 8009e20:	4333      	orrs	r3, r6
 8009e22:	4313      	orrs	r3, r2
 8009e24:	0004      	movs	r4, r0
 8009e26:	000d      	movs	r5, r1
 8009e28:	4a38      	ldr	r2, [pc, #224]	; (8009f0c <_strtod_l+0xc10>)
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d055      	beq.n	8009eda <_strtod_l+0xbde>
 8009e2e:	4b38      	ldr	r3, [pc, #224]	; (8009f10 <_strtod_l+0xc14>)
 8009e30:	f7f6 fb12 	bl	8000458 <__aeabi_dcmplt>
 8009e34:	2800      	cmp	r0, #0
 8009e36:	d000      	beq.n	8009e3a <_strtod_l+0xb3e>
 8009e38:	e4d3      	b.n	80097e2 <_strtod_l+0x4e6>
 8009e3a:	0020      	movs	r0, r4
 8009e3c:	0029      	movs	r1, r5
 8009e3e:	4a35      	ldr	r2, [pc, #212]	; (8009f14 <_strtod_l+0xc18>)
 8009e40:	4b30      	ldr	r3, [pc, #192]	; (8009f04 <_strtod_l+0xc08>)
 8009e42:	f7f6 fb1d 	bl	8000480 <__aeabi_dcmpgt>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d100      	bne.n	8009e4c <_strtod_l+0xb50>
 8009e4a:	e77b      	b.n	8009d44 <_strtod_l+0xa48>
 8009e4c:	e4c9      	b.n	80097e2 <_strtod_l+0x4e6>
 8009e4e:	9b08      	ldr	r3, [sp, #32]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d02b      	beq.n	8009eac <_strtod_l+0xbb0>
 8009e54:	23d4      	movs	r3, #212	; 0xd4
 8009e56:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e58:	04db      	lsls	r3, r3, #19
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	d826      	bhi.n	8009eac <_strtod_l+0xbb0>
 8009e5e:	0028      	movs	r0, r5
 8009e60:	0021      	movs	r1, r4
 8009e62:	4a2d      	ldr	r2, [pc, #180]	; (8009f18 <_strtod_l+0xc1c>)
 8009e64:	4b2d      	ldr	r3, [pc, #180]	; (8009f1c <_strtod_l+0xc20>)
 8009e66:	f7f6 fb01 	bl	800046c <__aeabi_dcmple>
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	d017      	beq.n	8009e9e <_strtod_l+0xba2>
 8009e6e:	0028      	movs	r0, r5
 8009e70:	0021      	movs	r1, r4
 8009e72:	f7f6 fb1b 	bl	80004ac <__aeabi_d2uiz>
 8009e76:	2800      	cmp	r0, #0
 8009e78:	d100      	bne.n	8009e7c <_strtod_l+0xb80>
 8009e7a:	3001      	adds	r0, #1
 8009e7c:	f7f8 f946 	bl	800210c <__aeabi_ui2d>
 8009e80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e82:	0005      	movs	r5, r0
 8009e84:	000b      	movs	r3, r1
 8009e86:	000c      	movs	r4, r1
 8009e88:	2a00      	cmp	r2, #0
 8009e8a:	d122      	bne.n	8009ed2 <_strtod_l+0xbd6>
 8009e8c:	2280      	movs	r2, #128	; 0x80
 8009e8e:	0612      	lsls	r2, r2, #24
 8009e90:	188b      	adds	r3, r1, r2
 8009e92:	9018      	str	r0, [sp, #96]	; 0x60
 8009e94:	9319      	str	r3, [sp, #100]	; 0x64
 8009e96:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009e98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009e9a:	9210      	str	r2, [sp, #64]	; 0x40
 8009e9c:	9311      	str	r3, [sp, #68]	; 0x44
 8009e9e:	22d6      	movs	r2, #214	; 0xd6
 8009ea0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ea2:	04d2      	lsls	r2, r2, #19
 8009ea4:	189b      	adds	r3, r3, r2
 8009ea6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ea8:	1a9b      	subs	r3, r3, r2
 8009eaa:	9311      	str	r3, [sp, #68]	; 0x44
 8009eac:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009eae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009eb0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8009eb2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8009eb4:	f002 f9ac 	bl	800c210 <__ulp>
 8009eb8:	0002      	movs	r2, r0
 8009eba:	000b      	movs	r3, r1
 8009ebc:	0030      	movs	r0, r6
 8009ebe:	0039      	movs	r1, r7
 8009ec0:	f7f7 faa2 	bl	8001408 <__aeabi_dmul>
 8009ec4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ec6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ec8:	f7f6 fb60 	bl	800058c <__aeabi_dadd>
 8009ecc:	0006      	movs	r6, r0
 8009ece:	000f      	movs	r7, r1
 8009ed0:	e78f      	b.n	8009df2 <_strtod_l+0xaf6>
 8009ed2:	0002      	movs	r2, r0
 8009ed4:	9218      	str	r2, [sp, #96]	; 0x60
 8009ed6:	9319      	str	r3, [sp, #100]	; 0x64
 8009ed8:	e7dd      	b.n	8009e96 <_strtod_l+0xb9a>
 8009eda:	4b11      	ldr	r3, [pc, #68]	; (8009f20 <_strtod_l+0xc24>)
 8009edc:	f7f6 fabc 	bl	8000458 <__aeabi_dcmplt>
 8009ee0:	e7b1      	b.n	8009e46 <_strtod_l+0xb4a>
 8009ee2:	46c0      	nop			; (mov r8, r8)
 8009ee4:	fff00000 	.word	0xfff00000
 8009ee8:	000fffff 	.word	0x000fffff
 8009eec:	3ff00000 	.word	0x3ff00000
 8009ef0:	7ff00000 	.word	0x7ff00000
 8009ef4:	7fe00000 	.word	0x7fe00000
 8009ef8:	fcb00000 	.word	0xfcb00000
 8009efc:	7c9fffff 	.word	0x7c9fffff
 8009f00:	7fefffff 	.word	0x7fefffff
 8009f04:	3fe00000 	.word	0x3fe00000
 8009f08:	bff00000 	.word	0xbff00000
 8009f0c:	94a03595 	.word	0x94a03595
 8009f10:	3fdfffff 	.word	0x3fdfffff
 8009f14:	35afe535 	.word	0x35afe535
 8009f18:	ffc00000 	.word	0xffc00000
 8009f1c:	41dfffff 	.word	0x41dfffff
 8009f20:	3fcfffff 	.word	0x3fcfffff

08009f24 <_strtod_r>:
 8009f24:	b510      	push	{r4, lr}
 8009f26:	4b02      	ldr	r3, [pc, #8]	; (8009f30 <_strtod_r+0xc>)
 8009f28:	f7ff f9e8 	bl	80092fc <_strtod_l>
 8009f2c:	bd10      	pop	{r4, pc}
 8009f2e:	46c0      	nop			; (mov r8, r8)
 8009f30:	20000078 	.word	0x20000078

08009f34 <_strtol_l.constprop.0>:
 8009f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f36:	b087      	sub	sp, #28
 8009f38:	001e      	movs	r6, r3
 8009f3a:	9005      	str	r0, [sp, #20]
 8009f3c:	9101      	str	r1, [sp, #4]
 8009f3e:	9202      	str	r2, [sp, #8]
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d045      	beq.n	8009fd0 <_strtol_l.constprop.0+0x9c>
 8009f44:	000b      	movs	r3, r1
 8009f46:	2e24      	cmp	r6, #36	; 0x24
 8009f48:	d842      	bhi.n	8009fd0 <_strtol_l.constprop.0+0x9c>
 8009f4a:	4a3f      	ldr	r2, [pc, #252]	; (800a048 <_strtol_l.constprop.0+0x114>)
 8009f4c:	2108      	movs	r1, #8
 8009f4e:	4694      	mov	ip, r2
 8009f50:	001a      	movs	r2, r3
 8009f52:	4660      	mov	r0, ip
 8009f54:	7814      	ldrb	r4, [r2, #0]
 8009f56:	3301      	adds	r3, #1
 8009f58:	5d00      	ldrb	r0, [r0, r4]
 8009f5a:	001d      	movs	r5, r3
 8009f5c:	0007      	movs	r7, r0
 8009f5e:	400f      	ands	r7, r1
 8009f60:	4208      	tst	r0, r1
 8009f62:	d1f5      	bne.n	8009f50 <_strtol_l.constprop.0+0x1c>
 8009f64:	2c2d      	cmp	r4, #45	; 0x2d
 8009f66:	d13a      	bne.n	8009fde <_strtol_l.constprop.0+0xaa>
 8009f68:	2701      	movs	r7, #1
 8009f6a:	781c      	ldrb	r4, [r3, #0]
 8009f6c:	1c95      	adds	r5, r2, #2
 8009f6e:	2e00      	cmp	r6, #0
 8009f70:	d065      	beq.n	800a03e <_strtol_l.constprop.0+0x10a>
 8009f72:	2e10      	cmp	r6, #16
 8009f74:	d109      	bne.n	8009f8a <_strtol_l.constprop.0+0x56>
 8009f76:	2c30      	cmp	r4, #48	; 0x30
 8009f78:	d107      	bne.n	8009f8a <_strtol_l.constprop.0+0x56>
 8009f7a:	2220      	movs	r2, #32
 8009f7c:	782b      	ldrb	r3, [r5, #0]
 8009f7e:	4393      	bics	r3, r2
 8009f80:	2b58      	cmp	r3, #88	; 0x58
 8009f82:	d157      	bne.n	800a034 <_strtol_l.constprop.0+0x100>
 8009f84:	2610      	movs	r6, #16
 8009f86:	786c      	ldrb	r4, [r5, #1]
 8009f88:	3502      	adds	r5, #2
 8009f8a:	4b30      	ldr	r3, [pc, #192]	; (800a04c <_strtol_l.constprop.0+0x118>)
 8009f8c:	0031      	movs	r1, r6
 8009f8e:	18fb      	adds	r3, r7, r3
 8009f90:	0018      	movs	r0, r3
 8009f92:	9303      	str	r3, [sp, #12]
 8009f94:	f7f6 f95a 	bl	800024c <__aeabi_uidivmod>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	4684      	mov	ip, r0
 8009f9e:	0018      	movs	r0, r3
 8009fa0:	9104      	str	r1, [sp, #16]
 8009fa2:	4252      	negs	r2, r2
 8009fa4:	0021      	movs	r1, r4
 8009fa6:	3930      	subs	r1, #48	; 0x30
 8009fa8:	2909      	cmp	r1, #9
 8009faa:	d81d      	bhi.n	8009fe8 <_strtol_l.constprop.0+0xb4>
 8009fac:	000c      	movs	r4, r1
 8009fae:	42a6      	cmp	r6, r4
 8009fb0:	dd28      	ble.n	800a004 <_strtol_l.constprop.0+0xd0>
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	db24      	blt.n	800a000 <_strtol_l.constprop.0+0xcc>
 8009fb6:	0013      	movs	r3, r2
 8009fb8:	4584      	cmp	ip, r0
 8009fba:	d306      	bcc.n	8009fca <_strtol_l.constprop.0+0x96>
 8009fbc:	d102      	bne.n	8009fc4 <_strtol_l.constprop.0+0x90>
 8009fbe:	9904      	ldr	r1, [sp, #16]
 8009fc0:	42a1      	cmp	r1, r4
 8009fc2:	db02      	blt.n	8009fca <_strtol_l.constprop.0+0x96>
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	4370      	muls	r0, r6
 8009fc8:	1820      	adds	r0, r4, r0
 8009fca:	782c      	ldrb	r4, [r5, #0]
 8009fcc:	3501      	adds	r5, #1
 8009fce:	e7e9      	b.n	8009fa4 <_strtol_l.constprop.0+0x70>
 8009fd0:	f7fe f908 	bl	80081e4 <__errno>
 8009fd4:	2316      	movs	r3, #22
 8009fd6:	6003      	str	r3, [r0, #0]
 8009fd8:	2000      	movs	r0, #0
 8009fda:	b007      	add	sp, #28
 8009fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fde:	2c2b      	cmp	r4, #43	; 0x2b
 8009fe0:	d1c5      	bne.n	8009f6e <_strtol_l.constprop.0+0x3a>
 8009fe2:	781c      	ldrb	r4, [r3, #0]
 8009fe4:	1c95      	adds	r5, r2, #2
 8009fe6:	e7c2      	b.n	8009f6e <_strtol_l.constprop.0+0x3a>
 8009fe8:	0021      	movs	r1, r4
 8009fea:	3941      	subs	r1, #65	; 0x41
 8009fec:	2919      	cmp	r1, #25
 8009fee:	d801      	bhi.n	8009ff4 <_strtol_l.constprop.0+0xc0>
 8009ff0:	3c37      	subs	r4, #55	; 0x37
 8009ff2:	e7dc      	b.n	8009fae <_strtol_l.constprop.0+0x7a>
 8009ff4:	0021      	movs	r1, r4
 8009ff6:	3961      	subs	r1, #97	; 0x61
 8009ff8:	2919      	cmp	r1, #25
 8009ffa:	d803      	bhi.n	800a004 <_strtol_l.constprop.0+0xd0>
 8009ffc:	3c57      	subs	r4, #87	; 0x57
 8009ffe:	e7d6      	b.n	8009fae <_strtol_l.constprop.0+0x7a>
 800a000:	0013      	movs	r3, r2
 800a002:	e7e2      	b.n	8009fca <_strtol_l.constprop.0+0x96>
 800a004:	2b00      	cmp	r3, #0
 800a006:	da09      	bge.n	800a01c <_strtol_l.constprop.0+0xe8>
 800a008:	2322      	movs	r3, #34	; 0x22
 800a00a:	9a05      	ldr	r2, [sp, #20]
 800a00c:	9803      	ldr	r0, [sp, #12]
 800a00e:	6013      	str	r3, [r2, #0]
 800a010:	9b02      	ldr	r3, [sp, #8]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d0e1      	beq.n	8009fda <_strtol_l.constprop.0+0xa6>
 800a016:	1e6b      	subs	r3, r5, #1
 800a018:	9301      	str	r3, [sp, #4]
 800a01a:	e007      	b.n	800a02c <_strtol_l.constprop.0+0xf8>
 800a01c:	2f00      	cmp	r7, #0
 800a01e:	d000      	beq.n	800a022 <_strtol_l.constprop.0+0xee>
 800a020:	4240      	negs	r0, r0
 800a022:	9a02      	ldr	r2, [sp, #8]
 800a024:	2a00      	cmp	r2, #0
 800a026:	d0d8      	beq.n	8009fda <_strtol_l.constprop.0+0xa6>
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1f4      	bne.n	800a016 <_strtol_l.constprop.0+0xe2>
 800a02c:	9b02      	ldr	r3, [sp, #8]
 800a02e:	9a01      	ldr	r2, [sp, #4]
 800a030:	601a      	str	r2, [r3, #0]
 800a032:	e7d2      	b.n	8009fda <_strtol_l.constprop.0+0xa6>
 800a034:	2430      	movs	r4, #48	; 0x30
 800a036:	2e00      	cmp	r6, #0
 800a038:	d1a7      	bne.n	8009f8a <_strtol_l.constprop.0+0x56>
 800a03a:	3608      	adds	r6, #8
 800a03c:	e7a5      	b.n	8009f8a <_strtol_l.constprop.0+0x56>
 800a03e:	2c30      	cmp	r4, #48	; 0x30
 800a040:	d09b      	beq.n	8009f7a <_strtol_l.constprop.0+0x46>
 800a042:	260a      	movs	r6, #10
 800a044:	e7a1      	b.n	8009f8a <_strtol_l.constprop.0+0x56>
 800a046:	46c0      	nop			; (mov r8, r8)
 800a048:	0800d669 	.word	0x0800d669
 800a04c:	7fffffff 	.word	0x7fffffff

0800a050 <_strtol_r>:
 800a050:	b510      	push	{r4, lr}
 800a052:	f7ff ff6f 	bl	8009f34 <_strtol_l.constprop.0>
 800a056:	bd10      	pop	{r4, pc}

0800a058 <__swbuf_r>:
 800a058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05a:	0005      	movs	r5, r0
 800a05c:	000e      	movs	r6, r1
 800a05e:	0014      	movs	r4, r2
 800a060:	2800      	cmp	r0, #0
 800a062:	d004      	beq.n	800a06e <__swbuf_r+0x16>
 800a064:	6983      	ldr	r3, [r0, #24]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d101      	bne.n	800a06e <__swbuf_r+0x16>
 800a06a:	f001 f897 	bl	800b19c <__sinit>
 800a06e:	4b22      	ldr	r3, [pc, #136]	; (800a0f8 <__swbuf_r+0xa0>)
 800a070:	429c      	cmp	r4, r3
 800a072:	d12e      	bne.n	800a0d2 <__swbuf_r+0x7a>
 800a074:	686c      	ldr	r4, [r5, #4]
 800a076:	69a3      	ldr	r3, [r4, #24]
 800a078:	60a3      	str	r3, [r4, #8]
 800a07a:	89a3      	ldrh	r3, [r4, #12]
 800a07c:	071b      	lsls	r3, r3, #28
 800a07e:	d532      	bpl.n	800a0e6 <__swbuf_r+0x8e>
 800a080:	6923      	ldr	r3, [r4, #16]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d02f      	beq.n	800a0e6 <__swbuf_r+0x8e>
 800a086:	6823      	ldr	r3, [r4, #0]
 800a088:	6922      	ldr	r2, [r4, #16]
 800a08a:	b2f7      	uxtb	r7, r6
 800a08c:	1a98      	subs	r0, r3, r2
 800a08e:	6963      	ldr	r3, [r4, #20]
 800a090:	b2f6      	uxtb	r6, r6
 800a092:	4283      	cmp	r3, r0
 800a094:	dc05      	bgt.n	800a0a2 <__swbuf_r+0x4a>
 800a096:	0021      	movs	r1, r4
 800a098:	0028      	movs	r0, r5
 800a09a:	f000 ffdd 	bl	800b058 <_fflush_r>
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	d127      	bne.n	800a0f2 <__swbuf_r+0x9a>
 800a0a2:	68a3      	ldr	r3, [r4, #8]
 800a0a4:	3001      	adds	r0, #1
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	60a3      	str	r3, [r4, #8]
 800a0aa:	6823      	ldr	r3, [r4, #0]
 800a0ac:	1c5a      	adds	r2, r3, #1
 800a0ae:	6022      	str	r2, [r4, #0]
 800a0b0:	701f      	strb	r7, [r3, #0]
 800a0b2:	6963      	ldr	r3, [r4, #20]
 800a0b4:	4283      	cmp	r3, r0
 800a0b6:	d004      	beq.n	800a0c2 <__swbuf_r+0x6a>
 800a0b8:	89a3      	ldrh	r3, [r4, #12]
 800a0ba:	07db      	lsls	r3, r3, #31
 800a0bc:	d507      	bpl.n	800a0ce <__swbuf_r+0x76>
 800a0be:	2e0a      	cmp	r6, #10
 800a0c0:	d105      	bne.n	800a0ce <__swbuf_r+0x76>
 800a0c2:	0021      	movs	r1, r4
 800a0c4:	0028      	movs	r0, r5
 800a0c6:	f000 ffc7 	bl	800b058 <_fflush_r>
 800a0ca:	2800      	cmp	r0, #0
 800a0cc:	d111      	bne.n	800a0f2 <__swbuf_r+0x9a>
 800a0ce:	0030      	movs	r0, r6
 800a0d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0d2:	4b0a      	ldr	r3, [pc, #40]	; (800a0fc <__swbuf_r+0xa4>)
 800a0d4:	429c      	cmp	r4, r3
 800a0d6:	d101      	bne.n	800a0dc <__swbuf_r+0x84>
 800a0d8:	68ac      	ldr	r4, [r5, #8]
 800a0da:	e7cc      	b.n	800a076 <__swbuf_r+0x1e>
 800a0dc:	4b08      	ldr	r3, [pc, #32]	; (800a100 <__swbuf_r+0xa8>)
 800a0de:	429c      	cmp	r4, r3
 800a0e0:	d1c9      	bne.n	800a076 <__swbuf_r+0x1e>
 800a0e2:	68ec      	ldr	r4, [r5, #12]
 800a0e4:	e7c7      	b.n	800a076 <__swbuf_r+0x1e>
 800a0e6:	0021      	movs	r1, r4
 800a0e8:	0028      	movs	r0, r5
 800a0ea:	f000 f80b 	bl	800a104 <__swsetup_r>
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d0c9      	beq.n	800a086 <__swbuf_r+0x2e>
 800a0f2:	2601      	movs	r6, #1
 800a0f4:	4276      	negs	r6, r6
 800a0f6:	e7ea      	b.n	800a0ce <__swbuf_r+0x76>
 800a0f8:	0800d81c 	.word	0x0800d81c
 800a0fc:	0800d83c 	.word	0x0800d83c
 800a100:	0800d7fc 	.word	0x0800d7fc

0800a104 <__swsetup_r>:
 800a104:	4b37      	ldr	r3, [pc, #220]	; (800a1e4 <__swsetup_r+0xe0>)
 800a106:	b570      	push	{r4, r5, r6, lr}
 800a108:	681d      	ldr	r5, [r3, #0]
 800a10a:	0006      	movs	r6, r0
 800a10c:	000c      	movs	r4, r1
 800a10e:	2d00      	cmp	r5, #0
 800a110:	d005      	beq.n	800a11e <__swsetup_r+0x1a>
 800a112:	69ab      	ldr	r3, [r5, #24]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d102      	bne.n	800a11e <__swsetup_r+0x1a>
 800a118:	0028      	movs	r0, r5
 800a11a:	f001 f83f 	bl	800b19c <__sinit>
 800a11e:	4b32      	ldr	r3, [pc, #200]	; (800a1e8 <__swsetup_r+0xe4>)
 800a120:	429c      	cmp	r4, r3
 800a122:	d10f      	bne.n	800a144 <__swsetup_r+0x40>
 800a124:	686c      	ldr	r4, [r5, #4]
 800a126:	230c      	movs	r3, #12
 800a128:	5ee2      	ldrsh	r2, [r4, r3]
 800a12a:	b293      	uxth	r3, r2
 800a12c:	0711      	lsls	r1, r2, #28
 800a12e:	d42d      	bmi.n	800a18c <__swsetup_r+0x88>
 800a130:	06d9      	lsls	r1, r3, #27
 800a132:	d411      	bmi.n	800a158 <__swsetup_r+0x54>
 800a134:	2309      	movs	r3, #9
 800a136:	2001      	movs	r0, #1
 800a138:	6033      	str	r3, [r6, #0]
 800a13a:	3337      	adds	r3, #55	; 0x37
 800a13c:	4313      	orrs	r3, r2
 800a13e:	81a3      	strh	r3, [r4, #12]
 800a140:	4240      	negs	r0, r0
 800a142:	bd70      	pop	{r4, r5, r6, pc}
 800a144:	4b29      	ldr	r3, [pc, #164]	; (800a1ec <__swsetup_r+0xe8>)
 800a146:	429c      	cmp	r4, r3
 800a148:	d101      	bne.n	800a14e <__swsetup_r+0x4a>
 800a14a:	68ac      	ldr	r4, [r5, #8]
 800a14c:	e7eb      	b.n	800a126 <__swsetup_r+0x22>
 800a14e:	4b28      	ldr	r3, [pc, #160]	; (800a1f0 <__swsetup_r+0xec>)
 800a150:	429c      	cmp	r4, r3
 800a152:	d1e8      	bne.n	800a126 <__swsetup_r+0x22>
 800a154:	68ec      	ldr	r4, [r5, #12]
 800a156:	e7e6      	b.n	800a126 <__swsetup_r+0x22>
 800a158:	075b      	lsls	r3, r3, #29
 800a15a:	d513      	bpl.n	800a184 <__swsetup_r+0x80>
 800a15c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a15e:	2900      	cmp	r1, #0
 800a160:	d008      	beq.n	800a174 <__swsetup_r+0x70>
 800a162:	0023      	movs	r3, r4
 800a164:	3344      	adds	r3, #68	; 0x44
 800a166:	4299      	cmp	r1, r3
 800a168:	d002      	beq.n	800a170 <__swsetup_r+0x6c>
 800a16a:	0030      	movs	r0, r6
 800a16c:	f7fe f88a 	bl	8008284 <_free_r>
 800a170:	2300      	movs	r3, #0
 800a172:	6363      	str	r3, [r4, #52]	; 0x34
 800a174:	2224      	movs	r2, #36	; 0x24
 800a176:	89a3      	ldrh	r3, [r4, #12]
 800a178:	4393      	bics	r3, r2
 800a17a:	81a3      	strh	r3, [r4, #12]
 800a17c:	2300      	movs	r3, #0
 800a17e:	6063      	str	r3, [r4, #4]
 800a180:	6923      	ldr	r3, [r4, #16]
 800a182:	6023      	str	r3, [r4, #0]
 800a184:	2308      	movs	r3, #8
 800a186:	89a2      	ldrh	r2, [r4, #12]
 800a188:	4313      	orrs	r3, r2
 800a18a:	81a3      	strh	r3, [r4, #12]
 800a18c:	6923      	ldr	r3, [r4, #16]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d10b      	bne.n	800a1aa <__swsetup_r+0xa6>
 800a192:	21a0      	movs	r1, #160	; 0xa0
 800a194:	2280      	movs	r2, #128	; 0x80
 800a196:	89a3      	ldrh	r3, [r4, #12]
 800a198:	0089      	lsls	r1, r1, #2
 800a19a:	0092      	lsls	r2, r2, #2
 800a19c:	400b      	ands	r3, r1
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d003      	beq.n	800a1aa <__swsetup_r+0xa6>
 800a1a2:	0021      	movs	r1, r4
 800a1a4:	0030      	movs	r0, r6
 800a1a6:	f001 fc3d 	bl	800ba24 <__smakebuf_r>
 800a1aa:	220c      	movs	r2, #12
 800a1ac:	5ea3      	ldrsh	r3, [r4, r2]
 800a1ae:	2001      	movs	r0, #1
 800a1b0:	001a      	movs	r2, r3
 800a1b2:	b299      	uxth	r1, r3
 800a1b4:	4002      	ands	r2, r0
 800a1b6:	4203      	tst	r3, r0
 800a1b8:	d00f      	beq.n	800a1da <__swsetup_r+0xd6>
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	60a2      	str	r2, [r4, #8]
 800a1be:	6962      	ldr	r2, [r4, #20]
 800a1c0:	4252      	negs	r2, r2
 800a1c2:	61a2      	str	r2, [r4, #24]
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	6922      	ldr	r2, [r4, #16]
 800a1c8:	4282      	cmp	r2, r0
 800a1ca:	d1ba      	bne.n	800a142 <__swsetup_r+0x3e>
 800a1cc:	060a      	lsls	r2, r1, #24
 800a1ce:	d5b8      	bpl.n	800a142 <__swsetup_r+0x3e>
 800a1d0:	2240      	movs	r2, #64	; 0x40
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	81a3      	strh	r3, [r4, #12]
 800a1d6:	3801      	subs	r0, #1
 800a1d8:	e7b3      	b.n	800a142 <__swsetup_r+0x3e>
 800a1da:	0788      	lsls	r0, r1, #30
 800a1dc:	d400      	bmi.n	800a1e0 <__swsetup_r+0xdc>
 800a1de:	6962      	ldr	r2, [r4, #20]
 800a1e0:	60a2      	str	r2, [r4, #8]
 800a1e2:	e7ef      	b.n	800a1c4 <__swsetup_r+0xc0>
 800a1e4:	20000010 	.word	0x20000010
 800a1e8:	0800d81c 	.word	0x0800d81c
 800a1ec:	0800d83c 	.word	0x0800d83c
 800a1f0:	0800d7fc 	.word	0x0800d7fc

0800a1f4 <quorem>:
 800a1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1f6:	0006      	movs	r6, r0
 800a1f8:	690b      	ldr	r3, [r1, #16]
 800a1fa:	6932      	ldr	r2, [r6, #16]
 800a1fc:	b087      	sub	sp, #28
 800a1fe:	2000      	movs	r0, #0
 800a200:	9103      	str	r1, [sp, #12]
 800a202:	429a      	cmp	r2, r3
 800a204:	db65      	blt.n	800a2d2 <quorem+0xde>
 800a206:	3b01      	subs	r3, #1
 800a208:	009c      	lsls	r4, r3, #2
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	000b      	movs	r3, r1
 800a20e:	3314      	adds	r3, #20
 800a210:	9305      	str	r3, [sp, #20]
 800a212:	191b      	adds	r3, r3, r4
 800a214:	9304      	str	r3, [sp, #16]
 800a216:	0033      	movs	r3, r6
 800a218:	3314      	adds	r3, #20
 800a21a:	9302      	str	r3, [sp, #8]
 800a21c:	191c      	adds	r4, r3, r4
 800a21e:	9b04      	ldr	r3, [sp, #16]
 800a220:	6827      	ldr	r7, [r4, #0]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	0038      	movs	r0, r7
 800a226:	1c5d      	adds	r5, r3, #1
 800a228:	0029      	movs	r1, r5
 800a22a:	9301      	str	r3, [sp, #4]
 800a22c:	f7f5 ff88 	bl	8000140 <__udivsi3>
 800a230:	9001      	str	r0, [sp, #4]
 800a232:	42af      	cmp	r7, r5
 800a234:	d324      	bcc.n	800a280 <quorem+0x8c>
 800a236:	2500      	movs	r5, #0
 800a238:	46ac      	mov	ip, r5
 800a23a:	9802      	ldr	r0, [sp, #8]
 800a23c:	9f05      	ldr	r7, [sp, #20]
 800a23e:	cf08      	ldmia	r7!, {r3}
 800a240:	9a01      	ldr	r2, [sp, #4]
 800a242:	b299      	uxth	r1, r3
 800a244:	4351      	muls	r1, r2
 800a246:	0c1b      	lsrs	r3, r3, #16
 800a248:	4353      	muls	r3, r2
 800a24a:	1949      	adds	r1, r1, r5
 800a24c:	0c0a      	lsrs	r2, r1, #16
 800a24e:	189b      	adds	r3, r3, r2
 800a250:	6802      	ldr	r2, [r0, #0]
 800a252:	b289      	uxth	r1, r1
 800a254:	b292      	uxth	r2, r2
 800a256:	4462      	add	r2, ip
 800a258:	1a52      	subs	r2, r2, r1
 800a25a:	6801      	ldr	r1, [r0, #0]
 800a25c:	0c1d      	lsrs	r5, r3, #16
 800a25e:	0c09      	lsrs	r1, r1, #16
 800a260:	b29b      	uxth	r3, r3
 800a262:	1acb      	subs	r3, r1, r3
 800a264:	1411      	asrs	r1, r2, #16
 800a266:	185b      	adds	r3, r3, r1
 800a268:	1419      	asrs	r1, r3, #16
 800a26a:	b292      	uxth	r2, r2
 800a26c:	041b      	lsls	r3, r3, #16
 800a26e:	431a      	orrs	r2, r3
 800a270:	9b04      	ldr	r3, [sp, #16]
 800a272:	468c      	mov	ip, r1
 800a274:	c004      	stmia	r0!, {r2}
 800a276:	42bb      	cmp	r3, r7
 800a278:	d2e1      	bcs.n	800a23e <quorem+0x4a>
 800a27a:	6823      	ldr	r3, [r4, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d030      	beq.n	800a2e2 <quorem+0xee>
 800a280:	0030      	movs	r0, r6
 800a282:	9903      	ldr	r1, [sp, #12]
 800a284:	f001 ff10 	bl	800c0a8 <__mcmp>
 800a288:	2800      	cmp	r0, #0
 800a28a:	db21      	blt.n	800a2d0 <quorem+0xdc>
 800a28c:	0030      	movs	r0, r6
 800a28e:	2400      	movs	r4, #0
 800a290:	9b01      	ldr	r3, [sp, #4]
 800a292:	9903      	ldr	r1, [sp, #12]
 800a294:	3301      	adds	r3, #1
 800a296:	9301      	str	r3, [sp, #4]
 800a298:	3014      	adds	r0, #20
 800a29a:	3114      	adds	r1, #20
 800a29c:	6803      	ldr	r3, [r0, #0]
 800a29e:	c920      	ldmia	r1!, {r5}
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	1914      	adds	r4, r2, r4
 800a2a4:	b2aa      	uxth	r2, r5
 800a2a6:	1aa2      	subs	r2, r4, r2
 800a2a8:	0c1b      	lsrs	r3, r3, #16
 800a2aa:	0c2d      	lsrs	r5, r5, #16
 800a2ac:	1414      	asrs	r4, r2, #16
 800a2ae:	1b5b      	subs	r3, r3, r5
 800a2b0:	191b      	adds	r3, r3, r4
 800a2b2:	141c      	asrs	r4, r3, #16
 800a2b4:	b292      	uxth	r2, r2
 800a2b6:	041b      	lsls	r3, r3, #16
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	c008      	stmia	r0!, {r3}
 800a2bc:	9b04      	ldr	r3, [sp, #16]
 800a2be:	428b      	cmp	r3, r1
 800a2c0:	d2ec      	bcs.n	800a29c <quorem+0xa8>
 800a2c2:	9b00      	ldr	r3, [sp, #0]
 800a2c4:	9a02      	ldr	r2, [sp, #8]
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	18d3      	adds	r3, r2, r3
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	2a00      	cmp	r2, #0
 800a2ce:	d015      	beq.n	800a2fc <quorem+0x108>
 800a2d0:	9801      	ldr	r0, [sp, #4]
 800a2d2:	b007      	add	sp, #28
 800a2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2d6:	6823      	ldr	r3, [r4, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d106      	bne.n	800a2ea <quorem+0xf6>
 800a2dc:	9b00      	ldr	r3, [sp, #0]
 800a2de:	3b01      	subs	r3, #1
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	9b02      	ldr	r3, [sp, #8]
 800a2e4:	3c04      	subs	r4, #4
 800a2e6:	42a3      	cmp	r3, r4
 800a2e8:	d3f5      	bcc.n	800a2d6 <quorem+0xe2>
 800a2ea:	9b00      	ldr	r3, [sp, #0]
 800a2ec:	6133      	str	r3, [r6, #16]
 800a2ee:	e7c7      	b.n	800a280 <quorem+0x8c>
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	2a00      	cmp	r2, #0
 800a2f4:	d106      	bne.n	800a304 <quorem+0x110>
 800a2f6:	9a00      	ldr	r2, [sp, #0]
 800a2f8:	3a01      	subs	r2, #1
 800a2fa:	9200      	str	r2, [sp, #0]
 800a2fc:	9a02      	ldr	r2, [sp, #8]
 800a2fe:	3b04      	subs	r3, #4
 800a300:	429a      	cmp	r2, r3
 800a302:	d3f5      	bcc.n	800a2f0 <quorem+0xfc>
 800a304:	9b00      	ldr	r3, [sp, #0]
 800a306:	6133      	str	r3, [r6, #16]
 800a308:	e7e2      	b.n	800a2d0 <quorem+0xdc>
	...

0800a30c <_dtoa_r>:
 800a30c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a30e:	b09d      	sub	sp, #116	; 0x74
 800a310:	9202      	str	r2, [sp, #8]
 800a312:	9303      	str	r3, [sp, #12]
 800a314:	9b02      	ldr	r3, [sp, #8]
 800a316:	9c03      	ldr	r4, [sp, #12]
 800a318:	9308      	str	r3, [sp, #32]
 800a31a:	9409      	str	r4, [sp, #36]	; 0x24
 800a31c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a31e:	0007      	movs	r7, r0
 800a320:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800a322:	2c00      	cmp	r4, #0
 800a324:	d10e      	bne.n	800a344 <_dtoa_r+0x38>
 800a326:	2010      	movs	r0, #16
 800a328:	f7fd ff86 	bl	8008238 <malloc>
 800a32c:	1e02      	subs	r2, r0, #0
 800a32e:	6278      	str	r0, [r7, #36]	; 0x24
 800a330:	d104      	bne.n	800a33c <_dtoa_r+0x30>
 800a332:	21ea      	movs	r1, #234	; 0xea
 800a334:	4bc7      	ldr	r3, [pc, #796]	; (800a654 <_dtoa_r+0x348>)
 800a336:	48c8      	ldr	r0, [pc, #800]	; (800a658 <_dtoa_r+0x34c>)
 800a338:	f002 fc26 	bl	800cb88 <__assert_func>
 800a33c:	6044      	str	r4, [r0, #4]
 800a33e:	6084      	str	r4, [r0, #8]
 800a340:	6004      	str	r4, [r0, #0]
 800a342:	60c4      	str	r4, [r0, #12]
 800a344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a346:	6819      	ldr	r1, [r3, #0]
 800a348:	2900      	cmp	r1, #0
 800a34a:	d00a      	beq.n	800a362 <_dtoa_r+0x56>
 800a34c:	685a      	ldr	r2, [r3, #4]
 800a34e:	2301      	movs	r3, #1
 800a350:	4093      	lsls	r3, r2
 800a352:	604a      	str	r2, [r1, #4]
 800a354:	608b      	str	r3, [r1, #8]
 800a356:	0038      	movs	r0, r7
 800a358:	f001 fc1a 	bl	800bb90 <_Bfree>
 800a35c:	2200      	movs	r2, #0
 800a35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a360:	601a      	str	r2, [r3, #0]
 800a362:	9b03      	ldr	r3, [sp, #12]
 800a364:	2b00      	cmp	r3, #0
 800a366:	da20      	bge.n	800a3aa <_dtoa_r+0x9e>
 800a368:	2301      	movs	r3, #1
 800a36a:	602b      	str	r3, [r5, #0]
 800a36c:	9b03      	ldr	r3, [sp, #12]
 800a36e:	005b      	lsls	r3, r3, #1
 800a370:	085b      	lsrs	r3, r3, #1
 800a372:	9309      	str	r3, [sp, #36]	; 0x24
 800a374:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a376:	4bb9      	ldr	r3, [pc, #740]	; (800a65c <_dtoa_r+0x350>)
 800a378:	4ab8      	ldr	r2, [pc, #736]	; (800a65c <_dtoa_r+0x350>)
 800a37a:	402b      	ands	r3, r5
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d117      	bne.n	800a3b0 <_dtoa_r+0xa4>
 800a380:	4bb7      	ldr	r3, [pc, #732]	; (800a660 <_dtoa_r+0x354>)
 800a382:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a384:	0328      	lsls	r0, r5, #12
 800a386:	6013      	str	r3, [r2, #0]
 800a388:	9b02      	ldr	r3, [sp, #8]
 800a38a:	0b00      	lsrs	r0, r0, #12
 800a38c:	4318      	orrs	r0, r3
 800a38e:	d101      	bne.n	800a394 <_dtoa_r+0x88>
 800a390:	f000 fdbf 	bl	800af12 <_dtoa_r+0xc06>
 800a394:	48b3      	ldr	r0, [pc, #716]	; (800a664 <_dtoa_r+0x358>)
 800a396:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a398:	9006      	str	r0, [sp, #24]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d002      	beq.n	800a3a4 <_dtoa_r+0x98>
 800a39e:	4bb2      	ldr	r3, [pc, #712]	; (800a668 <_dtoa_r+0x35c>)
 800a3a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a3a2:	6013      	str	r3, [r2, #0]
 800a3a4:	9806      	ldr	r0, [sp, #24]
 800a3a6:	b01d      	add	sp, #116	; 0x74
 800a3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	602b      	str	r3, [r5, #0]
 800a3ae:	e7e1      	b.n	800a374 <_dtoa_r+0x68>
 800a3b0:	9b08      	ldr	r3, [sp, #32]
 800a3b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a3b4:	9312      	str	r3, [sp, #72]	; 0x48
 800a3b6:	9413      	str	r4, [sp, #76]	; 0x4c
 800a3b8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a3ba:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a3bc:	2200      	movs	r2, #0
 800a3be:	2300      	movs	r3, #0
 800a3c0:	f7f6 f844 	bl	800044c <__aeabi_dcmpeq>
 800a3c4:	1e04      	subs	r4, r0, #0
 800a3c6:	d009      	beq.n	800a3dc <_dtoa_r+0xd0>
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a3cc:	6013      	str	r3, [r2, #0]
 800a3ce:	4ba7      	ldr	r3, [pc, #668]	; (800a66c <_dtoa_r+0x360>)
 800a3d0:	9306      	str	r3, [sp, #24]
 800a3d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d0e5      	beq.n	800a3a4 <_dtoa_r+0x98>
 800a3d8:	4ba5      	ldr	r3, [pc, #660]	; (800a670 <_dtoa_r+0x364>)
 800a3da:	e7e1      	b.n	800a3a0 <_dtoa_r+0x94>
 800a3dc:	ab1a      	add	r3, sp, #104	; 0x68
 800a3de:	9301      	str	r3, [sp, #4]
 800a3e0:	ab1b      	add	r3, sp, #108	; 0x6c
 800a3e2:	9300      	str	r3, [sp, #0]
 800a3e4:	0038      	movs	r0, r7
 800a3e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a3e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a3ea:	f001 ff85 	bl	800c2f8 <__d2b>
 800a3ee:	006e      	lsls	r6, r5, #1
 800a3f0:	9005      	str	r0, [sp, #20]
 800a3f2:	0d76      	lsrs	r6, r6, #21
 800a3f4:	d100      	bne.n	800a3f8 <_dtoa_r+0xec>
 800a3f6:	e07c      	b.n	800a4f2 <_dtoa_r+0x1e6>
 800a3f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a3fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a3fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a3fe:	4a9d      	ldr	r2, [pc, #628]	; (800a674 <_dtoa_r+0x368>)
 800a400:	031b      	lsls	r3, r3, #12
 800a402:	0b1b      	lsrs	r3, r3, #12
 800a404:	431a      	orrs	r2, r3
 800a406:	0011      	movs	r1, r2
 800a408:	4b9b      	ldr	r3, [pc, #620]	; (800a678 <_dtoa_r+0x36c>)
 800a40a:	9418      	str	r4, [sp, #96]	; 0x60
 800a40c:	18f6      	adds	r6, r6, r3
 800a40e:	2200      	movs	r2, #0
 800a410:	4b9a      	ldr	r3, [pc, #616]	; (800a67c <_dtoa_r+0x370>)
 800a412:	f7f7 fa65 	bl	80018e0 <__aeabi_dsub>
 800a416:	4a9a      	ldr	r2, [pc, #616]	; (800a680 <_dtoa_r+0x374>)
 800a418:	4b9a      	ldr	r3, [pc, #616]	; (800a684 <_dtoa_r+0x378>)
 800a41a:	f7f6 fff5 	bl	8001408 <__aeabi_dmul>
 800a41e:	4a9a      	ldr	r2, [pc, #616]	; (800a688 <_dtoa_r+0x37c>)
 800a420:	4b9a      	ldr	r3, [pc, #616]	; (800a68c <_dtoa_r+0x380>)
 800a422:	f7f6 f8b3 	bl	800058c <__aeabi_dadd>
 800a426:	0004      	movs	r4, r0
 800a428:	0030      	movs	r0, r6
 800a42a:	000d      	movs	r5, r1
 800a42c:	f7f7 fe3e 	bl	80020ac <__aeabi_i2d>
 800a430:	4a97      	ldr	r2, [pc, #604]	; (800a690 <_dtoa_r+0x384>)
 800a432:	4b98      	ldr	r3, [pc, #608]	; (800a694 <_dtoa_r+0x388>)
 800a434:	f7f6 ffe8 	bl	8001408 <__aeabi_dmul>
 800a438:	0002      	movs	r2, r0
 800a43a:	000b      	movs	r3, r1
 800a43c:	0020      	movs	r0, r4
 800a43e:	0029      	movs	r1, r5
 800a440:	f7f6 f8a4 	bl	800058c <__aeabi_dadd>
 800a444:	0004      	movs	r4, r0
 800a446:	000d      	movs	r5, r1
 800a448:	f7f7 fdfa 	bl	8002040 <__aeabi_d2iz>
 800a44c:	2200      	movs	r2, #0
 800a44e:	9002      	str	r0, [sp, #8]
 800a450:	2300      	movs	r3, #0
 800a452:	0020      	movs	r0, r4
 800a454:	0029      	movs	r1, r5
 800a456:	f7f5 ffff 	bl	8000458 <__aeabi_dcmplt>
 800a45a:	2800      	cmp	r0, #0
 800a45c:	d00b      	beq.n	800a476 <_dtoa_r+0x16a>
 800a45e:	9802      	ldr	r0, [sp, #8]
 800a460:	f7f7 fe24 	bl	80020ac <__aeabi_i2d>
 800a464:	002b      	movs	r3, r5
 800a466:	0022      	movs	r2, r4
 800a468:	f7f5 fff0 	bl	800044c <__aeabi_dcmpeq>
 800a46c:	4243      	negs	r3, r0
 800a46e:	4158      	adcs	r0, r3
 800a470:	9b02      	ldr	r3, [sp, #8]
 800a472:	1a1b      	subs	r3, r3, r0
 800a474:	9302      	str	r3, [sp, #8]
 800a476:	2301      	movs	r3, #1
 800a478:	9316      	str	r3, [sp, #88]	; 0x58
 800a47a:	9b02      	ldr	r3, [sp, #8]
 800a47c:	2b16      	cmp	r3, #22
 800a47e:	d80f      	bhi.n	800a4a0 <_dtoa_r+0x194>
 800a480:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a482:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a484:	00da      	lsls	r2, r3, #3
 800a486:	4b84      	ldr	r3, [pc, #528]	; (800a698 <_dtoa_r+0x38c>)
 800a488:	189b      	adds	r3, r3, r2
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	f7f5 ffe3 	bl	8000458 <__aeabi_dcmplt>
 800a492:	2800      	cmp	r0, #0
 800a494:	d049      	beq.n	800a52a <_dtoa_r+0x21e>
 800a496:	9b02      	ldr	r3, [sp, #8]
 800a498:	3b01      	subs	r3, #1
 800a49a:	9302      	str	r3, [sp, #8]
 800a49c:	2300      	movs	r3, #0
 800a49e:	9316      	str	r3, [sp, #88]	; 0x58
 800a4a0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a4a2:	1b9e      	subs	r6, r3, r6
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a4a8:	0033      	movs	r3, r6
 800a4aa:	3b01      	subs	r3, #1
 800a4ac:	930d      	str	r3, [sp, #52]	; 0x34
 800a4ae:	d504      	bpl.n	800a4ba <_dtoa_r+0x1ae>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	1b9b      	subs	r3, r3, r6
 800a4b4:	930a      	str	r3, [sp, #40]	; 0x28
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	930d      	str	r3, [sp, #52]	; 0x34
 800a4ba:	9b02      	ldr	r3, [sp, #8]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	db36      	blt.n	800a52e <_dtoa_r+0x222>
 800a4c0:	9a02      	ldr	r2, [sp, #8]
 800a4c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4c4:	4694      	mov	ip, r2
 800a4c6:	4463      	add	r3, ip
 800a4c8:	930d      	str	r3, [sp, #52]	; 0x34
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	9215      	str	r2, [sp, #84]	; 0x54
 800a4ce:	930e      	str	r3, [sp, #56]	; 0x38
 800a4d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a4d2:	2401      	movs	r4, #1
 800a4d4:	2b09      	cmp	r3, #9
 800a4d6:	d864      	bhi.n	800a5a2 <_dtoa_r+0x296>
 800a4d8:	2b05      	cmp	r3, #5
 800a4da:	dd02      	ble.n	800a4e2 <_dtoa_r+0x1d6>
 800a4dc:	2400      	movs	r4, #0
 800a4de:	3b04      	subs	r3, #4
 800a4e0:	9322      	str	r3, [sp, #136]	; 0x88
 800a4e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a4e4:	1e98      	subs	r0, r3, #2
 800a4e6:	2803      	cmp	r0, #3
 800a4e8:	d864      	bhi.n	800a5b4 <_dtoa_r+0x2a8>
 800a4ea:	f7f5 fe15 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a4ee:	3829      	.short	0x3829
 800a4f0:	5836      	.short	0x5836
 800a4f2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a4f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a4f6:	189e      	adds	r6, r3, r2
 800a4f8:	4b68      	ldr	r3, [pc, #416]	; (800a69c <_dtoa_r+0x390>)
 800a4fa:	18f2      	adds	r2, r6, r3
 800a4fc:	2a20      	cmp	r2, #32
 800a4fe:	dd0f      	ble.n	800a520 <_dtoa_r+0x214>
 800a500:	2340      	movs	r3, #64	; 0x40
 800a502:	1a9b      	subs	r3, r3, r2
 800a504:	409d      	lsls	r5, r3
 800a506:	4b66      	ldr	r3, [pc, #408]	; (800a6a0 <_dtoa_r+0x394>)
 800a508:	9802      	ldr	r0, [sp, #8]
 800a50a:	18f3      	adds	r3, r6, r3
 800a50c:	40d8      	lsrs	r0, r3
 800a50e:	4328      	orrs	r0, r5
 800a510:	f7f7 fdfc 	bl	800210c <__aeabi_ui2d>
 800a514:	2301      	movs	r3, #1
 800a516:	4c63      	ldr	r4, [pc, #396]	; (800a6a4 <_dtoa_r+0x398>)
 800a518:	3e01      	subs	r6, #1
 800a51a:	1909      	adds	r1, r1, r4
 800a51c:	9318      	str	r3, [sp, #96]	; 0x60
 800a51e:	e776      	b.n	800a40e <_dtoa_r+0x102>
 800a520:	2320      	movs	r3, #32
 800a522:	9802      	ldr	r0, [sp, #8]
 800a524:	1a9b      	subs	r3, r3, r2
 800a526:	4098      	lsls	r0, r3
 800a528:	e7f2      	b.n	800a510 <_dtoa_r+0x204>
 800a52a:	9016      	str	r0, [sp, #88]	; 0x58
 800a52c:	e7b8      	b.n	800a4a0 <_dtoa_r+0x194>
 800a52e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a530:	9a02      	ldr	r2, [sp, #8]
 800a532:	1a9b      	subs	r3, r3, r2
 800a534:	930a      	str	r3, [sp, #40]	; 0x28
 800a536:	4253      	negs	r3, r2
 800a538:	930e      	str	r3, [sp, #56]	; 0x38
 800a53a:	2300      	movs	r3, #0
 800a53c:	9315      	str	r3, [sp, #84]	; 0x54
 800a53e:	e7c7      	b.n	800a4d0 <_dtoa_r+0x1c4>
 800a540:	2300      	movs	r3, #0
 800a542:	930f      	str	r3, [sp, #60]	; 0x3c
 800a544:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a546:	930c      	str	r3, [sp, #48]	; 0x30
 800a548:	9307      	str	r3, [sp, #28]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	dc13      	bgt.n	800a576 <_dtoa_r+0x26a>
 800a54e:	2301      	movs	r3, #1
 800a550:	001a      	movs	r2, r3
 800a552:	930c      	str	r3, [sp, #48]	; 0x30
 800a554:	9307      	str	r3, [sp, #28]
 800a556:	9223      	str	r2, [sp, #140]	; 0x8c
 800a558:	e00d      	b.n	800a576 <_dtoa_r+0x26a>
 800a55a:	2301      	movs	r3, #1
 800a55c:	e7f1      	b.n	800a542 <_dtoa_r+0x236>
 800a55e:	2300      	movs	r3, #0
 800a560:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a562:	930f      	str	r3, [sp, #60]	; 0x3c
 800a564:	4694      	mov	ip, r2
 800a566:	9b02      	ldr	r3, [sp, #8]
 800a568:	4463      	add	r3, ip
 800a56a:	930c      	str	r3, [sp, #48]	; 0x30
 800a56c:	3301      	adds	r3, #1
 800a56e:	9307      	str	r3, [sp, #28]
 800a570:	2b00      	cmp	r3, #0
 800a572:	dc00      	bgt.n	800a576 <_dtoa_r+0x26a>
 800a574:	2301      	movs	r3, #1
 800a576:	2200      	movs	r2, #0
 800a578:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a57a:	6042      	str	r2, [r0, #4]
 800a57c:	3204      	adds	r2, #4
 800a57e:	0015      	movs	r5, r2
 800a580:	3514      	adds	r5, #20
 800a582:	6841      	ldr	r1, [r0, #4]
 800a584:	429d      	cmp	r5, r3
 800a586:	d919      	bls.n	800a5bc <_dtoa_r+0x2b0>
 800a588:	0038      	movs	r0, r7
 800a58a:	f001 fabd 	bl	800bb08 <_Balloc>
 800a58e:	9006      	str	r0, [sp, #24]
 800a590:	2800      	cmp	r0, #0
 800a592:	d117      	bne.n	800a5c4 <_dtoa_r+0x2b8>
 800a594:	21d5      	movs	r1, #213	; 0xd5
 800a596:	0002      	movs	r2, r0
 800a598:	4b43      	ldr	r3, [pc, #268]	; (800a6a8 <_dtoa_r+0x39c>)
 800a59a:	0049      	lsls	r1, r1, #1
 800a59c:	e6cb      	b.n	800a336 <_dtoa_r+0x2a>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e7de      	b.n	800a560 <_dtoa_r+0x254>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	940f      	str	r4, [sp, #60]	; 0x3c
 800a5a6:	9322      	str	r3, [sp, #136]	; 0x88
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	930c      	str	r3, [sp, #48]	; 0x30
 800a5ac:	9307      	str	r3, [sp, #28]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	3313      	adds	r3, #19
 800a5b2:	e7d0      	b.n	800a556 <_dtoa_r+0x24a>
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a5b8:	3b02      	subs	r3, #2
 800a5ba:	e7f6      	b.n	800a5aa <_dtoa_r+0x29e>
 800a5bc:	3101      	adds	r1, #1
 800a5be:	6041      	str	r1, [r0, #4]
 800a5c0:	0052      	lsls	r2, r2, #1
 800a5c2:	e7dc      	b.n	800a57e <_dtoa_r+0x272>
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c6:	9a06      	ldr	r2, [sp, #24]
 800a5c8:	601a      	str	r2, [r3, #0]
 800a5ca:	9b07      	ldr	r3, [sp, #28]
 800a5cc:	2b0e      	cmp	r3, #14
 800a5ce:	d900      	bls.n	800a5d2 <_dtoa_r+0x2c6>
 800a5d0:	e0eb      	b.n	800a7aa <_dtoa_r+0x49e>
 800a5d2:	2c00      	cmp	r4, #0
 800a5d4:	d100      	bne.n	800a5d8 <_dtoa_r+0x2cc>
 800a5d6:	e0e8      	b.n	800a7aa <_dtoa_r+0x49e>
 800a5d8:	9b02      	ldr	r3, [sp, #8]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	dd68      	ble.n	800a6b0 <_dtoa_r+0x3a4>
 800a5de:	001a      	movs	r2, r3
 800a5e0:	210f      	movs	r1, #15
 800a5e2:	4b2d      	ldr	r3, [pc, #180]	; (800a698 <_dtoa_r+0x38c>)
 800a5e4:	400a      	ands	r2, r1
 800a5e6:	00d2      	lsls	r2, r2, #3
 800a5e8:	189b      	adds	r3, r3, r2
 800a5ea:	681d      	ldr	r5, [r3, #0]
 800a5ec:	685e      	ldr	r6, [r3, #4]
 800a5ee:	9b02      	ldr	r3, [sp, #8]
 800a5f0:	111c      	asrs	r4, r3, #4
 800a5f2:	2302      	movs	r3, #2
 800a5f4:	9310      	str	r3, [sp, #64]	; 0x40
 800a5f6:	9b02      	ldr	r3, [sp, #8]
 800a5f8:	05db      	lsls	r3, r3, #23
 800a5fa:	d50b      	bpl.n	800a614 <_dtoa_r+0x308>
 800a5fc:	4b2b      	ldr	r3, [pc, #172]	; (800a6ac <_dtoa_r+0x3a0>)
 800a5fe:	400c      	ands	r4, r1
 800a600:	6a1a      	ldr	r2, [r3, #32]
 800a602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a604:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a606:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a608:	f7f6 fafc 	bl	8000c04 <__aeabi_ddiv>
 800a60c:	2303      	movs	r3, #3
 800a60e:	9008      	str	r0, [sp, #32]
 800a610:	9109      	str	r1, [sp, #36]	; 0x24
 800a612:	9310      	str	r3, [sp, #64]	; 0x40
 800a614:	4b25      	ldr	r3, [pc, #148]	; (800a6ac <_dtoa_r+0x3a0>)
 800a616:	9314      	str	r3, [sp, #80]	; 0x50
 800a618:	2c00      	cmp	r4, #0
 800a61a:	d108      	bne.n	800a62e <_dtoa_r+0x322>
 800a61c:	9808      	ldr	r0, [sp, #32]
 800a61e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a620:	002a      	movs	r2, r5
 800a622:	0033      	movs	r3, r6
 800a624:	f7f6 faee 	bl	8000c04 <__aeabi_ddiv>
 800a628:	9008      	str	r0, [sp, #32]
 800a62a:	9109      	str	r1, [sp, #36]	; 0x24
 800a62c:	e05c      	b.n	800a6e8 <_dtoa_r+0x3dc>
 800a62e:	2301      	movs	r3, #1
 800a630:	421c      	tst	r4, r3
 800a632:	d00b      	beq.n	800a64c <_dtoa_r+0x340>
 800a634:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a636:	0028      	movs	r0, r5
 800a638:	3301      	adds	r3, #1
 800a63a:	9310      	str	r3, [sp, #64]	; 0x40
 800a63c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a63e:	0031      	movs	r1, r6
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	f7f6 fee0 	bl	8001408 <__aeabi_dmul>
 800a648:	0005      	movs	r5, r0
 800a64a:	000e      	movs	r6, r1
 800a64c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a64e:	1064      	asrs	r4, r4, #1
 800a650:	3308      	adds	r3, #8
 800a652:	e7e0      	b.n	800a616 <_dtoa_r+0x30a>
 800a654:	0800d776 	.word	0x0800d776
 800a658:	0800d78d 	.word	0x0800d78d
 800a65c:	7ff00000 	.word	0x7ff00000
 800a660:	0000270f 	.word	0x0000270f
 800a664:	0800d772 	.word	0x0800d772
 800a668:	0800d775 	.word	0x0800d775
 800a66c:	0800d5ec 	.word	0x0800d5ec
 800a670:	0800d5ed 	.word	0x0800d5ed
 800a674:	3ff00000 	.word	0x3ff00000
 800a678:	fffffc01 	.word	0xfffffc01
 800a67c:	3ff80000 	.word	0x3ff80000
 800a680:	636f4361 	.word	0x636f4361
 800a684:	3fd287a7 	.word	0x3fd287a7
 800a688:	8b60c8b3 	.word	0x8b60c8b3
 800a68c:	3fc68a28 	.word	0x3fc68a28
 800a690:	509f79fb 	.word	0x509f79fb
 800a694:	3fd34413 	.word	0x3fd34413
 800a698:	0800d960 	.word	0x0800d960
 800a69c:	00000432 	.word	0x00000432
 800a6a0:	00000412 	.word	0x00000412
 800a6a4:	fe100000 	.word	0xfe100000
 800a6a8:	0800d7e8 	.word	0x0800d7e8
 800a6ac:	0800d938 	.word	0x0800d938
 800a6b0:	2302      	movs	r3, #2
 800a6b2:	9310      	str	r3, [sp, #64]	; 0x40
 800a6b4:	9b02      	ldr	r3, [sp, #8]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d016      	beq.n	800a6e8 <_dtoa_r+0x3dc>
 800a6ba:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a6bc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800a6be:	425c      	negs	r4, r3
 800a6c0:	230f      	movs	r3, #15
 800a6c2:	4ab6      	ldr	r2, [pc, #728]	; (800a99c <_dtoa_r+0x690>)
 800a6c4:	4023      	ands	r3, r4
 800a6c6:	00db      	lsls	r3, r3, #3
 800a6c8:	18d3      	adds	r3, r2, r3
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	f7f6 fe9b 	bl	8001408 <__aeabi_dmul>
 800a6d2:	2601      	movs	r6, #1
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	9008      	str	r0, [sp, #32]
 800a6d8:	9109      	str	r1, [sp, #36]	; 0x24
 800a6da:	4db1      	ldr	r5, [pc, #708]	; (800a9a0 <_dtoa_r+0x694>)
 800a6dc:	1124      	asrs	r4, r4, #4
 800a6de:	2c00      	cmp	r4, #0
 800a6e0:	d000      	beq.n	800a6e4 <_dtoa_r+0x3d8>
 800a6e2:	e094      	b.n	800a80e <_dtoa_r+0x502>
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d19f      	bne.n	800a628 <_dtoa_r+0x31c>
 800a6e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d100      	bne.n	800a6f0 <_dtoa_r+0x3e4>
 800a6ee:	e09b      	b.n	800a828 <_dtoa_r+0x51c>
 800a6f0:	9c08      	ldr	r4, [sp, #32]
 800a6f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	0020      	movs	r0, r4
 800a6f8:	0029      	movs	r1, r5
 800a6fa:	4baa      	ldr	r3, [pc, #680]	; (800a9a4 <_dtoa_r+0x698>)
 800a6fc:	f7f5 feac 	bl	8000458 <__aeabi_dcmplt>
 800a700:	2800      	cmp	r0, #0
 800a702:	d100      	bne.n	800a706 <_dtoa_r+0x3fa>
 800a704:	e090      	b.n	800a828 <_dtoa_r+0x51c>
 800a706:	9b07      	ldr	r3, [sp, #28]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d100      	bne.n	800a70e <_dtoa_r+0x402>
 800a70c:	e08c      	b.n	800a828 <_dtoa_r+0x51c>
 800a70e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a710:	2b00      	cmp	r3, #0
 800a712:	dd46      	ble.n	800a7a2 <_dtoa_r+0x496>
 800a714:	9b02      	ldr	r3, [sp, #8]
 800a716:	2200      	movs	r2, #0
 800a718:	0020      	movs	r0, r4
 800a71a:	0029      	movs	r1, r5
 800a71c:	1e5e      	subs	r6, r3, #1
 800a71e:	4ba2      	ldr	r3, [pc, #648]	; (800a9a8 <_dtoa_r+0x69c>)
 800a720:	f7f6 fe72 	bl	8001408 <__aeabi_dmul>
 800a724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a726:	9008      	str	r0, [sp, #32]
 800a728:	9109      	str	r1, [sp, #36]	; 0x24
 800a72a:	3301      	adds	r3, #1
 800a72c:	9310      	str	r3, [sp, #64]	; 0x40
 800a72e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a730:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a732:	9c08      	ldr	r4, [sp, #32]
 800a734:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a736:	9314      	str	r3, [sp, #80]	; 0x50
 800a738:	f7f7 fcb8 	bl	80020ac <__aeabi_i2d>
 800a73c:	0022      	movs	r2, r4
 800a73e:	002b      	movs	r3, r5
 800a740:	f7f6 fe62 	bl	8001408 <__aeabi_dmul>
 800a744:	2200      	movs	r2, #0
 800a746:	4b99      	ldr	r3, [pc, #612]	; (800a9ac <_dtoa_r+0x6a0>)
 800a748:	f7f5 ff20 	bl	800058c <__aeabi_dadd>
 800a74c:	9010      	str	r0, [sp, #64]	; 0x40
 800a74e:	9111      	str	r1, [sp, #68]	; 0x44
 800a750:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a752:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a754:	9208      	str	r2, [sp, #32]
 800a756:	9309      	str	r3, [sp, #36]	; 0x24
 800a758:	4a95      	ldr	r2, [pc, #596]	; (800a9b0 <_dtoa_r+0x6a4>)
 800a75a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a75c:	4694      	mov	ip, r2
 800a75e:	4463      	add	r3, ip
 800a760:	9317      	str	r3, [sp, #92]	; 0x5c
 800a762:	9309      	str	r3, [sp, #36]	; 0x24
 800a764:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a766:	2b00      	cmp	r3, #0
 800a768:	d161      	bne.n	800a82e <_dtoa_r+0x522>
 800a76a:	2200      	movs	r2, #0
 800a76c:	0020      	movs	r0, r4
 800a76e:	0029      	movs	r1, r5
 800a770:	4b90      	ldr	r3, [pc, #576]	; (800a9b4 <_dtoa_r+0x6a8>)
 800a772:	f7f7 f8b5 	bl	80018e0 <__aeabi_dsub>
 800a776:	9a08      	ldr	r2, [sp, #32]
 800a778:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a77a:	0004      	movs	r4, r0
 800a77c:	000d      	movs	r5, r1
 800a77e:	f7f5 fe7f 	bl	8000480 <__aeabi_dcmpgt>
 800a782:	2800      	cmp	r0, #0
 800a784:	d000      	beq.n	800a788 <_dtoa_r+0x47c>
 800a786:	e2af      	b.n	800ace8 <_dtoa_r+0x9dc>
 800a788:	488b      	ldr	r0, [pc, #556]	; (800a9b8 <_dtoa_r+0x6ac>)
 800a78a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a78c:	4684      	mov	ip, r0
 800a78e:	4461      	add	r1, ip
 800a790:	000b      	movs	r3, r1
 800a792:	0020      	movs	r0, r4
 800a794:	0029      	movs	r1, r5
 800a796:	9a08      	ldr	r2, [sp, #32]
 800a798:	f7f5 fe5e 	bl	8000458 <__aeabi_dcmplt>
 800a79c:	2800      	cmp	r0, #0
 800a79e:	d000      	beq.n	800a7a2 <_dtoa_r+0x496>
 800a7a0:	e29f      	b.n	800ace2 <_dtoa_r+0x9d6>
 800a7a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a7a4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800a7a6:	9308      	str	r3, [sp, #32]
 800a7a8:	9409      	str	r4, [sp, #36]	; 0x24
 800a7aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	da00      	bge.n	800a7b2 <_dtoa_r+0x4a6>
 800a7b0:	e172      	b.n	800aa98 <_dtoa_r+0x78c>
 800a7b2:	9a02      	ldr	r2, [sp, #8]
 800a7b4:	2a0e      	cmp	r2, #14
 800a7b6:	dd00      	ble.n	800a7ba <_dtoa_r+0x4ae>
 800a7b8:	e16e      	b.n	800aa98 <_dtoa_r+0x78c>
 800a7ba:	4b78      	ldr	r3, [pc, #480]	; (800a99c <_dtoa_r+0x690>)
 800a7bc:	00d2      	lsls	r2, r2, #3
 800a7be:	189b      	adds	r3, r3, r2
 800a7c0:	685c      	ldr	r4, [r3, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	930a      	str	r3, [sp, #40]	; 0x28
 800a7c6:	940b      	str	r4, [sp, #44]	; 0x2c
 800a7c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	db00      	blt.n	800a7d0 <_dtoa_r+0x4c4>
 800a7ce:	e0f7      	b.n	800a9c0 <_dtoa_r+0x6b4>
 800a7d0:	9b07      	ldr	r3, [sp, #28]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	dd00      	ble.n	800a7d8 <_dtoa_r+0x4cc>
 800a7d6:	e0f3      	b.n	800a9c0 <_dtoa_r+0x6b4>
 800a7d8:	d000      	beq.n	800a7dc <_dtoa_r+0x4d0>
 800a7da:	e282      	b.n	800ace2 <_dtoa_r+0x9d6>
 800a7dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a7de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	4b74      	ldr	r3, [pc, #464]	; (800a9b4 <_dtoa_r+0x6a8>)
 800a7e4:	f7f6 fe10 	bl	8001408 <__aeabi_dmul>
 800a7e8:	9a08      	ldr	r2, [sp, #32]
 800a7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ec:	f7f5 fe52 	bl	8000494 <__aeabi_dcmpge>
 800a7f0:	9e07      	ldr	r6, [sp, #28]
 800a7f2:	0035      	movs	r5, r6
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	d000      	beq.n	800a7fa <_dtoa_r+0x4ee>
 800a7f8:	e259      	b.n	800acae <_dtoa_r+0x9a2>
 800a7fa:	9b06      	ldr	r3, [sp, #24]
 800a7fc:	9a06      	ldr	r2, [sp, #24]
 800a7fe:	3301      	adds	r3, #1
 800a800:	9308      	str	r3, [sp, #32]
 800a802:	2331      	movs	r3, #49	; 0x31
 800a804:	7013      	strb	r3, [r2, #0]
 800a806:	9b02      	ldr	r3, [sp, #8]
 800a808:	3301      	adds	r3, #1
 800a80a:	9302      	str	r3, [sp, #8]
 800a80c:	e254      	b.n	800acb8 <_dtoa_r+0x9ac>
 800a80e:	4234      	tst	r4, r6
 800a810:	d007      	beq.n	800a822 <_dtoa_r+0x516>
 800a812:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a814:	3301      	adds	r3, #1
 800a816:	9310      	str	r3, [sp, #64]	; 0x40
 800a818:	682a      	ldr	r2, [r5, #0]
 800a81a:	686b      	ldr	r3, [r5, #4]
 800a81c:	f7f6 fdf4 	bl	8001408 <__aeabi_dmul>
 800a820:	0033      	movs	r3, r6
 800a822:	1064      	asrs	r4, r4, #1
 800a824:	3508      	adds	r5, #8
 800a826:	e75a      	b.n	800a6de <_dtoa_r+0x3d2>
 800a828:	9e02      	ldr	r6, [sp, #8]
 800a82a:	9b07      	ldr	r3, [sp, #28]
 800a82c:	e780      	b.n	800a730 <_dtoa_r+0x424>
 800a82e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a830:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a832:	1e5a      	subs	r2, r3, #1
 800a834:	4b59      	ldr	r3, [pc, #356]	; (800a99c <_dtoa_r+0x690>)
 800a836:	00d2      	lsls	r2, r2, #3
 800a838:	189b      	adds	r3, r3, r2
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	2900      	cmp	r1, #0
 800a840:	d051      	beq.n	800a8e6 <_dtoa_r+0x5da>
 800a842:	2000      	movs	r0, #0
 800a844:	495d      	ldr	r1, [pc, #372]	; (800a9bc <_dtoa_r+0x6b0>)
 800a846:	f7f6 f9dd 	bl	8000c04 <__aeabi_ddiv>
 800a84a:	9a08      	ldr	r2, [sp, #32]
 800a84c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a84e:	f7f7 f847 	bl	80018e0 <__aeabi_dsub>
 800a852:	9a06      	ldr	r2, [sp, #24]
 800a854:	9b06      	ldr	r3, [sp, #24]
 800a856:	4694      	mov	ip, r2
 800a858:	9317      	str	r3, [sp, #92]	; 0x5c
 800a85a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a85c:	9010      	str	r0, [sp, #64]	; 0x40
 800a85e:	9111      	str	r1, [sp, #68]	; 0x44
 800a860:	4463      	add	r3, ip
 800a862:	9319      	str	r3, [sp, #100]	; 0x64
 800a864:	0029      	movs	r1, r5
 800a866:	0020      	movs	r0, r4
 800a868:	f7f7 fbea 	bl	8002040 <__aeabi_d2iz>
 800a86c:	9014      	str	r0, [sp, #80]	; 0x50
 800a86e:	f7f7 fc1d 	bl	80020ac <__aeabi_i2d>
 800a872:	0002      	movs	r2, r0
 800a874:	000b      	movs	r3, r1
 800a876:	0020      	movs	r0, r4
 800a878:	0029      	movs	r1, r5
 800a87a:	f7f7 f831 	bl	80018e0 <__aeabi_dsub>
 800a87e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a880:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a882:	3301      	adds	r3, #1
 800a884:	9308      	str	r3, [sp, #32]
 800a886:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a888:	0004      	movs	r4, r0
 800a88a:	3330      	adds	r3, #48	; 0x30
 800a88c:	7013      	strb	r3, [r2, #0]
 800a88e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a890:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a892:	000d      	movs	r5, r1
 800a894:	f7f5 fde0 	bl	8000458 <__aeabi_dcmplt>
 800a898:	2800      	cmp	r0, #0
 800a89a:	d175      	bne.n	800a988 <_dtoa_r+0x67c>
 800a89c:	0022      	movs	r2, r4
 800a89e:	002b      	movs	r3, r5
 800a8a0:	2000      	movs	r0, #0
 800a8a2:	4940      	ldr	r1, [pc, #256]	; (800a9a4 <_dtoa_r+0x698>)
 800a8a4:	f7f7 f81c 	bl	80018e0 <__aeabi_dsub>
 800a8a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a8aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a8ac:	f7f5 fdd4 	bl	8000458 <__aeabi_dcmplt>
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	d000      	beq.n	800a8b6 <_dtoa_r+0x5aa>
 800a8b4:	e0d2      	b.n	800aa5c <_dtoa_r+0x750>
 800a8b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a8b8:	9a08      	ldr	r2, [sp, #32]
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d100      	bne.n	800a8c0 <_dtoa_r+0x5b4>
 800a8be:	e770      	b.n	800a7a2 <_dtoa_r+0x496>
 800a8c0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a8c2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	4b38      	ldr	r3, [pc, #224]	; (800a9a8 <_dtoa_r+0x69c>)
 800a8c8:	f7f6 fd9e 	bl	8001408 <__aeabi_dmul>
 800a8cc:	4b36      	ldr	r3, [pc, #216]	; (800a9a8 <_dtoa_r+0x69c>)
 800a8ce:	9010      	str	r0, [sp, #64]	; 0x40
 800a8d0:	9111      	str	r1, [sp, #68]	; 0x44
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	0020      	movs	r0, r4
 800a8d6:	0029      	movs	r1, r5
 800a8d8:	f7f6 fd96 	bl	8001408 <__aeabi_dmul>
 800a8dc:	9b08      	ldr	r3, [sp, #32]
 800a8de:	0004      	movs	r4, r0
 800a8e0:	000d      	movs	r5, r1
 800a8e2:	9317      	str	r3, [sp, #92]	; 0x5c
 800a8e4:	e7be      	b.n	800a864 <_dtoa_r+0x558>
 800a8e6:	9808      	ldr	r0, [sp, #32]
 800a8e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8ea:	f7f6 fd8d 	bl	8001408 <__aeabi_dmul>
 800a8ee:	9a06      	ldr	r2, [sp, #24]
 800a8f0:	9b06      	ldr	r3, [sp, #24]
 800a8f2:	4694      	mov	ip, r2
 800a8f4:	9308      	str	r3, [sp, #32]
 800a8f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8f8:	9010      	str	r0, [sp, #64]	; 0x40
 800a8fa:	9111      	str	r1, [sp, #68]	; 0x44
 800a8fc:	4463      	add	r3, ip
 800a8fe:	9319      	str	r3, [sp, #100]	; 0x64
 800a900:	0029      	movs	r1, r5
 800a902:	0020      	movs	r0, r4
 800a904:	f7f7 fb9c 	bl	8002040 <__aeabi_d2iz>
 800a908:	9017      	str	r0, [sp, #92]	; 0x5c
 800a90a:	f7f7 fbcf 	bl	80020ac <__aeabi_i2d>
 800a90e:	0002      	movs	r2, r0
 800a910:	000b      	movs	r3, r1
 800a912:	0020      	movs	r0, r4
 800a914:	0029      	movs	r1, r5
 800a916:	f7f6 ffe3 	bl	80018e0 <__aeabi_dsub>
 800a91a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a91c:	9a08      	ldr	r2, [sp, #32]
 800a91e:	3330      	adds	r3, #48	; 0x30
 800a920:	7013      	strb	r3, [r2, #0]
 800a922:	0013      	movs	r3, r2
 800a924:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a926:	3301      	adds	r3, #1
 800a928:	0004      	movs	r4, r0
 800a92a:	000d      	movs	r5, r1
 800a92c:	9308      	str	r3, [sp, #32]
 800a92e:	4293      	cmp	r3, r2
 800a930:	d12c      	bne.n	800a98c <_dtoa_r+0x680>
 800a932:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a934:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a936:	9a06      	ldr	r2, [sp, #24]
 800a938:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a93a:	4694      	mov	ip, r2
 800a93c:	4463      	add	r3, ip
 800a93e:	2200      	movs	r2, #0
 800a940:	9308      	str	r3, [sp, #32]
 800a942:	4b1e      	ldr	r3, [pc, #120]	; (800a9bc <_dtoa_r+0x6b0>)
 800a944:	f7f5 fe22 	bl	800058c <__aeabi_dadd>
 800a948:	0002      	movs	r2, r0
 800a94a:	000b      	movs	r3, r1
 800a94c:	0020      	movs	r0, r4
 800a94e:	0029      	movs	r1, r5
 800a950:	f7f5 fd96 	bl	8000480 <__aeabi_dcmpgt>
 800a954:	2800      	cmp	r0, #0
 800a956:	d000      	beq.n	800a95a <_dtoa_r+0x64e>
 800a958:	e080      	b.n	800aa5c <_dtoa_r+0x750>
 800a95a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a95c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a95e:	2000      	movs	r0, #0
 800a960:	4916      	ldr	r1, [pc, #88]	; (800a9bc <_dtoa_r+0x6b0>)
 800a962:	f7f6 ffbd 	bl	80018e0 <__aeabi_dsub>
 800a966:	0002      	movs	r2, r0
 800a968:	000b      	movs	r3, r1
 800a96a:	0020      	movs	r0, r4
 800a96c:	0029      	movs	r1, r5
 800a96e:	f7f5 fd73 	bl	8000458 <__aeabi_dcmplt>
 800a972:	2800      	cmp	r0, #0
 800a974:	d100      	bne.n	800a978 <_dtoa_r+0x66c>
 800a976:	e714      	b.n	800a7a2 <_dtoa_r+0x496>
 800a978:	9b08      	ldr	r3, [sp, #32]
 800a97a:	001a      	movs	r2, r3
 800a97c:	3a01      	subs	r2, #1
 800a97e:	9208      	str	r2, [sp, #32]
 800a980:	7812      	ldrb	r2, [r2, #0]
 800a982:	2a30      	cmp	r2, #48	; 0x30
 800a984:	d0f8      	beq.n	800a978 <_dtoa_r+0x66c>
 800a986:	9308      	str	r3, [sp, #32]
 800a988:	9602      	str	r6, [sp, #8]
 800a98a:	e055      	b.n	800aa38 <_dtoa_r+0x72c>
 800a98c:	2200      	movs	r2, #0
 800a98e:	4b06      	ldr	r3, [pc, #24]	; (800a9a8 <_dtoa_r+0x69c>)
 800a990:	f7f6 fd3a 	bl	8001408 <__aeabi_dmul>
 800a994:	0004      	movs	r4, r0
 800a996:	000d      	movs	r5, r1
 800a998:	e7b2      	b.n	800a900 <_dtoa_r+0x5f4>
 800a99a:	46c0      	nop			; (mov r8, r8)
 800a99c:	0800d960 	.word	0x0800d960
 800a9a0:	0800d938 	.word	0x0800d938
 800a9a4:	3ff00000 	.word	0x3ff00000
 800a9a8:	40240000 	.word	0x40240000
 800a9ac:	401c0000 	.word	0x401c0000
 800a9b0:	fcc00000 	.word	0xfcc00000
 800a9b4:	40140000 	.word	0x40140000
 800a9b8:	7cc00000 	.word	0x7cc00000
 800a9bc:	3fe00000 	.word	0x3fe00000
 800a9c0:	9b07      	ldr	r3, [sp, #28]
 800a9c2:	9e06      	ldr	r6, [sp, #24]
 800a9c4:	3b01      	subs	r3, #1
 800a9c6:	199b      	adds	r3, r3, r6
 800a9c8:	930c      	str	r3, [sp, #48]	; 0x30
 800a9ca:	9c08      	ldr	r4, [sp, #32]
 800a9cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a9ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9d2:	0020      	movs	r0, r4
 800a9d4:	0029      	movs	r1, r5
 800a9d6:	f7f6 f915 	bl	8000c04 <__aeabi_ddiv>
 800a9da:	f7f7 fb31 	bl	8002040 <__aeabi_d2iz>
 800a9de:	9007      	str	r0, [sp, #28]
 800a9e0:	f7f7 fb64 	bl	80020ac <__aeabi_i2d>
 800a9e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9e8:	f7f6 fd0e 	bl	8001408 <__aeabi_dmul>
 800a9ec:	0002      	movs	r2, r0
 800a9ee:	000b      	movs	r3, r1
 800a9f0:	0020      	movs	r0, r4
 800a9f2:	0029      	movs	r1, r5
 800a9f4:	f7f6 ff74 	bl	80018e0 <__aeabi_dsub>
 800a9f8:	0033      	movs	r3, r6
 800a9fa:	9a07      	ldr	r2, [sp, #28]
 800a9fc:	3601      	adds	r6, #1
 800a9fe:	3230      	adds	r2, #48	; 0x30
 800aa00:	701a      	strb	r2, [r3, #0]
 800aa02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa04:	9608      	str	r6, [sp, #32]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d139      	bne.n	800aa7e <_dtoa_r+0x772>
 800aa0a:	0002      	movs	r2, r0
 800aa0c:	000b      	movs	r3, r1
 800aa0e:	f7f5 fdbd 	bl	800058c <__aeabi_dadd>
 800aa12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa16:	0004      	movs	r4, r0
 800aa18:	000d      	movs	r5, r1
 800aa1a:	f7f5 fd31 	bl	8000480 <__aeabi_dcmpgt>
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	d11b      	bne.n	800aa5a <_dtoa_r+0x74e>
 800aa22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa26:	0020      	movs	r0, r4
 800aa28:	0029      	movs	r1, r5
 800aa2a:	f7f5 fd0f 	bl	800044c <__aeabi_dcmpeq>
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	d002      	beq.n	800aa38 <_dtoa_r+0x72c>
 800aa32:	9b07      	ldr	r3, [sp, #28]
 800aa34:	07db      	lsls	r3, r3, #31
 800aa36:	d410      	bmi.n	800aa5a <_dtoa_r+0x74e>
 800aa38:	0038      	movs	r0, r7
 800aa3a:	9905      	ldr	r1, [sp, #20]
 800aa3c:	f001 f8a8 	bl	800bb90 <_Bfree>
 800aa40:	2300      	movs	r3, #0
 800aa42:	9a08      	ldr	r2, [sp, #32]
 800aa44:	9802      	ldr	r0, [sp, #8]
 800aa46:	7013      	strb	r3, [r2, #0]
 800aa48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aa4a:	3001      	adds	r0, #1
 800aa4c:	6018      	str	r0, [r3, #0]
 800aa4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d100      	bne.n	800aa56 <_dtoa_r+0x74a>
 800aa54:	e4a6      	b.n	800a3a4 <_dtoa_r+0x98>
 800aa56:	601a      	str	r2, [r3, #0]
 800aa58:	e4a4      	b.n	800a3a4 <_dtoa_r+0x98>
 800aa5a:	9e02      	ldr	r6, [sp, #8]
 800aa5c:	9b08      	ldr	r3, [sp, #32]
 800aa5e:	9308      	str	r3, [sp, #32]
 800aa60:	3b01      	subs	r3, #1
 800aa62:	781a      	ldrb	r2, [r3, #0]
 800aa64:	2a39      	cmp	r2, #57	; 0x39
 800aa66:	d106      	bne.n	800aa76 <_dtoa_r+0x76a>
 800aa68:	9a06      	ldr	r2, [sp, #24]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d1f7      	bne.n	800aa5e <_dtoa_r+0x752>
 800aa6e:	2230      	movs	r2, #48	; 0x30
 800aa70:	9906      	ldr	r1, [sp, #24]
 800aa72:	3601      	adds	r6, #1
 800aa74:	700a      	strb	r2, [r1, #0]
 800aa76:	781a      	ldrb	r2, [r3, #0]
 800aa78:	3201      	adds	r2, #1
 800aa7a:	701a      	strb	r2, [r3, #0]
 800aa7c:	e784      	b.n	800a988 <_dtoa_r+0x67c>
 800aa7e:	2200      	movs	r2, #0
 800aa80:	4baa      	ldr	r3, [pc, #680]	; (800ad2c <_dtoa_r+0xa20>)
 800aa82:	f7f6 fcc1 	bl	8001408 <__aeabi_dmul>
 800aa86:	2200      	movs	r2, #0
 800aa88:	2300      	movs	r3, #0
 800aa8a:	0004      	movs	r4, r0
 800aa8c:	000d      	movs	r5, r1
 800aa8e:	f7f5 fcdd 	bl	800044c <__aeabi_dcmpeq>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	d09b      	beq.n	800a9ce <_dtoa_r+0x6c2>
 800aa96:	e7cf      	b.n	800aa38 <_dtoa_r+0x72c>
 800aa98:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aa9a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800aa9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aa9e:	2d00      	cmp	r5, #0
 800aaa0:	d012      	beq.n	800aac8 <_dtoa_r+0x7bc>
 800aaa2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800aaa4:	2a01      	cmp	r2, #1
 800aaa6:	dc66      	bgt.n	800ab76 <_dtoa_r+0x86a>
 800aaa8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aaaa:	2a00      	cmp	r2, #0
 800aaac:	d05d      	beq.n	800ab6a <_dtoa_r+0x85e>
 800aaae:	4aa0      	ldr	r2, [pc, #640]	; (800ad30 <_dtoa_r+0xa24>)
 800aab0:	189b      	adds	r3, r3, r2
 800aab2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aab4:	2101      	movs	r1, #1
 800aab6:	18d2      	adds	r2, r2, r3
 800aab8:	920a      	str	r2, [sp, #40]	; 0x28
 800aaba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aabc:	0038      	movs	r0, r7
 800aabe:	18d3      	adds	r3, r2, r3
 800aac0:	930d      	str	r3, [sp, #52]	; 0x34
 800aac2:	f001 f961 	bl	800bd88 <__i2b>
 800aac6:	0005      	movs	r5, r0
 800aac8:	2c00      	cmp	r4, #0
 800aaca:	dd0e      	ble.n	800aaea <_dtoa_r+0x7de>
 800aacc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aace:	2b00      	cmp	r3, #0
 800aad0:	dd0b      	ble.n	800aaea <_dtoa_r+0x7de>
 800aad2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aad4:	0023      	movs	r3, r4
 800aad6:	4294      	cmp	r4, r2
 800aad8:	dd00      	ble.n	800aadc <_dtoa_r+0x7d0>
 800aada:	0013      	movs	r3, r2
 800aadc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aade:	1ae4      	subs	r4, r4, r3
 800aae0:	1ad2      	subs	r2, r2, r3
 800aae2:	920a      	str	r2, [sp, #40]	; 0x28
 800aae4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aae6:	1ad3      	subs	r3, r2, r3
 800aae8:	930d      	str	r3, [sp, #52]	; 0x34
 800aaea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d01f      	beq.n	800ab30 <_dtoa_r+0x824>
 800aaf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d054      	beq.n	800aba0 <_dtoa_r+0x894>
 800aaf6:	2e00      	cmp	r6, #0
 800aaf8:	dd11      	ble.n	800ab1e <_dtoa_r+0x812>
 800aafa:	0029      	movs	r1, r5
 800aafc:	0032      	movs	r2, r6
 800aafe:	0038      	movs	r0, r7
 800ab00:	f001 fa08 	bl	800bf14 <__pow5mult>
 800ab04:	9a05      	ldr	r2, [sp, #20]
 800ab06:	0001      	movs	r1, r0
 800ab08:	0005      	movs	r5, r0
 800ab0a:	0038      	movs	r0, r7
 800ab0c:	f001 f952 	bl	800bdb4 <__multiply>
 800ab10:	9905      	ldr	r1, [sp, #20]
 800ab12:	9014      	str	r0, [sp, #80]	; 0x50
 800ab14:	0038      	movs	r0, r7
 800ab16:	f001 f83b 	bl	800bb90 <_Bfree>
 800ab1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab1c:	9305      	str	r3, [sp, #20]
 800ab1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab20:	1b9a      	subs	r2, r3, r6
 800ab22:	42b3      	cmp	r3, r6
 800ab24:	d004      	beq.n	800ab30 <_dtoa_r+0x824>
 800ab26:	0038      	movs	r0, r7
 800ab28:	9905      	ldr	r1, [sp, #20]
 800ab2a:	f001 f9f3 	bl	800bf14 <__pow5mult>
 800ab2e:	9005      	str	r0, [sp, #20]
 800ab30:	2101      	movs	r1, #1
 800ab32:	0038      	movs	r0, r7
 800ab34:	f001 f928 	bl	800bd88 <__i2b>
 800ab38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab3a:	0006      	movs	r6, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	dd31      	ble.n	800aba4 <_dtoa_r+0x898>
 800ab40:	001a      	movs	r2, r3
 800ab42:	0001      	movs	r1, r0
 800ab44:	0038      	movs	r0, r7
 800ab46:	f001 f9e5 	bl	800bf14 <__pow5mult>
 800ab4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab4c:	0006      	movs	r6, r0
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	dd2d      	ble.n	800abae <_dtoa_r+0x8a2>
 800ab52:	2300      	movs	r3, #0
 800ab54:	930e      	str	r3, [sp, #56]	; 0x38
 800ab56:	6933      	ldr	r3, [r6, #16]
 800ab58:	3303      	adds	r3, #3
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	18f3      	adds	r3, r6, r3
 800ab5e:	6858      	ldr	r0, [r3, #4]
 800ab60:	f001 f8ca 	bl	800bcf8 <__hi0bits>
 800ab64:	2320      	movs	r3, #32
 800ab66:	1a18      	subs	r0, r3, r0
 800ab68:	e039      	b.n	800abde <_dtoa_r+0x8d2>
 800ab6a:	2336      	movs	r3, #54	; 0x36
 800ab6c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ab6e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800ab70:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ab72:	1a9b      	subs	r3, r3, r2
 800ab74:	e79d      	b.n	800aab2 <_dtoa_r+0x7a6>
 800ab76:	9b07      	ldr	r3, [sp, #28]
 800ab78:	1e5e      	subs	r6, r3, #1
 800ab7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab7c:	42b3      	cmp	r3, r6
 800ab7e:	db07      	blt.n	800ab90 <_dtoa_r+0x884>
 800ab80:	1b9e      	subs	r6, r3, r6
 800ab82:	9b07      	ldr	r3, [sp, #28]
 800ab84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	da93      	bge.n	800aab2 <_dtoa_r+0x7a6>
 800ab8a:	1ae4      	subs	r4, r4, r3
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	e790      	b.n	800aab2 <_dtoa_r+0x7a6>
 800ab90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab92:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ab94:	1af3      	subs	r3, r6, r3
 800ab96:	18d3      	adds	r3, r2, r3
 800ab98:	960e      	str	r6, [sp, #56]	; 0x38
 800ab9a:	9315      	str	r3, [sp, #84]	; 0x54
 800ab9c:	2600      	movs	r6, #0
 800ab9e:	e7f0      	b.n	800ab82 <_dtoa_r+0x876>
 800aba0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aba2:	e7c0      	b.n	800ab26 <_dtoa_r+0x81a>
 800aba4:	2300      	movs	r3, #0
 800aba6:	930e      	str	r3, [sp, #56]	; 0x38
 800aba8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800abaa:	2b01      	cmp	r3, #1
 800abac:	dc13      	bgt.n	800abd6 <_dtoa_r+0x8ca>
 800abae:	2300      	movs	r3, #0
 800abb0:	930e      	str	r3, [sp, #56]	; 0x38
 800abb2:	9b08      	ldr	r3, [sp, #32]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d10e      	bne.n	800abd6 <_dtoa_r+0x8ca>
 800abb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abba:	031b      	lsls	r3, r3, #12
 800abbc:	d10b      	bne.n	800abd6 <_dtoa_r+0x8ca>
 800abbe:	4b5d      	ldr	r3, [pc, #372]	; (800ad34 <_dtoa_r+0xa28>)
 800abc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abc2:	4213      	tst	r3, r2
 800abc4:	d007      	beq.n	800abd6 <_dtoa_r+0x8ca>
 800abc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abc8:	3301      	adds	r3, #1
 800abca:	930a      	str	r3, [sp, #40]	; 0x28
 800abcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abce:	3301      	adds	r3, #1
 800abd0:	930d      	str	r3, [sp, #52]	; 0x34
 800abd2:	2301      	movs	r3, #1
 800abd4:	930e      	str	r3, [sp, #56]	; 0x38
 800abd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abd8:	2001      	movs	r0, #1
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d1bb      	bne.n	800ab56 <_dtoa_r+0x84a>
 800abde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abe0:	221f      	movs	r2, #31
 800abe2:	1818      	adds	r0, r3, r0
 800abe4:	0003      	movs	r3, r0
 800abe6:	4013      	ands	r3, r2
 800abe8:	4210      	tst	r0, r2
 800abea:	d046      	beq.n	800ac7a <_dtoa_r+0x96e>
 800abec:	3201      	adds	r2, #1
 800abee:	1ad2      	subs	r2, r2, r3
 800abf0:	2a04      	cmp	r2, #4
 800abf2:	dd3f      	ble.n	800ac74 <_dtoa_r+0x968>
 800abf4:	221c      	movs	r2, #28
 800abf6:	1ad3      	subs	r3, r2, r3
 800abf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abfa:	18e4      	adds	r4, r4, r3
 800abfc:	18d2      	adds	r2, r2, r3
 800abfe:	920a      	str	r2, [sp, #40]	; 0x28
 800ac00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac02:	18d3      	adds	r3, r2, r3
 800ac04:	930d      	str	r3, [sp, #52]	; 0x34
 800ac06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	dd05      	ble.n	800ac18 <_dtoa_r+0x90c>
 800ac0c:	001a      	movs	r2, r3
 800ac0e:	0038      	movs	r0, r7
 800ac10:	9905      	ldr	r1, [sp, #20]
 800ac12:	f001 f9db 	bl	800bfcc <__lshift>
 800ac16:	9005      	str	r0, [sp, #20]
 800ac18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	dd05      	ble.n	800ac2a <_dtoa_r+0x91e>
 800ac1e:	0031      	movs	r1, r6
 800ac20:	001a      	movs	r2, r3
 800ac22:	0038      	movs	r0, r7
 800ac24:	f001 f9d2 	bl	800bfcc <__lshift>
 800ac28:	0006      	movs	r6, r0
 800ac2a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d026      	beq.n	800ac7e <_dtoa_r+0x972>
 800ac30:	0031      	movs	r1, r6
 800ac32:	9805      	ldr	r0, [sp, #20]
 800ac34:	f001 fa38 	bl	800c0a8 <__mcmp>
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	da20      	bge.n	800ac7e <_dtoa_r+0x972>
 800ac3c:	9b02      	ldr	r3, [sp, #8]
 800ac3e:	220a      	movs	r2, #10
 800ac40:	3b01      	subs	r3, #1
 800ac42:	9302      	str	r3, [sp, #8]
 800ac44:	0038      	movs	r0, r7
 800ac46:	2300      	movs	r3, #0
 800ac48:	9905      	ldr	r1, [sp, #20]
 800ac4a:	f000 ffc5 	bl	800bbd8 <__multadd>
 800ac4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac50:	9005      	str	r0, [sp, #20]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d100      	bne.n	800ac58 <_dtoa_r+0x94c>
 800ac56:	e166      	b.n	800af26 <_dtoa_r+0xc1a>
 800ac58:	2300      	movs	r3, #0
 800ac5a:	0029      	movs	r1, r5
 800ac5c:	220a      	movs	r2, #10
 800ac5e:	0038      	movs	r0, r7
 800ac60:	f000 ffba 	bl	800bbd8 <__multadd>
 800ac64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac66:	0005      	movs	r5, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	dc47      	bgt.n	800acfc <_dtoa_r+0x9f0>
 800ac6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	dc0d      	bgt.n	800ac8e <_dtoa_r+0x982>
 800ac72:	e043      	b.n	800acfc <_dtoa_r+0x9f0>
 800ac74:	2a04      	cmp	r2, #4
 800ac76:	d0c6      	beq.n	800ac06 <_dtoa_r+0x8fa>
 800ac78:	0013      	movs	r3, r2
 800ac7a:	331c      	adds	r3, #28
 800ac7c:	e7bc      	b.n	800abf8 <_dtoa_r+0x8ec>
 800ac7e:	9b07      	ldr	r3, [sp, #28]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	dc35      	bgt.n	800acf0 <_dtoa_r+0x9e4>
 800ac84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac86:	2b02      	cmp	r3, #2
 800ac88:	dd32      	ble.n	800acf0 <_dtoa_r+0x9e4>
 800ac8a:	9b07      	ldr	r3, [sp, #28]
 800ac8c:	930c      	str	r3, [sp, #48]	; 0x30
 800ac8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d10c      	bne.n	800acae <_dtoa_r+0x9a2>
 800ac94:	0031      	movs	r1, r6
 800ac96:	2205      	movs	r2, #5
 800ac98:	0038      	movs	r0, r7
 800ac9a:	f000 ff9d 	bl	800bbd8 <__multadd>
 800ac9e:	0006      	movs	r6, r0
 800aca0:	0001      	movs	r1, r0
 800aca2:	9805      	ldr	r0, [sp, #20]
 800aca4:	f001 fa00 	bl	800c0a8 <__mcmp>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	dd00      	ble.n	800acae <_dtoa_r+0x9a2>
 800acac:	e5a5      	b.n	800a7fa <_dtoa_r+0x4ee>
 800acae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800acb0:	43db      	mvns	r3, r3
 800acb2:	9302      	str	r3, [sp, #8]
 800acb4:	9b06      	ldr	r3, [sp, #24]
 800acb6:	9308      	str	r3, [sp, #32]
 800acb8:	2400      	movs	r4, #0
 800acba:	0031      	movs	r1, r6
 800acbc:	0038      	movs	r0, r7
 800acbe:	f000 ff67 	bl	800bb90 <_Bfree>
 800acc2:	2d00      	cmp	r5, #0
 800acc4:	d100      	bne.n	800acc8 <_dtoa_r+0x9bc>
 800acc6:	e6b7      	b.n	800aa38 <_dtoa_r+0x72c>
 800acc8:	2c00      	cmp	r4, #0
 800acca:	d005      	beq.n	800acd8 <_dtoa_r+0x9cc>
 800accc:	42ac      	cmp	r4, r5
 800acce:	d003      	beq.n	800acd8 <_dtoa_r+0x9cc>
 800acd0:	0021      	movs	r1, r4
 800acd2:	0038      	movs	r0, r7
 800acd4:	f000 ff5c 	bl	800bb90 <_Bfree>
 800acd8:	0029      	movs	r1, r5
 800acda:	0038      	movs	r0, r7
 800acdc:	f000 ff58 	bl	800bb90 <_Bfree>
 800ace0:	e6aa      	b.n	800aa38 <_dtoa_r+0x72c>
 800ace2:	2600      	movs	r6, #0
 800ace4:	0035      	movs	r5, r6
 800ace6:	e7e2      	b.n	800acae <_dtoa_r+0x9a2>
 800ace8:	9602      	str	r6, [sp, #8]
 800acea:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800acec:	0035      	movs	r5, r6
 800acee:	e584      	b.n	800a7fa <_dtoa_r+0x4ee>
 800acf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d100      	bne.n	800acf8 <_dtoa_r+0x9ec>
 800acf6:	e0ce      	b.n	800ae96 <_dtoa_r+0xb8a>
 800acf8:	9b07      	ldr	r3, [sp, #28]
 800acfa:	930c      	str	r3, [sp, #48]	; 0x30
 800acfc:	2c00      	cmp	r4, #0
 800acfe:	dd05      	ble.n	800ad0c <_dtoa_r+0xa00>
 800ad00:	0029      	movs	r1, r5
 800ad02:	0022      	movs	r2, r4
 800ad04:	0038      	movs	r0, r7
 800ad06:	f001 f961 	bl	800bfcc <__lshift>
 800ad0a:	0005      	movs	r5, r0
 800ad0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad0e:	0028      	movs	r0, r5
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d022      	beq.n	800ad5a <_dtoa_r+0xa4e>
 800ad14:	0038      	movs	r0, r7
 800ad16:	6869      	ldr	r1, [r5, #4]
 800ad18:	f000 fef6 	bl	800bb08 <_Balloc>
 800ad1c:	1e04      	subs	r4, r0, #0
 800ad1e:	d10f      	bne.n	800ad40 <_dtoa_r+0xa34>
 800ad20:	0002      	movs	r2, r0
 800ad22:	4b05      	ldr	r3, [pc, #20]	; (800ad38 <_dtoa_r+0xa2c>)
 800ad24:	4905      	ldr	r1, [pc, #20]	; (800ad3c <_dtoa_r+0xa30>)
 800ad26:	f7ff fb06 	bl	800a336 <_dtoa_r+0x2a>
 800ad2a:	46c0      	nop			; (mov r8, r8)
 800ad2c:	40240000 	.word	0x40240000
 800ad30:	00000433 	.word	0x00000433
 800ad34:	7ff00000 	.word	0x7ff00000
 800ad38:	0800d7e8 	.word	0x0800d7e8
 800ad3c:	000002ea 	.word	0x000002ea
 800ad40:	0029      	movs	r1, r5
 800ad42:	692b      	ldr	r3, [r5, #16]
 800ad44:	310c      	adds	r1, #12
 800ad46:	1c9a      	adds	r2, r3, #2
 800ad48:	0092      	lsls	r2, r2, #2
 800ad4a:	300c      	adds	r0, #12
 800ad4c:	f7fd fa88 	bl	8008260 <memcpy>
 800ad50:	2201      	movs	r2, #1
 800ad52:	0021      	movs	r1, r4
 800ad54:	0038      	movs	r0, r7
 800ad56:	f001 f939 	bl	800bfcc <__lshift>
 800ad5a:	9b06      	ldr	r3, [sp, #24]
 800ad5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad5e:	930a      	str	r3, [sp, #40]	; 0x28
 800ad60:	3b01      	subs	r3, #1
 800ad62:	189b      	adds	r3, r3, r2
 800ad64:	2201      	movs	r2, #1
 800ad66:	002c      	movs	r4, r5
 800ad68:	0005      	movs	r5, r0
 800ad6a:	9314      	str	r3, [sp, #80]	; 0x50
 800ad6c:	9b08      	ldr	r3, [sp, #32]
 800ad6e:	4013      	ands	r3, r2
 800ad70:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad72:	0031      	movs	r1, r6
 800ad74:	9805      	ldr	r0, [sp, #20]
 800ad76:	f7ff fa3d 	bl	800a1f4 <quorem>
 800ad7a:	0003      	movs	r3, r0
 800ad7c:	0021      	movs	r1, r4
 800ad7e:	3330      	adds	r3, #48	; 0x30
 800ad80:	900d      	str	r0, [sp, #52]	; 0x34
 800ad82:	9805      	ldr	r0, [sp, #20]
 800ad84:	9307      	str	r3, [sp, #28]
 800ad86:	f001 f98f 	bl	800c0a8 <__mcmp>
 800ad8a:	002a      	movs	r2, r5
 800ad8c:	900e      	str	r0, [sp, #56]	; 0x38
 800ad8e:	0031      	movs	r1, r6
 800ad90:	0038      	movs	r0, r7
 800ad92:	f001 f9a5 	bl	800c0e0 <__mdiff>
 800ad96:	68c3      	ldr	r3, [r0, #12]
 800ad98:	9008      	str	r0, [sp, #32]
 800ad9a:	9310      	str	r3, [sp, #64]	; 0x40
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	930c      	str	r3, [sp, #48]	; 0x30
 800ada0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d104      	bne.n	800adb0 <_dtoa_r+0xaa4>
 800ada6:	0001      	movs	r1, r0
 800ada8:	9805      	ldr	r0, [sp, #20]
 800adaa:	f001 f97d 	bl	800c0a8 <__mcmp>
 800adae:	900c      	str	r0, [sp, #48]	; 0x30
 800adb0:	0038      	movs	r0, r7
 800adb2:	9908      	ldr	r1, [sp, #32]
 800adb4:	f000 feec 	bl	800bb90 <_Bfree>
 800adb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800adbc:	3301      	adds	r3, #1
 800adbe:	9308      	str	r3, [sp, #32]
 800adc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800adc2:	4313      	orrs	r3, r2
 800adc4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800adc6:	4313      	orrs	r3, r2
 800adc8:	d10c      	bne.n	800ade4 <_dtoa_r+0xad8>
 800adca:	9b07      	ldr	r3, [sp, #28]
 800adcc:	2b39      	cmp	r3, #57	; 0x39
 800adce:	d026      	beq.n	800ae1e <_dtoa_r+0xb12>
 800add0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800add2:	2b00      	cmp	r3, #0
 800add4:	dd02      	ble.n	800addc <_dtoa_r+0xad0>
 800add6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800add8:	3331      	adds	r3, #49	; 0x31
 800adda:	9307      	str	r3, [sp, #28]
 800addc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adde:	9a07      	ldr	r2, [sp, #28]
 800ade0:	701a      	strb	r2, [r3, #0]
 800ade2:	e76a      	b.n	800acba <_dtoa_r+0x9ae>
 800ade4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	db04      	blt.n	800adf4 <_dtoa_r+0xae8>
 800adea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800adec:	4313      	orrs	r3, r2
 800adee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800adf0:	4313      	orrs	r3, r2
 800adf2:	d11f      	bne.n	800ae34 <_dtoa_r+0xb28>
 800adf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	ddf0      	ble.n	800addc <_dtoa_r+0xad0>
 800adfa:	9905      	ldr	r1, [sp, #20]
 800adfc:	2201      	movs	r2, #1
 800adfe:	0038      	movs	r0, r7
 800ae00:	f001 f8e4 	bl	800bfcc <__lshift>
 800ae04:	0031      	movs	r1, r6
 800ae06:	9005      	str	r0, [sp, #20]
 800ae08:	f001 f94e 	bl	800c0a8 <__mcmp>
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	dc03      	bgt.n	800ae18 <_dtoa_r+0xb0c>
 800ae10:	d1e4      	bne.n	800addc <_dtoa_r+0xad0>
 800ae12:	9b07      	ldr	r3, [sp, #28]
 800ae14:	07db      	lsls	r3, r3, #31
 800ae16:	d5e1      	bpl.n	800addc <_dtoa_r+0xad0>
 800ae18:	9b07      	ldr	r3, [sp, #28]
 800ae1a:	2b39      	cmp	r3, #57	; 0x39
 800ae1c:	d1db      	bne.n	800add6 <_dtoa_r+0xaca>
 800ae1e:	2339      	movs	r3, #57	; 0x39
 800ae20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae22:	7013      	strb	r3, [r2, #0]
 800ae24:	9b08      	ldr	r3, [sp, #32]
 800ae26:	9308      	str	r3, [sp, #32]
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	781a      	ldrb	r2, [r3, #0]
 800ae2c:	2a39      	cmp	r2, #57	; 0x39
 800ae2e:	d068      	beq.n	800af02 <_dtoa_r+0xbf6>
 800ae30:	3201      	adds	r2, #1
 800ae32:	e7d5      	b.n	800ade0 <_dtoa_r+0xad4>
 800ae34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	dd07      	ble.n	800ae4a <_dtoa_r+0xb3e>
 800ae3a:	9b07      	ldr	r3, [sp, #28]
 800ae3c:	2b39      	cmp	r3, #57	; 0x39
 800ae3e:	d0ee      	beq.n	800ae1e <_dtoa_r+0xb12>
 800ae40:	9b07      	ldr	r3, [sp, #28]
 800ae42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae44:	3301      	adds	r3, #1
 800ae46:	7013      	strb	r3, [r2, #0]
 800ae48:	e737      	b.n	800acba <_dtoa_r+0x9ae>
 800ae4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae4c:	9a07      	ldr	r2, [sp, #28]
 800ae4e:	701a      	strb	r2, [r3, #0]
 800ae50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d03e      	beq.n	800aed6 <_dtoa_r+0xbca>
 800ae58:	2300      	movs	r3, #0
 800ae5a:	220a      	movs	r2, #10
 800ae5c:	9905      	ldr	r1, [sp, #20]
 800ae5e:	0038      	movs	r0, r7
 800ae60:	f000 feba 	bl	800bbd8 <__multadd>
 800ae64:	2300      	movs	r3, #0
 800ae66:	9005      	str	r0, [sp, #20]
 800ae68:	220a      	movs	r2, #10
 800ae6a:	0021      	movs	r1, r4
 800ae6c:	0038      	movs	r0, r7
 800ae6e:	42ac      	cmp	r4, r5
 800ae70:	d106      	bne.n	800ae80 <_dtoa_r+0xb74>
 800ae72:	f000 feb1 	bl	800bbd8 <__multadd>
 800ae76:	0004      	movs	r4, r0
 800ae78:	0005      	movs	r5, r0
 800ae7a:	9b08      	ldr	r3, [sp, #32]
 800ae7c:	930a      	str	r3, [sp, #40]	; 0x28
 800ae7e:	e778      	b.n	800ad72 <_dtoa_r+0xa66>
 800ae80:	f000 feaa 	bl	800bbd8 <__multadd>
 800ae84:	0029      	movs	r1, r5
 800ae86:	0004      	movs	r4, r0
 800ae88:	2300      	movs	r3, #0
 800ae8a:	220a      	movs	r2, #10
 800ae8c:	0038      	movs	r0, r7
 800ae8e:	f000 fea3 	bl	800bbd8 <__multadd>
 800ae92:	0005      	movs	r5, r0
 800ae94:	e7f1      	b.n	800ae7a <_dtoa_r+0xb6e>
 800ae96:	9b07      	ldr	r3, [sp, #28]
 800ae98:	930c      	str	r3, [sp, #48]	; 0x30
 800ae9a:	2400      	movs	r4, #0
 800ae9c:	0031      	movs	r1, r6
 800ae9e:	9805      	ldr	r0, [sp, #20]
 800aea0:	f7ff f9a8 	bl	800a1f4 <quorem>
 800aea4:	9b06      	ldr	r3, [sp, #24]
 800aea6:	3030      	adds	r0, #48	; 0x30
 800aea8:	5518      	strb	r0, [r3, r4]
 800aeaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aeac:	3401      	adds	r4, #1
 800aeae:	9007      	str	r0, [sp, #28]
 800aeb0:	42a3      	cmp	r3, r4
 800aeb2:	dd07      	ble.n	800aec4 <_dtoa_r+0xbb8>
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	220a      	movs	r2, #10
 800aeb8:	0038      	movs	r0, r7
 800aeba:	9905      	ldr	r1, [sp, #20]
 800aebc:	f000 fe8c 	bl	800bbd8 <__multadd>
 800aec0:	9005      	str	r0, [sp, #20]
 800aec2:	e7eb      	b.n	800ae9c <_dtoa_r+0xb90>
 800aec4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aec6:	2001      	movs	r0, #1
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	dd00      	ble.n	800aece <_dtoa_r+0xbc2>
 800aecc:	0018      	movs	r0, r3
 800aece:	2400      	movs	r4, #0
 800aed0:	9b06      	ldr	r3, [sp, #24]
 800aed2:	181b      	adds	r3, r3, r0
 800aed4:	9308      	str	r3, [sp, #32]
 800aed6:	9905      	ldr	r1, [sp, #20]
 800aed8:	2201      	movs	r2, #1
 800aeda:	0038      	movs	r0, r7
 800aedc:	f001 f876 	bl	800bfcc <__lshift>
 800aee0:	0031      	movs	r1, r6
 800aee2:	9005      	str	r0, [sp, #20]
 800aee4:	f001 f8e0 	bl	800c0a8 <__mcmp>
 800aee8:	2800      	cmp	r0, #0
 800aeea:	dc9b      	bgt.n	800ae24 <_dtoa_r+0xb18>
 800aeec:	d102      	bne.n	800aef4 <_dtoa_r+0xbe8>
 800aeee:	9b07      	ldr	r3, [sp, #28]
 800aef0:	07db      	lsls	r3, r3, #31
 800aef2:	d497      	bmi.n	800ae24 <_dtoa_r+0xb18>
 800aef4:	9b08      	ldr	r3, [sp, #32]
 800aef6:	9308      	str	r3, [sp, #32]
 800aef8:	3b01      	subs	r3, #1
 800aefa:	781a      	ldrb	r2, [r3, #0]
 800aefc:	2a30      	cmp	r2, #48	; 0x30
 800aefe:	d0fa      	beq.n	800aef6 <_dtoa_r+0xbea>
 800af00:	e6db      	b.n	800acba <_dtoa_r+0x9ae>
 800af02:	9a06      	ldr	r2, [sp, #24]
 800af04:	429a      	cmp	r2, r3
 800af06:	d18e      	bne.n	800ae26 <_dtoa_r+0xb1a>
 800af08:	9b02      	ldr	r3, [sp, #8]
 800af0a:	3301      	adds	r3, #1
 800af0c:	9302      	str	r3, [sp, #8]
 800af0e:	2331      	movs	r3, #49	; 0x31
 800af10:	e799      	b.n	800ae46 <_dtoa_r+0xb3a>
 800af12:	4b09      	ldr	r3, [pc, #36]	; (800af38 <_dtoa_r+0xc2c>)
 800af14:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800af16:	9306      	str	r3, [sp, #24]
 800af18:	4b08      	ldr	r3, [pc, #32]	; (800af3c <_dtoa_r+0xc30>)
 800af1a:	2a00      	cmp	r2, #0
 800af1c:	d001      	beq.n	800af22 <_dtoa_r+0xc16>
 800af1e:	f7ff fa3f 	bl	800a3a0 <_dtoa_r+0x94>
 800af22:	f7ff fa3f 	bl	800a3a4 <_dtoa_r+0x98>
 800af26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af28:	2b00      	cmp	r3, #0
 800af2a:	dcb6      	bgt.n	800ae9a <_dtoa_r+0xb8e>
 800af2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af2e:	2b02      	cmp	r3, #2
 800af30:	dd00      	ble.n	800af34 <_dtoa_r+0xc28>
 800af32:	e6ac      	b.n	800ac8e <_dtoa_r+0x982>
 800af34:	e7b1      	b.n	800ae9a <_dtoa_r+0xb8e>
 800af36:	46c0      	nop			; (mov r8, r8)
 800af38:	0800d769 	.word	0x0800d769
 800af3c:	0800d771 	.word	0x0800d771

0800af40 <__sflush_r>:
 800af40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af42:	898b      	ldrh	r3, [r1, #12]
 800af44:	0005      	movs	r5, r0
 800af46:	000c      	movs	r4, r1
 800af48:	071a      	lsls	r2, r3, #28
 800af4a:	d45f      	bmi.n	800b00c <__sflush_r+0xcc>
 800af4c:	684a      	ldr	r2, [r1, #4]
 800af4e:	2a00      	cmp	r2, #0
 800af50:	dc04      	bgt.n	800af5c <__sflush_r+0x1c>
 800af52:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800af54:	2a00      	cmp	r2, #0
 800af56:	dc01      	bgt.n	800af5c <__sflush_r+0x1c>
 800af58:	2000      	movs	r0, #0
 800af5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800af5c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800af5e:	2f00      	cmp	r7, #0
 800af60:	d0fa      	beq.n	800af58 <__sflush_r+0x18>
 800af62:	2200      	movs	r2, #0
 800af64:	2180      	movs	r1, #128	; 0x80
 800af66:	682e      	ldr	r6, [r5, #0]
 800af68:	602a      	str	r2, [r5, #0]
 800af6a:	001a      	movs	r2, r3
 800af6c:	0149      	lsls	r1, r1, #5
 800af6e:	400a      	ands	r2, r1
 800af70:	420b      	tst	r3, r1
 800af72:	d034      	beq.n	800afde <__sflush_r+0x9e>
 800af74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af76:	89a3      	ldrh	r3, [r4, #12]
 800af78:	075b      	lsls	r3, r3, #29
 800af7a:	d506      	bpl.n	800af8a <__sflush_r+0x4a>
 800af7c:	6863      	ldr	r3, [r4, #4]
 800af7e:	1ac0      	subs	r0, r0, r3
 800af80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af82:	2b00      	cmp	r3, #0
 800af84:	d001      	beq.n	800af8a <__sflush_r+0x4a>
 800af86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af88:	1ac0      	subs	r0, r0, r3
 800af8a:	0002      	movs	r2, r0
 800af8c:	6a21      	ldr	r1, [r4, #32]
 800af8e:	2300      	movs	r3, #0
 800af90:	0028      	movs	r0, r5
 800af92:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800af94:	47b8      	blx	r7
 800af96:	89a1      	ldrh	r1, [r4, #12]
 800af98:	1c43      	adds	r3, r0, #1
 800af9a:	d106      	bne.n	800afaa <__sflush_r+0x6a>
 800af9c:	682b      	ldr	r3, [r5, #0]
 800af9e:	2b1d      	cmp	r3, #29
 800afa0:	d831      	bhi.n	800b006 <__sflush_r+0xc6>
 800afa2:	4a2c      	ldr	r2, [pc, #176]	; (800b054 <__sflush_r+0x114>)
 800afa4:	40da      	lsrs	r2, r3
 800afa6:	07d3      	lsls	r3, r2, #31
 800afa8:	d52d      	bpl.n	800b006 <__sflush_r+0xc6>
 800afaa:	2300      	movs	r3, #0
 800afac:	6063      	str	r3, [r4, #4]
 800afae:	6923      	ldr	r3, [r4, #16]
 800afb0:	6023      	str	r3, [r4, #0]
 800afb2:	04cb      	lsls	r3, r1, #19
 800afb4:	d505      	bpl.n	800afc2 <__sflush_r+0x82>
 800afb6:	1c43      	adds	r3, r0, #1
 800afb8:	d102      	bne.n	800afc0 <__sflush_r+0x80>
 800afba:	682b      	ldr	r3, [r5, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d100      	bne.n	800afc2 <__sflush_r+0x82>
 800afc0:	6560      	str	r0, [r4, #84]	; 0x54
 800afc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afc4:	602e      	str	r6, [r5, #0]
 800afc6:	2900      	cmp	r1, #0
 800afc8:	d0c6      	beq.n	800af58 <__sflush_r+0x18>
 800afca:	0023      	movs	r3, r4
 800afcc:	3344      	adds	r3, #68	; 0x44
 800afce:	4299      	cmp	r1, r3
 800afd0:	d002      	beq.n	800afd8 <__sflush_r+0x98>
 800afd2:	0028      	movs	r0, r5
 800afd4:	f7fd f956 	bl	8008284 <_free_r>
 800afd8:	2000      	movs	r0, #0
 800afda:	6360      	str	r0, [r4, #52]	; 0x34
 800afdc:	e7bd      	b.n	800af5a <__sflush_r+0x1a>
 800afde:	2301      	movs	r3, #1
 800afe0:	0028      	movs	r0, r5
 800afe2:	6a21      	ldr	r1, [r4, #32]
 800afe4:	47b8      	blx	r7
 800afe6:	1c43      	adds	r3, r0, #1
 800afe8:	d1c5      	bne.n	800af76 <__sflush_r+0x36>
 800afea:	682b      	ldr	r3, [r5, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d0c2      	beq.n	800af76 <__sflush_r+0x36>
 800aff0:	2b1d      	cmp	r3, #29
 800aff2:	d001      	beq.n	800aff8 <__sflush_r+0xb8>
 800aff4:	2b16      	cmp	r3, #22
 800aff6:	d101      	bne.n	800affc <__sflush_r+0xbc>
 800aff8:	602e      	str	r6, [r5, #0]
 800affa:	e7ad      	b.n	800af58 <__sflush_r+0x18>
 800affc:	2340      	movs	r3, #64	; 0x40
 800affe:	89a2      	ldrh	r2, [r4, #12]
 800b000:	4313      	orrs	r3, r2
 800b002:	81a3      	strh	r3, [r4, #12]
 800b004:	e7a9      	b.n	800af5a <__sflush_r+0x1a>
 800b006:	2340      	movs	r3, #64	; 0x40
 800b008:	430b      	orrs	r3, r1
 800b00a:	e7fa      	b.n	800b002 <__sflush_r+0xc2>
 800b00c:	690f      	ldr	r7, [r1, #16]
 800b00e:	2f00      	cmp	r7, #0
 800b010:	d0a2      	beq.n	800af58 <__sflush_r+0x18>
 800b012:	680a      	ldr	r2, [r1, #0]
 800b014:	600f      	str	r7, [r1, #0]
 800b016:	1bd2      	subs	r2, r2, r7
 800b018:	9201      	str	r2, [sp, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	079b      	lsls	r3, r3, #30
 800b01e:	d100      	bne.n	800b022 <__sflush_r+0xe2>
 800b020:	694a      	ldr	r2, [r1, #20]
 800b022:	60a2      	str	r2, [r4, #8]
 800b024:	9b01      	ldr	r3, [sp, #4]
 800b026:	2b00      	cmp	r3, #0
 800b028:	dc00      	bgt.n	800b02c <__sflush_r+0xec>
 800b02a:	e795      	b.n	800af58 <__sflush_r+0x18>
 800b02c:	003a      	movs	r2, r7
 800b02e:	0028      	movs	r0, r5
 800b030:	9b01      	ldr	r3, [sp, #4]
 800b032:	6a21      	ldr	r1, [r4, #32]
 800b034:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b036:	47b0      	blx	r6
 800b038:	2800      	cmp	r0, #0
 800b03a:	dc06      	bgt.n	800b04a <__sflush_r+0x10a>
 800b03c:	2340      	movs	r3, #64	; 0x40
 800b03e:	2001      	movs	r0, #1
 800b040:	89a2      	ldrh	r2, [r4, #12]
 800b042:	4240      	negs	r0, r0
 800b044:	4313      	orrs	r3, r2
 800b046:	81a3      	strh	r3, [r4, #12]
 800b048:	e787      	b.n	800af5a <__sflush_r+0x1a>
 800b04a:	9b01      	ldr	r3, [sp, #4]
 800b04c:	183f      	adds	r7, r7, r0
 800b04e:	1a1b      	subs	r3, r3, r0
 800b050:	9301      	str	r3, [sp, #4]
 800b052:	e7e7      	b.n	800b024 <__sflush_r+0xe4>
 800b054:	20400001 	.word	0x20400001

0800b058 <_fflush_r>:
 800b058:	690b      	ldr	r3, [r1, #16]
 800b05a:	b570      	push	{r4, r5, r6, lr}
 800b05c:	0005      	movs	r5, r0
 800b05e:	000c      	movs	r4, r1
 800b060:	2b00      	cmp	r3, #0
 800b062:	d102      	bne.n	800b06a <_fflush_r+0x12>
 800b064:	2500      	movs	r5, #0
 800b066:	0028      	movs	r0, r5
 800b068:	bd70      	pop	{r4, r5, r6, pc}
 800b06a:	2800      	cmp	r0, #0
 800b06c:	d004      	beq.n	800b078 <_fflush_r+0x20>
 800b06e:	6983      	ldr	r3, [r0, #24]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d101      	bne.n	800b078 <_fflush_r+0x20>
 800b074:	f000 f892 	bl	800b19c <__sinit>
 800b078:	4b14      	ldr	r3, [pc, #80]	; (800b0cc <_fflush_r+0x74>)
 800b07a:	429c      	cmp	r4, r3
 800b07c:	d11b      	bne.n	800b0b6 <_fflush_r+0x5e>
 800b07e:	686c      	ldr	r4, [r5, #4]
 800b080:	220c      	movs	r2, #12
 800b082:	5ea3      	ldrsh	r3, [r4, r2]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d0ed      	beq.n	800b064 <_fflush_r+0xc>
 800b088:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b08a:	07d2      	lsls	r2, r2, #31
 800b08c:	d404      	bmi.n	800b098 <_fflush_r+0x40>
 800b08e:	059b      	lsls	r3, r3, #22
 800b090:	d402      	bmi.n	800b098 <_fflush_r+0x40>
 800b092:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b094:	f000 fc9b 	bl	800b9ce <__retarget_lock_acquire_recursive>
 800b098:	0028      	movs	r0, r5
 800b09a:	0021      	movs	r1, r4
 800b09c:	f7ff ff50 	bl	800af40 <__sflush_r>
 800b0a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0a2:	0005      	movs	r5, r0
 800b0a4:	07db      	lsls	r3, r3, #31
 800b0a6:	d4de      	bmi.n	800b066 <_fflush_r+0xe>
 800b0a8:	89a3      	ldrh	r3, [r4, #12]
 800b0aa:	059b      	lsls	r3, r3, #22
 800b0ac:	d4db      	bmi.n	800b066 <_fflush_r+0xe>
 800b0ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0b0:	f000 fc8e 	bl	800b9d0 <__retarget_lock_release_recursive>
 800b0b4:	e7d7      	b.n	800b066 <_fflush_r+0xe>
 800b0b6:	4b06      	ldr	r3, [pc, #24]	; (800b0d0 <_fflush_r+0x78>)
 800b0b8:	429c      	cmp	r4, r3
 800b0ba:	d101      	bne.n	800b0c0 <_fflush_r+0x68>
 800b0bc:	68ac      	ldr	r4, [r5, #8]
 800b0be:	e7df      	b.n	800b080 <_fflush_r+0x28>
 800b0c0:	4b04      	ldr	r3, [pc, #16]	; (800b0d4 <_fflush_r+0x7c>)
 800b0c2:	429c      	cmp	r4, r3
 800b0c4:	d1dc      	bne.n	800b080 <_fflush_r+0x28>
 800b0c6:	68ec      	ldr	r4, [r5, #12]
 800b0c8:	e7da      	b.n	800b080 <_fflush_r+0x28>
 800b0ca:	46c0      	nop			; (mov r8, r8)
 800b0cc:	0800d81c 	.word	0x0800d81c
 800b0d0:	0800d83c 	.word	0x0800d83c
 800b0d4:	0800d7fc 	.word	0x0800d7fc

0800b0d8 <std>:
 800b0d8:	2300      	movs	r3, #0
 800b0da:	b510      	push	{r4, lr}
 800b0dc:	0004      	movs	r4, r0
 800b0de:	6003      	str	r3, [r0, #0]
 800b0e0:	6043      	str	r3, [r0, #4]
 800b0e2:	6083      	str	r3, [r0, #8]
 800b0e4:	8181      	strh	r1, [r0, #12]
 800b0e6:	6643      	str	r3, [r0, #100]	; 0x64
 800b0e8:	0019      	movs	r1, r3
 800b0ea:	81c2      	strh	r2, [r0, #14]
 800b0ec:	6103      	str	r3, [r0, #16]
 800b0ee:	6143      	str	r3, [r0, #20]
 800b0f0:	6183      	str	r3, [r0, #24]
 800b0f2:	2208      	movs	r2, #8
 800b0f4:	305c      	adds	r0, #92	; 0x5c
 800b0f6:	f7fd f8bc 	bl	8008272 <memset>
 800b0fa:	4b05      	ldr	r3, [pc, #20]	; (800b110 <std+0x38>)
 800b0fc:	6224      	str	r4, [r4, #32]
 800b0fe:	6263      	str	r3, [r4, #36]	; 0x24
 800b100:	4b04      	ldr	r3, [pc, #16]	; (800b114 <std+0x3c>)
 800b102:	62a3      	str	r3, [r4, #40]	; 0x28
 800b104:	4b04      	ldr	r3, [pc, #16]	; (800b118 <std+0x40>)
 800b106:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b108:	4b04      	ldr	r3, [pc, #16]	; (800b11c <std+0x44>)
 800b10a:	6323      	str	r3, [r4, #48]	; 0x30
 800b10c:	bd10      	pop	{r4, pc}
 800b10e:	46c0      	nop			; (mov r8, r8)
 800b110:	0800ca89 	.word	0x0800ca89
 800b114:	0800cab1 	.word	0x0800cab1
 800b118:	0800cae9 	.word	0x0800cae9
 800b11c:	0800cb15 	.word	0x0800cb15

0800b120 <_cleanup_r>:
 800b120:	b510      	push	{r4, lr}
 800b122:	4902      	ldr	r1, [pc, #8]	; (800b12c <_cleanup_r+0xc>)
 800b124:	f000 f8ba 	bl	800b29c <_fwalk_reent>
 800b128:	bd10      	pop	{r4, pc}
 800b12a:	46c0      	nop			; (mov r8, r8)
 800b12c:	0800b059 	.word	0x0800b059

0800b130 <__sfmoreglue>:
 800b130:	b570      	push	{r4, r5, r6, lr}
 800b132:	2568      	movs	r5, #104	; 0x68
 800b134:	1e4a      	subs	r2, r1, #1
 800b136:	4355      	muls	r5, r2
 800b138:	000e      	movs	r6, r1
 800b13a:	0029      	movs	r1, r5
 800b13c:	3174      	adds	r1, #116	; 0x74
 800b13e:	f7fd f90d 	bl	800835c <_malloc_r>
 800b142:	1e04      	subs	r4, r0, #0
 800b144:	d008      	beq.n	800b158 <__sfmoreglue+0x28>
 800b146:	2100      	movs	r1, #0
 800b148:	002a      	movs	r2, r5
 800b14a:	6001      	str	r1, [r0, #0]
 800b14c:	6046      	str	r6, [r0, #4]
 800b14e:	300c      	adds	r0, #12
 800b150:	60a0      	str	r0, [r4, #8]
 800b152:	3268      	adds	r2, #104	; 0x68
 800b154:	f7fd f88d 	bl	8008272 <memset>
 800b158:	0020      	movs	r0, r4
 800b15a:	bd70      	pop	{r4, r5, r6, pc}

0800b15c <__sfp_lock_acquire>:
 800b15c:	b510      	push	{r4, lr}
 800b15e:	4802      	ldr	r0, [pc, #8]	; (800b168 <__sfp_lock_acquire+0xc>)
 800b160:	f000 fc35 	bl	800b9ce <__retarget_lock_acquire_recursive>
 800b164:	bd10      	pop	{r4, pc}
 800b166:	46c0      	nop			; (mov r8, r8)
 800b168:	20001279 	.word	0x20001279

0800b16c <__sfp_lock_release>:
 800b16c:	b510      	push	{r4, lr}
 800b16e:	4802      	ldr	r0, [pc, #8]	; (800b178 <__sfp_lock_release+0xc>)
 800b170:	f000 fc2e 	bl	800b9d0 <__retarget_lock_release_recursive>
 800b174:	bd10      	pop	{r4, pc}
 800b176:	46c0      	nop			; (mov r8, r8)
 800b178:	20001279 	.word	0x20001279

0800b17c <__sinit_lock_acquire>:
 800b17c:	b510      	push	{r4, lr}
 800b17e:	4802      	ldr	r0, [pc, #8]	; (800b188 <__sinit_lock_acquire+0xc>)
 800b180:	f000 fc25 	bl	800b9ce <__retarget_lock_acquire_recursive>
 800b184:	bd10      	pop	{r4, pc}
 800b186:	46c0      	nop			; (mov r8, r8)
 800b188:	2000127a 	.word	0x2000127a

0800b18c <__sinit_lock_release>:
 800b18c:	b510      	push	{r4, lr}
 800b18e:	4802      	ldr	r0, [pc, #8]	; (800b198 <__sinit_lock_release+0xc>)
 800b190:	f000 fc1e 	bl	800b9d0 <__retarget_lock_release_recursive>
 800b194:	bd10      	pop	{r4, pc}
 800b196:	46c0      	nop			; (mov r8, r8)
 800b198:	2000127a 	.word	0x2000127a

0800b19c <__sinit>:
 800b19c:	b513      	push	{r0, r1, r4, lr}
 800b19e:	0004      	movs	r4, r0
 800b1a0:	f7ff ffec 	bl	800b17c <__sinit_lock_acquire>
 800b1a4:	69a3      	ldr	r3, [r4, #24]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d002      	beq.n	800b1b0 <__sinit+0x14>
 800b1aa:	f7ff ffef 	bl	800b18c <__sinit_lock_release>
 800b1ae:	bd13      	pop	{r0, r1, r4, pc}
 800b1b0:	64a3      	str	r3, [r4, #72]	; 0x48
 800b1b2:	64e3      	str	r3, [r4, #76]	; 0x4c
 800b1b4:	6523      	str	r3, [r4, #80]	; 0x50
 800b1b6:	4b13      	ldr	r3, [pc, #76]	; (800b204 <__sinit+0x68>)
 800b1b8:	4a13      	ldr	r2, [pc, #76]	; (800b208 <__sinit+0x6c>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800b1be:	9301      	str	r3, [sp, #4]
 800b1c0:	42a3      	cmp	r3, r4
 800b1c2:	d101      	bne.n	800b1c8 <__sinit+0x2c>
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	61a3      	str	r3, [r4, #24]
 800b1c8:	0020      	movs	r0, r4
 800b1ca:	f000 f81f 	bl	800b20c <__sfp>
 800b1ce:	6060      	str	r0, [r4, #4]
 800b1d0:	0020      	movs	r0, r4
 800b1d2:	f000 f81b 	bl	800b20c <__sfp>
 800b1d6:	60a0      	str	r0, [r4, #8]
 800b1d8:	0020      	movs	r0, r4
 800b1da:	f000 f817 	bl	800b20c <__sfp>
 800b1de:	2200      	movs	r2, #0
 800b1e0:	2104      	movs	r1, #4
 800b1e2:	60e0      	str	r0, [r4, #12]
 800b1e4:	6860      	ldr	r0, [r4, #4]
 800b1e6:	f7ff ff77 	bl	800b0d8 <std>
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	2109      	movs	r1, #9
 800b1ee:	68a0      	ldr	r0, [r4, #8]
 800b1f0:	f7ff ff72 	bl	800b0d8 <std>
 800b1f4:	2202      	movs	r2, #2
 800b1f6:	2112      	movs	r1, #18
 800b1f8:	68e0      	ldr	r0, [r4, #12]
 800b1fa:	f7ff ff6d 	bl	800b0d8 <std>
 800b1fe:	2301      	movs	r3, #1
 800b200:	61a3      	str	r3, [r4, #24]
 800b202:	e7d2      	b.n	800b1aa <__sinit+0xe>
 800b204:	0800d5d8 	.word	0x0800d5d8
 800b208:	0800b121 	.word	0x0800b121

0800b20c <__sfp>:
 800b20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b20e:	0007      	movs	r7, r0
 800b210:	f7ff ffa4 	bl	800b15c <__sfp_lock_acquire>
 800b214:	4b1f      	ldr	r3, [pc, #124]	; (800b294 <__sfp+0x88>)
 800b216:	681e      	ldr	r6, [r3, #0]
 800b218:	69b3      	ldr	r3, [r6, #24]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d102      	bne.n	800b224 <__sfp+0x18>
 800b21e:	0030      	movs	r0, r6
 800b220:	f7ff ffbc 	bl	800b19c <__sinit>
 800b224:	3648      	adds	r6, #72	; 0x48
 800b226:	68b4      	ldr	r4, [r6, #8]
 800b228:	6873      	ldr	r3, [r6, #4]
 800b22a:	3b01      	subs	r3, #1
 800b22c:	d504      	bpl.n	800b238 <__sfp+0x2c>
 800b22e:	6833      	ldr	r3, [r6, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d022      	beq.n	800b27a <__sfp+0x6e>
 800b234:	6836      	ldr	r6, [r6, #0]
 800b236:	e7f6      	b.n	800b226 <__sfp+0x1a>
 800b238:	220c      	movs	r2, #12
 800b23a:	5ea5      	ldrsh	r5, [r4, r2]
 800b23c:	2d00      	cmp	r5, #0
 800b23e:	d11a      	bne.n	800b276 <__sfp+0x6a>
 800b240:	0020      	movs	r0, r4
 800b242:	4b15      	ldr	r3, [pc, #84]	; (800b298 <__sfp+0x8c>)
 800b244:	3058      	adds	r0, #88	; 0x58
 800b246:	60e3      	str	r3, [r4, #12]
 800b248:	6665      	str	r5, [r4, #100]	; 0x64
 800b24a:	f000 fbbf 	bl	800b9cc <__retarget_lock_init_recursive>
 800b24e:	f7ff ff8d 	bl	800b16c <__sfp_lock_release>
 800b252:	0020      	movs	r0, r4
 800b254:	2208      	movs	r2, #8
 800b256:	0029      	movs	r1, r5
 800b258:	6025      	str	r5, [r4, #0]
 800b25a:	60a5      	str	r5, [r4, #8]
 800b25c:	6065      	str	r5, [r4, #4]
 800b25e:	6125      	str	r5, [r4, #16]
 800b260:	6165      	str	r5, [r4, #20]
 800b262:	61a5      	str	r5, [r4, #24]
 800b264:	305c      	adds	r0, #92	; 0x5c
 800b266:	f7fd f804 	bl	8008272 <memset>
 800b26a:	6365      	str	r5, [r4, #52]	; 0x34
 800b26c:	63a5      	str	r5, [r4, #56]	; 0x38
 800b26e:	64a5      	str	r5, [r4, #72]	; 0x48
 800b270:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b272:	0020      	movs	r0, r4
 800b274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b276:	3468      	adds	r4, #104	; 0x68
 800b278:	e7d7      	b.n	800b22a <__sfp+0x1e>
 800b27a:	2104      	movs	r1, #4
 800b27c:	0038      	movs	r0, r7
 800b27e:	f7ff ff57 	bl	800b130 <__sfmoreglue>
 800b282:	1e04      	subs	r4, r0, #0
 800b284:	6030      	str	r0, [r6, #0]
 800b286:	d1d5      	bne.n	800b234 <__sfp+0x28>
 800b288:	f7ff ff70 	bl	800b16c <__sfp_lock_release>
 800b28c:	230c      	movs	r3, #12
 800b28e:	603b      	str	r3, [r7, #0]
 800b290:	e7ef      	b.n	800b272 <__sfp+0x66>
 800b292:	46c0      	nop			; (mov r8, r8)
 800b294:	0800d5d8 	.word	0x0800d5d8
 800b298:	ffff0001 	.word	0xffff0001

0800b29c <_fwalk_reent>:
 800b29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b29e:	0004      	movs	r4, r0
 800b2a0:	0006      	movs	r6, r0
 800b2a2:	2700      	movs	r7, #0
 800b2a4:	9101      	str	r1, [sp, #4]
 800b2a6:	3448      	adds	r4, #72	; 0x48
 800b2a8:	6863      	ldr	r3, [r4, #4]
 800b2aa:	68a5      	ldr	r5, [r4, #8]
 800b2ac:	9300      	str	r3, [sp, #0]
 800b2ae:	9b00      	ldr	r3, [sp, #0]
 800b2b0:	3b01      	subs	r3, #1
 800b2b2:	9300      	str	r3, [sp, #0]
 800b2b4:	d504      	bpl.n	800b2c0 <_fwalk_reent+0x24>
 800b2b6:	6824      	ldr	r4, [r4, #0]
 800b2b8:	2c00      	cmp	r4, #0
 800b2ba:	d1f5      	bne.n	800b2a8 <_fwalk_reent+0xc>
 800b2bc:	0038      	movs	r0, r7
 800b2be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b2c0:	89ab      	ldrh	r3, [r5, #12]
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d908      	bls.n	800b2d8 <_fwalk_reent+0x3c>
 800b2c6:	220e      	movs	r2, #14
 800b2c8:	5eab      	ldrsh	r3, [r5, r2]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	d004      	beq.n	800b2d8 <_fwalk_reent+0x3c>
 800b2ce:	0029      	movs	r1, r5
 800b2d0:	0030      	movs	r0, r6
 800b2d2:	9b01      	ldr	r3, [sp, #4]
 800b2d4:	4798      	blx	r3
 800b2d6:	4307      	orrs	r7, r0
 800b2d8:	3568      	adds	r5, #104	; 0x68
 800b2da:	e7e8      	b.n	800b2ae <_fwalk_reent+0x12>

0800b2dc <rshift>:
 800b2dc:	0002      	movs	r2, r0
 800b2de:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2e0:	6904      	ldr	r4, [r0, #16]
 800b2e2:	3214      	adds	r2, #20
 800b2e4:	0013      	movs	r3, r2
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	114f      	asrs	r7, r1, #5
 800b2ea:	42bc      	cmp	r4, r7
 800b2ec:	dd31      	ble.n	800b352 <rshift+0x76>
 800b2ee:	00bb      	lsls	r3, r7, #2
 800b2f0:	18d3      	adds	r3, r2, r3
 800b2f2:	261f      	movs	r6, #31
 800b2f4:	9301      	str	r3, [sp, #4]
 800b2f6:	000b      	movs	r3, r1
 800b2f8:	00a5      	lsls	r5, r4, #2
 800b2fa:	4033      	ands	r3, r6
 800b2fc:	1955      	adds	r5, r2, r5
 800b2fe:	9302      	str	r3, [sp, #8]
 800b300:	4231      	tst	r1, r6
 800b302:	d10c      	bne.n	800b31e <rshift+0x42>
 800b304:	0016      	movs	r6, r2
 800b306:	9901      	ldr	r1, [sp, #4]
 800b308:	428d      	cmp	r5, r1
 800b30a:	d838      	bhi.n	800b37e <rshift+0xa2>
 800b30c:	9901      	ldr	r1, [sp, #4]
 800b30e:	2300      	movs	r3, #0
 800b310:	3903      	subs	r1, #3
 800b312:	428d      	cmp	r5, r1
 800b314:	d301      	bcc.n	800b31a <rshift+0x3e>
 800b316:	1be3      	subs	r3, r4, r7
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	18d3      	adds	r3, r2, r3
 800b31c:	e019      	b.n	800b352 <rshift+0x76>
 800b31e:	2120      	movs	r1, #32
 800b320:	9b02      	ldr	r3, [sp, #8]
 800b322:	9e01      	ldr	r6, [sp, #4]
 800b324:	1acb      	subs	r3, r1, r3
 800b326:	9303      	str	r3, [sp, #12]
 800b328:	ce02      	ldmia	r6!, {r1}
 800b32a:	9b02      	ldr	r3, [sp, #8]
 800b32c:	4694      	mov	ip, r2
 800b32e:	40d9      	lsrs	r1, r3
 800b330:	9100      	str	r1, [sp, #0]
 800b332:	42b5      	cmp	r5, r6
 800b334:	d816      	bhi.n	800b364 <rshift+0x88>
 800b336:	9e01      	ldr	r6, [sp, #4]
 800b338:	2300      	movs	r3, #0
 800b33a:	3601      	adds	r6, #1
 800b33c:	42b5      	cmp	r5, r6
 800b33e:	d302      	bcc.n	800b346 <rshift+0x6a>
 800b340:	1be3      	subs	r3, r4, r7
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	3b04      	subs	r3, #4
 800b346:	9900      	ldr	r1, [sp, #0]
 800b348:	18d3      	adds	r3, r2, r3
 800b34a:	6019      	str	r1, [r3, #0]
 800b34c:	2900      	cmp	r1, #0
 800b34e:	d000      	beq.n	800b352 <rshift+0x76>
 800b350:	3304      	adds	r3, #4
 800b352:	1a99      	subs	r1, r3, r2
 800b354:	1089      	asrs	r1, r1, #2
 800b356:	6101      	str	r1, [r0, #16]
 800b358:	4293      	cmp	r3, r2
 800b35a:	d101      	bne.n	800b360 <rshift+0x84>
 800b35c:	2300      	movs	r3, #0
 800b35e:	6143      	str	r3, [r0, #20]
 800b360:	b005      	add	sp, #20
 800b362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b364:	6833      	ldr	r3, [r6, #0]
 800b366:	9903      	ldr	r1, [sp, #12]
 800b368:	408b      	lsls	r3, r1
 800b36a:	9900      	ldr	r1, [sp, #0]
 800b36c:	4319      	orrs	r1, r3
 800b36e:	4663      	mov	r3, ip
 800b370:	c302      	stmia	r3!, {r1}
 800b372:	469c      	mov	ip, r3
 800b374:	ce02      	ldmia	r6!, {r1}
 800b376:	9b02      	ldr	r3, [sp, #8]
 800b378:	40d9      	lsrs	r1, r3
 800b37a:	9100      	str	r1, [sp, #0]
 800b37c:	e7d9      	b.n	800b332 <rshift+0x56>
 800b37e:	c908      	ldmia	r1!, {r3}
 800b380:	c608      	stmia	r6!, {r3}
 800b382:	e7c1      	b.n	800b308 <rshift+0x2c>

0800b384 <__hexdig_fun>:
 800b384:	0002      	movs	r2, r0
 800b386:	3a30      	subs	r2, #48	; 0x30
 800b388:	0003      	movs	r3, r0
 800b38a:	2a09      	cmp	r2, #9
 800b38c:	d802      	bhi.n	800b394 <__hexdig_fun+0x10>
 800b38e:	3b20      	subs	r3, #32
 800b390:	b2d8      	uxtb	r0, r3
 800b392:	4770      	bx	lr
 800b394:	0002      	movs	r2, r0
 800b396:	3a61      	subs	r2, #97	; 0x61
 800b398:	2a05      	cmp	r2, #5
 800b39a:	d801      	bhi.n	800b3a0 <__hexdig_fun+0x1c>
 800b39c:	3b47      	subs	r3, #71	; 0x47
 800b39e:	e7f7      	b.n	800b390 <__hexdig_fun+0xc>
 800b3a0:	001a      	movs	r2, r3
 800b3a2:	3a41      	subs	r2, #65	; 0x41
 800b3a4:	2000      	movs	r0, #0
 800b3a6:	2a05      	cmp	r2, #5
 800b3a8:	d8f3      	bhi.n	800b392 <__hexdig_fun+0xe>
 800b3aa:	3b27      	subs	r3, #39	; 0x27
 800b3ac:	e7f0      	b.n	800b390 <__hexdig_fun+0xc>
	...

0800b3b0 <__gethex>:
 800b3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3b2:	b08d      	sub	sp, #52	; 0x34
 800b3b4:	930a      	str	r3, [sp, #40]	; 0x28
 800b3b6:	4bbf      	ldr	r3, [pc, #764]	; (800b6b4 <__gethex+0x304>)
 800b3b8:	9005      	str	r0, [sp, #20]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	9109      	str	r1, [sp, #36]	; 0x24
 800b3be:	0018      	movs	r0, r3
 800b3c0:	9202      	str	r2, [sp, #8]
 800b3c2:	9307      	str	r3, [sp, #28]
 800b3c4:	f7f4 fea0 	bl	8000108 <strlen>
 800b3c8:	2202      	movs	r2, #2
 800b3ca:	9b07      	ldr	r3, [sp, #28]
 800b3cc:	4252      	negs	r2, r2
 800b3ce:	181b      	adds	r3, r3, r0
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	9003      	str	r0, [sp, #12]
 800b3d6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3da:	6819      	ldr	r1, [r3, #0]
 800b3dc:	1c8b      	adds	r3, r1, #2
 800b3de:	1a52      	subs	r2, r2, r1
 800b3e0:	18d1      	adds	r1, r2, r3
 800b3e2:	9301      	str	r3, [sp, #4]
 800b3e4:	9108      	str	r1, [sp, #32]
 800b3e6:	9901      	ldr	r1, [sp, #4]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	7808      	ldrb	r0, [r1, #0]
 800b3ec:	2830      	cmp	r0, #48	; 0x30
 800b3ee:	d0f7      	beq.n	800b3e0 <__gethex+0x30>
 800b3f0:	f7ff ffc8 	bl	800b384 <__hexdig_fun>
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	001c      	movs	r4, r3
 800b3f8:	9304      	str	r3, [sp, #16]
 800b3fa:	4298      	cmp	r0, r3
 800b3fc:	d11f      	bne.n	800b43e <__gethex+0x8e>
 800b3fe:	9a03      	ldr	r2, [sp, #12]
 800b400:	9907      	ldr	r1, [sp, #28]
 800b402:	9801      	ldr	r0, [sp, #4]
 800b404:	f001 fb8c 	bl	800cb20 <strncmp>
 800b408:	0007      	movs	r7, r0
 800b40a:	42a0      	cmp	r0, r4
 800b40c:	d000      	beq.n	800b410 <__gethex+0x60>
 800b40e:	e06b      	b.n	800b4e8 <__gethex+0x138>
 800b410:	9b01      	ldr	r3, [sp, #4]
 800b412:	9a03      	ldr	r2, [sp, #12]
 800b414:	5c98      	ldrb	r0, [r3, r2]
 800b416:	189d      	adds	r5, r3, r2
 800b418:	f7ff ffb4 	bl	800b384 <__hexdig_fun>
 800b41c:	2301      	movs	r3, #1
 800b41e:	9304      	str	r3, [sp, #16]
 800b420:	42a0      	cmp	r0, r4
 800b422:	d030      	beq.n	800b486 <__gethex+0xd6>
 800b424:	9501      	str	r5, [sp, #4]
 800b426:	9b01      	ldr	r3, [sp, #4]
 800b428:	7818      	ldrb	r0, [r3, #0]
 800b42a:	2830      	cmp	r0, #48	; 0x30
 800b42c:	d009      	beq.n	800b442 <__gethex+0x92>
 800b42e:	f7ff ffa9 	bl	800b384 <__hexdig_fun>
 800b432:	4242      	negs	r2, r0
 800b434:	4142      	adcs	r2, r0
 800b436:	2301      	movs	r3, #1
 800b438:	002c      	movs	r4, r5
 800b43a:	9204      	str	r2, [sp, #16]
 800b43c:	9308      	str	r3, [sp, #32]
 800b43e:	9d01      	ldr	r5, [sp, #4]
 800b440:	e004      	b.n	800b44c <__gethex+0x9c>
 800b442:	9b01      	ldr	r3, [sp, #4]
 800b444:	3301      	adds	r3, #1
 800b446:	9301      	str	r3, [sp, #4]
 800b448:	e7ed      	b.n	800b426 <__gethex+0x76>
 800b44a:	3501      	adds	r5, #1
 800b44c:	7828      	ldrb	r0, [r5, #0]
 800b44e:	f7ff ff99 	bl	800b384 <__hexdig_fun>
 800b452:	1e07      	subs	r7, r0, #0
 800b454:	d1f9      	bne.n	800b44a <__gethex+0x9a>
 800b456:	0028      	movs	r0, r5
 800b458:	9a03      	ldr	r2, [sp, #12]
 800b45a:	9907      	ldr	r1, [sp, #28]
 800b45c:	f001 fb60 	bl	800cb20 <strncmp>
 800b460:	2800      	cmp	r0, #0
 800b462:	d10e      	bne.n	800b482 <__gethex+0xd2>
 800b464:	2c00      	cmp	r4, #0
 800b466:	d107      	bne.n	800b478 <__gethex+0xc8>
 800b468:	9b03      	ldr	r3, [sp, #12]
 800b46a:	18ed      	adds	r5, r5, r3
 800b46c:	002c      	movs	r4, r5
 800b46e:	7828      	ldrb	r0, [r5, #0]
 800b470:	f7ff ff88 	bl	800b384 <__hexdig_fun>
 800b474:	2800      	cmp	r0, #0
 800b476:	d102      	bne.n	800b47e <__gethex+0xce>
 800b478:	1b64      	subs	r4, r4, r5
 800b47a:	00a7      	lsls	r7, r4, #2
 800b47c:	e003      	b.n	800b486 <__gethex+0xd6>
 800b47e:	3501      	adds	r5, #1
 800b480:	e7f5      	b.n	800b46e <__gethex+0xbe>
 800b482:	2c00      	cmp	r4, #0
 800b484:	d1f8      	bne.n	800b478 <__gethex+0xc8>
 800b486:	2220      	movs	r2, #32
 800b488:	782b      	ldrb	r3, [r5, #0]
 800b48a:	002e      	movs	r6, r5
 800b48c:	4393      	bics	r3, r2
 800b48e:	2b50      	cmp	r3, #80	; 0x50
 800b490:	d11d      	bne.n	800b4ce <__gethex+0x11e>
 800b492:	786b      	ldrb	r3, [r5, #1]
 800b494:	2b2b      	cmp	r3, #43	; 0x2b
 800b496:	d02c      	beq.n	800b4f2 <__gethex+0x142>
 800b498:	2b2d      	cmp	r3, #45	; 0x2d
 800b49a:	d02e      	beq.n	800b4fa <__gethex+0x14a>
 800b49c:	2300      	movs	r3, #0
 800b49e:	1c6e      	adds	r6, r5, #1
 800b4a0:	9306      	str	r3, [sp, #24]
 800b4a2:	7830      	ldrb	r0, [r6, #0]
 800b4a4:	f7ff ff6e 	bl	800b384 <__hexdig_fun>
 800b4a8:	1e43      	subs	r3, r0, #1
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	2b18      	cmp	r3, #24
 800b4ae:	d82b      	bhi.n	800b508 <__gethex+0x158>
 800b4b0:	3810      	subs	r0, #16
 800b4b2:	0004      	movs	r4, r0
 800b4b4:	7870      	ldrb	r0, [r6, #1]
 800b4b6:	f7ff ff65 	bl	800b384 <__hexdig_fun>
 800b4ba:	1e43      	subs	r3, r0, #1
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	3601      	adds	r6, #1
 800b4c0:	2b18      	cmp	r3, #24
 800b4c2:	d91c      	bls.n	800b4fe <__gethex+0x14e>
 800b4c4:	9b06      	ldr	r3, [sp, #24]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d000      	beq.n	800b4cc <__gethex+0x11c>
 800b4ca:	4264      	negs	r4, r4
 800b4cc:	193f      	adds	r7, r7, r4
 800b4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4d0:	601e      	str	r6, [r3, #0]
 800b4d2:	9b04      	ldr	r3, [sp, #16]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d019      	beq.n	800b50c <__gethex+0x15c>
 800b4d8:	2600      	movs	r6, #0
 800b4da:	9b08      	ldr	r3, [sp, #32]
 800b4dc:	42b3      	cmp	r3, r6
 800b4de:	d100      	bne.n	800b4e2 <__gethex+0x132>
 800b4e0:	3606      	adds	r6, #6
 800b4e2:	0030      	movs	r0, r6
 800b4e4:	b00d      	add	sp, #52	; 0x34
 800b4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	2700      	movs	r7, #0
 800b4ec:	9d01      	ldr	r5, [sp, #4]
 800b4ee:	9304      	str	r3, [sp, #16]
 800b4f0:	e7c9      	b.n	800b486 <__gethex+0xd6>
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	9306      	str	r3, [sp, #24]
 800b4f6:	1cae      	adds	r6, r5, #2
 800b4f8:	e7d3      	b.n	800b4a2 <__gethex+0xf2>
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	e7fa      	b.n	800b4f4 <__gethex+0x144>
 800b4fe:	230a      	movs	r3, #10
 800b500:	435c      	muls	r4, r3
 800b502:	1824      	adds	r4, r4, r0
 800b504:	3c10      	subs	r4, #16
 800b506:	e7d5      	b.n	800b4b4 <__gethex+0x104>
 800b508:	002e      	movs	r6, r5
 800b50a:	e7e0      	b.n	800b4ce <__gethex+0x11e>
 800b50c:	9b01      	ldr	r3, [sp, #4]
 800b50e:	9904      	ldr	r1, [sp, #16]
 800b510:	1aeb      	subs	r3, r5, r3
 800b512:	3b01      	subs	r3, #1
 800b514:	2b07      	cmp	r3, #7
 800b516:	dc0a      	bgt.n	800b52e <__gethex+0x17e>
 800b518:	9805      	ldr	r0, [sp, #20]
 800b51a:	f000 faf5 	bl	800bb08 <_Balloc>
 800b51e:	1e04      	subs	r4, r0, #0
 800b520:	d108      	bne.n	800b534 <__gethex+0x184>
 800b522:	0002      	movs	r2, r0
 800b524:	21de      	movs	r1, #222	; 0xde
 800b526:	4b64      	ldr	r3, [pc, #400]	; (800b6b8 <__gethex+0x308>)
 800b528:	4864      	ldr	r0, [pc, #400]	; (800b6bc <__gethex+0x30c>)
 800b52a:	f001 fb2d 	bl	800cb88 <__assert_func>
 800b52e:	3101      	adds	r1, #1
 800b530:	105b      	asrs	r3, r3, #1
 800b532:	e7ef      	b.n	800b514 <__gethex+0x164>
 800b534:	0003      	movs	r3, r0
 800b536:	3314      	adds	r3, #20
 800b538:	9304      	str	r3, [sp, #16]
 800b53a:	9309      	str	r3, [sp, #36]	; 0x24
 800b53c:	2300      	movs	r3, #0
 800b53e:	001e      	movs	r6, r3
 800b540:	9306      	str	r3, [sp, #24]
 800b542:	9b01      	ldr	r3, [sp, #4]
 800b544:	42ab      	cmp	r3, r5
 800b546:	d340      	bcc.n	800b5ca <__gethex+0x21a>
 800b548:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b54a:	9b04      	ldr	r3, [sp, #16]
 800b54c:	c540      	stmia	r5!, {r6}
 800b54e:	1aed      	subs	r5, r5, r3
 800b550:	10ad      	asrs	r5, r5, #2
 800b552:	0030      	movs	r0, r6
 800b554:	6125      	str	r5, [r4, #16]
 800b556:	f000 fbcf 	bl	800bcf8 <__hi0bits>
 800b55a:	9b02      	ldr	r3, [sp, #8]
 800b55c:	016d      	lsls	r5, r5, #5
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	1a2e      	subs	r6, r5, r0
 800b562:	9301      	str	r3, [sp, #4]
 800b564:	429e      	cmp	r6, r3
 800b566:	dd5a      	ble.n	800b61e <__gethex+0x26e>
 800b568:	1af6      	subs	r6, r6, r3
 800b56a:	0031      	movs	r1, r6
 800b56c:	0020      	movs	r0, r4
 800b56e:	f000 ff71 	bl	800c454 <__any_on>
 800b572:	1e05      	subs	r5, r0, #0
 800b574:	d016      	beq.n	800b5a4 <__gethex+0x1f4>
 800b576:	2501      	movs	r5, #1
 800b578:	211f      	movs	r1, #31
 800b57a:	0028      	movs	r0, r5
 800b57c:	1e73      	subs	r3, r6, #1
 800b57e:	4019      	ands	r1, r3
 800b580:	4088      	lsls	r0, r1
 800b582:	0001      	movs	r1, r0
 800b584:	115a      	asrs	r2, r3, #5
 800b586:	9804      	ldr	r0, [sp, #16]
 800b588:	0092      	lsls	r2, r2, #2
 800b58a:	5812      	ldr	r2, [r2, r0]
 800b58c:	420a      	tst	r2, r1
 800b58e:	d009      	beq.n	800b5a4 <__gethex+0x1f4>
 800b590:	42ab      	cmp	r3, r5
 800b592:	dd06      	ble.n	800b5a2 <__gethex+0x1f2>
 800b594:	0020      	movs	r0, r4
 800b596:	1eb1      	subs	r1, r6, #2
 800b598:	f000 ff5c 	bl	800c454 <__any_on>
 800b59c:	3502      	adds	r5, #2
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	d100      	bne.n	800b5a4 <__gethex+0x1f4>
 800b5a2:	2502      	movs	r5, #2
 800b5a4:	0031      	movs	r1, r6
 800b5a6:	0020      	movs	r0, r4
 800b5a8:	f7ff fe98 	bl	800b2dc <rshift>
 800b5ac:	19bf      	adds	r7, r7, r6
 800b5ae:	9b02      	ldr	r3, [sp, #8]
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	9303      	str	r3, [sp, #12]
 800b5b4:	42bb      	cmp	r3, r7
 800b5b6:	da42      	bge.n	800b63e <__gethex+0x28e>
 800b5b8:	0021      	movs	r1, r4
 800b5ba:	9805      	ldr	r0, [sp, #20]
 800b5bc:	f000 fae8 	bl	800bb90 <_Bfree>
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b5c4:	26a3      	movs	r6, #163	; 0xa3
 800b5c6:	6013      	str	r3, [r2, #0]
 800b5c8:	e78b      	b.n	800b4e2 <__gethex+0x132>
 800b5ca:	1e6b      	subs	r3, r5, #1
 800b5cc:	9308      	str	r3, [sp, #32]
 800b5ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d014      	beq.n	800b600 <__gethex+0x250>
 800b5d6:	9b06      	ldr	r3, [sp, #24]
 800b5d8:	2b20      	cmp	r3, #32
 800b5da:	d104      	bne.n	800b5e6 <__gethex+0x236>
 800b5dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5de:	c340      	stmia	r3!, {r6}
 800b5e0:	2600      	movs	r6, #0
 800b5e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b5e4:	9606      	str	r6, [sp, #24]
 800b5e6:	9b08      	ldr	r3, [sp, #32]
 800b5e8:	7818      	ldrb	r0, [r3, #0]
 800b5ea:	f7ff fecb 	bl	800b384 <__hexdig_fun>
 800b5ee:	230f      	movs	r3, #15
 800b5f0:	4018      	ands	r0, r3
 800b5f2:	9b06      	ldr	r3, [sp, #24]
 800b5f4:	9d08      	ldr	r5, [sp, #32]
 800b5f6:	4098      	lsls	r0, r3
 800b5f8:	3304      	adds	r3, #4
 800b5fa:	4306      	orrs	r6, r0
 800b5fc:	9306      	str	r3, [sp, #24]
 800b5fe:	e7a0      	b.n	800b542 <__gethex+0x192>
 800b600:	2301      	movs	r3, #1
 800b602:	9a03      	ldr	r2, [sp, #12]
 800b604:	1a9d      	subs	r5, r3, r2
 800b606:	9b08      	ldr	r3, [sp, #32]
 800b608:	195d      	adds	r5, r3, r5
 800b60a:	9b01      	ldr	r3, [sp, #4]
 800b60c:	429d      	cmp	r5, r3
 800b60e:	d3e2      	bcc.n	800b5d6 <__gethex+0x226>
 800b610:	0028      	movs	r0, r5
 800b612:	9907      	ldr	r1, [sp, #28]
 800b614:	f001 fa84 	bl	800cb20 <strncmp>
 800b618:	2800      	cmp	r0, #0
 800b61a:	d1dc      	bne.n	800b5d6 <__gethex+0x226>
 800b61c:	e791      	b.n	800b542 <__gethex+0x192>
 800b61e:	9b01      	ldr	r3, [sp, #4]
 800b620:	2500      	movs	r5, #0
 800b622:	429e      	cmp	r6, r3
 800b624:	dac3      	bge.n	800b5ae <__gethex+0x1fe>
 800b626:	1b9e      	subs	r6, r3, r6
 800b628:	0021      	movs	r1, r4
 800b62a:	0032      	movs	r2, r6
 800b62c:	9805      	ldr	r0, [sp, #20]
 800b62e:	f000 fccd 	bl	800bfcc <__lshift>
 800b632:	0003      	movs	r3, r0
 800b634:	3314      	adds	r3, #20
 800b636:	0004      	movs	r4, r0
 800b638:	1bbf      	subs	r7, r7, r6
 800b63a:	9304      	str	r3, [sp, #16]
 800b63c:	e7b7      	b.n	800b5ae <__gethex+0x1fe>
 800b63e:	9b02      	ldr	r3, [sp, #8]
 800b640:	685e      	ldr	r6, [r3, #4]
 800b642:	42be      	cmp	r6, r7
 800b644:	dd71      	ble.n	800b72a <__gethex+0x37a>
 800b646:	9b01      	ldr	r3, [sp, #4]
 800b648:	1bf6      	subs	r6, r6, r7
 800b64a:	42b3      	cmp	r3, r6
 800b64c:	dc38      	bgt.n	800b6c0 <__gethex+0x310>
 800b64e:	9b02      	ldr	r3, [sp, #8]
 800b650:	68db      	ldr	r3, [r3, #12]
 800b652:	2b02      	cmp	r3, #2
 800b654:	d026      	beq.n	800b6a4 <__gethex+0x2f4>
 800b656:	2b03      	cmp	r3, #3
 800b658:	d028      	beq.n	800b6ac <__gethex+0x2fc>
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d119      	bne.n	800b692 <__gethex+0x2e2>
 800b65e:	9b01      	ldr	r3, [sp, #4]
 800b660:	42b3      	cmp	r3, r6
 800b662:	d116      	bne.n	800b692 <__gethex+0x2e2>
 800b664:	2b01      	cmp	r3, #1
 800b666:	d10d      	bne.n	800b684 <__gethex+0x2d4>
 800b668:	9b02      	ldr	r3, [sp, #8]
 800b66a:	2662      	movs	r6, #98	; 0x62
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	9301      	str	r3, [sp, #4]
 800b670:	9a01      	ldr	r2, [sp, #4]
 800b672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b674:	601a      	str	r2, [r3, #0]
 800b676:	2301      	movs	r3, #1
 800b678:	9a04      	ldr	r2, [sp, #16]
 800b67a:	6123      	str	r3, [r4, #16]
 800b67c:	6013      	str	r3, [r2, #0]
 800b67e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b680:	601c      	str	r4, [r3, #0]
 800b682:	e72e      	b.n	800b4e2 <__gethex+0x132>
 800b684:	9901      	ldr	r1, [sp, #4]
 800b686:	0020      	movs	r0, r4
 800b688:	3901      	subs	r1, #1
 800b68a:	f000 fee3 	bl	800c454 <__any_on>
 800b68e:	2800      	cmp	r0, #0
 800b690:	d1ea      	bne.n	800b668 <__gethex+0x2b8>
 800b692:	0021      	movs	r1, r4
 800b694:	9805      	ldr	r0, [sp, #20]
 800b696:	f000 fa7b 	bl	800bb90 <_Bfree>
 800b69a:	2300      	movs	r3, #0
 800b69c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b69e:	2650      	movs	r6, #80	; 0x50
 800b6a0:	6013      	str	r3, [r2, #0]
 800b6a2:	e71e      	b.n	800b4e2 <__gethex+0x132>
 800b6a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d1f3      	bne.n	800b692 <__gethex+0x2e2>
 800b6aa:	e7dd      	b.n	800b668 <__gethex+0x2b8>
 800b6ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d1da      	bne.n	800b668 <__gethex+0x2b8>
 800b6b2:	e7ee      	b.n	800b692 <__gethex+0x2e2>
 800b6b4:	0800d8c4 	.word	0x0800d8c4
 800b6b8:	0800d7e8 	.word	0x0800d7e8
 800b6bc:	0800d85c 	.word	0x0800d85c
 800b6c0:	1e77      	subs	r7, r6, #1
 800b6c2:	2d00      	cmp	r5, #0
 800b6c4:	d12f      	bne.n	800b726 <__gethex+0x376>
 800b6c6:	2f00      	cmp	r7, #0
 800b6c8:	d004      	beq.n	800b6d4 <__gethex+0x324>
 800b6ca:	0039      	movs	r1, r7
 800b6cc:	0020      	movs	r0, r4
 800b6ce:	f000 fec1 	bl	800c454 <__any_on>
 800b6d2:	0005      	movs	r5, r0
 800b6d4:	231f      	movs	r3, #31
 800b6d6:	117a      	asrs	r2, r7, #5
 800b6d8:	401f      	ands	r7, r3
 800b6da:	3b1e      	subs	r3, #30
 800b6dc:	40bb      	lsls	r3, r7
 800b6de:	9904      	ldr	r1, [sp, #16]
 800b6e0:	0092      	lsls	r2, r2, #2
 800b6e2:	5852      	ldr	r2, [r2, r1]
 800b6e4:	421a      	tst	r2, r3
 800b6e6:	d001      	beq.n	800b6ec <__gethex+0x33c>
 800b6e8:	2302      	movs	r3, #2
 800b6ea:	431d      	orrs	r5, r3
 800b6ec:	9b01      	ldr	r3, [sp, #4]
 800b6ee:	0031      	movs	r1, r6
 800b6f0:	1b9b      	subs	r3, r3, r6
 800b6f2:	2602      	movs	r6, #2
 800b6f4:	0020      	movs	r0, r4
 800b6f6:	9301      	str	r3, [sp, #4]
 800b6f8:	f7ff fdf0 	bl	800b2dc <rshift>
 800b6fc:	9b02      	ldr	r3, [sp, #8]
 800b6fe:	685f      	ldr	r7, [r3, #4]
 800b700:	2d00      	cmp	r5, #0
 800b702:	d041      	beq.n	800b788 <__gethex+0x3d8>
 800b704:	9b02      	ldr	r3, [sp, #8]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	2b02      	cmp	r3, #2
 800b70a:	d010      	beq.n	800b72e <__gethex+0x37e>
 800b70c:	2b03      	cmp	r3, #3
 800b70e:	d012      	beq.n	800b736 <__gethex+0x386>
 800b710:	2b01      	cmp	r3, #1
 800b712:	d106      	bne.n	800b722 <__gethex+0x372>
 800b714:	07aa      	lsls	r2, r5, #30
 800b716:	d504      	bpl.n	800b722 <__gethex+0x372>
 800b718:	9a04      	ldr	r2, [sp, #16]
 800b71a:	6810      	ldr	r0, [r2, #0]
 800b71c:	4305      	orrs	r5, r0
 800b71e:	421d      	tst	r5, r3
 800b720:	d10c      	bne.n	800b73c <__gethex+0x38c>
 800b722:	2310      	movs	r3, #16
 800b724:	e02f      	b.n	800b786 <__gethex+0x3d6>
 800b726:	2501      	movs	r5, #1
 800b728:	e7d4      	b.n	800b6d4 <__gethex+0x324>
 800b72a:	2601      	movs	r6, #1
 800b72c:	e7e8      	b.n	800b700 <__gethex+0x350>
 800b72e:	2301      	movs	r3, #1
 800b730:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b732:	1a9b      	subs	r3, r3, r2
 800b734:	9313      	str	r3, [sp, #76]	; 0x4c
 800b736:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d0f2      	beq.n	800b722 <__gethex+0x372>
 800b73c:	6923      	ldr	r3, [r4, #16]
 800b73e:	2000      	movs	r0, #0
 800b740:	9303      	str	r3, [sp, #12]
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	9304      	str	r3, [sp, #16]
 800b746:	0023      	movs	r3, r4
 800b748:	9a04      	ldr	r2, [sp, #16]
 800b74a:	3314      	adds	r3, #20
 800b74c:	1899      	adds	r1, r3, r2
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	1c55      	adds	r5, r2, #1
 800b752:	d01e      	beq.n	800b792 <__gethex+0x3e2>
 800b754:	3201      	adds	r2, #1
 800b756:	601a      	str	r2, [r3, #0]
 800b758:	0023      	movs	r3, r4
 800b75a:	3314      	adds	r3, #20
 800b75c:	2e02      	cmp	r6, #2
 800b75e:	d140      	bne.n	800b7e2 <__gethex+0x432>
 800b760:	9a02      	ldr	r2, [sp, #8]
 800b762:	9901      	ldr	r1, [sp, #4]
 800b764:	6812      	ldr	r2, [r2, #0]
 800b766:	3a01      	subs	r2, #1
 800b768:	428a      	cmp	r2, r1
 800b76a:	d10b      	bne.n	800b784 <__gethex+0x3d4>
 800b76c:	114a      	asrs	r2, r1, #5
 800b76e:	211f      	movs	r1, #31
 800b770:	9801      	ldr	r0, [sp, #4]
 800b772:	0092      	lsls	r2, r2, #2
 800b774:	4001      	ands	r1, r0
 800b776:	2001      	movs	r0, #1
 800b778:	0005      	movs	r5, r0
 800b77a:	408d      	lsls	r5, r1
 800b77c:	58d3      	ldr	r3, [r2, r3]
 800b77e:	422b      	tst	r3, r5
 800b780:	d000      	beq.n	800b784 <__gethex+0x3d4>
 800b782:	2601      	movs	r6, #1
 800b784:	2320      	movs	r3, #32
 800b786:	431e      	orrs	r6, r3
 800b788:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b78a:	601c      	str	r4, [r3, #0]
 800b78c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b78e:	601f      	str	r7, [r3, #0]
 800b790:	e6a7      	b.n	800b4e2 <__gethex+0x132>
 800b792:	c301      	stmia	r3!, {r0}
 800b794:	4299      	cmp	r1, r3
 800b796:	d8da      	bhi.n	800b74e <__gethex+0x39e>
 800b798:	9b03      	ldr	r3, [sp, #12]
 800b79a:	68a2      	ldr	r2, [r4, #8]
 800b79c:	4293      	cmp	r3, r2
 800b79e:	db17      	blt.n	800b7d0 <__gethex+0x420>
 800b7a0:	6863      	ldr	r3, [r4, #4]
 800b7a2:	9805      	ldr	r0, [sp, #20]
 800b7a4:	1c59      	adds	r1, r3, #1
 800b7a6:	f000 f9af 	bl	800bb08 <_Balloc>
 800b7aa:	1e05      	subs	r5, r0, #0
 800b7ac:	d103      	bne.n	800b7b6 <__gethex+0x406>
 800b7ae:	0002      	movs	r2, r0
 800b7b0:	2184      	movs	r1, #132	; 0x84
 800b7b2:	4b1c      	ldr	r3, [pc, #112]	; (800b824 <__gethex+0x474>)
 800b7b4:	e6b8      	b.n	800b528 <__gethex+0x178>
 800b7b6:	0021      	movs	r1, r4
 800b7b8:	6923      	ldr	r3, [r4, #16]
 800b7ba:	310c      	adds	r1, #12
 800b7bc:	1c9a      	adds	r2, r3, #2
 800b7be:	0092      	lsls	r2, r2, #2
 800b7c0:	300c      	adds	r0, #12
 800b7c2:	f7fc fd4d 	bl	8008260 <memcpy>
 800b7c6:	0021      	movs	r1, r4
 800b7c8:	9805      	ldr	r0, [sp, #20]
 800b7ca:	f000 f9e1 	bl	800bb90 <_Bfree>
 800b7ce:	002c      	movs	r4, r5
 800b7d0:	6923      	ldr	r3, [r4, #16]
 800b7d2:	1c5a      	adds	r2, r3, #1
 800b7d4:	6122      	str	r2, [r4, #16]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	3304      	adds	r3, #4
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	18e3      	adds	r3, r4, r3
 800b7de:	605a      	str	r2, [r3, #4]
 800b7e0:	e7ba      	b.n	800b758 <__gethex+0x3a8>
 800b7e2:	6922      	ldr	r2, [r4, #16]
 800b7e4:	9903      	ldr	r1, [sp, #12]
 800b7e6:	428a      	cmp	r2, r1
 800b7e8:	dd09      	ble.n	800b7fe <__gethex+0x44e>
 800b7ea:	2101      	movs	r1, #1
 800b7ec:	0020      	movs	r0, r4
 800b7ee:	f7ff fd75 	bl	800b2dc <rshift>
 800b7f2:	9b02      	ldr	r3, [sp, #8]
 800b7f4:	3701      	adds	r7, #1
 800b7f6:	689b      	ldr	r3, [r3, #8]
 800b7f8:	42bb      	cmp	r3, r7
 800b7fa:	dac2      	bge.n	800b782 <__gethex+0x3d2>
 800b7fc:	e6dc      	b.n	800b5b8 <__gethex+0x208>
 800b7fe:	221f      	movs	r2, #31
 800b800:	9d01      	ldr	r5, [sp, #4]
 800b802:	9901      	ldr	r1, [sp, #4]
 800b804:	2601      	movs	r6, #1
 800b806:	4015      	ands	r5, r2
 800b808:	4211      	tst	r1, r2
 800b80a:	d0bb      	beq.n	800b784 <__gethex+0x3d4>
 800b80c:	9a04      	ldr	r2, [sp, #16]
 800b80e:	189b      	adds	r3, r3, r2
 800b810:	3b04      	subs	r3, #4
 800b812:	6818      	ldr	r0, [r3, #0]
 800b814:	f000 fa70 	bl	800bcf8 <__hi0bits>
 800b818:	2320      	movs	r3, #32
 800b81a:	1b5d      	subs	r5, r3, r5
 800b81c:	42a8      	cmp	r0, r5
 800b81e:	dbe4      	blt.n	800b7ea <__gethex+0x43a>
 800b820:	e7b0      	b.n	800b784 <__gethex+0x3d4>
 800b822:	46c0      	nop			; (mov r8, r8)
 800b824:	0800d7e8 	.word	0x0800d7e8

0800b828 <L_shift>:
 800b828:	2308      	movs	r3, #8
 800b82a:	b570      	push	{r4, r5, r6, lr}
 800b82c:	2520      	movs	r5, #32
 800b82e:	1a9a      	subs	r2, r3, r2
 800b830:	0092      	lsls	r2, r2, #2
 800b832:	1aad      	subs	r5, r5, r2
 800b834:	6843      	ldr	r3, [r0, #4]
 800b836:	6806      	ldr	r6, [r0, #0]
 800b838:	001c      	movs	r4, r3
 800b83a:	40ac      	lsls	r4, r5
 800b83c:	40d3      	lsrs	r3, r2
 800b83e:	4334      	orrs	r4, r6
 800b840:	6004      	str	r4, [r0, #0]
 800b842:	6043      	str	r3, [r0, #4]
 800b844:	3004      	adds	r0, #4
 800b846:	4288      	cmp	r0, r1
 800b848:	d3f4      	bcc.n	800b834 <L_shift+0xc>
 800b84a:	bd70      	pop	{r4, r5, r6, pc}

0800b84c <__match>:
 800b84c:	b530      	push	{r4, r5, lr}
 800b84e:	6803      	ldr	r3, [r0, #0]
 800b850:	780c      	ldrb	r4, [r1, #0]
 800b852:	3301      	adds	r3, #1
 800b854:	2c00      	cmp	r4, #0
 800b856:	d102      	bne.n	800b85e <__match+0x12>
 800b858:	6003      	str	r3, [r0, #0]
 800b85a:	2001      	movs	r0, #1
 800b85c:	bd30      	pop	{r4, r5, pc}
 800b85e:	781a      	ldrb	r2, [r3, #0]
 800b860:	0015      	movs	r5, r2
 800b862:	3d41      	subs	r5, #65	; 0x41
 800b864:	2d19      	cmp	r5, #25
 800b866:	d800      	bhi.n	800b86a <__match+0x1e>
 800b868:	3220      	adds	r2, #32
 800b86a:	3101      	adds	r1, #1
 800b86c:	42a2      	cmp	r2, r4
 800b86e:	d0ef      	beq.n	800b850 <__match+0x4>
 800b870:	2000      	movs	r0, #0
 800b872:	e7f3      	b.n	800b85c <__match+0x10>

0800b874 <__hexnan>:
 800b874:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b876:	680b      	ldr	r3, [r1, #0]
 800b878:	b08b      	sub	sp, #44	; 0x2c
 800b87a:	9201      	str	r2, [sp, #4]
 800b87c:	9901      	ldr	r1, [sp, #4]
 800b87e:	115a      	asrs	r2, r3, #5
 800b880:	0092      	lsls	r2, r2, #2
 800b882:	188a      	adds	r2, r1, r2
 800b884:	9202      	str	r2, [sp, #8]
 800b886:	0019      	movs	r1, r3
 800b888:	221f      	movs	r2, #31
 800b88a:	4011      	ands	r1, r2
 800b88c:	9008      	str	r0, [sp, #32]
 800b88e:	9106      	str	r1, [sp, #24]
 800b890:	4213      	tst	r3, r2
 800b892:	d002      	beq.n	800b89a <__hexnan+0x26>
 800b894:	9b02      	ldr	r3, [sp, #8]
 800b896:	3304      	adds	r3, #4
 800b898:	9302      	str	r3, [sp, #8]
 800b89a:	9b02      	ldr	r3, [sp, #8]
 800b89c:	2500      	movs	r5, #0
 800b89e:	1f1e      	subs	r6, r3, #4
 800b8a0:	0037      	movs	r7, r6
 800b8a2:	0034      	movs	r4, r6
 800b8a4:	9b08      	ldr	r3, [sp, #32]
 800b8a6:	6035      	str	r5, [r6, #0]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	9507      	str	r5, [sp, #28]
 800b8ac:	9305      	str	r3, [sp, #20]
 800b8ae:	9503      	str	r5, [sp, #12]
 800b8b0:	9b05      	ldr	r3, [sp, #20]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8b6:	9b05      	ldr	r3, [sp, #20]
 800b8b8:	785b      	ldrb	r3, [r3, #1]
 800b8ba:	9304      	str	r3, [sp, #16]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d028      	beq.n	800b912 <__hexnan+0x9e>
 800b8c0:	9804      	ldr	r0, [sp, #16]
 800b8c2:	f7ff fd5f 	bl	800b384 <__hexdig_fun>
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	d154      	bne.n	800b974 <__hexnan+0x100>
 800b8ca:	9b04      	ldr	r3, [sp, #16]
 800b8cc:	2b20      	cmp	r3, #32
 800b8ce:	d819      	bhi.n	800b904 <__hexnan+0x90>
 800b8d0:	9b03      	ldr	r3, [sp, #12]
 800b8d2:	9a07      	ldr	r2, [sp, #28]
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	dd12      	ble.n	800b8fe <__hexnan+0x8a>
 800b8d8:	42bc      	cmp	r4, r7
 800b8da:	d206      	bcs.n	800b8ea <__hexnan+0x76>
 800b8dc:	2d07      	cmp	r5, #7
 800b8de:	dc04      	bgt.n	800b8ea <__hexnan+0x76>
 800b8e0:	002a      	movs	r2, r5
 800b8e2:	0039      	movs	r1, r7
 800b8e4:	0020      	movs	r0, r4
 800b8e6:	f7ff ff9f 	bl	800b828 <L_shift>
 800b8ea:	9b01      	ldr	r3, [sp, #4]
 800b8ec:	2508      	movs	r5, #8
 800b8ee:	429c      	cmp	r4, r3
 800b8f0:	d905      	bls.n	800b8fe <__hexnan+0x8a>
 800b8f2:	1f27      	subs	r7, r4, #4
 800b8f4:	2500      	movs	r5, #0
 800b8f6:	003c      	movs	r4, r7
 800b8f8:	9b03      	ldr	r3, [sp, #12]
 800b8fa:	603d      	str	r5, [r7, #0]
 800b8fc:	9307      	str	r3, [sp, #28]
 800b8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b900:	9305      	str	r3, [sp, #20]
 800b902:	e7d5      	b.n	800b8b0 <__hexnan+0x3c>
 800b904:	9b04      	ldr	r3, [sp, #16]
 800b906:	2b29      	cmp	r3, #41	; 0x29
 800b908:	d159      	bne.n	800b9be <__hexnan+0x14a>
 800b90a:	9b05      	ldr	r3, [sp, #20]
 800b90c:	9a08      	ldr	r2, [sp, #32]
 800b90e:	3302      	adds	r3, #2
 800b910:	6013      	str	r3, [r2, #0]
 800b912:	9b03      	ldr	r3, [sp, #12]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d052      	beq.n	800b9be <__hexnan+0x14a>
 800b918:	42bc      	cmp	r4, r7
 800b91a:	d206      	bcs.n	800b92a <__hexnan+0xb6>
 800b91c:	2d07      	cmp	r5, #7
 800b91e:	dc04      	bgt.n	800b92a <__hexnan+0xb6>
 800b920:	002a      	movs	r2, r5
 800b922:	0039      	movs	r1, r7
 800b924:	0020      	movs	r0, r4
 800b926:	f7ff ff7f 	bl	800b828 <L_shift>
 800b92a:	9b01      	ldr	r3, [sp, #4]
 800b92c:	429c      	cmp	r4, r3
 800b92e:	d935      	bls.n	800b99c <__hexnan+0x128>
 800b930:	001a      	movs	r2, r3
 800b932:	0023      	movs	r3, r4
 800b934:	cb02      	ldmia	r3!, {r1}
 800b936:	c202      	stmia	r2!, {r1}
 800b938:	429e      	cmp	r6, r3
 800b93a:	d2fb      	bcs.n	800b934 <__hexnan+0xc0>
 800b93c:	9b02      	ldr	r3, [sp, #8]
 800b93e:	1c61      	adds	r1, r4, #1
 800b940:	1eda      	subs	r2, r3, #3
 800b942:	2304      	movs	r3, #4
 800b944:	4291      	cmp	r1, r2
 800b946:	d805      	bhi.n	800b954 <__hexnan+0xe0>
 800b948:	9b02      	ldr	r3, [sp, #8]
 800b94a:	3b04      	subs	r3, #4
 800b94c:	1b1b      	subs	r3, r3, r4
 800b94e:	089b      	lsrs	r3, r3, #2
 800b950:	3301      	adds	r3, #1
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	9a01      	ldr	r2, [sp, #4]
 800b956:	18d3      	adds	r3, r2, r3
 800b958:	2200      	movs	r2, #0
 800b95a:	c304      	stmia	r3!, {r2}
 800b95c:	429e      	cmp	r6, r3
 800b95e:	d2fc      	bcs.n	800b95a <__hexnan+0xe6>
 800b960:	6833      	ldr	r3, [r6, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d104      	bne.n	800b970 <__hexnan+0xfc>
 800b966:	9b01      	ldr	r3, [sp, #4]
 800b968:	429e      	cmp	r6, r3
 800b96a:	d126      	bne.n	800b9ba <__hexnan+0x146>
 800b96c:	2301      	movs	r3, #1
 800b96e:	6033      	str	r3, [r6, #0]
 800b970:	2005      	movs	r0, #5
 800b972:	e025      	b.n	800b9c0 <__hexnan+0x14c>
 800b974:	9b03      	ldr	r3, [sp, #12]
 800b976:	3501      	adds	r5, #1
 800b978:	3301      	adds	r3, #1
 800b97a:	9303      	str	r3, [sp, #12]
 800b97c:	2d08      	cmp	r5, #8
 800b97e:	dd06      	ble.n	800b98e <__hexnan+0x11a>
 800b980:	9b01      	ldr	r3, [sp, #4]
 800b982:	429c      	cmp	r4, r3
 800b984:	d9bb      	bls.n	800b8fe <__hexnan+0x8a>
 800b986:	2300      	movs	r3, #0
 800b988:	2501      	movs	r5, #1
 800b98a:	3c04      	subs	r4, #4
 800b98c:	6023      	str	r3, [r4, #0]
 800b98e:	220f      	movs	r2, #15
 800b990:	6823      	ldr	r3, [r4, #0]
 800b992:	4010      	ands	r0, r2
 800b994:	011b      	lsls	r3, r3, #4
 800b996:	4318      	orrs	r0, r3
 800b998:	6020      	str	r0, [r4, #0]
 800b99a:	e7b0      	b.n	800b8fe <__hexnan+0x8a>
 800b99c:	9b06      	ldr	r3, [sp, #24]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d0de      	beq.n	800b960 <__hexnan+0xec>
 800b9a2:	2120      	movs	r1, #32
 800b9a4:	9a06      	ldr	r2, [sp, #24]
 800b9a6:	9b02      	ldr	r3, [sp, #8]
 800b9a8:	1a89      	subs	r1, r1, r2
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	4252      	negs	r2, r2
 800b9ae:	40ca      	lsrs	r2, r1
 800b9b0:	3b04      	subs	r3, #4
 800b9b2:	6819      	ldr	r1, [r3, #0]
 800b9b4:	400a      	ands	r2, r1
 800b9b6:	601a      	str	r2, [r3, #0]
 800b9b8:	e7d2      	b.n	800b960 <__hexnan+0xec>
 800b9ba:	3e04      	subs	r6, #4
 800b9bc:	e7d0      	b.n	800b960 <__hexnan+0xec>
 800b9be:	2004      	movs	r0, #4
 800b9c0:	b00b      	add	sp, #44	; 0x2c
 800b9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b9c4 <_localeconv_r>:
 800b9c4:	4800      	ldr	r0, [pc, #0]	; (800b9c8 <_localeconv_r+0x4>)
 800b9c6:	4770      	bx	lr
 800b9c8:	20000168 	.word	0x20000168

0800b9cc <__retarget_lock_init_recursive>:
 800b9cc:	4770      	bx	lr

0800b9ce <__retarget_lock_acquire_recursive>:
 800b9ce:	4770      	bx	lr

0800b9d0 <__retarget_lock_release_recursive>:
 800b9d0:	4770      	bx	lr
	...

0800b9d4 <__swhatbuf_r>:
 800b9d4:	b570      	push	{r4, r5, r6, lr}
 800b9d6:	000e      	movs	r6, r1
 800b9d8:	001d      	movs	r5, r3
 800b9da:	230e      	movs	r3, #14
 800b9dc:	5ec9      	ldrsh	r1, [r1, r3]
 800b9de:	0014      	movs	r4, r2
 800b9e0:	b096      	sub	sp, #88	; 0x58
 800b9e2:	2900      	cmp	r1, #0
 800b9e4:	da08      	bge.n	800b9f8 <__swhatbuf_r+0x24>
 800b9e6:	220c      	movs	r2, #12
 800b9e8:	5eb3      	ldrsh	r3, [r6, r2]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	602a      	str	r2, [r5, #0]
 800b9ee:	061b      	lsls	r3, r3, #24
 800b9f0:	d411      	bmi.n	800ba16 <__swhatbuf_r+0x42>
 800b9f2:	2380      	movs	r3, #128	; 0x80
 800b9f4:	00db      	lsls	r3, r3, #3
 800b9f6:	e00f      	b.n	800ba18 <__swhatbuf_r+0x44>
 800b9f8:	466a      	mov	r2, sp
 800b9fa:	f001 f905 	bl	800cc08 <_fstat_r>
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	dbf1      	blt.n	800b9e6 <__swhatbuf_r+0x12>
 800ba02:	23f0      	movs	r3, #240	; 0xf0
 800ba04:	9901      	ldr	r1, [sp, #4]
 800ba06:	021b      	lsls	r3, r3, #8
 800ba08:	4019      	ands	r1, r3
 800ba0a:	4b05      	ldr	r3, [pc, #20]	; (800ba20 <__swhatbuf_r+0x4c>)
 800ba0c:	18c9      	adds	r1, r1, r3
 800ba0e:	424b      	negs	r3, r1
 800ba10:	4159      	adcs	r1, r3
 800ba12:	6029      	str	r1, [r5, #0]
 800ba14:	e7ed      	b.n	800b9f2 <__swhatbuf_r+0x1e>
 800ba16:	2340      	movs	r3, #64	; 0x40
 800ba18:	2000      	movs	r0, #0
 800ba1a:	6023      	str	r3, [r4, #0]
 800ba1c:	b016      	add	sp, #88	; 0x58
 800ba1e:	bd70      	pop	{r4, r5, r6, pc}
 800ba20:	ffffe000 	.word	0xffffe000

0800ba24 <__smakebuf_r>:
 800ba24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba26:	2602      	movs	r6, #2
 800ba28:	898b      	ldrh	r3, [r1, #12]
 800ba2a:	0005      	movs	r5, r0
 800ba2c:	000c      	movs	r4, r1
 800ba2e:	4233      	tst	r3, r6
 800ba30:	d006      	beq.n	800ba40 <__smakebuf_r+0x1c>
 800ba32:	0023      	movs	r3, r4
 800ba34:	3347      	adds	r3, #71	; 0x47
 800ba36:	6023      	str	r3, [r4, #0]
 800ba38:	6123      	str	r3, [r4, #16]
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	6163      	str	r3, [r4, #20]
 800ba3e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ba40:	466a      	mov	r2, sp
 800ba42:	ab01      	add	r3, sp, #4
 800ba44:	f7ff ffc6 	bl	800b9d4 <__swhatbuf_r>
 800ba48:	9900      	ldr	r1, [sp, #0]
 800ba4a:	0007      	movs	r7, r0
 800ba4c:	0028      	movs	r0, r5
 800ba4e:	f7fc fc85 	bl	800835c <_malloc_r>
 800ba52:	2800      	cmp	r0, #0
 800ba54:	d108      	bne.n	800ba68 <__smakebuf_r+0x44>
 800ba56:	220c      	movs	r2, #12
 800ba58:	5ea3      	ldrsh	r3, [r4, r2]
 800ba5a:	059a      	lsls	r2, r3, #22
 800ba5c:	d4ef      	bmi.n	800ba3e <__smakebuf_r+0x1a>
 800ba5e:	2203      	movs	r2, #3
 800ba60:	4393      	bics	r3, r2
 800ba62:	431e      	orrs	r6, r3
 800ba64:	81a6      	strh	r6, [r4, #12]
 800ba66:	e7e4      	b.n	800ba32 <__smakebuf_r+0xe>
 800ba68:	4b0f      	ldr	r3, [pc, #60]	; (800baa8 <__smakebuf_r+0x84>)
 800ba6a:	62ab      	str	r3, [r5, #40]	; 0x28
 800ba6c:	2380      	movs	r3, #128	; 0x80
 800ba6e:	89a2      	ldrh	r2, [r4, #12]
 800ba70:	6020      	str	r0, [r4, #0]
 800ba72:	4313      	orrs	r3, r2
 800ba74:	81a3      	strh	r3, [r4, #12]
 800ba76:	9b00      	ldr	r3, [sp, #0]
 800ba78:	6120      	str	r0, [r4, #16]
 800ba7a:	6163      	str	r3, [r4, #20]
 800ba7c:	9b01      	ldr	r3, [sp, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d00d      	beq.n	800ba9e <__smakebuf_r+0x7a>
 800ba82:	0028      	movs	r0, r5
 800ba84:	230e      	movs	r3, #14
 800ba86:	5ee1      	ldrsh	r1, [r4, r3]
 800ba88:	f001 f8d0 	bl	800cc2c <_isatty_r>
 800ba8c:	2800      	cmp	r0, #0
 800ba8e:	d006      	beq.n	800ba9e <__smakebuf_r+0x7a>
 800ba90:	2203      	movs	r2, #3
 800ba92:	89a3      	ldrh	r3, [r4, #12]
 800ba94:	4393      	bics	r3, r2
 800ba96:	001a      	movs	r2, r3
 800ba98:	2301      	movs	r3, #1
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	81a3      	strh	r3, [r4, #12]
 800ba9e:	89a0      	ldrh	r0, [r4, #12]
 800baa0:	4307      	orrs	r7, r0
 800baa2:	81a7      	strh	r7, [r4, #12]
 800baa4:	e7cb      	b.n	800ba3e <__smakebuf_r+0x1a>
 800baa6:	46c0      	nop			; (mov r8, r8)
 800baa8:	0800b121 	.word	0x0800b121

0800baac <__ascii_mbtowc>:
 800baac:	b082      	sub	sp, #8
 800baae:	2900      	cmp	r1, #0
 800bab0:	d100      	bne.n	800bab4 <__ascii_mbtowc+0x8>
 800bab2:	a901      	add	r1, sp, #4
 800bab4:	1e10      	subs	r0, r2, #0
 800bab6:	d006      	beq.n	800bac6 <__ascii_mbtowc+0x1a>
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d006      	beq.n	800baca <__ascii_mbtowc+0x1e>
 800babc:	7813      	ldrb	r3, [r2, #0]
 800babe:	600b      	str	r3, [r1, #0]
 800bac0:	7810      	ldrb	r0, [r2, #0]
 800bac2:	1e43      	subs	r3, r0, #1
 800bac4:	4198      	sbcs	r0, r3
 800bac6:	b002      	add	sp, #8
 800bac8:	4770      	bx	lr
 800baca:	2002      	movs	r0, #2
 800bacc:	4240      	negs	r0, r0
 800bace:	e7fa      	b.n	800bac6 <__ascii_mbtowc+0x1a>

0800bad0 <memchr>:
 800bad0:	b2c9      	uxtb	r1, r1
 800bad2:	1882      	adds	r2, r0, r2
 800bad4:	4290      	cmp	r0, r2
 800bad6:	d101      	bne.n	800badc <memchr+0xc>
 800bad8:	2000      	movs	r0, #0
 800bada:	4770      	bx	lr
 800badc:	7803      	ldrb	r3, [r0, #0]
 800bade:	428b      	cmp	r3, r1
 800bae0:	d0fb      	beq.n	800bada <memchr+0xa>
 800bae2:	3001      	adds	r0, #1
 800bae4:	e7f6      	b.n	800bad4 <memchr+0x4>
	...

0800bae8 <__malloc_lock>:
 800bae8:	b510      	push	{r4, lr}
 800baea:	4802      	ldr	r0, [pc, #8]	; (800baf4 <__malloc_lock+0xc>)
 800baec:	f7ff ff6f 	bl	800b9ce <__retarget_lock_acquire_recursive>
 800baf0:	bd10      	pop	{r4, pc}
 800baf2:	46c0      	nop			; (mov r8, r8)
 800baf4:	20001278 	.word	0x20001278

0800baf8 <__malloc_unlock>:
 800baf8:	b510      	push	{r4, lr}
 800bafa:	4802      	ldr	r0, [pc, #8]	; (800bb04 <__malloc_unlock+0xc>)
 800bafc:	f7ff ff68 	bl	800b9d0 <__retarget_lock_release_recursive>
 800bb00:	bd10      	pop	{r4, pc}
 800bb02:	46c0      	nop			; (mov r8, r8)
 800bb04:	20001278 	.word	0x20001278

0800bb08 <_Balloc>:
 800bb08:	b570      	push	{r4, r5, r6, lr}
 800bb0a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bb0c:	0006      	movs	r6, r0
 800bb0e:	000c      	movs	r4, r1
 800bb10:	2d00      	cmp	r5, #0
 800bb12:	d10e      	bne.n	800bb32 <_Balloc+0x2a>
 800bb14:	2010      	movs	r0, #16
 800bb16:	f7fc fb8f 	bl	8008238 <malloc>
 800bb1a:	1e02      	subs	r2, r0, #0
 800bb1c:	6270      	str	r0, [r6, #36]	; 0x24
 800bb1e:	d104      	bne.n	800bb2a <_Balloc+0x22>
 800bb20:	2166      	movs	r1, #102	; 0x66
 800bb22:	4b19      	ldr	r3, [pc, #100]	; (800bb88 <_Balloc+0x80>)
 800bb24:	4819      	ldr	r0, [pc, #100]	; (800bb8c <_Balloc+0x84>)
 800bb26:	f001 f82f 	bl	800cb88 <__assert_func>
 800bb2a:	6045      	str	r5, [r0, #4]
 800bb2c:	6085      	str	r5, [r0, #8]
 800bb2e:	6005      	str	r5, [r0, #0]
 800bb30:	60c5      	str	r5, [r0, #12]
 800bb32:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800bb34:	68eb      	ldr	r3, [r5, #12]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d013      	beq.n	800bb62 <_Balloc+0x5a>
 800bb3a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bb3c:	00a2      	lsls	r2, r4, #2
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	189b      	adds	r3, r3, r2
 800bb42:	6818      	ldr	r0, [r3, #0]
 800bb44:	2800      	cmp	r0, #0
 800bb46:	d118      	bne.n	800bb7a <_Balloc+0x72>
 800bb48:	2101      	movs	r1, #1
 800bb4a:	000d      	movs	r5, r1
 800bb4c:	40a5      	lsls	r5, r4
 800bb4e:	1d6a      	adds	r2, r5, #5
 800bb50:	0030      	movs	r0, r6
 800bb52:	0092      	lsls	r2, r2, #2
 800bb54:	f000 fca1 	bl	800c49a <_calloc_r>
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	d00c      	beq.n	800bb76 <_Balloc+0x6e>
 800bb5c:	6044      	str	r4, [r0, #4]
 800bb5e:	6085      	str	r5, [r0, #8]
 800bb60:	e00d      	b.n	800bb7e <_Balloc+0x76>
 800bb62:	2221      	movs	r2, #33	; 0x21
 800bb64:	2104      	movs	r1, #4
 800bb66:	0030      	movs	r0, r6
 800bb68:	f000 fc97 	bl	800c49a <_calloc_r>
 800bb6c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bb6e:	60e8      	str	r0, [r5, #12]
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1e1      	bne.n	800bb3a <_Balloc+0x32>
 800bb76:	2000      	movs	r0, #0
 800bb78:	bd70      	pop	{r4, r5, r6, pc}
 800bb7a:	6802      	ldr	r2, [r0, #0]
 800bb7c:	601a      	str	r2, [r3, #0]
 800bb7e:	2300      	movs	r3, #0
 800bb80:	6103      	str	r3, [r0, #16]
 800bb82:	60c3      	str	r3, [r0, #12]
 800bb84:	e7f8      	b.n	800bb78 <_Balloc+0x70>
 800bb86:	46c0      	nop			; (mov r8, r8)
 800bb88:	0800d776 	.word	0x0800d776
 800bb8c:	0800d8d8 	.word	0x0800d8d8

0800bb90 <_Bfree>:
 800bb90:	b570      	push	{r4, r5, r6, lr}
 800bb92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb94:	0005      	movs	r5, r0
 800bb96:	000c      	movs	r4, r1
 800bb98:	2e00      	cmp	r6, #0
 800bb9a:	d10e      	bne.n	800bbba <_Bfree+0x2a>
 800bb9c:	2010      	movs	r0, #16
 800bb9e:	f7fc fb4b 	bl	8008238 <malloc>
 800bba2:	1e02      	subs	r2, r0, #0
 800bba4:	6268      	str	r0, [r5, #36]	; 0x24
 800bba6:	d104      	bne.n	800bbb2 <_Bfree+0x22>
 800bba8:	218a      	movs	r1, #138	; 0x8a
 800bbaa:	4b09      	ldr	r3, [pc, #36]	; (800bbd0 <_Bfree+0x40>)
 800bbac:	4809      	ldr	r0, [pc, #36]	; (800bbd4 <_Bfree+0x44>)
 800bbae:	f000 ffeb 	bl	800cb88 <__assert_func>
 800bbb2:	6046      	str	r6, [r0, #4]
 800bbb4:	6086      	str	r6, [r0, #8]
 800bbb6:	6006      	str	r6, [r0, #0]
 800bbb8:	60c6      	str	r6, [r0, #12]
 800bbba:	2c00      	cmp	r4, #0
 800bbbc:	d007      	beq.n	800bbce <_Bfree+0x3e>
 800bbbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bbc0:	6862      	ldr	r2, [r4, #4]
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	0092      	lsls	r2, r2, #2
 800bbc6:	189b      	adds	r3, r3, r2
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	6022      	str	r2, [r4, #0]
 800bbcc:	601c      	str	r4, [r3, #0]
 800bbce:	bd70      	pop	{r4, r5, r6, pc}
 800bbd0:	0800d776 	.word	0x0800d776
 800bbd4:	0800d8d8 	.word	0x0800d8d8

0800bbd8 <__multadd>:
 800bbd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbda:	000e      	movs	r6, r1
 800bbdc:	9001      	str	r0, [sp, #4]
 800bbde:	000c      	movs	r4, r1
 800bbe0:	001d      	movs	r5, r3
 800bbe2:	2000      	movs	r0, #0
 800bbe4:	690f      	ldr	r7, [r1, #16]
 800bbe6:	3614      	adds	r6, #20
 800bbe8:	6833      	ldr	r3, [r6, #0]
 800bbea:	3001      	adds	r0, #1
 800bbec:	b299      	uxth	r1, r3
 800bbee:	4351      	muls	r1, r2
 800bbf0:	0c1b      	lsrs	r3, r3, #16
 800bbf2:	4353      	muls	r3, r2
 800bbf4:	1949      	adds	r1, r1, r5
 800bbf6:	0c0d      	lsrs	r5, r1, #16
 800bbf8:	195b      	adds	r3, r3, r5
 800bbfa:	0c1d      	lsrs	r5, r3, #16
 800bbfc:	b289      	uxth	r1, r1
 800bbfe:	041b      	lsls	r3, r3, #16
 800bc00:	185b      	adds	r3, r3, r1
 800bc02:	c608      	stmia	r6!, {r3}
 800bc04:	4287      	cmp	r7, r0
 800bc06:	dcef      	bgt.n	800bbe8 <__multadd+0x10>
 800bc08:	2d00      	cmp	r5, #0
 800bc0a:	d022      	beq.n	800bc52 <__multadd+0x7a>
 800bc0c:	68a3      	ldr	r3, [r4, #8]
 800bc0e:	42bb      	cmp	r3, r7
 800bc10:	dc19      	bgt.n	800bc46 <__multadd+0x6e>
 800bc12:	6863      	ldr	r3, [r4, #4]
 800bc14:	9801      	ldr	r0, [sp, #4]
 800bc16:	1c59      	adds	r1, r3, #1
 800bc18:	f7ff ff76 	bl	800bb08 <_Balloc>
 800bc1c:	1e06      	subs	r6, r0, #0
 800bc1e:	d105      	bne.n	800bc2c <__multadd+0x54>
 800bc20:	0002      	movs	r2, r0
 800bc22:	21b5      	movs	r1, #181	; 0xb5
 800bc24:	4b0c      	ldr	r3, [pc, #48]	; (800bc58 <__multadd+0x80>)
 800bc26:	480d      	ldr	r0, [pc, #52]	; (800bc5c <__multadd+0x84>)
 800bc28:	f000 ffae 	bl	800cb88 <__assert_func>
 800bc2c:	0021      	movs	r1, r4
 800bc2e:	6923      	ldr	r3, [r4, #16]
 800bc30:	310c      	adds	r1, #12
 800bc32:	1c9a      	adds	r2, r3, #2
 800bc34:	0092      	lsls	r2, r2, #2
 800bc36:	300c      	adds	r0, #12
 800bc38:	f7fc fb12 	bl	8008260 <memcpy>
 800bc3c:	0021      	movs	r1, r4
 800bc3e:	9801      	ldr	r0, [sp, #4]
 800bc40:	f7ff ffa6 	bl	800bb90 <_Bfree>
 800bc44:	0034      	movs	r4, r6
 800bc46:	1d3b      	adds	r3, r7, #4
 800bc48:	009b      	lsls	r3, r3, #2
 800bc4a:	18e3      	adds	r3, r4, r3
 800bc4c:	605d      	str	r5, [r3, #4]
 800bc4e:	1c7b      	adds	r3, r7, #1
 800bc50:	6123      	str	r3, [r4, #16]
 800bc52:	0020      	movs	r0, r4
 800bc54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bc56:	46c0      	nop			; (mov r8, r8)
 800bc58:	0800d7e8 	.word	0x0800d7e8
 800bc5c:	0800d8d8 	.word	0x0800d8d8

0800bc60 <__s2b>:
 800bc60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc62:	0006      	movs	r6, r0
 800bc64:	0018      	movs	r0, r3
 800bc66:	000c      	movs	r4, r1
 800bc68:	3008      	adds	r0, #8
 800bc6a:	2109      	movs	r1, #9
 800bc6c:	9301      	str	r3, [sp, #4]
 800bc6e:	0015      	movs	r5, r2
 800bc70:	f7f4 faf0 	bl	8000254 <__divsi3>
 800bc74:	2301      	movs	r3, #1
 800bc76:	2100      	movs	r1, #0
 800bc78:	4283      	cmp	r3, r0
 800bc7a:	db0a      	blt.n	800bc92 <__s2b+0x32>
 800bc7c:	0030      	movs	r0, r6
 800bc7e:	f7ff ff43 	bl	800bb08 <_Balloc>
 800bc82:	1e01      	subs	r1, r0, #0
 800bc84:	d108      	bne.n	800bc98 <__s2b+0x38>
 800bc86:	0002      	movs	r2, r0
 800bc88:	4b19      	ldr	r3, [pc, #100]	; (800bcf0 <__s2b+0x90>)
 800bc8a:	481a      	ldr	r0, [pc, #104]	; (800bcf4 <__s2b+0x94>)
 800bc8c:	31ce      	adds	r1, #206	; 0xce
 800bc8e:	f000 ff7b 	bl	800cb88 <__assert_func>
 800bc92:	005b      	lsls	r3, r3, #1
 800bc94:	3101      	adds	r1, #1
 800bc96:	e7ef      	b.n	800bc78 <__s2b+0x18>
 800bc98:	9b08      	ldr	r3, [sp, #32]
 800bc9a:	6143      	str	r3, [r0, #20]
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	6103      	str	r3, [r0, #16]
 800bca0:	2d09      	cmp	r5, #9
 800bca2:	dd18      	ble.n	800bcd6 <__s2b+0x76>
 800bca4:	0023      	movs	r3, r4
 800bca6:	3309      	adds	r3, #9
 800bca8:	001f      	movs	r7, r3
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	1964      	adds	r4, r4, r5
 800bcae:	783b      	ldrb	r3, [r7, #0]
 800bcb0:	220a      	movs	r2, #10
 800bcb2:	0030      	movs	r0, r6
 800bcb4:	3b30      	subs	r3, #48	; 0x30
 800bcb6:	f7ff ff8f 	bl	800bbd8 <__multadd>
 800bcba:	3701      	adds	r7, #1
 800bcbc:	0001      	movs	r1, r0
 800bcbe:	42a7      	cmp	r7, r4
 800bcc0:	d1f5      	bne.n	800bcae <__s2b+0x4e>
 800bcc2:	002c      	movs	r4, r5
 800bcc4:	9b00      	ldr	r3, [sp, #0]
 800bcc6:	3c08      	subs	r4, #8
 800bcc8:	191c      	adds	r4, r3, r4
 800bcca:	002f      	movs	r7, r5
 800bccc:	9b01      	ldr	r3, [sp, #4]
 800bcce:	429f      	cmp	r7, r3
 800bcd0:	db04      	blt.n	800bcdc <__s2b+0x7c>
 800bcd2:	0008      	movs	r0, r1
 800bcd4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bcd6:	2509      	movs	r5, #9
 800bcd8:	340a      	adds	r4, #10
 800bcda:	e7f6      	b.n	800bcca <__s2b+0x6a>
 800bcdc:	1b63      	subs	r3, r4, r5
 800bcde:	5ddb      	ldrb	r3, [r3, r7]
 800bce0:	220a      	movs	r2, #10
 800bce2:	0030      	movs	r0, r6
 800bce4:	3b30      	subs	r3, #48	; 0x30
 800bce6:	f7ff ff77 	bl	800bbd8 <__multadd>
 800bcea:	3701      	adds	r7, #1
 800bcec:	0001      	movs	r1, r0
 800bcee:	e7ed      	b.n	800bccc <__s2b+0x6c>
 800bcf0:	0800d7e8 	.word	0x0800d7e8
 800bcf4:	0800d8d8 	.word	0x0800d8d8

0800bcf8 <__hi0bits>:
 800bcf8:	0003      	movs	r3, r0
 800bcfa:	0c02      	lsrs	r2, r0, #16
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	4282      	cmp	r2, r0
 800bd00:	d101      	bne.n	800bd06 <__hi0bits+0xe>
 800bd02:	041b      	lsls	r3, r3, #16
 800bd04:	3010      	adds	r0, #16
 800bd06:	0e1a      	lsrs	r2, r3, #24
 800bd08:	d101      	bne.n	800bd0e <__hi0bits+0x16>
 800bd0a:	3008      	adds	r0, #8
 800bd0c:	021b      	lsls	r3, r3, #8
 800bd0e:	0f1a      	lsrs	r2, r3, #28
 800bd10:	d101      	bne.n	800bd16 <__hi0bits+0x1e>
 800bd12:	3004      	adds	r0, #4
 800bd14:	011b      	lsls	r3, r3, #4
 800bd16:	0f9a      	lsrs	r2, r3, #30
 800bd18:	d101      	bne.n	800bd1e <__hi0bits+0x26>
 800bd1a:	3002      	adds	r0, #2
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	db03      	blt.n	800bd2a <__hi0bits+0x32>
 800bd22:	3001      	adds	r0, #1
 800bd24:	005b      	lsls	r3, r3, #1
 800bd26:	d400      	bmi.n	800bd2a <__hi0bits+0x32>
 800bd28:	2020      	movs	r0, #32
 800bd2a:	4770      	bx	lr

0800bd2c <__lo0bits>:
 800bd2c:	6803      	ldr	r3, [r0, #0]
 800bd2e:	0002      	movs	r2, r0
 800bd30:	2107      	movs	r1, #7
 800bd32:	0018      	movs	r0, r3
 800bd34:	4008      	ands	r0, r1
 800bd36:	420b      	tst	r3, r1
 800bd38:	d00d      	beq.n	800bd56 <__lo0bits+0x2a>
 800bd3a:	3906      	subs	r1, #6
 800bd3c:	2000      	movs	r0, #0
 800bd3e:	420b      	tst	r3, r1
 800bd40:	d105      	bne.n	800bd4e <__lo0bits+0x22>
 800bd42:	3002      	adds	r0, #2
 800bd44:	4203      	tst	r3, r0
 800bd46:	d003      	beq.n	800bd50 <__lo0bits+0x24>
 800bd48:	40cb      	lsrs	r3, r1
 800bd4a:	0008      	movs	r0, r1
 800bd4c:	6013      	str	r3, [r2, #0]
 800bd4e:	4770      	bx	lr
 800bd50:	089b      	lsrs	r3, r3, #2
 800bd52:	6013      	str	r3, [r2, #0]
 800bd54:	e7fb      	b.n	800bd4e <__lo0bits+0x22>
 800bd56:	b299      	uxth	r1, r3
 800bd58:	2900      	cmp	r1, #0
 800bd5a:	d101      	bne.n	800bd60 <__lo0bits+0x34>
 800bd5c:	2010      	movs	r0, #16
 800bd5e:	0c1b      	lsrs	r3, r3, #16
 800bd60:	b2d9      	uxtb	r1, r3
 800bd62:	2900      	cmp	r1, #0
 800bd64:	d101      	bne.n	800bd6a <__lo0bits+0x3e>
 800bd66:	3008      	adds	r0, #8
 800bd68:	0a1b      	lsrs	r3, r3, #8
 800bd6a:	0719      	lsls	r1, r3, #28
 800bd6c:	d101      	bne.n	800bd72 <__lo0bits+0x46>
 800bd6e:	3004      	adds	r0, #4
 800bd70:	091b      	lsrs	r3, r3, #4
 800bd72:	0799      	lsls	r1, r3, #30
 800bd74:	d101      	bne.n	800bd7a <__lo0bits+0x4e>
 800bd76:	3002      	adds	r0, #2
 800bd78:	089b      	lsrs	r3, r3, #2
 800bd7a:	07d9      	lsls	r1, r3, #31
 800bd7c:	d4e9      	bmi.n	800bd52 <__lo0bits+0x26>
 800bd7e:	3001      	adds	r0, #1
 800bd80:	085b      	lsrs	r3, r3, #1
 800bd82:	d1e6      	bne.n	800bd52 <__lo0bits+0x26>
 800bd84:	2020      	movs	r0, #32
 800bd86:	e7e2      	b.n	800bd4e <__lo0bits+0x22>

0800bd88 <__i2b>:
 800bd88:	b510      	push	{r4, lr}
 800bd8a:	000c      	movs	r4, r1
 800bd8c:	2101      	movs	r1, #1
 800bd8e:	f7ff febb 	bl	800bb08 <_Balloc>
 800bd92:	2800      	cmp	r0, #0
 800bd94:	d106      	bne.n	800bda4 <__i2b+0x1c>
 800bd96:	21a0      	movs	r1, #160	; 0xa0
 800bd98:	0002      	movs	r2, r0
 800bd9a:	4b04      	ldr	r3, [pc, #16]	; (800bdac <__i2b+0x24>)
 800bd9c:	4804      	ldr	r0, [pc, #16]	; (800bdb0 <__i2b+0x28>)
 800bd9e:	0049      	lsls	r1, r1, #1
 800bda0:	f000 fef2 	bl	800cb88 <__assert_func>
 800bda4:	2301      	movs	r3, #1
 800bda6:	6144      	str	r4, [r0, #20]
 800bda8:	6103      	str	r3, [r0, #16]
 800bdaa:	bd10      	pop	{r4, pc}
 800bdac:	0800d7e8 	.word	0x0800d7e8
 800bdb0:	0800d8d8 	.word	0x0800d8d8

0800bdb4 <__multiply>:
 800bdb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdb6:	690b      	ldr	r3, [r1, #16]
 800bdb8:	0014      	movs	r4, r2
 800bdba:	6912      	ldr	r2, [r2, #16]
 800bdbc:	000d      	movs	r5, r1
 800bdbe:	b089      	sub	sp, #36	; 0x24
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	da01      	bge.n	800bdc8 <__multiply+0x14>
 800bdc4:	0025      	movs	r5, r4
 800bdc6:	000c      	movs	r4, r1
 800bdc8:	692f      	ldr	r7, [r5, #16]
 800bdca:	6926      	ldr	r6, [r4, #16]
 800bdcc:	6869      	ldr	r1, [r5, #4]
 800bdce:	19bb      	adds	r3, r7, r6
 800bdd0:	9302      	str	r3, [sp, #8]
 800bdd2:	68ab      	ldr	r3, [r5, #8]
 800bdd4:	19ba      	adds	r2, r7, r6
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	da00      	bge.n	800bddc <__multiply+0x28>
 800bdda:	3101      	adds	r1, #1
 800bddc:	f7ff fe94 	bl	800bb08 <_Balloc>
 800bde0:	9001      	str	r0, [sp, #4]
 800bde2:	2800      	cmp	r0, #0
 800bde4:	d106      	bne.n	800bdf4 <__multiply+0x40>
 800bde6:	215e      	movs	r1, #94	; 0x5e
 800bde8:	0002      	movs	r2, r0
 800bdea:	4b48      	ldr	r3, [pc, #288]	; (800bf0c <__multiply+0x158>)
 800bdec:	4848      	ldr	r0, [pc, #288]	; (800bf10 <__multiply+0x15c>)
 800bdee:	31ff      	adds	r1, #255	; 0xff
 800bdf0:	f000 feca 	bl	800cb88 <__assert_func>
 800bdf4:	9b01      	ldr	r3, [sp, #4]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	3314      	adds	r3, #20
 800bdfa:	469c      	mov	ip, r3
 800bdfc:	19bb      	adds	r3, r7, r6
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	4463      	add	r3, ip
 800be02:	9303      	str	r3, [sp, #12]
 800be04:	4663      	mov	r3, ip
 800be06:	9903      	ldr	r1, [sp, #12]
 800be08:	428b      	cmp	r3, r1
 800be0a:	d32c      	bcc.n	800be66 <__multiply+0xb2>
 800be0c:	002b      	movs	r3, r5
 800be0e:	0022      	movs	r2, r4
 800be10:	3314      	adds	r3, #20
 800be12:	00bf      	lsls	r7, r7, #2
 800be14:	3214      	adds	r2, #20
 800be16:	9306      	str	r3, [sp, #24]
 800be18:	00b6      	lsls	r6, r6, #2
 800be1a:	19db      	adds	r3, r3, r7
 800be1c:	9304      	str	r3, [sp, #16]
 800be1e:	1993      	adds	r3, r2, r6
 800be20:	9307      	str	r3, [sp, #28]
 800be22:	2304      	movs	r3, #4
 800be24:	9305      	str	r3, [sp, #20]
 800be26:	002b      	movs	r3, r5
 800be28:	9904      	ldr	r1, [sp, #16]
 800be2a:	3315      	adds	r3, #21
 800be2c:	9200      	str	r2, [sp, #0]
 800be2e:	4299      	cmp	r1, r3
 800be30:	d305      	bcc.n	800be3e <__multiply+0x8a>
 800be32:	1b4b      	subs	r3, r1, r5
 800be34:	3b15      	subs	r3, #21
 800be36:	089b      	lsrs	r3, r3, #2
 800be38:	3301      	adds	r3, #1
 800be3a:	009b      	lsls	r3, r3, #2
 800be3c:	9305      	str	r3, [sp, #20]
 800be3e:	9b07      	ldr	r3, [sp, #28]
 800be40:	9a00      	ldr	r2, [sp, #0]
 800be42:	429a      	cmp	r2, r3
 800be44:	d311      	bcc.n	800be6a <__multiply+0xb6>
 800be46:	9b02      	ldr	r3, [sp, #8]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	dd06      	ble.n	800be5a <__multiply+0xa6>
 800be4c:	9b03      	ldr	r3, [sp, #12]
 800be4e:	3b04      	subs	r3, #4
 800be50:	9303      	str	r3, [sp, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	9300      	str	r3, [sp, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d053      	beq.n	800bf02 <__multiply+0x14e>
 800be5a:	9b01      	ldr	r3, [sp, #4]
 800be5c:	9a02      	ldr	r2, [sp, #8]
 800be5e:	0018      	movs	r0, r3
 800be60:	611a      	str	r2, [r3, #16]
 800be62:	b009      	add	sp, #36	; 0x24
 800be64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be66:	c304      	stmia	r3!, {r2}
 800be68:	e7cd      	b.n	800be06 <__multiply+0x52>
 800be6a:	9b00      	ldr	r3, [sp, #0]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	b298      	uxth	r0, r3
 800be70:	2800      	cmp	r0, #0
 800be72:	d01b      	beq.n	800beac <__multiply+0xf8>
 800be74:	4667      	mov	r7, ip
 800be76:	2400      	movs	r4, #0
 800be78:	9e06      	ldr	r6, [sp, #24]
 800be7a:	ce02      	ldmia	r6!, {r1}
 800be7c:	683a      	ldr	r2, [r7, #0]
 800be7e:	b28b      	uxth	r3, r1
 800be80:	4343      	muls	r3, r0
 800be82:	b292      	uxth	r2, r2
 800be84:	189b      	adds	r3, r3, r2
 800be86:	191b      	adds	r3, r3, r4
 800be88:	0c0c      	lsrs	r4, r1, #16
 800be8a:	4344      	muls	r4, r0
 800be8c:	683a      	ldr	r2, [r7, #0]
 800be8e:	0c11      	lsrs	r1, r2, #16
 800be90:	1861      	adds	r1, r4, r1
 800be92:	0c1c      	lsrs	r4, r3, #16
 800be94:	1909      	adds	r1, r1, r4
 800be96:	0c0c      	lsrs	r4, r1, #16
 800be98:	b29b      	uxth	r3, r3
 800be9a:	0409      	lsls	r1, r1, #16
 800be9c:	430b      	orrs	r3, r1
 800be9e:	c708      	stmia	r7!, {r3}
 800bea0:	9b04      	ldr	r3, [sp, #16]
 800bea2:	42b3      	cmp	r3, r6
 800bea4:	d8e9      	bhi.n	800be7a <__multiply+0xc6>
 800bea6:	4663      	mov	r3, ip
 800bea8:	9a05      	ldr	r2, [sp, #20]
 800beaa:	509c      	str	r4, [r3, r2]
 800beac:	9b00      	ldr	r3, [sp, #0]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	0c1e      	lsrs	r6, r3, #16
 800beb2:	d020      	beq.n	800bef6 <__multiply+0x142>
 800beb4:	4663      	mov	r3, ip
 800beb6:	002c      	movs	r4, r5
 800beb8:	4660      	mov	r0, ip
 800beba:	2700      	movs	r7, #0
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	3414      	adds	r4, #20
 800bec0:	6822      	ldr	r2, [r4, #0]
 800bec2:	b29b      	uxth	r3, r3
 800bec4:	b291      	uxth	r1, r2
 800bec6:	4371      	muls	r1, r6
 800bec8:	6802      	ldr	r2, [r0, #0]
 800beca:	0c12      	lsrs	r2, r2, #16
 800becc:	1889      	adds	r1, r1, r2
 800bece:	19cf      	adds	r7, r1, r7
 800bed0:	0439      	lsls	r1, r7, #16
 800bed2:	430b      	orrs	r3, r1
 800bed4:	6003      	str	r3, [r0, #0]
 800bed6:	cc02      	ldmia	r4!, {r1}
 800bed8:	6843      	ldr	r3, [r0, #4]
 800beda:	0c09      	lsrs	r1, r1, #16
 800bedc:	4371      	muls	r1, r6
 800bede:	b29b      	uxth	r3, r3
 800bee0:	0c3f      	lsrs	r7, r7, #16
 800bee2:	18cb      	adds	r3, r1, r3
 800bee4:	9a04      	ldr	r2, [sp, #16]
 800bee6:	19db      	adds	r3, r3, r7
 800bee8:	0c1f      	lsrs	r7, r3, #16
 800beea:	3004      	adds	r0, #4
 800beec:	42a2      	cmp	r2, r4
 800beee:	d8e7      	bhi.n	800bec0 <__multiply+0x10c>
 800bef0:	4662      	mov	r2, ip
 800bef2:	9905      	ldr	r1, [sp, #20]
 800bef4:	5053      	str	r3, [r2, r1]
 800bef6:	9b00      	ldr	r3, [sp, #0]
 800bef8:	3304      	adds	r3, #4
 800befa:	9300      	str	r3, [sp, #0]
 800befc:	2304      	movs	r3, #4
 800befe:	449c      	add	ip, r3
 800bf00:	e79d      	b.n	800be3e <__multiply+0x8a>
 800bf02:	9b02      	ldr	r3, [sp, #8]
 800bf04:	3b01      	subs	r3, #1
 800bf06:	9302      	str	r3, [sp, #8]
 800bf08:	e79d      	b.n	800be46 <__multiply+0x92>
 800bf0a:	46c0      	nop			; (mov r8, r8)
 800bf0c:	0800d7e8 	.word	0x0800d7e8
 800bf10:	0800d8d8 	.word	0x0800d8d8

0800bf14 <__pow5mult>:
 800bf14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf16:	2303      	movs	r3, #3
 800bf18:	0015      	movs	r5, r2
 800bf1a:	0007      	movs	r7, r0
 800bf1c:	000e      	movs	r6, r1
 800bf1e:	401a      	ands	r2, r3
 800bf20:	421d      	tst	r5, r3
 800bf22:	d008      	beq.n	800bf36 <__pow5mult+0x22>
 800bf24:	4925      	ldr	r1, [pc, #148]	; (800bfbc <__pow5mult+0xa8>)
 800bf26:	3a01      	subs	r2, #1
 800bf28:	0092      	lsls	r2, r2, #2
 800bf2a:	5852      	ldr	r2, [r2, r1]
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	0031      	movs	r1, r6
 800bf30:	f7ff fe52 	bl	800bbd8 <__multadd>
 800bf34:	0006      	movs	r6, r0
 800bf36:	10ad      	asrs	r5, r5, #2
 800bf38:	d03d      	beq.n	800bfb6 <__pow5mult+0xa2>
 800bf3a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800bf3c:	2c00      	cmp	r4, #0
 800bf3e:	d10f      	bne.n	800bf60 <__pow5mult+0x4c>
 800bf40:	2010      	movs	r0, #16
 800bf42:	f7fc f979 	bl	8008238 <malloc>
 800bf46:	1e02      	subs	r2, r0, #0
 800bf48:	6278      	str	r0, [r7, #36]	; 0x24
 800bf4a:	d105      	bne.n	800bf58 <__pow5mult+0x44>
 800bf4c:	21d7      	movs	r1, #215	; 0xd7
 800bf4e:	4b1c      	ldr	r3, [pc, #112]	; (800bfc0 <__pow5mult+0xac>)
 800bf50:	481c      	ldr	r0, [pc, #112]	; (800bfc4 <__pow5mult+0xb0>)
 800bf52:	0049      	lsls	r1, r1, #1
 800bf54:	f000 fe18 	bl	800cb88 <__assert_func>
 800bf58:	6044      	str	r4, [r0, #4]
 800bf5a:	6084      	str	r4, [r0, #8]
 800bf5c:	6004      	str	r4, [r0, #0]
 800bf5e:	60c4      	str	r4, [r0, #12]
 800bf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf62:	689c      	ldr	r4, [r3, #8]
 800bf64:	9301      	str	r3, [sp, #4]
 800bf66:	2c00      	cmp	r4, #0
 800bf68:	d108      	bne.n	800bf7c <__pow5mult+0x68>
 800bf6a:	0038      	movs	r0, r7
 800bf6c:	4916      	ldr	r1, [pc, #88]	; (800bfc8 <__pow5mult+0xb4>)
 800bf6e:	f7ff ff0b 	bl	800bd88 <__i2b>
 800bf72:	9b01      	ldr	r3, [sp, #4]
 800bf74:	0004      	movs	r4, r0
 800bf76:	6098      	str	r0, [r3, #8]
 800bf78:	2300      	movs	r3, #0
 800bf7a:	6003      	str	r3, [r0, #0]
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	421d      	tst	r5, r3
 800bf80:	d00a      	beq.n	800bf98 <__pow5mult+0x84>
 800bf82:	0031      	movs	r1, r6
 800bf84:	0022      	movs	r2, r4
 800bf86:	0038      	movs	r0, r7
 800bf88:	f7ff ff14 	bl	800bdb4 <__multiply>
 800bf8c:	0031      	movs	r1, r6
 800bf8e:	9001      	str	r0, [sp, #4]
 800bf90:	0038      	movs	r0, r7
 800bf92:	f7ff fdfd 	bl	800bb90 <_Bfree>
 800bf96:	9e01      	ldr	r6, [sp, #4]
 800bf98:	106d      	asrs	r5, r5, #1
 800bf9a:	d00c      	beq.n	800bfb6 <__pow5mult+0xa2>
 800bf9c:	6820      	ldr	r0, [r4, #0]
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	d107      	bne.n	800bfb2 <__pow5mult+0x9e>
 800bfa2:	0022      	movs	r2, r4
 800bfa4:	0021      	movs	r1, r4
 800bfa6:	0038      	movs	r0, r7
 800bfa8:	f7ff ff04 	bl	800bdb4 <__multiply>
 800bfac:	2300      	movs	r3, #0
 800bfae:	6020      	str	r0, [r4, #0]
 800bfb0:	6003      	str	r3, [r0, #0]
 800bfb2:	0004      	movs	r4, r0
 800bfb4:	e7e2      	b.n	800bf7c <__pow5mult+0x68>
 800bfb6:	0030      	movs	r0, r6
 800bfb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bfba:	46c0      	nop			; (mov r8, r8)
 800bfbc:	0800da28 	.word	0x0800da28
 800bfc0:	0800d776 	.word	0x0800d776
 800bfc4:	0800d8d8 	.word	0x0800d8d8
 800bfc8:	00000271 	.word	0x00000271

0800bfcc <__lshift>:
 800bfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfce:	000c      	movs	r4, r1
 800bfd0:	0017      	movs	r7, r2
 800bfd2:	6923      	ldr	r3, [r4, #16]
 800bfd4:	1155      	asrs	r5, r2, #5
 800bfd6:	b087      	sub	sp, #28
 800bfd8:	18eb      	adds	r3, r5, r3
 800bfda:	9302      	str	r3, [sp, #8]
 800bfdc:	3301      	adds	r3, #1
 800bfde:	9301      	str	r3, [sp, #4]
 800bfe0:	6849      	ldr	r1, [r1, #4]
 800bfe2:	68a3      	ldr	r3, [r4, #8]
 800bfe4:	9004      	str	r0, [sp, #16]
 800bfe6:	9a01      	ldr	r2, [sp, #4]
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	db10      	blt.n	800c00e <__lshift+0x42>
 800bfec:	9804      	ldr	r0, [sp, #16]
 800bfee:	f7ff fd8b 	bl	800bb08 <_Balloc>
 800bff2:	2300      	movs	r3, #0
 800bff4:	0002      	movs	r2, r0
 800bff6:	0006      	movs	r6, r0
 800bff8:	0019      	movs	r1, r3
 800bffa:	3214      	adds	r2, #20
 800bffc:	4298      	cmp	r0, r3
 800bffe:	d10c      	bne.n	800c01a <__lshift+0x4e>
 800c000:	21da      	movs	r1, #218	; 0xda
 800c002:	0002      	movs	r2, r0
 800c004:	4b26      	ldr	r3, [pc, #152]	; (800c0a0 <__lshift+0xd4>)
 800c006:	4827      	ldr	r0, [pc, #156]	; (800c0a4 <__lshift+0xd8>)
 800c008:	31ff      	adds	r1, #255	; 0xff
 800c00a:	f000 fdbd 	bl	800cb88 <__assert_func>
 800c00e:	3101      	adds	r1, #1
 800c010:	005b      	lsls	r3, r3, #1
 800c012:	e7e8      	b.n	800bfe6 <__lshift+0x1a>
 800c014:	0098      	lsls	r0, r3, #2
 800c016:	5011      	str	r1, [r2, r0]
 800c018:	3301      	adds	r3, #1
 800c01a:	42ab      	cmp	r3, r5
 800c01c:	dbfa      	blt.n	800c014 <__lshift+0x48>
 800c01e:	43eb      	mvns	r3, r5
 800c020:	17db      	asrs	r3, r3, #31
 800c022:	401d      	ands	r5, r3
 800c024:	211f      	movs	r1, #31
 800c026:	0023      	movs	r3, r4
 800c028:	0038      	movs	r0, r7
 800c02a:	00ad      	lsls	r5, r5, #2
 800c02c:	1955      	adds	r5, r2, r5
 800c02e:	6922      	ldr	r2, [r4, #16]
 800c030:	3314      	adds	r3, #20
 800c032:	0092      	lsls	r2, r2, #2
 800c034:	4008      	ands	r0, r1
 800c036:	4684      	mov	ip, r0
 800c038:	189a      	adds	r2, r3, r2
 800c03a:	420f      	tst	r7, r1
 800c03c:	d02a      	beq.n	800c094 <__lshift+0xc8>
 800c03e:	3101      	adds	r1, #1
 800c040:	1a09      	subs	r1, r1, r0
 800c042:	9105      	str	r1, [sp, #20]
 800c044:	2100      	movs	r1, #0
 800c046:	9503      	str	r5, [sp, #12]
 800c048:	4667      	mov	r7, ip
 800c04a:	6818      	ldr	r0, [r3, #0]
 800c04c:	40b8      	lsls	r0, r7
 800c04e:	4301      	orrs	r1, r0
 800c050:	9803      	ldr	r0, [sp, #12]
 800c052:	c002      	stmia	r0!, {r1}
 800c054:	cb02      	ldmia	r3!, {r1}
 800c056:	9003      	str	r0, [sp, #12]
 800c058:	9805      	ldr	r0, [sp, #20]
 800c05a:	40c1      	lsrs	r1, r0
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d8f3      	bhi.n	800c048 <__lshift+0x7c>
 800c060:	0020      	movs	r0, r4
 800c062:	3015      	adds	r0, #21
 800c064:	2304      	movs	r3, #4
 800c066:	4282      	cmp	r2, r0
 800c068:	d304      	bcc.n	800c074 <__lshift+0xa8>
 800c06a:	1b13      	subs	r3, r2, r4
 800c06c:	3b15      	subs	r3, #21
 800c06e:	089b      	lsrs	r3, r3, #2
 800c070:	3301      	adds	r3, #1
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	50e9      	str	r1, [r5, r3]
 800c076:	2900      	cmp	r1, #0
 800c078:	d002      	beq.n	800c080 <__lshift+0xb4>
 800c07a:	9b02      	ldr	r3, [sp, #8]
 800c07c:	3302      	adds	r3, #2
 800c07e:	9301      	str	r3, [sp, #4]
 800c080:	9b01      	ldr	r3, [sp, #4]
 800c082:	9804      	ldr	r0, [sp, #16]
 800c084:	3b01      	subs	r3, #1
 800c086:	0021      	movs	r1, r4
 800c088:	6133      	str	r3, [r6, #16]
 800c08a:	f7ff fd81 	bl	800bb90 <_Bfree>
 800c08e:	0030      	movs	r0, r6
 800c090:	b007      	add	sp, #28
 800c092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c094:	cb02      	ldmia	r3!, {r1}
 800c096:	c502      	stmia	r5!, {r1}
 800c098:	429a      	cmp	r2, r3
 800c09a:	d8fb      	bhi.n	800c094 <__lshift+0xc8>
 800c09c:	e7f0      	b.n	800c080 <__lshift+0xb4>
 800c09e:	46c0      	nop			; (mov r8, r8)
 800c0a0:	0800d7e8 	.word	0x0800d7e8
 800c0a4:	0800d8d8 	.word	0x0800d8d8

0800c0a8 <__mcmp>:
 800c0a8:	6902      	ldr	r2, [r0, #16]
 800c0aa:	690b      	ldr	r3, [r1, #16]
 800c0ac:	b530      	push	{r4, r5, lr}
 800c0ae:	0004      	movs	r4, r0
 800c0b0:	1ad0      	subs	r0, r2, r3
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d10d      	bne.n	800c0d2 <__mcmp+0x2a>
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	3414      	adds	r4, #20
 800c0ba:	3114      	adds	r1, #20
 800c0bc:	18e2      	adds	r2, r4, r3
 800c0be:	18c9      	adds	r1, r1, r3
 800c0c0:	3a04      	subs	r2, #4
 800c0c2:	3904      	subs	r1, #4
 800c0c4:	6815      	ldr	r5, [r2, #0]
 800c0c6:	680b      	ldr	r3, [r1, #0]
 800c0c8:	429d      	cmp	r5, r3
 800c0ca:	d003      	beq.n	800c0d4 <__mcmp+0x2c>
 800c0cc:	2001      	movs	r0, #1
 800c0ce:	429d      	cmp	r5, r3
 800c0d0:	d303      	bcc.n	800c0da <__mcmp+0x32>
 800c0d2:	bd30      	pop	{r4, r5, pc}
 800c0d4:	4294      	cmp	r4, r2
 800c0d6:	d3f3      	bcc.n	800c0c0 <__mcmp+0x18>
 800c0d8:	e7fb      	b.n	800c0d2 <__mcmp+0x2a>
 800c0da:	4240      	negs	r0, r0
 800c0dc:	e7f9      	b.n	800c0d2 <__mcmp+0x2a>
	...

0800c0e0 <__mdiff>:
 800c0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0e2:	000e      	movs	r6, r1
 800c0e4:	0007      	movs	r7, r0
 800c0e6:	0011      	movs	r1, r2
 800c0e8:	0030      	movs	r0, r6
 800c0ea:	b087      	sub	sp, #28
 800c0ec:	0014      	movs	r4, r2
 800c0ee:	f7ff ffdb 	bl	800c0a8 <__mcmp>
 800c0f2:	1e05      	subs	r5, r0, #0
 800c0f4:	d110      	bne.n	800c118 <__mdiff+0x38>
 800c0f6:	0001      	movs	r1, r0
 800c0f8:	0038      	movs	r0, r7
 800c0fa:	f7ff fd05 	bl	800bb08 <_Balloc>
 800c0fe:	1e02      	subs	r2, r0, #0
 800c100:	d104      	bne.n	800c10c <__mdiff+0x2c>
 800c102:	4b40      	ldr	r3, [pc, #256]	; (800c204 <__mdiff+0x124>)
 800c104:	4940      	ldr	r1, [pc, #256]	; (800c208 <__mdiff+0x128>)
 800c106:	4841      	ldr	r0, [pc, #260]	; (800c20c <__mdiff+0x12c>)
 800c108:	f000 fd3e 	bl	800cb88 <__assert_func>
 800c10c:	2301      	movs	r3, #1
 800c10e:	6145      	str	r5, [r0, #20]
 800c110:	6103      	str	r3, [r0, #16]
 800c112:	0010      	movs	r0, r2
 800c114:	b007      	add	sp, #28
 800c116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c118:	2301      	movs	r3, #1
 800c11a:	9301      	str	r3, [sp, #4]
 800c11c:	2800      	cmp	r0, #0
 800c11e:	db04      	blt.n	800c12a <__mdiff+0x4a>
 800c120:	0023      	movs	r3, r4
 800c122:	0034      	movs	r4, r6
 800c124:	001e      	movs	r6, r3
 800c126:	2300      	movs	r3, #0
 800c128:	9301      	str	r3, [sp, #4]
 800c12a:	0038      	movs	r0, r7
 800c12c:	6861      	ldr	r1, [r4, #4]
 800c12e:	f7ff fceb 	bl	800bb08 <_Balloc>
 800c132:	1e02      	subs	r2, r0, #0
 800c134:	d103      	bne.n	800c13e <__mdiff+0x5e>
 800c136:	2190      	movs	r1, #144	; 0x90
 800c138:	4b32      	ldr	r3, [pc, #200]	; (800c204 <__mdiff+0x124>)
 800c13a:	0089      	lsls	r1, r1, #2
 800c13c:	e7e3      	b.n	800c106 <__mdiff+0x26>
 800c13e:	9b01      	ldr	r3, [sp, #4]
 800c140:	2700      	movs	r7, #0
 800c142:	60c3      	str	r3, [r0, #12]
 800c144:	6920      	ldr	r0, [r4, #16]
 800c146:	3414      	adds	r4, #20
 800c148:	9401      	str	r4, [sp, #4]
 800c14a:	9b01      	ldr	r3, [sp, #4]
 800c14c:	0084      	lsls	r4, r0, #2
 800c14e:	191b      	adds	r3, r3, r4
 800c150:	0034      	movs	r4, r6
 800c152:	9302      	str	r3, [sp, #8]
 800c154:	6933      	ldr	r3, [r6, #16]
 800c156:	3414      	adds	r4, #20
 800c158:	0099      	lsls	r1, r3, #2
 800c15a:	1863      	adds	r3, r4, r1
 800c15c:	9303      	str	r3, [sp, #12]
 800c15e:	0013      	movs	r3, r2
 800c160:	3314      	adds	r3, #20
 800c162:	469c      	mov	ip, r3
 800c164:	9305      	str	r3, [sp, #20]
 800c166:	9b01      	ldr	r3, [sp, #4]
 800c168:	9304      	str	r3, [sp, #16]
 800c16a:	9b04      	ldr	r3, [sp, #16]
 800c16c:	cc02      	ldmia	r4!, {r1}
 800c16e:	cb20      	ldmia	r3!, {r5}
 800c170:	9304      	str	r3, [sp, #16]
 800c172:	b2ab      	uxth	r3, r5
 800c174:	19df      	adds	r7, r3, r7
 800c176:	b28b      	uxth	r3, r1
 800c178:	1afb      	subs	r3, r7, r3
 800c17a:	0c09      	lsrs	r1, r1, #16
 800c17c:	0c2d      	lsrs	r5, r5, #16
 800c17e:	1a6d      	subs	r5, r5, r1
 800c180:	1419      	asrs	r1, r3, #16
 800c182:	186d      	adds	r5, r5, r1
 800c184:	4661      	mov	r1, ip
 800c186:	142f      	asrs	r7, r5, #16
 800c188:	b29b      	uxth	r3, r3
 800c18a:	042d      	lsls	r5, r5, #16
 800c18c:	432b      	orrs	r3, r5
 800c18e:	c108      	stmia	r1!, {r3}
 800c190:	9b03      	ldr	r3, [sp, #12]
 800c192:	468c      	mov	ip, r1
 800c194:	42a3      	cmp	r3, r4
 800c196:	d8e8      	bhi.n	800c16a <__mdiff+0x8a>
 800c198:	0031      	movs	r1, r6
 800c19a:	9c03      	ldr	r4, [sp, #12]
 800c19c:	3115      	adds	r1, #21
 800c19e:	2304      	movs	r3, #4
 800c1a0:	428c      	cmp	r4, r1
 800c1a2:	d304      	bcc.n	800c1ae <__mdiff+0xce>
 800c1a4:	1ba3      	subs	r3, r4, r6
 800c1a6:	3b15      	subs	r3, #21
 800c1a8:	089b      	lsrs	r3, r3, #2
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	9901      	ldr	r1, [sp, #4]
 800c1b0:	18cc      	adds	r4, r1, r3
 800c1b2:	9905      	ldr	r1, [sp, #20]
 800c1b4:	0026      	movs	r6, r4
 800c1b6:	18cb      	adds	r3, r1, r3
 800c1b8:	469c      	mov	ip, r3
 800c1ba:	9902      	ldr	r1, [sp, #8]
 800c1bc:	428e      	cmp	r6, r1
 800c1be:	d310      	bcc.n	800c1e2 <__mdiff+0x102>
 800c1c0:	9e02      	ldr	r6, [sp, #8]
 800c1c2:	1ee1      	subs	r1, r4, #3
 800c1c4:	2500      	movs	r5, #0
 800c1c6:	428e      	cmp	r6, r1
 800c1c8:	d304      	bcc.n	800c1d4 <__mdiff+0xf4>
 800c1ca:	0031      	movs	r1, r6
 800c1cc:	3103      	adds	r1, #3
 800c1ce:	1b0c      	subs	r4, r1, r4
 800c1d0:	08a4      	lsrs	r4, r4, #2
 800c1d2:	00a5      	lsls	r5, r4, #2
 800c1d4:	195b      	adds	r3, r3, r5
 800c1d6:	3b04      	subs	r3, #4
 800c1d8:	6819      	ldr	r1, [r3, #0]
 800c1da:	2900      	cmp	r1, #0
 800c1dc:	d00f      	beq.n	800c1fe <__mdiff+0x11e>
 800c1de:	6110      	str	r0, [r2, #16]
 800c1e0:	e797      	b.n	800c112 <__mdiff+0x32>
 800c1e2:	ce02      	ldmia	r6!, {r1}
 800c1e4:	b28d      	uxth	r5, r1
 800c1e6:	19ed      	adds	r5, r5, r7
 800c1e8:	0c0f      	lsrs	r7, r1, #16
 800c1ea:	1429      	asrs	r1, r5, #16
 800c1ec:	1879      	adds	r1, r7, r1
 800c1ee:	140f      	asrs	r7, r1, #16
 800c1f0:	b2ad      	uxth	r5, r5
 800c1f2:	0409      	lsls	r1, r1, #16
 800c1f4:	430d      	orrs	r5, r1
 800c1f6:	4661      	mov	r1, ip
 800c1f8:	c120      	stmia	r1!, {r5}
 800c1fa:	468c      	mov	ip, r1
 800c1fc:	e7dd      	b.n	800c1ba <__mdiff+0xda>
 800c1fe:	3801      	subs	r0, #1
 800c200:	e7e9      	b.n	800c1d6 <__mdiff+0xf6>
 800c202:	46c0      	nop			; (mov r8, r8)
 800c204:	0800d7e8 	.word	0x0800d7e8
 800c208:	00000232 	.word	0x00000232
 800c20c:	0800d8d8 	.word	0x0800d8d8

0800c210 <__ulp>:
 800c210:	4b0f      	ldr	r3, [pc, #60]	; (800c250 <__ulp+0x40>)
 800c212:	4019      	ands	r1, r3
 800c214:	4b0f      	ldr	r3, [pc, #60]	; (800c254 <__ulp+0x44>)
 800c216:	18c9      	adds	r1, r1, r3
 800c218:	2900      	cmp	r1, #0
 800c21a:	dd04      	ble.n	800c226 <__ulp+0x16>
 800c21c:	2200      	movs	r2, #0
 800c21e:	000b      	movs	r3, r1
 800c220:	0010      	movs	r0, r2
 800c222:	0019      	movs	r1, r3
 800c224:	4770      	bx	lr
 800c226:	4249      	negs	r1, r1
 800c228:	2200      	movs	r2, #0
 800c22a:	2300      	movs	r3, #0
 800c22c:	1509      	asrs	r1, r1, #20
 800c22e:	2913      	cmp	r1, #19
 800c230:	dc04      	bgt.n	800c23c <__ulp+0x2c>
 800c232:	2080      	movs	r0, #128	; 0x80
 800c234:	0300      	lsls	r0, r0, #12
 800c236:	4108      	asrs	r0, r1
 800c238:	0003      	movs	r3, r0
 800c23a:	e7f1      	b.n	800c220 <__ulp+0x10>
 800c23c:	3914      	subs	r1, #20
 800c23e:	2001      	movs	r0, #1
 800c240:	291e      	cmp	r1, #30
 800c242:	dc02      	bgt.n	800c24a <__ulp+0x3a>
 800c244:	2080      	movs	r0, #128	; 0x80
 800c246:	0600      	lsls	r0, r0, #24
 800c248:	40c8      	lsrs	r0, r1
 800c24a:	0002      	movs	r2, r0
 800c24c:	e7e8      	b.n	800c220 <__ulp+0x10>
 800c24e:	46c0      	nop			; (mov r8, r8)
 800c250:	7ff00000 	.word	0x7ff00000
 800c254:	fcc00000 	.word	0xfcc00000

0800c258 <__b2d>:
 800c258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c25a:	0006      	movs	r6, r0
 800c25c:	6903      	ldr	r3, [r0, #16]
 800c25e:	3614      	adds	r6, #20
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	18f3      	adds	r3, r6, r3
 800c264:	1f1d      	subs	r5, r3, #4
 800c266:	682c      	ldr	r4, [r5, #0]
 800c268:	000f      	movs	r7, r1
 800c26a:	0020      	movs	r0, r4
 800c26c:	9301      	str	r3, [sp, #4]
 800c26e:	f7ff fd43 	bl	800bcf8 <__hi0bits>
 800c272:	2320      	movs	r3, #32
 800c274:	1a1b      	subs	r3, r3, r0
 800c276:	491f      	ldr	r1, [pc, #124]	; (800c2f4 <__b2d+0x9c>)
 800c278:	603b      	str	r3, [r7, #0]
 800c27a:	280a      	cmp	r0, #10
 800c27c:	dc16      	bgt.n	800c2ac <__b2d+0x54>
 800c27e:	230b      	movs	r3, #11
 800c280:	0027      	movs	r7, r4
 800c282:	1a1b      	subs	r3, r3, r0
 800c284:	40df      	lsrs	r7, r3
 800c286:	4339      	orrs	r1, r7
 800c288:	469c      	mov	ip, r3
 800c28a:	000b      	movs	r3, r1
 800c28c:	2100      	movs	r1, #0
 800c28e:	42ae      	cmp	r6, r5
 800c290:	d202      	bcs.n	800c298 <__b2d+0x40>
 800c292:	9901      	ldr	r1, [sp, #4]
 800c294:	3908      	subs	r1, #8
 800c296:	6809      	ldr	r1, [r1, #0]
 800c298:	3015      	adds	r0, #21
 800c29a:	4084      	lsls	r4, r0
 800c29c:	4660      	mov	r0, ip
 800c29e:	40c1      	lsrs	r1, r0
 800c2a0:	430c      	orrs	r4, r1
 800c2a2:	0022      	movs	r2, r4
 800c2a4:	0010      	movs	r0, r2
 800c2a6:	0019      	movs	r1, r3
 800c2a8:	b003      	add	sp, #12
 800c2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2ac:	2700      	movs	r7, #0
 800c2ae:	42ae      	cmp	r6, r5
 800c2b0:	d202      	bcs.n	800c2b8 <__b2d+0x60>
 800c2b2:	9d01      	ldr	r5, [sp, #4]
 800c2b4:	3d08      	subs	r5, #8
 800c2b6:	682f      	ldr	r7, [r5, #0]
 800c2b8:	230b      	movs	r3, #11
 800c2ba:	425b      	negs	r3, r3
 800c2bc:	469c      	mov	ip, r3
 800c2be:	4484      	add	ip, r0
 800c2c0:	280b      	cmp	r0, #11
 800c2c2:	d013      	beq.n	800c2ec <__b2d+0x94>
 800c2c4:	4663      	mov	r3, ip
 800c2c6:	2020      	movs	r0, #32
 800c2c8:	409c      	lsls	r4, r3
 800c2ca:	1ac0      	subs	r0, r0, r3
 800c2cc:	003b      	movs	r3, r7
 800c2ce:	40c3      	lsrs	r3, r0
 800c2d0:	431c      	orrs	r4, r3
 800c2d2:	4321      	orrs	r1, r4
 800c2d4:	000b      	movs	r3, r1
 800c2d6:	2100      	movs	r1, #0
 800c2d8:	42b5      	cmp	r5, r6
 800c2da:	d901      	bls.n	800c2e0 <__b2d+0x88>
 800c2dc:	3d04      	subs	r5, #4
 800c2de:	6829      	ldr	r1, [r5, #0]
 800c2e0:	4664      	mov	r4, ip
 800c2e2:	40c1      	lsrs	r1, r0
 800c2e4:	40a7      	lsls	r7, r4
 800c2e6:	430f      	orrs	r7, r1
 800c2e8:	003a      	movs	r2, r7
 800c2ea:	e7db      	b.n	800c2a4 <__b2d+0x4c>
 800c2ec:	4321      	orrs	r1, r4
 800c2ee:	000b      	movs	r3, r1
 800c2f0:	e7fa      	b.n	800c2e8 <__b2d+0x90>
 800c2f2:	46c0      	nop			; (mov r8, r8)
 800c2f4:	3ff00000 	.word	0x3ff00000

0800c2f8 <__d2b>:
 800c2f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2fa:	2101      	movs	r1, #1
 800c2fc:	0014      	movs	r4, r2
 800c2fe:	001e      	movs	r6, r3
 800c300:	9f08      	ldr	r7, [sp, #32]
 800c302:	f7ff fc01 	bl	800bb08 <_Balloc>
 800c306:	1e05      	subs	r5, r0, #0
 800c308:	d105      	bne.n	800c316 <__d2b+0x1e>
 800c30a:	0002      	movs	r2, r0
 800c30c:	4b26      	ldr	r3, [pc, #152]	; (800c3a8 <__d2b+0xb0>)
 800c30e:	4927      	ldr	r1, [pc, #156]	; (800c3ac <__d2b+0xb4>)
 800c310:	4827      	ldr	r0, [pc, #156]	; (800c3b0 <__d2b+0xb8>)
 800c312:	f000 fc39 	bl	800cb88 <__assert_func>
 800c316:	0333      	lsls	r3, r6, #12
 800c318:	0076      	lsls	r6, r6, #1
 800c31a:	0b1b      	lsrs	r3, r3, #12
 800c31c:	0d76      	lsrs	r6, r6, #21
 800c31e:	d124      	bne.n	800c36a <__d2b+0x72>
 800c320:	9301      	str	r3, [sp, #4]
 800c322:	2c00      	cmp	r4, #0
 800c324:	d027      	beq.n	800c376 <__d2b+0x7e>
 800c326:	4668      	mov	r0, sp
 800c328:	9400      	str	r4, [sp, #0]
 800c32a:	f7ff fcff 	bl	800bd2c <__lo0bits>
 800c32e:	9c00      	ldr	r4, [sp, #0]
 800c330:	2800      	cmp	r0, #0
 800c332:	d01e      	beq.n	800c372 <__d2b+0x7a>
 800c334:	9b01      	ldr	r3, [sp, #4]
 800c336:	2120      	movs	r1, #32
 800c338:	001a      	movs	r2, r3
 800c33a:	1a09      	subs	r1, r1, r0
 800c33c:	408a      	lsls	r2, r1
 800c33e:	40c3      	lsrs	r3, r0
 800c340:	4322      	orrs	r2, r4
 800c342:	616a      	str	r2, [r5, #20]
 800c344:	9301      	str	r3, [sp, #4]
 800c346:	9c01      	ldr	r4, [sp, #4]
 800c348:	61ac      	str	r4, [r5, #24]
 800c34a:	1e63      	subs	r3, r4, #1
 800c34c:	419c      	sbcs	r4, r3
 800c34e:	3401      	adds	r4, #1
 800c350:	612c      	str	r4, [r5, #16]
 800c352:	2e00      	cmp	r6, #0
 800c354:	d018      	beq.n	800c388 <__d2b+0x90>
 800c356:	4b17      	ldr	r3, [pc, #92]	; (800c3b4 <__d2b+0xbc>)
 800c358:	18f6      	adds	r6, r6, r3
 800c35a:	2335      	movs	r3, #53	; 0x35
 800c35c:	1836      	adds	r6, r6, r0
 800c35e:	1a18      	subs	r0, r3, r0
 800c360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c362:	603e      	str	r6, [r7, #0]
 800c364:	6018      	str	r0, [r3, #0]
 800c366:	0028      	movs	r0, r5
 800c368:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c36a:	2280      	movs	r2, #128	; 0x80
 800c36c:	0352      	lsls	r2, r2, #13
 800c36e:	4313      	orrs	r3, r2
 800c370:	e7d6      	b.n	800c320 <__d2b+0x28>
 800c372:	616c      	str	r4, [r5, #20]
 800c374:	e7e7      	b.n	800c346 <__d2b+0x4e>
 800c376:	a801      	add	r0, sp, #4
 800c378:	f7ff fcd8 	bl	800bd2c <__lo0bits>
 800c37c:	2401      	movs	r4, #1
 800c37e:	9b01      	ldr	r3, [sp, #4]
 800c380:	612c      	str	r4, [r5, #16]
 800c382:	616b      	str	r3, [r5, #20]
 800c384:	3020      	adds	r0, #32
 800c386:	e7e4      	b.n	800c352 <__d2b+0x5a>
 800c388:	4b0b      	ldr	r3, [pc, #44]	; (800c3b8 <__d2b+0xc0>)
 800c38a:	18c0      	adds	r0, r0, r3
 800c38c:	4b0b      	ldr	r3, [pc, #44]	; (800c3bc <__d2b+0xc4>)
 800c38e:	6038      	str	r0, [r7, #0]
 800c390:	18e3      	adds	r3, r4, r3
 800c392:	009b      	lsls	r3, r3, #2
 800c394:	18eb      	adds	r3, r5, r3
 800c396:	6958      	ldr	r0, [r3, #20]
 800c398:	f7ff fcae 	bl	800bcf8 <__hi0bits>
 800c39c:	0164      	lsls	r4, r4, #5
 800c39e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3a0:	1a24      	subs	r4, r4, r0
 800c3a2:	601c      	str	r4, [r3, #0]
 800c3a4:	e7df      	b.n	800c366 <__d2b+0x6e>
 800c3a6:	46c0      	nop			; (mov r8, r8)
 800c3a8:	0800d7e8 	.word	0x0800d7e8
 800c3ac:	0000030a 	.word	0x0000030a
 800c3b0:	0800d8d8 	.word	0x0800d8d8
 800c3b4:	fffffbcd 	.word	0xfffffbcd
 800c3b8:	fffffbce 	.word	0xfffffbce
 800c3bc:	3fffffff 	.word	0x3fffffff

0800c3c0 <__ratio>:
 800c3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3c2:	b087      	sub	sp, #28
 800c3c4:	000f      	movs	r7, r1
 800c3c6:	a904      	add	r1, sp, #16
 800c3c8:	0006      	movs	r6, r0
 800c3ca:	f7ff ff45 	bl	800c258 <__b2d>
 800c3ce:	9000      	str	r0, [sp, #0]
 800c3d0:	9101      	str	r1, [sp, #4]
 800c3d2:	9c00      	ldr	r4, [sp, #0]
 800c3d4:	9d01      	ldr	r5, [sp, #4]
 800c3d6:	0038      	movs	r0, r7
 800c3d8:	a905      	add	r1, sp, #20
 800c3da:	f7ff ff3d 	bl	800c258 <__b2d>
 800c3de:	9002      	str	r0, [sp, #8]
 800c3e0:	9103      	str	r1, [sp, #12]
 800c3e2:	9a02      	ldr	r2, [sp, #8]
 800c3e4:	9b03      	ldr	r3, [sp, #12]
 800c3e6:	6931      	ldr	r1, [r6, #16]
 800c3e8:	6938      	ldr	r0, [r7, #16]
 800c3ea:	9e05      	ldr	r6, [sp, #20]
 800c3ec:	1a08      	subs	r0, r1, r0
 800c3ee:	9904      	ldr	r1, [sp, #16]
 800c3f0:	0140      	lsls	r0, r0, #5
 800c3f2:	1b89      	subs	r1, r1, r6
 800c3f4:	1841      	adds	r1, r0, r1
 800c3f6:	0508      	lsls	r0, r1, #20
 800c3f8:	2900      	cmp	r1, #0
 800c3fa:	dd07      	ble.n	800c40c <__ratio+0x4c>
 800c3fc:	9901      	ldr	r1, [sp, #4]
 800c3fe:	1845      	adds	r5, r0, r1
 800c400:	0020      	movs	r0, r4
 800c402:	0029      	movs	r1, r5
 800c404:	f7f4 fbfe 	bl	8000c04 <__aeabi_ddiv>
 800c408:	b007      	add	sp, #28
 800c40a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c40c:	9903      	ldr	r1, [sp, #12]
 800c40e:	1a0b      	subs	r3, r1, r0
 800c410:	e7f6      	b.n	800c400 <__ratio+0x40>

0800c412 <__copybits>:
 800c412:	b570      	push	{r4, r5, r6, lr}
 800c414:	0014      	movs	r4, r2
 800c416:	0005      	movs	r5, r0
 800c418:	3901      	subs	r1, #1
 800c41a:	6913      	ldr	r3, [r2, #16]
 800c41c:	1149      	asrs	r1, r1, #5
 800c41e:	3101      	adds	r1, #1
 800c420:	0089      	lsls	r1, r1, #2
 800c422:	3414      	adds	r4, #20
 800c424:	009b      	lsls	r3, r3, #2
 800c426:	1841      	adds	r1, r0, r1
 800c428:	18e3      	adds	r3, r4, r3
 800c42a:	42a3      	cmp	r3, r4
 800c42c:	d80d      	bhi.n	800c44a <__copybits+0x38>
 800c42e:	0014      	movs	r4, r2
 800c430:	3411      	adds	r4, #17
 800c432:	2500      	movs	r5, #0
 800c434:	429c      	cmp	r4, r3
 800c436:	d803      	bhi.n	800c440 <__copybits+0x2e>
 800c438:	1a9b      	subs	r3, r3, r2
 800c43a:	3b11      	subs	r3, #17
 800c43c:	089b      	lsrs	r3, r3, #2
 800c43e:	009d      	lsls	r5, r3, #2
 800c440:	2300      	movs	r3, #0
 800c442:	1940      	adds	r0, r0, r5
 800c444:	4281      	cmp	r1, r0
 800c446:	d803      	bhi.n	800c450 <__copybits+0x3e>
 800c448:	bd70      	pop	{r4, r5, r6, pc}
 800c44a:	cc40      	ldmia	r4!, {r6}
 800c44c:	c540      	stmia	r5!, {r6}
 800c44e:	e7ec      	b.n	800c42a <__copybits+0x18>
 800c450:	c008      	stmia	r0!, {r3}
 800c452:	e7f7      	b.n	800c444 <__copybits+0x32>

0800c454 <__any_on>:
 800c454:	0002      	movs	r2, r0
 800c456:	6900      	ldr	r0, [r0, #16]
 800c458:	b510      	push	{r4, lr}
 800c45a:	3214      	adds	r2, #20
 800c45c:	114b      	asrs	r3, r1, #5
 800c45e:	4298      	cmp	r0, r3
 800c460:	db13      	blt.n	800c48a <__any_on+0x36>
 800c462:	dd0c      	ble.n	800c47e <__any_on+0x2a>
 800c464:	241f      	movs	r4, #31
 800c466:	0008      	movs	r0, r1
 800c468:	4020      	ands	r0, r4
 800c46a:	4221      	tst	r1, r4
 800c46c:	d007      	beq.n	800c47e <__any_on+0x2a>
 800c46e:	0099      	lsls	r1, r3, #2
 800c470:	588c      	ldr	r4, [r1, r2]
 800c472:	0021      	movs	r1, r4
 800c474:	40c1      	lsrs	r1, r0
 800c476:	4081      	lsls	r1, r0
 800c478:	2001      	movs	r0, #1
 800c47a:	428c      	cmp	r4, r1
 800c47c:	d104      	bne.n	800c488 <__any_on+0x34>
 800c47e:	009b      	lsls	r3, r3, #2
 800c480:	18d3      	adds	r3, r2, r3
 800c482:	4293      	cmp	r3, r2
 800c484:	d803      	bhi.n	800c48e <__any_on+0x3a>
 800c486:	2000      	movs	r0, #0
 800c488:	bd10      	pop	{r4, pc}
 800c48a:	0003      	movs	r3, r0
 800c48c:	e7f7      	b.n	800c47e <__any_on+0x2a>
 800c48e:	3b04      	subs	r3, #4
 800c490:	6819      	ldr	r1, [r3, #0]
 800c492:	2900      	cmp	r1, #0
 800c494:	d0f5      	beq.n	800c482 <__any_on+0x2e>
 800c496:	2001      	movs	r0, #1
 800c498:	e7f6      	b.n	800c488 <__any_on+0x34>

0800c49a <_calloc_r>:
 800c49a:	b570      	push	{r4, r5, r6, lr}
 800c49c:	0c13      	lsrs	r3, r2, #16
 800c49e:	0c0d      	lsrs	r5, r1, #16
 800c4a0:	d11e      	bne.n	800c4e0 <_calloc_r+0x46>
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d10c      	bne.n	800c4c0 <_calloc_r+0x26>
 800c4a6:	b289      	uxth	r1, r1
 800c4a8:	b294      	uxth	r4, r2
 800c4aa:	434c      	muls	r4, r1
 800c4ac:	0021      	movs	r1, r4
 800c4ae:	f7fb ff55 	bl	800835c <_malloc_r>
 800c4b2:	1e05      	subs	r5, r0, #0
 800c4b4:	d01b      	beq.n	800c4ee <_calloc_r+0x54>
 800c4b6:	0022      	movs	r2, r4
 800c4b8:	2100      	movs	r1, #0
 800c4ba:	f7fb feda 	bl	8008272 <memset>
 800c4be:	e016      	b.n	800c4ee <_calloc_r+0x54>
 800c4c0:	1c1d      	adds	r5, r3, #0
 800c4c2:	1c0b      	adds	r3, r1, #0
 800c4c4:	b292      	uxth	r2, r2
 800c4c6:	b289      	uxth	r1, r1
 800c4c8:	b29c      	uxth	r4, r3
 800c4ca:	4351      	muls	r1, r2
 800c4cc:	b2ab      	uxth	r3, r5
 800c4ce:	4363      	muls	r3, r4
 800c4d0:	0c0c      	lsrs	r4, r1, #16
 800c4d2:	191c      	adds	r4, r3, r4
 800c4d4:	0c22      	lsrs	r2, r4, #16
 800c4d6:	d107      	bne.n	800c4e8 <_calloc_r+0x4e>
 800c4d8:	0424      	lsls	r4, r4, #16
 800c4da:	b289      	uxth	r1, r1
 800c4dc:	430c      	orrs	r4, r1
 800c4de:	e7e5      	b.n	800c4ac <_calloc_r+0x12>
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d101      	bne.n	800c4e8 <_calloc_r+0x4e>
 800c4e4:	1c13      	adds	r3, r2, #0
 800c4e6:	e7ed      	b.n	800c4c4 <_calloc_r+0x2a>
 800c4e8:	230c      	movs	r3, #12
 800c4ea:	2500      	movs	r5, #0
 800c4ec:	6003      	str	r3, [r0, #0]
 800c4ee:	0028      	movs	r0, r5
 800c4f0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c4f4 <__ssputs_r>:
 800c4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4f6:	688e      	ldr	r6, [r1, #8]
 800c4f8:	b085      	sub	sp, #20
 800c4fa:	0007      	movs	r7, r0
 800c4fc:	000c      	movs	r4, r1
 800c4fe:	9203      	str	r2, [sp, #12]
 800c500:	9301      	str	r3, [sp, #4]
 800c502:	429e      	cmp	r6, r3
 800c504:	d83c      	bhi.n	800c580 <__ssputs_r+0x8c>
 800c506:	2390      	movs	r3, #144	; 0x90
 800c508:	898a      	ldrh	r2, [r1, #12]
 800c50a:	00db      	lsls	r3, r3, #3
 800c50c:	421a      	tst	r2, r3
 800c50e:	d034      	beq.n	800c57a <__ssputs_r+0x86>
 800c510:	6909      	ldr	r1, [r1, #16]
 800c512:	6823      	ldr	r3, [r4, #0]
 800c514:	6960      	ldr	r0, [r4, #20]
 800c516:	1a5b      	subs	r3, r3, r1
 800c518:	9302      	str	r3, [sp, #8]
 800c51a:	2303      	movs	r3, #3
 800c51c:	4343      	muls	r3, r0
 800c51e:	0fdd      	lsrs	r5, r3, #31
 800c520:	18ed      	adds	r5, r5, r3
 800c522:	9b01      	ldr	r3, [sp, #4]
 800c524:	9802      	ldr	r0, [sp, #8]
 800c526:	3301      	adds	r3, #1
 800c528:	181b      	adds	r3, r3, r0
 800c52a:	106d      	asrs	r5, r5, #1
 800c52c:	42ab      	cmp	r3, r5
 800c52e:	d900      	bls.n	800c532 <__ssputs_r+0x3e>
 800c530:	001d      	movs	r5, r3
 800c532:	0553      	lsls	r3, r2, #21
 800c534:	d532      	bpl.n	800c59c <__ssputs_r+0xa8>
 800c536:	0029      	movs	r1, r5
 800c538:	0038      	movs	r0, r7
 800c53a:	f7fb ff0f 	bl	800835c <_malloc_r>
 800c53e:	1e06      	subs	r6, r0, #0
 800c540:	d109      	bne.n	800c556 <__ssputs_r+0x62>
 800c542:	230c      	movs	r3, #12
 800c544:	603b      	str	r3, [r7, #0]
 800c546:	2340      	movs	r3, #64	; 0x40
 800c548:	2001      	movs	r0, #1
 800c54a:	89a2      	ldrh	r2, [r4, #12]
 800c54c:	4240      	negs	r0, r0
 800c54e:	4313      	orrs	r3, r2
 800c550:	81a3      	strh	r3, [r4, #12]
 800c552:	b005      	add	sp, #20
 800c554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c556:	9a02      	ldr	r2, [sp, #8]
 800c558:	6921      	ldr	r1, [r4, #16]
 800c55a:	f7fb fe81 	bl	8008260 <memcpy>
 800c55e:	89a3      	ldrh	r3, [r4, #12]
 800c560:	4a14      	ldr	r2, [pc, #80]	; (800c5b4 <__ssputs_r+0xc0>)
 800c562:	401a      	ands	r2, r3
 800c564:	2380      	movs	r3, #128	; 0x80
 800c566:	4313      	orrs	r3, r2
 800c568:	81a3      	strh	r3, [r4, #12]
 800c56a:	9b02      	ldr	r3, [sp, #8]
 800c56c:	6126      	str	r6, [r4, #16]
 800c56e:	18f6      	adds	r6, r6, r3
 800c570:	6026      	str	r6, [r4, #0]
 800c572:	6165      	str	r5, [r4, #20]
 800c574:	9e01      	ldr	r6, [sp, #4]
 800c576:	1aed      	subs	r5, r5, r3
 800c578:	60a5      	str	r5, [r4, #8]
 800c57a:	9b01      	ldr	r3, [sp, #4]
 800c57c:	429e      	cmp	r6, r3
 800c57e:	d900      	bls.n	800c582 <__ssputs_r+0x8e>
 800c580:	9e01      	ldr	r6, [sp, #4]
 800c582:	0032      	movs	r2, r6
 800c584:	9903      	ldr	r1, [sp, #12]
 800c586:	6820      	ldr	r0, [r4, #0]
 800c588:	f000 fb76 	bl	800cc78 <memmove>
 800c58c:	68a3      	ldr	r3, [r4, #8]
 800c58e:	2000      	movs	r0, #0
 800c590:	1b9b      	subs	r3, r3, r6
 800c592:	60a3      	str	r3, [r4, #8]
 800c594:	6823      	ldr	r3, [r4, #0]
 800c596:	199e      	adds	r6, r3, r6
 800c598:	6026      	str	r6, [r4, #0]
 800c59a:	e7da      	b.n	800c552 <__ssputs_r+0x5e>
 800c59c:	002a      	movs	r2, r5
 800c59e:	0038      	movs	r0, r7
 800c5a0:	f000 fb7d 	bl	800cc9e <_realloc_r>
 800c5a4:	1e06      	subs	r6, r0, #0
 800c5a6:	d1e0      	bne.n	800c56a <__ssputs_r+0x76>
 800c5a8:	0038      	movs	r0, r7
 800c5aa:	6921      	ldr	r1, [r4, #16]
 800c5ac:	f7fb fe6a 	bl	8008284 <_free_r>
 800c5b0:	e7c7      	b.n	800c542 <__ssputs_r+0x4e>
 800c5b2:	46c0      	nop			; (mov r8, r8)
 800c5b4:	fffffb7f 	.word	0xfffffb7f

0800c5b8 <_svfiprintf_r>:
 800c5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5ba:	b0a1      	sub	sp, #132	; 0x84
 800c5bc:	9003      	str	r0, [sp, #12]
 800c5be:	001d      	movs	r5, r3
 800c5c0:	898b      	ldrh	r3, [r1, #12]
 800c5c2:	000f      	movs	r7, r1
 800c5c4:	0016      	movs	r6, r2
 800c5c6:	061b      	lsls	r3, r3, #24
 800c5c8:	d511      	bpl.n	800c5ee <_svfiprintf_r+0x36>
 800c5ca:	690b      	ldr	r3, [r1, #16]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d10e      	bne.n	800c5ee <_svfiprintf_r+0x36>
 800c5d0:	2140      	movs	r1, #64	; 0x40
 800c5d2:	f7fb fec3 	bl	800835c <_malloc_r>
 800c5d6:	6038      	str	r0, [r7, #0]
 800c5d8:	6138      	str	r0, [r7, #16]
 800c5da:	2800      	cmp	r0, #0
 800c5dc:	d105      	bne.n	800c5ea <_svfiprintf_r+0x32>
 800c5de:	230c      	movs	r3, #12
 800c5e0:	9a03      	ldr	r2, [sp, #12]
 800c5e2:	3801      	subs	r0, #1
 800c5e4:	6013      	str	r3, [r2, #0]
 800c5e6:	b021      	add	sp, #132	; 0x84
 800c5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5ea:	2340      	movs	r3, #64	; 0x40
 800c5ec:	617b      	str	r3, [r7, #20]
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	ac08      	add	r4, sp, #32
 800c5f2:	6163      	str	r3, [r4, #20]
 800c5f4:	3320      	adds	r3, #32
 800c5f6:	7663      	strb	r3, [r4, #25]
 800c5f8:	3310      	adds	r3, #16
 800c5fa:	76a3      	strb	r3, [r4, #26]
 800c5fc:	9507      	str	r5, [sp, #28]
 800c5fe:	0035      	movs	r5, r6
 800c600:	782b      	ldrb	r3, [r5, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d001      	beq.n	800c60a <_svfiprintf_r+0x52>
 800c606:	2b25      	cmp	r3, #37	; 0x25
 800c608:	d147      	bne.n	800c69a <_svfiprintf_r+0xe2>
 800c60a:	1bab      	subs	r3, r5, r6
 800c60c:	9305      	str	r3, [sp, #20]
 800c60e:	42b5      	cmp	r5, r6
 800c610:	d00c      	beq.n	800c62c <_svfiprintf_r+0x74>
 800c612:	0032      	movs	r2, r6
 800c614:	0039      	movs	r1, r7
 800c616:	9803      	ldr	r0, [sp, #12]
 800c618:	f7ff ff6c 	bl	800c4f4 <__ssputs_r>
 800c61c:	1c43      	adds	r3, r0, #1
 800c61e:	d100      	bne.n	800c622 <_svfiprintf_r+0x6a>
 800c620:	e0ae      	b.n	800c780 <_svfiprintf_r+0x1c8>
 800c622:	6962      	ldr	r2, [r4, #20]
 800c624:	9b05      	ldr	r3, [sp, #20]
 800c626:	4694      	mov	ip, r2
 800c628:	4463      	add	r3, ip
 800c62a:	6163      	str	r3, [r4, #20]
 800c62c:	782b      	ldrb	r3, [r5, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d100      	bne.n	800c634 <_svfiprintf_r+0x7c>
 800c632:	e0a5      	b.n	800c780 <_svfiprintf_r+0x1c8>
 800c634:	2201      	movs	r2, #1
 800c636:	2300      	movs	r3, #0
 800c638:	4252      	negs	r2, r2
 800c63a:	6062      	str	r2, [r4, #4]
 800c63c:	a904      	add	r1, sp, #16
 800c63e:	3254      	adds	r2, #84	; 0x54
 800c640:	1852      	adds	r2, r2, r1
 800c642:	1c6e      	adds	r6, r5, #1
 800c644:	6023      	str	r3, [r4, #0]
 800c646:	60e3      	str	r3, [r4, #12]
 800c648:	60a3      	str	r3, [r4, #8]
 800c64a:	7013      	strb	r3, [r2, #0]
 800c64c:	65a3      	str	r3, [r4, #88]	; 0x58
 800c64e:	2205      	movs	r2, #5
 800c650:	7831      	ldrb	r1, [r6, #0]
 800c652:	4854      	ldr	r0, [pc, #336]	; (800c7a4 <_svfiprintf_r+0x1ec>)
 800c654:	f7ff fa3c 	bl	800bad0 <memchr>
 800c658:	1c75      	adds	r5, r6, #1
 800c65a:	2800      	cmp	r0, #0
 800c65c:	d11f      	bne.n	800c69e <_svfiprintf_r+0xe6>
 800c65e:	6822      	ldr	r2, [r4, #0]
 800c660:	06d3      	lsls	r3, r2, #27
 800c662:	d504      	bpl.n	800c66e <_svfiprintf_r+0xb6>
 800c664:	2353      	movs	r3, #83	; 0x53
 800c666:	a904      	add	r1, sp, #16
 800c668:	185b      	adds	r3, r3, r1
 800c66a:	2120      	movs	r1, #32
 800c66c:	7019      	strb	r1, [r3, #0]
 800c66e:	0713      	lsls	r3, r2, #28
 800c670:	d504      	bpl.n	800c67c <_svfiprintf_r+0xc4>
 800c672:	2353      	movs	r3, #83	; 0x53
 800c674:	a904      	add	r1, sp, #16
 800c676:	185b      	adds	r3, r3, r1
 800c678:	212b      	movs	r1, #43	; 0x2b
 800c67a:	7019      	strb	r1, [r3, #0]
 800c67c:	7833      	ldrb	r3, [r6, #0]
 800c67e:	2b2a      	cmp	r3, #42	; 0x2a
 800c680:	d016      	beq.n	800c6b0 <_svfiprintf_r+0xf8>
 800c682:	0035      	movs	r5, r6
 800c684:	2100      	movs	r1, #0
 800c686:	200a      	movs	r0, #10
 800c688:	68e3      	ldr	r3, [r4, #12]
 800c68a:	782a      	ldrb	r2, [r5, #0]
 800c68c:	1c6e      	adds	r6, r5, #1
 800c68e:	3a30      	subs	r2, #48	; 0x30
 800c690:	2a09      	cmp	r2, #9
 800c692:	d94e      	bls.n	800c732 <_svfiprintf_r+0x17a>
 800c694:	2900      	cmp	r1, #0
 800c696:	d111      	bne.n	800c6bc <_svfiprintf_r+0x104>
 800c698:	e017      	b.n	800c6ca <_svfiprintf_r+0x112>
 800c69a:	3501      	adds	r5, #1
 800c69c:	e7b0      	b.n	800c600 <_svfiprintf_r+0x48>
 800c69e:	4b41      	ldr	r3, [pc, #260]	; (800c7a4 <_svfiprintf_r+0x1ec>)
 800c6a0:	6822      	ldr	r2, [r4, #0]
 800c6a2:	1ac0      	subs	r0, r0, r3
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	4083      	lsls	r3, r0
 800c6a8:	4313      	orrs	r3, r2
 800c6aa:	002e      	movs	r6, r5
 800c6ac:	6023      	str	r3, [r4, #0]
 800c6ae:	e7ce      	b.n	800c64e <_svfiprintf_r+0x96>
 800c6b0:	9b07      	ldr	r3, [sp, #28]
 800c6b2:	1d19      	adds	r1, r3, #4
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	9107      	str	r1, [sp, #28]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	db01      	blt.n	800c6c0 <_svfiprintf_r+0x108>
 800c6bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6be:	e004      	b.n	800c6ca <_svfiprintf_r+0x112>
 800c6c0:	425b      	negs	r3, r3
 800c6c2:	60e3      	str	r3, [r4, #12]
 800c6c4:	2302      	movs	r3, #2
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	6023      	str	r3, [r4, #0]
 800c6ca:	782b      	ldrb	r3, [r5, #0]
 800c6cc:	2b2e      	cmp	r3, #46	; 0x2e
 800c6ce:	d10a      	bne.n	800c6e6 <_svfiprintf_r+0x12e>
 800c6d0:	786b      	ldrb	r3, [r5, #1]
 800c6d2:	2b2a      	cmp	r3, #42	; 0x2a
 800c6d4:	d135      	bne.n	800c742 <_svfiprintf_r+0x18a>
 800c6d6:	9b07      	ldr	r3, [sp, #28]
 800c6d8:	3502      	adds	r5, #2
 800c6da:	1d1a      	adds	r2, r3, #4
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	9207      	str	r2, [sp, #28]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	db2b      	blt.n	800c73c <_svfiprintf_r+0x184>
 800c6e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c6e6:	4e30      	ldr	r6, [pc, #192]	; (800c7a8 <_svfiprintf_r+0x1f0>)
 800c6e8:	2203      	movs	r2, #3
 800c6ea:	0030      	movs	r0, r6
 800c6ec:	7829      	ldrb	r1, [r5, #0]
 800c6ee:	f7ff f9ef 	bl	800bad0 <memchr>
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	d006      	beq.n	800c704 <_svfiprintf_r+0x14c>
 800c6f6:	2340      	movs	r3, #64	; 0x40
 800c6f8:	1b80      	subs	r0, r0, r6
 800c6fa:	4083      	lsls	r3, r0
 800c6fc:	6822      	ldr	r2, [r4, #0]
 800c6fe:	3501      	adds	r5, #1
 800c700:	4313      	orrs	r3, r2
 800c702:	6023      	str	r3, [r4, #0]
 800c704:	7829      	ldrb	r1, [r5, #0]
 800c706:	2206      	movs	r2, #6
 800c708:	4828      	ldr	r0, [pc, #160]	; (800c7ac <_svfiprintf_r+0x1f4>)
 800c70a:	1c6e      	adds	r6, r5, #1
 800c70c:	7621      	strb	r1, [r4, #24]
 800c70e:	f7ff f9df 	bl	800bad0 <memchr>
 800c712:	2800      	cmp	r0, #0
 800c714:	d03c      	beq.n	800c790 <_svfiprintf_r+0x1d8>
 800c716:	4b26      	ldr	r3, [pc, #152]	; (800c7b0 <_svfiprintf_r+0x1f8>)
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d125      	bne.n	800c768 <_svfiprintf_r+0x1b0>
 800c71c:	2207      	movs	r2, #7
 800c71e:	9b07      	ldr	r3, [sp, #28]
 800c720:	3307      	adds	r3, #7
 800c722:	4393      	bics	r3, r2
 800c724:	3308      	adds	r3, #8
 800c726:	9307      	str	r3, [sp, #28]
 800c728:	6963      	ldr	r3, [r4, #20]
 800c72a:	9a04      	ldr	r2, [sp, #16]
 800c72c:	189b      	adds	r3, r3, r2
 800c72e:	6163      	str	r3, [r4, #20]
 800c730:	e765      	b.n	800c5fe <_svfiprintf_r+0x46>
 800c732:	4343      	muls	r3, r0
 800c734:	0035      	movs	r5, r6
 800c736:	2101      	movs	r1, #1
 800c738:	189b      	adds	r3, r3, r2
 800c73a:	e7a6      	b.n	800c68a <_svfiprintf_r+0xd2>
 800c73c:	2301      	movs	r3, #1
 800c73e:	425b      	negs	r3, r3
 800c740:	e7d0      	b.n	800c6e4 <_svfiprintf_r+0x12c>
 800c742:	2300      	movs	r3, #0
 800c744:	200a      	movs	r0, #10
 800c746:	001a      	movs	r2, r3
 800c748:	3501      	adds	r5, #1
 800c74a:	6063      	str	r3, [r4, #4]
 800c74c:	7829      	ldrb	r1, [r5, #0]
 800c74e:	1c6e      	adds	r6, r5, #1
 800c750:	3930      	subs	r1, #48	; 0x30
 800c752:	2909      	cmp	r1, #9
 800c754:	d903      	bls.n	800c75e <_svfiprintf_r+0x1a6>
 800c756:	2b00      	cmp	r3, #0
 800c758:	d0c5      	beq.n	800c6e6 <_svfiprintf_r+0x12e>
 800c75a:	9209      	str	r2, [sp, #36]	; 0x24
 800c75c:	e7c3      	b.n	800c6e6 <_svfiprintf_r+0x12e>
 800c75e:	4342      	muls	r2, r0
 800c760:	0035      	movs	r5, r6
 800c762:	2301      	movs	r3, #1
 800c764:	1852      	adds	r2, r2, r1
 800c766:	e7f1      	b.n	800c74c <_svfiprintf_r+0x194>
 800c768:	ab07      	add	r3, sp, #28
 800c76a:	9300      	str	r3, [sp, #0]
 800c76c:	003a      	movs	r2, r7
 800c76e:	0021      	movs	r1, r4
 800c770:	4b10      	ldr	r3, [pc, #64]	; (800c7b4 <_svfiprintf_r+0x1fc>)
 800c772:	9803      	ldr	r0, [sp, #12]
 800c774:	f7fb ff12 	bl	800859c <_printf_float>
 800c778:	9004      	str	r0, [sp, #16]
 800c77a:	9b04      	ldr	r3, [sp, #16]
 800c77c:	3301      	adds	r3, #1
 800c77e:	d1d3      	bne.n	800c728 <_svfiprintf_r+0x170>
 800c780:	89bb      	ldrh	r3, [r7, #12]
 800c782:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c784:	065b      	lsls	r3, r3, #25
 800c786:	d400      	bmi.n	800c78a <_svfiprintf_r+0x1d2>
 800c788:	e72d      	b.n	800c5e6 <_svfiprintf_r+0x2e>
 800c78a:	2001      	movs	r0, #1
 800c78c:	4240      	negs	r0, r0
 800c78e:	e72a      	b.n	800c5e6 <_svfiprintf_r+0x2e>
 800c790:	ab07      	add	r3, sp, #28
 800c792:	9300      	str	r3, [sp, #0]
 800c794:	003a      	movs	r2, r7
 800c796:	0021      	movs	r1, r4
 800c798:	4b06      	ldr	r3, [pc, #24]	; (800c7b4 <_svfiprintf_r+0x1fc>)
 800c79a:	9803      	ldr	r0, [sp, #12]
 800c79c:	f7fc f9b0 	bl	8008b00 <_printf_i>
 800c7a0:	e7ea      	b.n	800c778 <_svfiprintf_r+0x1c0>
 800c7a2:	46c0      	nop			; (mov r8, r8)
 800c7a4:	0800da34 	.word	0x0800da34
 800c7a8:	0800da3a 	.word	0x0800da3a
 800c7ac:	0800da3e 	.word	0x0800da3e
 800c7b0:	0800859d 	.word	0x0800859d
 800c7b4:	0800c4f5 	.word	0x0800c4f5

0800c7b8 <__sfputc_r>:
 800c7b8:	6893      	ldr	r3, [r2, #8]
 800c7ba:	b510      	push	{r4, lr}
 800c7bc:	3b01      	subs	r3, #1
 800c7be:	6093      	str	r3, [r2, #8]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	da04      	bge.n	800c7ce <__sfputc_r+0x16>
 800c7c4:	6994      	ldr	r4, [r2, #24]
 800c7c6:	42a3      	cmp	r3, r4
 800c7c8:	db07      	blt.n	800c7da <__sfputc_r+0x22>
 800c7ca:	290a      	cmp	r1, #10
 800c7cc:	d005      	beq.n	800c7da <__sfputc_r+0x22>
 800c7ce:	6813      	ldr	r3, [r2, #0]
 800c7d0:	1c58      	adds	r0, r3, #1
 800c7d2:	6010      	str	r0, [r2, #0]
 800c7d4:	7019      	strb	r1, [r3, #0]
 800c7d6:	0008      	movs	r0, r1
 800c7d8:	bd10      	pop	{r4, pc}
 800c7da:	f7fd fc3d 	bl	800a058 <__swbuf_r>
 800c7de:	0001      	movs	r1, r0
 800c7e0:	e7f9      	b.n	800c7d6 <__sfputc_r+0x1e>

0800c7e2 <__sfputs_r>:
 800c7e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7e4:	0006      	movs	r6, r0
 800c7e6:	000f      	movs	r7, r1
 800c7e8:	0014      	movs	r4, r2
 800c7ea:	18d5      	adds	r5, r2, r3
 800c7ec:	42ac      	cmp	r4, r5
 800c7ee:	d101      	bne.n	800c7f4 <__sfputs_r+0x12>
 800c7f0:	2000      	movs	r0, #0
 800c7f2:	e007      	b.n	800c804 <__sfputs_r+0x22>
 800c7f4:	7821      	ldrb	r1, [r4, #0]
 800c7f6:	003a      	movs	r2, r7
 800c7f8:	0030      	movs	r0, r6
 800c7fa:	f7ff ffdd 	bl	800c7b8 <__sfputc_r>
 800c7fe:	3401      	adds	r4, #1
 800c800:	1c43      	adds	r3, r0, #1
 800c802:	d1f3      	bne.n	800c7ec <__sfputs_r+0xa>
 800c804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c808 <_vfiprintf_r>:
 800c808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c80a:	b0a1      	sub	sp, #132	; 0x84
 800c80c:	0006      	movs	r6, r0
 800c80e:	000c      	movs	r4, r1
 800c810:	001f      	movs	r7, r3
 800c812:	9203      	str	r2, [sp, #12]
 800c814:	2800      	cmp	r0, #0
 800c816:	d004      	beq.n	800c822 <_vfiprintf_r+0x1a>
 800c818:	6983      	ldr	r3, [r0, #24]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d101      	bne.n	800c822 <_vfiprintf_r+0x1a>
 800c81e:	f7fe fcbd 	bl	800b19c <__sinit>
 800c822:	4b8e      	ldr	r3, [pc, #568]	; (800ca5c <_vfiprintf_r+0x254>)
 800c824:	429c      	cmp	r4, r3
 800c826:	d11c      	bne.n	800c862 <_vfiprintf_r+0x5a>
 800c828:	6874      	ldr	r4, [r6, #4]
 800c82a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c82c:	07db      	lsls	r3, r3, #31
 800c82e:	d405      	bmi.n	800c83c <_vfiprintf_r+0x34>
 800c830:	89a3      	ldrh	r3, [r4, #12]
 800c832:	059b      	lsls	r3, r3, #22
 800c834:	d402      	bmi.n	800c83c <_vfiprintf_r+0x34>
 800c836:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c838:	f7ff f8c9 	bl	800b9ce <__retarget_lock_acquire_recursive>
 800c83c:	89a3      	ldrh	r3, [r4, #12]
 800c83e:	071b      	lsls	r3, r3, #28
 800c840:	d502      	bpl.n	800c848 <_vfiprintf_r+0x40>
 800c842:	6923      	ldr	r3, [r4, #16]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d11d      	bne.n	800c884 <_vfiprintf_r+0x7c>
 800c848:	0021      	movs	r1, r4
 800c84a:	0030      	movs	r0, r6
 800c84c:	f7fd fc5a 	bl	800a104 <__swsetup_r>
 800c850:	2800      	cmp	r0, #0
 800c852:	d017      	beq.n	800c884 <_vfiprintf_r+0x7c>
 800c854:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c856:	07db      	lsls	r3, r3, #31
 800c858:	d50d      	bpl.n	800c876 <_vfiprintf_r+0x6e>
 800c85a:	2001      	movs	r0, #1
 800c85c:	4240      	negs	r0, r0
 800c85e:	b021      	add	sp, #132	; 0x84
 800c860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c862:	4b7f      	ldr	r3, [pc, #508]	; (800ca60 <_vfiprintf_r+0x258>)
 800c864:	429c      	cmp	r4, r3
 800c866:	d101      	bne.n	800c86c <_vfiprintf_r+0x64>
 800c868:	68b4      	ldr	r4, [r6, #8]
 800c86a:	e7de      	b.n	800c82a <_vfiprintf_r+0x22>
 800c86c:	4b7d      	ldr	r3, [pc, #500]	; (800ca64 <_vfiprintf_r+0x25c>)
 800c86e:	429c      	cmp	r4, r3
 800c870:	d1db      	bne.n	800c82a <_vfiprintf_r+0x22>
 800c872:	68f4      	ldr	r4, [r6, #12]
 800c874:	e7d9      	b.n	800c82a <_vfiprintf_r+0x22>
 800c876:	89a3      	ldrh	r3, [r4, #12]
 800c878:	059b      	lsls	r3, r3, #22
 800c87a:	d4ee      	bmi.n	800c85a <_vfiprintf_r+0x52>
 800c87c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c87e:	f7ff f8a7 	bl	800b9d0 <__retarget_lock_release_recursive>
 800c882:	e7ea      	b.n	800c85a <_vfiprintf_r+0x52>
 800c884:	2300      	movs	r3, #0
 800c886:	ad08      	add	r5, sp, #32
 800c888:	616b      	str	r3, [r5, #20]
 800c88a:	3320      	adds	r3, #32
 800c88c:	766b      	strb	r3, [r5, #25]
 800c88e:	3310      	adds	r3, #16
 800c890:	76ab      	strb	r3, [r5, #26]
 800c892:	9707      	str	r7, [sp, #28]
 800c894:	9f03      	ldr	r7, [sp, #12]
 800c896:	783b      	ldrb	r3, [r7, #0]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d001      	beq.n	800c8a0 <_vfiprintf_r+0x98>
 800c89c:	2b25      	cmp	r3, #37	; 0x25
 800c89e:	d14e      	bne.n	800c93e <_vfiprintf_r+0x136>
 800c8a0:	9b03      	ldr	r3, [sp, #12]
 800c8a2:	1afb      	subs	r3, r7, r3
 800c8a4:	9305      	str	r3, [sp, #20]
 800c8a6:	9b03      	ldr	r3, [sp, #12]
 800c8a8:	429f      	cmp	r7, r3
 800c8aa:	d00d      	beq.n	800c8c8 <_vfiprintf_r+0xc0>
 800c8ac:	9b05      	ldr	r3, [sp, #20]
 800c8ae:	0021      	movs	r1, r4
 800c8b0:	0030      	movs	r0, r6
 800c8b2:	9a03      	ldr	r2, [sp, #12]
 800c8b4:	f7ff ff95 	bl	800c7e2 <__sfputs_r>
 800c8b8:	1c43      	adds	r3, r0, #1
 800c8ba:	d100      	bne.n	800c8be <_vfiprintf_r+0xb6>
 800c8bc:	e0b5      	b.n	800ca2a <_vfiprintf_r+0x222>
 800c8be:	696a      	ldr	r2, [r5, #20]
 800c8c0:	9b05      	ldr	r3, [sp, #20]
 800c8c2:	4694      	mov	ip, r2
 800c8c4:	4463      	add	r3, ip
 800c8c6:	616b      	str	r3, [r5, #20]
 800c8c8:	783b      	ldrb	r3, [r7, #0]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d100      	bne.n	800c8d0 <_vfiprintf_r+0xc8>
 800c8ce:	e0ac      	b.n	800ca2a <_vfiprintf_r+0x222>
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	1c7b      	adds	r3, r7, #1
 800c8d4:	9303      	str	r3, [sp, #12]
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	4252      	negs	r2, r2
 800c8da:	606a      	str	r2, [r5, #4]
 800c8dc:	a904      	add	r1, sp, #16
 800c8de:	3254      	adds	r2, #84	; 0x54
 800c8e0:	1852      	adds	r2, r2, r1
 800c8e2:	602b      	str	r3, [r5, #0]
 800c8e4:	60eb      	str	r3, [r5, #12]
 800c8e6:	60ab      	str	r3, [r5, #8]
 800c8e8:	7013      	strb	r3, [r2, #0]
 800c8ea:	65ab      	str	r3, [r5, #88]	; 0x58
 800c8ec:	9b03      	ldr	r3, [sp, #12]
 800c8ee:	2205      	movs	r2, #5
 800c8f0:	7819      	ldrb	r1, [r3, #0]
 800c8f2:	485d      	ldr	r0, [pc, #372]	; (800ca68 <_vfiprintf_r+0x260>)
 800c8f4:	f7ff f8ec 	bl	800bad0 <memchr>
 800c8f8:	9b03      	ldr	r3, [sp, #12]
 800c8fa:	1c5f      	adds	r7, r3, #1
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	d120      	bne.n	800c942 <_vfiprintf_r+0x13a>
 800c900:	682a      	ldr	r2, [r5, #0]
 800c902:	06d3      	lsls	r3, r2, #27
 800c904:	d504      	bpl.n	800c910 <_vfiprintf_r+0x108>
 800c906:	2353      	movs	r3, #83	; 0x53
 800c908:	a904      	add	r1, sp, #16
 800c90a:	185b      	adds	r3, r3, r1
 800c90c:	2120      	movs	r1, #32
 800c90e:	7019      	strb	r1, [r3, #0]
 800c910:	0713      	lsls	r3, r2, #28
 800c912:	d504      	bpl.n	800c91e <_vfiprintf_r+0x116>
 800c914:	2353      	movs	r3, #83	; 0x53
 800c916:	a904      	add	r1, sp, #16
 800c918:	185b      	adds	r3, r3, r1
 800c91a:	212b      	movs	r1, #43	; 0x2b
 800c91c:	7019      	strb	r1, [r3, #0]
 800c91e:	9b03      	ldr	r3, [sp, #12]
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	2b2a      	cmp	r3, #42	; 0x2a
 800c924:	d016      	beq.n	800c954 <_vfiprintf_r+0x14c>
 800c926:	2100      	movs	r1, #0
 800c928:	68eb      	ldr	r3, [r5, #12]
 800c92a:	9f03      	ldr	r7, [sp, #12]
 800c92c:	783a      	ldrb	r2, [r7, #0]
 800c92e:	1c78      	adds	r0, r7, #1
 800c930:	3a30      	subs	r2, #48	; 0x30
 800c932:	4684      	mov	ip, r0
 800c934:	2a09      	cmp	r2, #9
 800c936:	d94f      	bls.n	800c9d8 <_vfiprintf_r+0x1d0>
 800c938:	2900      	cmp	r1, #0
 800c93a:	d111      	bne.n	800c960 <_vfiprintf_r+0x158>
 800c93c:	e017      	b.n	800c96e <_vfiprintf_r+0x166>
 800c93e:	3701      	adds	r7, #1
 800c940:	e7a9      	b.n	800c896 <_vfiprintf_r+0x8e>
 800c942:	4b49      	ldr	r3, [pc, #292]	; (800ca68 <_vfiprintf_r+0x260>)
 800c944:	682a      	ldr	r2, [r5, #0]
 800c946:	1ac0      	subs	r0, r0, r3
 800c948:	2301      	movs	r3, #1
 800c94a:	4083      	lsls	r3, r0
 800c94c:	4313      	orrs	r3, r2
 800c94e:	602b      	str	r3, [r5, #0]
 800c950:	9703      	str	r7, [sp, #12]
 800c952:	e7cb      	b.n	800c8ec <_vfiprintf_r+0xe4>
 800c954:	9b07      	ldr	r3, [sp, #28]
 800c956:	1d19      	adds	r1, r3, #4
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	9107      	str	r1, [sp, #28]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	db01      	blt.n	800c964 <_vfiprintf_r+0x15c>
 800c960:	930b      	str	r3, [sp, #44]	; 0x2c
 800c962:	e004      	b.n	800c96e <_vfiprintf_r+0x166>
 800c964:	425b      	negs	r3, r3
 800c966:	60eb      	str	r3, [r5, #12]
 800c968:	2302      	movs	r3, #2
 800c96a:	4313      	orrs	r3, r2
 800c96c:	602b      	str	r3, [r5, #0]
 800c96e:	783b      	ldrb	r3, [r7, #0]
 800c970:	2b2e      	cmp	r3, #46	; 0x2e
 800c972:	d10a      	bne.n	800c98a <_vfiprintf_r+0x182>
 800c974:	787b      	ldrb	r3, [r7, #1]
 800c976:	2b2a      	cmp	r3, #42	; 0x2a
 800c978:	d137      	bne.n	800c9ea <_vfiprintf_r+0x1e2>
 800c97a:	9b07      	ldr	r3, [sp, #28]
 800c97c:	3702      	adds	r7, #2
 800c97e:	1d1a      	adds	r2, r3, #4
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	9207      	str	r2, [sp, #28]
 800c984:	2b00      	cmp	r3, #0
 800c986:	db2d      	blt.n	800c9e4 <_vfiprintf_r+0x1dc>
 800c988:	9309      	str	r3, [sp, #36]	; 0x24
 800c98a:	2203      	movs	r2, #3
 800c98c:	7839      	ldrb	r1, [r7, #0]
 800c98e:	4837      	ldr	r0, [pc, #220]	; (800ca6c <_vfiprintf_r+0x264>)
 800c990:	f7ff f89e 	bl	800bad0 <memchr>
 800c994:	2800      	cmp	r0, #0
 800c996:	d007      	beq.n	800c9a8 <_vfiprintf_r+0x1a0>
 800c998:	4b34      	ldr	r3, [pc, #208]	; (800ca6c <_vfiprintf_r+0x264>)
 800c99a:	682a      	ldr	r2, [r5, #0]
 800c99c:	1ac0      	subs	r0, r0, r3
 800c99e:	2340      	movs	r3, #64	; 0x40
 800c9a0:	4083      	lsls	r3, r0
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	3701      	adds	r7, #1
 800c9a6:	602b      	str	r3, [r5, #0]
 800c9a8:	7839      	ldrb	r1, [r7, #0]
 800c9aa:	1c7b      	adds	r3, r7, #1
 800c9ac:	2206      	movs	r2, #6
 800c9ae:	4830      	ldr	r0, [pc, #192]	; (800ca70 <_vfiprintf_r+0x268>)
 800c9b0:	9303      	str	r3, [sp, #12]
 800c9b2:	7629      	strb	r1, [r5, #24]
 800c9b4:	f7ff f88c 	bl	800bad0 <memchr>
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	d045      	beq.n	800ca48 <_vfiprintf_r+0x240>
 800c9bc:	4b2d      	ldr	r3, [pc, #180]	; (800ca74 <_vfiprintf_r+0x26c>)
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d127      	bne.n	800ca12 <_vfiprintf_r+0x20a>
 800c9c2:	2207      	movs	r2, #7
 800c9c4:	9b07      	ldr	r3, [sp, #28]
 800c9c6:	3307      	adds	r3, #7
 800c9c8:	4393      	bics	r3, r2
 800c9ca:	3308      	adds	r3, #8
 800c9cc:	9307      	str	r3, [sp, #28]
 800c9ce:	696b      	ldr	r3, [r5, #20]
 800c9d0:	9a04      	ldr	r2, [sp, #16]
 800c9d2:	189b      	adds	r3, r3, r2
 800c9d4:	616b      	str	r3, [r5, #20]
 800c9d6:	e75d      	b.n	800c894 <_vfiprintf_r+0x8c>
 800c9d8:	210a      	movs	r1, #10
 800c9da:	434b      	muls	r3, r1
 800c9dc:	4667      	mov	r7, ip
 800c9de:	189b      	adds	r3, r3, r2
 800c9e0:	3909      	subs	r1, #9
 800c9e2:	e7a3      	b.n	800c92c <_vfiprintf_r+0x124>
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	425b      	negs	r3, r3
 800c9e8:	e7ce      	b.n	800c988 <_vfiprintf_r+0x180>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	001a      	movs	r2, r3
 800c9ee:	3701      	adds	r7, #1
 800c9f0:	606b      	str	r3, [r5, #4]
 800c9f2:	7839      	ldrb	r1, [r7, #0]
 800c9f4:	1c78      	adds	r0, r7, #1
 800c9f6:	3930      	subs	r1, #48	; 0x30
 800c9f8:	4684      	mov	ip, r0
 800c9fa:	2909      	cmp	r1, #9
 800c9fc:	d903      	bls.n	800ca06 <_vfiprintf_r+0x1fe>
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d0c3      	beq.n	800c98a <_vfiprintf_r+0x182>
 800ca02:	9209      	str	r2, [sp, #36]	; 0x24
 800ca04:	e7c1      	b.n	800c98a <_vfiprintf_r+0x182>
 800ca06:	230a      	movs	r3, #10
 800ca08:	435a      	muls	r2, r3
 800ca0a:	4667      	mov	r7, ip
 800ca0c:	1852      	adds	r2, r2, r1
 800ca0e:	3b09      	subs	r3, #9
 800ca10:	e7ef      	b.n	800c9f2 <_vfiprintf_r+0x1ea>
 800ca12:	ab07      	add	r3, sp, #28
 800ca14:	9300      	str	r3, [sp, #0]
 800ca16:	0022      	movs	r2, r4
 800ca18:	0029      	movs	r1, r5
 800ca1a:	0030      	movs	r0, r6
 800ca1c:	4b16      	ldr	r3, [pc, #88]	; (800ca78 <_vfiprintf_r+0x270>)
 800ca1e:	f7fb fdbd 	bl	800859c <_printf_float>
 800ca22:	9004      	str	r0, [sp, #16]
 800ca24:	9b04      	ldr	r3, [sp, #16]
 800ca26:	3301      	adds	r3, #1
 800ca28:	d1d1      	bne.n	800c9ce <_vfiprintf_r+0x1c6>
 800ca2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca2c:	07db      	lsls	r3, r3, #31
 800ca2e:	d405      	bmi.n	800ca3c <_vfiprintf_r+0x234>
 800ca30:	89a3      	ldrh	r3, [r4, #12]
 800ca32:	059b      	lsls	r3, r3, #22
 800ca34:	d402      	bmi.n	800ca3c <_vfiprintf_r+0x234>
 800ca36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca38:	f7fe ffca 	bl	800b9d0 <__retarget_lock_release_recursive>
 800ca3c:	89a3      	ldrh	r3, [r4, #12]
 800ca3e:	065b      	lsls	r3, r3, #25
 800ca40:	d500      	bpl.n	800ca44 <_vfiprintf_r+0x23c>
 800ca42:	e70a      	b.n	800c85a <_vfiprintf_r+0x52>
 800ca44:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ca46:	e70a      	b.n	800c85e <_vfiprintf_r+0x56>
 800ca48:	ab07      	add	r3, sp, #28
 800ca4a:	9300      	str	r3, [sp, #0]
 800ca4c:	0022      	movs	r2, r4
 800ca4e:	0029      	movs	r1, r5
 800ca50:	0030      	movs	r0, r6
 800ca52:	4b09      	ldr	r3, [pc, #36]	; (800ca78 <_vfiprintf_r+0x270>)
 800ca54:	f7fc f854 	bl	8008b00 <_printf_i>
 800ca58:	e7e3      	b.n	800ca22 <_vfiprintf_r+0x21a>
 800ca5a:	46c0      	nop			; (mov r8, r8)
 800ca5c:	0800d81c 	.word	0x0800d81c
 800ca60:	0800d83c 	.word	0x0800d83c
 800ca64:	0800d7fc 	.word	0x0800d7fc
 800ca68:	0800da34 	.word	0x0800da34
 800ca6c:	0800da3a 	.word	0x0800da3a
 800ca70:	0800da3e 	.word	0x0800da3e
 800ca74:	0800859d 	.word	0x0800859d
 800ca78:	0800c7e3 	.word	0x0800c7e3

0800ca7c <nan>:
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	4901      	ldr	r1, [pc, #4]	; (800ca84 <nan+0x8>)
 800ca80:	4770      	bx	lr
 800ca82:	46c0      	nop			; (mov r8, r8)
 800ca84:	7ff80000 	.word	0x7ff80000

0800ca88 <__sread>:
 800ca88:	b570      	push	{r4, r5, r6, lr}
 800ca8a:	000c      	movs	r4, r1
 800ca8c:	250e      	movs	r5, #14
 800ca8e:	5f49      	ldrsh	r1, [r1, r5]
 800ca90:	f000 f934 	bl	800ccfc <_read_r>
 800ca94:	2800      	cmp	r0, #0
 800ca96:	db03      	blt.n	800caa0 <__sread+0x18>
 800ca98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ca9a:	181b      	adds	r3, r3, r0
 800ca9c:	6563      	str	r3, [r4, #84]	; 0x54
 800ca9e:	bd70      	pop	{r4, r5, r6, pc}
 800caa0:	89a3      	ldrh	r3, [r4, #12]
 800caa2:	4a02      	ldr	r2, [pc, #8]	; (800caac <__sread+0x24>)
 800caa4:	4013      	ands	r3, r2
 800caa6:	81a3      	strh	r3, [r4, #12]
 800caa8:	e7f9      	b.n	800ca9e <__sread+0x16>
 800caaa:	46c0      	nop			; (mov r8, r8)
 800caac:	ffffefff 	.word	0xffffefff

0800cab0 <__swrite>:
 800cab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cab2:	001f      	movs	r7, r3
 800cab4:	898b      	ldrh	r3, [r1, #12]
 800cab6:	0005      	movs	r5, r0
 800cab8:	000c      	movs	r4, r1
 800caba:	0016      	movs	r6, r2
 800cabc:	05db      	lsls	r3, r3, #23
 800cabe:	d505      	bpl.n	800cacc <__swrite+0x1c>
 800cac0:	230e      	movs	r3, #14
 800cac2:	5ec9      	ldrsh	r1, [r1, r3]
 800cac4:	2200      	movs	r2, #0
 800cac6:	2302      	movs	r3, #2
 800cac8:	f000 f8c2 	bl	800cc50 <_lseek_r>
 800cacc:	89a3      	ldrh	r3, [r4, #12]
 800cace:	4a05      	ldr	r2, [pc, #20]	; (800cae4 <__swrite+0x34>)
 800cad0:	0028      	movs	r0, r5
 800cad2:	4013      	ands	r3, r2
 800cad4:	81a3      	strh	r3, [r4, #12]
 800cad6:	0032      	movs	r2, r6
 800cad8:	230e      	movs	r3, #14
 800cada:	5ee1      	ldrsh	r1, [r4, r3]
 800cadc:	003b      	movs	r3, r7
 800cade:	f000 f83f 	bl	800cb60 <_write_r>
 800cae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cae4:	ffffefff 	.word	0xffffefff

0800cae8 <__sseek>:
 800cae8:	b570      	push	{r4, r5, r6, lr}
 800caea:	000c      	movs	r4, r1
 800caec:	250e      	movs	r5, #14
 800caee:	5f49      	ldrsh	r1, [r1, r5]
 800caf0:	f000 f8ae 	bl	800cc50 <_lseek_r>
 800caf4:	89a3      	ldrh	r3, [r4, #12]
 800caf6:	1c42      	adds	r2, r0, #1
 800caf8:	d103      	bne.n	800cb02 <__sseek+0x1a>
 800cafa:	4a05      	ldr	r2, [pc, #20]	; (800cb10 <__sseek+0x28>)
 800cafc:	4013      	ands	r3, r2
 800cafe:	81a3      	strh	r3, [r4, #12]
 800cb00:	bd70      	pop	{r4, r5, r6, pc}
 800cb02:	2280      	movs	r2, #128	; 0x80
 800cb04:	0152      	lsls	r2, r2, #5
 800cb06:	4313      	orrs	r3, r2
 800cb08:	81a3      	strh	r3, [r4, #12]
 800cb0a:	6560      	str	r0, [r4, #84]	; 0x54
 800cb0c:	e7f8      	b.n	800cb00 <__sseek+0x18>
 800cb0e:	46c0      	nop			; (mov r8, r8)
 800cb10:	ffffefff 	.word	0xffffefff

0800cb14 <__sclose>:
 800cb14:	b510      	push	{r4, lr}
 800cb16:	230e      	movs	r3, #14
 800cb18:	5ec9      	ldrsh	r1, [r1, r3]
 800cb1a:	f000 f853 	bl	800cbc4 <_close_r>
 800cb1e:	bd10      	pop	{r4, pc}

0800cb20 <strncmp>:
 800cb20:	b530      	push	{r4, r5, lr}
 800cb22:	0005      	movs	r5, r0
 800cb24:	1e10      	subs	r0, r2, #0
 800cb26:	d008      	beq.n	800cb3a <strncmp+0x1a>
 800cb28:	2400      	movs	r4, #0
 800cb2a:	3a01      	subs	r2, #1
 800cb2c:	5d2b      	ldrb	r3, [r5, r4]
 800cb2e:	5d08      	ldrb	r0, [r1, r4]
 800cb30:	4283      	cmp	r3, r0
 800cb32:	d101      	bne.n	800cb38 <strncmp+0x18>
 800cb34:	4294      	cmp	r4, r2
 800cb36:	d101      	bne.n	800cb3c <strncmp+0x1c>
 800cb38:	1a18      	subs	r0, r3, r0
 800cb3a:	bd30      	pop	{r4, r5, pc}
 800cb3c:	3401      	adds	r4, #1
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d1f4      	bne.n	800cb2c <strncmp+0xc>
 800cb42:	e7f9      	b.n	800cb38 <strncmp+0x18>

0800cb44 <__ascii_wctomb>:
 800cb44:	0003      	movs	r3, r0
 800cb46:	1e08      	subs	r0, r1, #0
 800cb48:	d005      	beq.n	800cb56 <__ascii_wctomb+0x12>
 800cb4a:	2aff      	cmp	r2, #255	; 0xff
 800cb4c:	d904      	bls.n	800cb58 <__ascii_wctomb+0x14>
 800cb4e:	228a      	movs	r2, #138	; 0x8a
 800cb50:	2001      	movs	r0, #1
 800cb52:	601a      	str	r2, [r3, #0]
 800cb54:	4240      	negs	r0, r0
 800cb56:	4770      	bx	lr
 800cb58:	2001      	movs	r0, #1
 800cb5a:	700a      	strb	r2, [r1, #0]
 800cb5c:	e7fb      	b.n	800cb56 <__ascii_wctomb+0x12>
	...

0800cb60 <_write_r>:
 800cb60:	b570      	push	{r4, r5, r6, lr}
 800cb62:	0004      	movs	r4, r0
 800cb64:	0008      	movs	r0, r1
 800cb66:	0011      	movs	r1, r2
 800cb68:	001a      	movs	r2, r3
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	4d05      	ldr	r5, [pc, #20]	; (800cb84 <_write_r+0x24>)
 800cb6e:	602b      	str	r3, [r5, #0]
 800cb70:	f7f5 fe13 	bl	800279a <_write>
 800cb74:	1c43      	adds	r3, r0, #1
 800cb76:	d103      	bne.n	800cb80 <_write_r+0x20>
 800cb78:	682b      	ldr	r3, [r5, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d000      	beq.n	800cb80 <_write_r+0x20>
 800cb7e:	6023      	str	r3, [r4, #0]
 800cb80:	bd70      	pop	{r4, r5, r6, pc}
 800cb82:	46c0      	nop			; (mov r8, r8)
 800cb84:	2000127c 	.word	0x2000127c

0800cb88 <__assert_func>:
 800cb88:	b530      	push	{r4, r5, lr}
 800cb8a:	0014      	movs	r4, r2
 800cb8c:	001a      	movs	r2, r3
 800cb8e:	4b09      	ldr	r3, [pc, #36]	; (800cbb4 <__assert_func+0x2c>)
 800cb90:	0005      	movs	r5, r0
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	b085      	sub	sp, #20
 800cb96:	68d8      	ldr	r0, [r3, #12]
 800cb98:	4b07      	ldr	r3, [pc, #28]	; (800cbb8 <__assert_func+0x30>)
 800cb9a:	2c00      	cmp	r4, #0
 800cb9c:	d101      	bne.n	800cba2 <__assert_func+0x1a>
 800cb9e:	4b07      	ldr	r3, [pc, #28]	; (800cbbc <__assert_func+0x34>)
 800cba0:	001c      	movs	r4, r3
 800cba2:	9301      	str	r3, [sp, #4]
 800cba4:	9100      	str	r1, [sp, #0]
 800cba6:	002b      	movs	r3, r5
 800cba8:	4905      	ldr	r1, [pc, #20]	; (800cbc0 <__assert_func+0x38>)
 800cbaa:	9402      	str	r4, [sp, #8]
 800cbac:	f000 f81c 	bl	800cbe8 <fiprintf>
 800cbb0:	f000 f8b8 	bl	800cd24 <abort>
 800cbb4:	20000010 	.word	0x20000010
 800cbb8:	0800da45 	.word	0x0800da45
 800cbbc:	0800da80 	.word	0x0800da80
 800cbc0:	0800da52 	.word	0x0800da52

0800cbc4 <_close_r>:
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	b570      	push	{r4, r5, r6, lr}
 800cbc8:	4d06      	ldr	r5, [pc, #24]	; (800cbe4 <_close_r+0x20>)
 800cbca:	0004      	movs	r4, r0
 800cbcc:	0008      	movs	r0, r1
 800cbce:	602b      	str	r3, [r5, #0]
 800cbd0:	f7f5 fdff 	bl	80027d2 <_close>
 800cbd4:	1c43      	adds	r3, r0, #1
 800cbd6:	d103      	bne.n	800cbe0 <_close_r+0x1c>
 800cbd8:	682b      	ldr	r3, [r5, #0]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d000      	beq.n	800cbe0 <_close_r+0x1c>
 800cbde:	6023      	str	r3, [r4, #0]
 800cbe0:	bd70      	pop	{r4, r5, r6, pc}
 800cbe2:	46c0      	nop			; (mov r8, r8)
 800cbe4:	2000127c 	.word	0x2000127c

0800cbe8 <fiprintf>:
 800cbe8:	b40e      	push	{r1, r2, r3}
 800cbea:	b503      	push	{r0, r1, lr}
 800cbec:	0001      	movs	r1, r0
 800cbee:	ab03      	add	r3, sp, #12
 800cbf0:	4804      	ldr	r0, [pc, #16]	; (800cc04 <fiprintf+0x1c>)
 800cbf2:	cb04      	ldmia	r3!, {r2}
 800cbf4:	6800      	ldr	r0, [r0, #0]
 800cbf6:	9301      	str	r3, [sp, #4]
 800cbf8:	f7ff fe06 	bl	800c808 <_vfiprintf_r>
 800cbfc:	b002      	add	sp, #8
 800cbfe:	bc08      	pop	{r3}
 800cc00:	b003      	add	sp, #12
 800cc02:	4718      	bx	r3
 800cc04:	20000010 	.word	0x20000010

0800cc08 <_fstat_r>:
 800cc08:	2300      	movs	r3, #0
 800cc0a:	b570      	push	{r4, r5, r6, lr}
 800cc0c:	4d06      	ldr	r5, [pc, #24]	; (800cc28 <_fstat_r+0x20>)
 800cc0e:	0004      	movs	r4, r0
 800cc10:	0008      	movs	r0, r1
 800cc12:	0011      	movs	r1, r2
 800cc14:	602b      	str	r3, [r5, #0]
 800cc16:	f7f5 fde6 	bl	80027e6 <_fstat>
 800cc1a:	1c43      	adds	r3, r0, #1
 800cc1c:	d103      	bne.n	800cc26 <_fstat_r+0x1e>
 800cc1e:	682b      	ldr	r3, [r5, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d000      	beq.n	800cc26 <_fstat_r+0x1e>
 800cc24:	6023      	str	r3, [r4, #0]
 800cc26:	bd70      	pop	{r4, r5, r6, pc}
 800cc28:	2000127c 	.word	0x2000127c

0800cc2c <_isatty_r>:
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	b570      	push	{r4, r5, r6, lr}
 800cc30:	4d06      	ldr	r5, [pc, #24]	; (800cc4c <_isatty_r+0x20>)
 800cc32:	0004      	movs	r4, r0
 800cc34:	0008      	movs	r0, r1
 800cc36:	602b      	str	r3, [r5, #0]
 800cc38:	f7f5 fde3 	bl	8002802 <_isatty>
 800cc3c:	1c43      	adds	r3, r0, #1
 800cc3e:	d103      	bne.n	800cc48 <_isatty_r+0x1c>
 800cc40:	682b      	ldr	r3, [r5, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d000      	beq.n	800cc48 <_isatty_r+0x1c>
 800cc46:	6023      	str	r3, [r4, #0]
 800cc48:	bd70      	pop	{r4, r5, r6, pc}
 800cc4a:	46c0      	nop			; (mov r8, r8)
 800cc4c:	2000127c 	.word	0x2000127c

0800cc50 <_lseek_r>:
 800cc50:	b570      	push	{r4, r5, r6, lr}
 800cc52:	0004      	movs	r4, r0
 800cc54:	0008      	movs	r0, r1
 800cc56:	0011      	movs	r1, r2
 800cc58:	001a      	movs	r2, r3
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	4d05      	ldr	r5, [pc, #20]	; (800cc74 <_lseek_r+0x24>)
 800cc5e:	602b      	str	r3, [r5, #0]
 800cc60:	f7f5 fdd8 	bl	8002814 <_lseek>
 800cc64:	1c43      	adds	r3, r0, #1
 800cc66:	d103      	bne.n	800cc70 <_lseek_r+0x20>
 800cc68:	682b      	ldr	r3, [r5, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d000      	beq.n	800cc70 <_lseek_r+0x20>
 800cc6e:	6023      	str	r3, [r4, #0]
 800cc70:	bd70      	pop	{r4, r5, r6, pc}
 800cc72:	46c0      	nop			; (mov r8, r8)
 800cc74:	2000127c 	.word	0x2000127c

0800cc78 <memmove>:
 800cc78:	b510      	push	{r4, lr}
 800cc7a:	4288      	cmp	r0, r1
 800cc7c:	d902      	bls.n	800cc84 <memmove+0xc>
 800cc7e:	188b      	adds	r3, r1, r2
 800cc80:	4298      	cmp	r0, r3
 800cc82:	d303      	bcc.n	800cc8c <memmove+0x14>
 800cc84:	2300      	movs	r3, #0
 800cc86:	e007      	b.n	800cc98 <memmove+0x20>
 800cc88:	5c8b      	ldrb	r3, [r1, r2]
 800cc8a:	5483      	strb	r3, [r0, r2]
 800cc8c:	3a01      	subs	r2, #1
 800cc8e:	d2fb      	bcs.n	800cc88 <memmove+0x10>
 800cc90:	bd10      	pop	{r4, pc}
 800cc92:	5ccc      	ldrb	r4, [r1, r3]
 800cc94:	54c4      	strb	r4, [r0, r3]
 800cc96:	3301      	adds	r3, #1
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d1fa      	bne.n	800cc92 <memmove+0x1a>
 800cc9c:	e7f8      	b.n	800cc90 <memmove+0x18>

0800cc9e <_realloc_r>:
 800cc9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cca0:	0007      	movs	r7, r0
 800cca2:	000e      	movs	r6, r1
 800cca4:	0014      	movs	r4, r2
 800cca6:	2900      	cmp	r1, #0
 800cca8:	d105      	bne.n	800ccb6 <_realloc_r+0x18>
 800ccaa:	0011      	movs	r1, r2
 800ccac:	f7fb fb56 	bl	800835c <_malloc_r>
 800ccb0:	0005      	movs	r5, r0
 800ccb2:	0028      	movs	r0, r5
 800ccb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ccb6:	2a00      	cmp	r2, #0
 800ccb8:	d103      	bne.n	800ccc2 <_realloc_r+0x24>
 800ccba:	f7fb fae3 	bl	8008284 <_free_r>
 800ccbe:	0025      	movs	r5, r4
 800ccc0:	e7f7      	b.n	800ccb2 <_realloc_r+0x14>
 800ccc2:	f000 f836 	bl	800cd32 <_malloc_usable_size_r>
 800ccc6:	9001      	str	r0, [sp, #4]
 800ccc8:	4284      	cmp	r4, r0
 800ccca:	d803      	bhi.n	800ccd4 <_realloc_r+0x36>
 800cccc:	0035      	movs	r5, r6
 800ccce:	0843      	lsrs	r3, r0, #1
 800ccd0:	42a3      	cmp	r3, r4
 800ccd2:	d3ee      	bcc.n	800ccb2 <_realloc_r+0x14>
 800ccd4:	0021      	movs	r1, r4
 800ccd6:	0038      	movs	r0, r7
 800ccd8:	f7fb fb40 	bl	800835c <_malloc_r>
 800ccdc:	1e05      	subs	r5, r0, #0
 800ccde:	d0e8      	beq.n	800ccb2 <_realloc_r+0x14>
 800cce0:	9b01      	ldr	r3, [sp, #4]
 800cce2:	0022      	movs	r2, r4
 800cce4:	429c      	cmp	r4, r3
 800cce6:	d900      	bls.n	800ccea <_realloc_r+0x4c>
 800cce8:	001a      	movs	r2, r3
 800ccea:	0031      	movs	r1, r6
 800ccec:	0028      	movs	r0, r5
 800ccee:	f7fb fab7 	bl	8008260 <memcpy>
 800ccf2:	0031      	movs	r1, r6
 800ccf4:	0038      	movs	r0, r7
 800ccf6:	f7fb fac5 	bl	8008284 <_free_r>
 800ccfa:	e7da      	b.n	800ccb2 <_realloc_r+0x14>

0800ccfc <_read_r>:
 800ccfc:	b570      	push	{r4, r5, r6, lr}
 800ccfe:	0004      	movs	r4, r0
 800cd00:	0008      	movs	r0, r1
 800cd02:	0011      	movs	r1, r2
 800cd04:	001a      	movs	r2, r3
 800cd06:	2300      	movs	r3, #0
 800cd08:	4d05      	ldr	r5, [pc, #20]	; (800cd20 <_read_r+0x24>)
 800cd0a:	602b      	str	r3, [r5, #0]
 800cd0c:	f7f5 fd28 	bl	8002760 <_read>
 800cd10:	1c43      	adds	r3, r0, #1
 800cd12:	d103      	bne.n	800cd1c <_read_r+0x20>
 800cd14:	682b      	ldr	r3, [r5, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d000      	beq.n	800cd1c <_read_r+0x20>
 800cd1a:	6023      	str	r3, [r4, #0]
 800cd1c:	bd70      	pop	{r4, r5, r6, pc}
 800cd1e:	46c0      	nop			; (mov r8, r8)
 800cd20:	2000127c 	.word	0x2000127c

0800cd24 <abort>:
 800cd24:	2006      	movs	r0, #6
 800cd26:	b510      	push	{r4, lr}
 800cd28:	f000 f836 	bl	800cd98 <raise>
 800cd2c:	2001      	movs	r0, #1
 800cd2e:	f7f5 fd0b 	bl	8002748 <_exit>

0800cd32 <_malloc_usable_size_r>:
 800cd32:	1f0b      	subs	r3, r1, #4
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	1f18      	subs	r0, r3, #4
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	da01      	bge.n	800cd40 <_malloc_usable_size_r+0xe>
 800cd3c:	580b      	ldr	r3, [r1, r0]
 800cd3e:	18c0      	adds	r0, r0, r3
 800cd40:	4770      	bx	lr

0800cd42 <_raise_r>:
 800cd42:	b570      	push	{r4, r5, r6, lr}
 800cd44:	0004      	movs	r4, r0
 800cd46:	000d      	movs	r5, r1
 800cd48:	291f      	cmp	r1, #31
 800cd4a:	d904      	bls.n	800cd56 <_raise_r+0x14>
 800cd4c:	2316      	movs	r3, #22
 800cd4e:	6003      	str	r3, [r0, #0]
 800cd50:	2001      	movs	r0, #1
 800cd52:	4240      	negs	r0, r0
 800cd54:	bd70      	pop	{r4, r5, r6, pc}
 800cd56:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d004      	beq.n	800cd66 <_raise_r+0x24>
 800cd5c:	008a      	lsls	r2, r1, #2
 800cd5e:	189b      	adds	r3, r3, r2
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	2a00      	cmp	r2, #0
 800cd64:	d108      	bne.n	800cd78 <_raise_r+0x36>
 800cd66:	0020      	movs	r0, r4
 800cd68:	f000 f832 	bl	800cdd0 <_getpid_r>
 800cd6c:	002a      	movs	r2, r5
 800cd6e:	0001      	movs	r1, r0
 800cd70:	0020      	movs	r0, r4
 800cd72:	f000 f81b 	bl	800cdac <_kill_r>
 800cd76:	e7ed      	b.n	800cd54 <_raise_r+0x12>
 800cd78:	2000      	movs	r0, #0
 800cd7a:	2a01      	cmp	r2, #1
 800cd7c:	d0ea      	beq.n	800cd54 <_raise_r+0x12>
 800cd7e:	1c51      	adds	r1, r2, #1
 800cd80:	d103      	bne.n	800cd8a <_raise_r+0x48>
 800cd82:	2316      	movs	r3, #22
 800cd84:	3001      	adds	r0, #1
 800cd86:	6023      	str	r3, [r4, #0]
 800cd88:	e7e4      	b.n	800cd54 <_raise_r+0x12>
 800cd8a:	2400      	movs	r4, #0
 800cd8c:	0028      	movs	r0, r5
 800cd8e:	601c      	str	r4, [r3, #0]
 800cd90:	4790      	blx	r2
 800cd92:	0020      	movs	r0, r4
 800cd94:	e7de      	b.n	800cd54 <_raise_r+0x12>
	...

0800cd98 <raise>:
 800cd98:	b510      	push	{r4, lr}
 800cd9a:	4b03      	ldr	r3, [pc, #12]	; (800cda8 <raise+0x10>)
 800cd9c:	0001      	movs	r1, r0
 800cd9e:	6818      	ldr	r0, [r3, #0]
 800cda0:	f7ff ffcf 	bl	800cd42 <_raise_r>
 800cda4:	bd10      	pop	{r4, pc}
 800cda6:	46c0      	nop			; (mov r8, r8)
 800cda8:	20000010 	.word	0x20000010

0800cdac <_kill_r>:
 800cdac:	2300      	movs	r3, #0
 800cdae:	b570      	push	{r4, r5, r6, lr}
 800cdb0:	4d06      	ldr	r5, [pc, #24]	; (800cdcc <_kill_r+0x20>)
 800cdb2:	0004      	movs	r4, r0
 800cdb4:	0008      	movs	r0, r1
 800cdb6:	0011      	movs	r1, r2
 800cdb8:	602b      	str	r3, [r5, #0]
 800cdba:	f7f5 fcb5 	bl	8002728 <_kill>
 800cdbe:	1c43      	adds	r3, r0, #1
 800cdc0:	d103      	bne.n	800cdca <_kill_r+0x1e>
 800cdc2:	682b      	ldr	r3, [r5, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d000      	beq.n	800cdca <_kill_r+0x1e>
 800cdc8:	6023      	str	r3, [r4, #0]
 800cdca:	bd70      	pop	{r4, r5, r6, pc}
 800cdcc:	2000127c 	.word	0x2000127c

0800cdd0 <_getpid_r>:
 800cdd0:	b510      	push	{r4, lr}
 800cdd2:	f7f5 fca3 	bl	800271c <_getpid>
 800cdd6:	bd10      	pop	{r4, pc}

0800cdd8 <_init>:
 800cdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdda:	46c0      	nop			; (mov r8, r8)
 800cddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdde:	bc08      	pop	{r3}
 800cde0:	469e      	mov	lr, r3
 800cde2:	4770      	bx	lr

0800cde4 <_fini>:
 800cde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cde6:	46c0      	nop			; (mov r8, r8)
 800cde8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdea:	bc08      	pop	{r3}
 800cdec:	469e      	mov	lr, r3
 800cdee:	4770      	bx	lr
