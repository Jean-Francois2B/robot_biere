
robot_biere.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b28  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  08004be0  08004be0  00014be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052c0  080052c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080052c0  080052c0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052c0  080052c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052c0  080052c0  000152c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052c4  080052c4  000152c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080052c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000070  08005338  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08005338  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c785  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c0  00000000  00000000  0002c81d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  0002e9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000870  00000000  00000000  0002f348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001685c  00000000  00000000  0002fbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d4e1  00000000  00000000  00046414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000855ea  00000000  00000000  000538f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8edf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002820  00000000  00000000  000d8f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004bc8 	.word	0x08004bc8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08004bc8 	.word	0x08004bc8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_d2uiz>:
 80003ec:	b570      	push	{r4, r5, r6, lr}
 80003ee:	2200      	movs	r2, #0
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <__aeabi_d2uiz+0x38>)
 80003f2:	0004      	movs	r4, r0
 80003f4:	000d      	movs	r5, r1
 80003f6:	f000 ff51 	bl	800129c <__aeabi_dcmpge>
 80003fa:	2800      	cmp	r0, #0
 80003fc:	d104      	bne.n	8000408 <__aeabi_d2uiz+0x1c>
 80003fe:	0020      	movs	r0, r4
 8000400:	0029      	movs	r1, r5
 8000402:	f000 fe99 	bl	8001138 <__aeabi_d2iz>
 8000406:	bd70      	pop	{r4, r5, r6, pc}
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <__aeabi_d2uiz+0x38>)
 800040a:	2200      	movs	r2, #0
 800040c:	0020      	movs	r0, r4
 800040e:	0029      	movs	r1, r5
 8000410:	f000 fb00 	bl	8000a14 <__aeabi_dsub>
 8000414:	f000 fe90 	bl	8001138 <__aeabi_d2iz>
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	061b      	lsls	r3, r3, #24
 800041c:	469c      	mov	ip, r3
 800041e:	4460      	add	r0, ip
 8000420:	e7f1      	b.n	8000406 <__aeabi_d2uiz+0x1a>
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	41e00000 	.word	0x41e00000

08000428 <__aeabi_ddiv>:
 8000428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042a:	4657      	mov	r7, sl
 800042c:	464e      	mov	r6, r9
 800042e:	4645      	mov	r5, r8
 8000430:	46de      	mov	lr, fp
 8000432:	b5e0      	push	{r5, r6, r7, lr}
 8000434:	4681      	mov	r9, r0
 8000436:	0005      	movs	r5, r0
 8000438:	030c      	lsls	r4, r1, #12
 800043a:	0048      	lsls	r0, r1, #1
 800043c:	4692      	mov	sl, r2
 800043e:	001f      	movs	r7, r3
 8000440:	b085      	sub	sp, #20
 8000442:	0b24      	lsrs	r4, r4, #12
 8000444:	0d40      	lsrs	r0, r0, #21
 8000446:	0fce      	lsrs	r6, r1, #31
 8000448:	2800      	cmp	r0, #0
 800044a:	d100      	bne.n	800044e <__aeabi_ddiv+0x26>
 800044c:	e156      	b.n	80006fc <__aeabi_ddiv+0x2d4>
 800044e:	4bd4      	ldr	r3, [pc, #848]	; (80007a0 <__aeabi_ddiv+0x378>)
 8000450:	4298      	cmp	r0, r3
 8000452:	d100      	bne.n	8000456 <__aeabi_ddiv+0x2e>
 8000454:	e172      	b.n	800073c <__aeabi_ddiv+0x314>
 8000456:	0f6b      	lsrs	r3, r5, #29
 8000458:	00e4      	lsls	r4, r4, #3
 800045a:	431c      	orrs	r4, r3
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	041b      	lsls	r3, r3, #16
 8000460:	4323      	orrs	r3, r4
 8000462:	4698      	mov	r8, r3
 8000464:	4bcf      	ldr	r3, [pc, #828]	; (80007a4 <__aeabi_ddiv+0x37c>)
 8000466:	00ed      	lsls	r5, r5, #3
 8000468:	469b      	mov	fp, r3
 800046a:	2300      	movs	r3, #0
 800046c:	4699      	mov	r9, r3
 800046e:	4483      	add	fp, r0
 8000470:	9300      	str	r3, [sp, #0]
 8000472:	033c      	lsls	r4, r7, #12
 8000474:	007b      	lsls	r3, r7, #1
 8000476:	4650      	mov	r0, sl
 8000478:	0b24      	lsrs	r4, r4, #12
 800047a:	0d5b      	lsrs	r3, r3, #21
 800047c:	0fff      	lsrs	r7, r7, #31
 800047e:	2b00      	cmp	r3, #0
 8000480:	d100      	bne.n	8000484 <__aeabi_ddiv+0x5c>
 8000482:	e11f      	b.n	80006c4 <__aeabi_ddiv+0x29c>
 8000484:	4ac6      	ldr	r2, [pc, #792]	; (80007a0 <__aeabi_ddiv+0x378>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d100      	bne.n	800048c <__aeabi_ddiv+0x64>
 800048a:	e162      	b.n	8000752 <__aeabi_ddiv+0x32a>
 800048c:	49c5      	ldr	r1, [pc, #788]	; (80007a4 <__aeabi_ddiv+0x37c>)
 800048e:	0f42      	lsrs	r2, r0, #29
 8000490:	468c      	mov	ip, r1
 8000492:	00e4      	lsls	r4, r4, #3
 8000494:	4659      	mov	r1, fp
 8000496:	4314      	orrs	r4, r2
 8000498:	2280      	movs	r2, #128	; 0x80
 800049a:	4463      	add	r3, ip
 800049c:	0412      	lsls	r2, r2, #16
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	4314      	orrs	r4, r2
 80004a2:	469b      	mov	fp, r3
 80004a4:	00c2      	lsls	r2, r0, #3
 80004a6:	2000      	movs	r0, #0
 80004a8:	0033      	movs	r3, r6
 80004aa:	407b      	eors	r3, r7
 80004ac:	469a      	mov	sl, r3
 80004ae:	464b      	mov	r3, r9
 80004b0:	2b0f      	cmp	r3, #15
 80004b2:	d827      	bhi.n	8000504 <__aeabi_ddiv+0xdc>
 80004b4:	49bc      	ldr	r1, [pc, #752]	; (80007a8 <__aeabi_ddiv+0x380>)
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	58cb      	ldr	r3, [r1, r3]
 80004ba:	469f      	mov	pc, r3
 80004bc:	46b2      	mov	sl, r6
 80004be:	9b00      	ldr	r3, [sp, #0]
 80004c0:	2b02      	cmp	r3, #2
 80004c2:	d016      	beq.n	80004f2 <__aeabi_ddiv+0xca>
 80004c4:	2b03      	cmp	r3, #3
 80004c6:	d100      	bne.n	80004ca <__aeabi_ddiv+0xa2>
 80004c8:	e28e      	b.n	80009e8 <__aeabi_ddiv+0x5c0>
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d000      	beq.n	80004d0 <__aeabi_ddiv+0xa8>
 80004ce:	e0d9      	b.n	8000684 <__aeabi_ddiv+0x25c>
 80004d0:	2300      	movs	r3, #0
 80004d2:	2400      	movs	r4, #0
 80004d4:	2500      	movs	r5, #0
 80004d6:	4652      	mov	r2, sl
 80004d8:	051b      	lsls	r3, r3, #20
 80004da:	4323      	orrs	r3, r4
 80004dc:	07d2      	lsls	r2, r2, #31
 80004de:	4313      	orrs	r3, r2
 80004e0:	0028      	movs	r0, r5
 80004e2:	0019      	movs	r1, r3
 80004e4:	b005      	add	sp, #20
 80004e6:	bcf0      	pop	{r4, r5, r6, r7}
 80004e8:	46bb      	mov	fp, r7
 80004ea:	46b2      	mov	sl, r6
 80004ec:	46a9      	mov	r9, r5
 80004ee:	46a0      	mov	r8, r4
 80004f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f2:	2400      	movs	r4, #0
 80004f4:	2500      	movs	r5, #0
 80004f6:	4baa      	ldr	r3, [pc, #680]	; (80007a0 <__aeabi_ddiv+0x378>)
 80004f8:	e7ed      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80004fa:	46ba      	mov	sl, r7
 80004fc:	46a0      	mov	r8, r4
 80004fe:	0015      	movs	r5, r2
 8000500:	9000      	str	r0, [sp, #0]
 8000502:	e7dc      	b.n	80004be <__aeabi_ddiv+0x96>
 8000504:	4544      	cmp	r4, r8
 8000506:	d200      	bcs.n	800050a <__aeabi_ddiv+0xe2>
 8000508:	e1c7      	b.n	800089a <__aeabi_ddiv+0x472>
 800050a:	d100      	bne.n	800050e <__aeabi_ddiv+0xe6>
 800050c:	e1c2      	b.n	8000894 <__aeabi_ddiv+0x46c>
 800050e:	2301      	movs	r3, #1
 8000510:	425b      	negs	r3, r3
 8000512:	469c      	mov	ip, r3
 8000514:	002e      	movs	r6, r5
 8000516:	4640      	mov	r0, r8
 8000518:	2500      	movs	r5, #0
 800051a:	44e3      	add	fp, ip
 800051c:	0223      	lsls	r3, r4, #8
 800051e:	0e14      	lsrs	r4, r2, #24
 8000520:	431c      	orrs	r4, r3
 8000522:	0c1b      	lsrs	r3, r3, #16
 8000524:	4699      	mov	r9, r3
 8000526:	0423      	lsls	r3, r4, #16
 8000528:	0c1f      	lsrs	r7, r3, #16
 800052a:	0212      	lsls	r2, r2, #8
 800052c:	4649      	mov	r1, r9
 800052e:	9200      	str	r2, [sp, #0]
 8000530:	9701      	str	r7, [sp, #4]
 8000532:	f7ff fe6b 	bl	800020c <__aeabi_uidivmod>
 8000536:	0002      	movs	r2, r0
 8000538:	437a      	muls	r2, r7
 800053a:	040b      	lsls	r3, r1, #16
 800053c:	0c31      	lsrs	r1, r6, #16
 800053e:	4680      	mov	r8, r0
 8000540:	4319      	orrs	r1, r3
 8000542:	428a      	cmp	r2, r1
 8000544:	d907      	bls.n	8000556 <__aeabi_ddiv+0x12e>
 8000546:	2301      	movs	r3, #1
 8000548:	425b      	negs	r3, r3
 800054a:	469c      	mov	ip, r3
 800054c:	1909      	adds	r1, r1, r4
 800054e:	44e0      	add	r8, ip
 8000550:	428c      	cmp	r4, r1
 8000552:	d800      	bhi.n	8000556 <__aeabi_ddiv+0x12e>
 8000554:	e207      	b.n	8000966 <__aeabi_ddiv+0x53e>
 8000556:	1a88      	subs	r0, r1, r2
 8000558:	4649      	mov	r1, r9
 800055a:	f7ff fe57 	bl	800020c <__aeabi_uidivmod>
 800055e:	0409      	lsls	r1, r1, #16
 8000560:	468c      	mov	ip, r1
 8000562:	0431      	lsls	r1, r6, #16
 8000564:	4666      	mov	r6, ip
 8000566:	9a01      	ldr	r2, [sp, #4]
 8000568:	0c09      	lsrs	r1, r1, #16
 800056a:	4342      	muls	r2, r0
 800056c:	0003      	movs	r3, r0
 800056e:	4331      	orrs	r1, r6
 8000570:	428a      	cmp	r2, r1
 8000572:	d904      	bls.n	800057e <__aeabi_ddiv+0x156>
 8000574:	1909      	adds	r1, r1, r4
 8000576:	3b01      	subs	r3, #1
 8000578:	428c      	cmp	r4, r1
 800057a:	d800      	bhi.n	800057e <__aeabi_ddiv+0x156>
 800057c:	e1ed      	b.n	800095a <__aeabi_ddiv+0x532>
 800057e:	1a88      	subs	r0, r1, r2
 8000580:	4642      	mov	r2, r8
 8000582:	0412      	lsls	r2, r2, #16
 8000584:	431a      	orrs	r2, r3
 8000586:	4690      	mov	r8, r2
 8000588:	4641      	mov	r1, r8
 800058a:	9b00      	ldr	r3, [sp, #0]
 800058c:	040e      	lsls	r6, r1, #16
 800058e:	0c1b      	lsrs	r3, r3, #16
 8000590:	001f      	movs	r7, r3
 8000592:	9302      	str	r3, [sp, #8]
 8000594:	9b00      	ldr	r3, [sp, #0]
 8000596:	0c36      	lsrs	r6, r6, #16
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	0c19      	lsrs	r1, r3, #16
 800059c:	000b      	movs	r3, r1
 800059e:	4373      	muls	r3, r6
 80005a0:	0c12      	lsrs	r2, r2, #16
 80005a2:	437e      	muls	r6, r7
 80005a4:	9103      	str	r1, [sp, #12]
 80005a6:	4351      	muls	r1, r2
 80005a8:	437a      	muls	r2, r7
 80005aa:	0c1f      	lsrs	r7, r3, #16
 80005ac:	46bc      	mov	ip, r7
 80005ae:	1876      	adds	r6, r6, r1
 80005b0:	4466      	add	r6, ip
 80005b2:	42b1      	cmp	r1, r6
 80005b4:	d903      	bls.n	80005be <__aeabi_ddiv+0x196>
 80005b6:	2180      	movs	r1, #128	; 0x80
 80005b8:	0249      	lsls	r1, r1, #9
 80005ba:	468c      	mov	ip, r1
 80005bc:	4462      	add	r2, ip
 80005be:	0c31      	lsrs	r1, r6, #16
 80005c0:	188a      	adds	r2, r1, r2
 80005c2:	0431      	lsls	r1, r6, #16
 80005c4:	041e      	lsls	r6, r3, #16
 80005c6:	0c36      	lsrs	r6, r6, #16
 80005c8:	198e      	adds	r6, r1, r6
 80005ca:	4290      	cmp	r0, r2
 80005cc:	d302      	bcc.n	80005d4 <__aeabi_ddiv+0x1ac>
 80005ce:	d112      	bne.n	80005f6 <__aeabi_ddiv+0x1ce>
 80005d0:	42b5      	cmp	r5, r6
 80005d2:	d210      	bcs.n	80005f6 <__aeabi_ddiv+0x1ce>
 80005d4:	4643      	mov	r3, r8
 80005d6:	1e59      	subs	r1, r3, #1
 80005d8:	9b00      	ldr	r3, [sp, #0]
 80005da:	469c      	mov	ip, r3
 80005dc:	4465      	add	r5, ip
 80005de:	001f      	movs	r7, r3
 80005e0:	429d      	cmp	r5, r3
 80005e2:	419b      	sbcs	r3, r3
 80005e4:	425b      	negs	r3, r3
 80005e6:	191b      	adds	r3, r3, r4
 80005e8:	18c0      	adds	r0, r0, r3
 80005ea:	4284      	cmp	r4, r0
 80005ec:	d200      	bcs.n	80005f0 <__aeabi_ddiv+0x1c8>
 80005ee:	e1a0      	b.n	8000932 <__aeabi_ddiv+0x50a>
 80005f0:	d100      	bne.n	80005f4 <__aeabi_ddiv+0x1cc>
 80005f2:	e19b      	b.n	800092c <__aeabi_ddiv+0x504>
 80005f4:	4688      	mov	r8, r1
 80005f6:	1bae      	subs	r6, r5, r6
 80005f8:	42b5      	cmp	r5, r6
 80005fa:	41ad      	sbcs	r5, r5
 80005fc:	1a80      	subs	r0, r0, r2
 80005fe:	426d      	negs	r5, r5
 8000600:	1b40      	subs	r0, r0, r5
 8000602:	4284      	cmp	r4, r0
 8000604:	d100      	bne.n	8000608 <__aeabi_ddiv+0x1e0>
 8000606:	e1d5      	b.n	80009b4 <__aeabi_ddiv+0x58c>
 8000608:	4649      	mov	r1, r9
 800060a:	f7ff fdff 	bl	800020c <__aeabi_uidivmod>
 800060e:	9a01      	ldr	r2, [sp, #4]
 8000610:	040b      	lsls	r3, r1, #16
 8000612:	4342      	muls	r2, r0
 8000614:	0c31      	lsrs	r1, r6, #16
 8000616:	0005      	movs	r5, r0
 8000618:	4319      	orrs	r1, r3
 800061a:	428a      	cmp	r2, r1
 800061c:	d900      	bls.n	8000620 <__aeabi_ddiv+0x1f8>
 800061e:	e16c      	b.n	80008fa <__aeabi_ddiv+0x4d2>
 8000620:	1a88      	subs	r0, r1, r2
 8000622:	4649      	mov	r1, r9
 8000624:	f7ff fdf2 	bl	800020c <__aeabi_uidivmod>
 8000628:	9a01      	ldr	r2, [sp, #4]
 800062a:	0436      	lsls	r6, r6, #16
 800062c:	4342      	muls	r2, r0
 800062e:	0409      	lsls	r1, r1, #16
 8000630:	0c36      	lsrs	r6, r6, #16
 8000632:	0003      	movs	r3, r0
 8000634:	430e      	orrs	r6, r1
 8000636:	42b2      	cmp	r2, r6
 8000638:	d900      	bls.n	800063c <__aeabi_ddiv+0x214>
 800063a:	e153      	b.n	80008e4 <__aeabi_ddiv+0x4bc>
 800063c:	9803      	ldr	r0, [sp, #12]
 800063e:	1ab6      	subs	r6, r6, r2
 8000640:	0002      	movs	r2, r0
 8000642:	042d      	lsls	r5, r5, #16
 8000644:	431d      	orrs	r5, r3
 8000646:	9f02      	ldr	r7, [sp, #8]
 8000648:	042b      	lsls	r3, r5, #16
 800064a:	0c1b      	lsrs	r3, r3, #16
 800064c:	435a      	muls	r2, r3
 800064e:	437b      	muls	r3, r7
 8000650:	469c      	mov	ip, r3
 8000652:	0c29      	lsrs	r1, r5, #16
 8000654:	4348      	muls	r0, r1
 8000656:	0c13      	lsrs	r3, r2, #16
 8000658:	4484      	add	ip, r0
 800065a:	4463      	add	r3, ip
 800065c:	4379      	muls	r1, r7
 800065e:	4298      	cmp	r0, r3
 8000660:	d903      	bls.n	800066a <__aeabi_ddiv+0x242>
 8000662:	2080      	movs	r0, #128	; 0x80
 8000664:	0240      	lsls	r0, r0, #9
 8000666:	4684      	mov	ip, r0
 8000668:	4461      	add	r1, ip
 800066a:	0c18      	lsrs	r0, r3, #16
 800066c:	0412      	lsls	r2, r2, #16
 800066e:	041b      	lsls	r3, r3, #16
 8000670:	0c12      	lsrs	r2, r2, #16
 8000672:	1841      	adds	r1, r0, r1
 8000674:	189b      	adds	r3, r3, r2
 8000676:	428e      	cmp	r6, r1
 8000678:	d200      	bcs.n	800067c <__aeabi_ddiv+0x254>
 800067a:	e0ff      	b.n	800087c <__aeabi_ddiv+0x454>
 800067c:	d100      	bne.n	8000680 <__aeabi_ddiv+0x258>
 800067e:	e0fa      	b.n	8000876 <__aeabi_ddiv+0x44e>
 8000680:	2301      	movs	r3, #1
 8000682:	431d      	orrs	r5, r3
 8000684:	4a49      	ldr	r2, [pc, #292]	; (80007ac <__aeabi_ddiv+0x384>)
 8000686:	445a      	add	r2, fp
 8000688:	2a00      	cmp	r2, #0
 800068a:	dc00      	bgt.n	800068e <__aeabi_ddiv+0x266>
 800068c:	e0aa      	b.n	80007e4 <__aeabi_ddiv+0x3bc>
 800068e:	076b      	lsls	r3, r5, #29
 8000690:	d000      	beq.n	8000694 <__aeabi_ddiv+0x26c>
 8000692:	e13d      	b.n	8000910 <__aeabi_ddiv+0x4e8>
 8000694:	08ed      	lsrs	r5, r5, #3
 8000696:	4643      	mov	r3, r8
 8000698:	01db      	lsls	r3, r3, #7
 800069a:	d506      	bpl.n	80006aa <__aeabi_ddiv+0x282>
 800069c:	4642      	mov	r2, r8
 800069e:	4b44      	ldr	r3, [pc, #272]	; (80007b0 <__aeabi_ddiv+0x388>)
 80006a0:	401a      	ands	r2, r3
 80006a2:	4690      	mov	r8, r2
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	00d2      	lsls	r2, r2, #3
 80006a8:	445a      	add	r2, fp
 80006aa:	4b42      	ldr	r3, [pc, #264]	; (80007b4 <__aeabi_ddiv+0x38c>)
 80006ac:	429a      	cmp	r2, r3
 80006ae:	dd00      	ble.n	80006b2 <__aeabi_ddiv+0x28a>
 80006b0:	e71f      	b.n	80004f2 <__aeabi_ddiv+0xca>
 80006b2:	4643      	mov	r3, r8
 80006b4:	075b      	lsls	r3, r3, #29
 80006b6:	431d      	orrs	r5, r3
 80006b8:	4643      	mov	r3, r8
 80006ba:	0552      	lsls	r2, r2, #21
 80006bc:	025c      	lsls	r4, r3, #9
 80006be:	0b24      	lsrs	r4, r4, #12
 80006c0:	0d53      	lsrs	r3, r2, #21
 80006c2:	e708      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80006c4:	4652      	mov	r2, sl
 80006c6:	4322      	orrs	r2, r4
 80006c8:	d100      	bne.n	80006cc <__aeabi_ddiv+0x2a4>
 80006ca:	e07b      	b.n	80007c4 <__aeabi_ddiv+0x39c>
 80006cc:	2c00      	cmp	r4, #0
 80006ce:	d100      	bne.n	80006d2 <__aeabi_ddiv+0x2aa>
 80006d0:	e0fa      	b.n	80008c8 <__aeabi_ddiv+0x4a0>
 80006d2:	0020      	movs	r0, r4
 80006d4:	f000 fdec 	bl	80012b0 <__clzsi2>
 80006d8:	0002      	movs	r2, r0
 80006da:	3a0b      	subs	r2, #11
 80006dc:	231d      	movs	r3, #29
 80006de:	0001      	movs	r1, r0
 80006e0:	1a9b      	subs	r3, r3, r2
 80006e2:	4652      	mov	r2, sl
 80006e4:	3908      	subs	r1, #8
 80006e6:	40da      	lsrs	r2, r3
 80006e8:	408c      	lsls	r4, r1
 80006ea:	4314      	orrs	r4, r2
 80006ec:	4652      	mov	r2, sl
 80006ee:	408a      	lsls	r2, r1
 80006f0:	4b31      	ldr	r3, [pc, #196]	; (80007b8 <__aeabi_ddiv+0x390>)
 80006f2:	4458      	add	r0, fp
 80006f4:	469b      	mov	fp, r3
 80006f6:	4483      	add	fp, r0
 80006f8:	2000      	movs	r0, #0
 80006fa:	e6d5      	b.n	80004a8 <__aeabi_ddiv+0x80>
 80006fc:	464b      	mov	r3, r9
 80006fe:	4323      	orrs	r3, r4
 8000700:	4698      	mov	r8, r3
 8000702:	d044      	beq.n	800078e <__aeabi_ddiv+0x366>
 8000704:	2c00      	cmp	r4, #0
 8000706:	d100      	bne.n	800070a <__aeabi_ddiv+0x2e2>
 8000708:	e0ce      	b.n	80008a8 <__aeabi_ddiv+0x480>
 800070a:	0020      	movs	r0, r4
 800070c:	f000 fdd0 	bl	80012b0 <__clzsi2>
 8000710:	0001      	movs	r1, r0
 8000712:	0002      	movs	r2, r0
 8000714:	390b      	subs	r1, #11
 8000716:	231d      	movs	r3, #29
 8000718:	1a5b      	subs	r3, r3, r1
 800071a:	4649      	mov	r1, r9
 800071c:	0010      	movs	r0, r2
 800071e:	40d9      	lsrs	r1, r3
 8000720:	3808      	subs	r0, #8
 8000722:	4084      	lsls	r4, r0
 8000724:	000b      	movs	r3, r1
 8000726:	464d      	mov	r5, r9
 8000728:	4323      	orrs	r3, r4
 800072a:	4698      	mov	r8, r3
 800072c:	4085      	lsls	r5, r0
 800072e:	4823      	ldr	r0, [pc, #140]	; (80007bc <__aeabi_ddiv+0x394>)
 8000730:	1a83      	subs	r3, r0, r2
 8000732:	469b      	mov	fp, r3
 8000734:	2300      	movs	r3, #0
 8000736:	4699      	mov	r9, r3
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	e69a      	b.n	8000472 <__aeabi_ddiv+0x4a>
 800073c:	464b      	mov	r3, r9
 800073e:	4323      	orrs	r3, r4
 8000740:	4698      	mov	r8, r3
 8000742:	d11d      	bne.n	8000780 <__aeabi_ddiv+0x358>
 8000744:	2308      	movs	r3, #8
 8000746:	4699      	mov	r9, r3
 8000748:	3b06      	subs	r3, #6
 800074a:	2500      	movs	r5, #0
 800074c:	4683      	mov	fp, r0
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	e68f      	b.n	8000472 <__aeabi_ddiv+0x4a>
 8000752:	4652      	mov	r2, sl
 8000754:	4322      	orrs	r2, r4
 8000756:	d109      	bne.n	800076c <__aeabi_ddiv+0x344>
 8000758:	2302      	movs	r3, #2
 800075a:	4649      	mov	r1, r9
 800075c:	4319      	orrs	r1, r3
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <__aeabi_ddiv+0x398>)
 8000760:	4689      	mov	r9, r1
 8000762:	469c      	mov	ip, r3
 8000764:	2400      	movs	r4, #0
 8000766:	2002      	movs	r0, #2
 8000768:	44e3      	add	fp, ip
 800076a:	e69d      	b.n	80004a8 <__aeabi_ddiv+0x80>
 800076c:	2303      	movs	r3, #3
 800076e:	464a      	mov	r2, r9
 8000770:	431a      	orrs	r2, r3
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <__aeabi_ddiv+0x398>)
 8000774:	4691      	mov	r9, r2
 8000776:	469c      	mov	ip, r3
 8000778:	4652      	mov	r2, sl
 800077a:	2003      	movs	r0, #3
 800077c:	44e3      	add	fp, ip
 800077e:	e693      	b.n	80004a8 <__aeabi_ddiv+0x80>
 8000780:	230c      	movs	r3, #12
 8000782:	4699      	mov	r9, r3
 8000784:	3b09      	subs	r3, #9
 8000786:	46a0      	mov	r8, r4
 8000788:	4683      	mov	fp, r0
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	e671      	b.n	8000472 <__aeabi_ddiv+0x4a>
 800078e:	2304      	movs	r3, #4
 8000790:	4699      	mov	r9, r3
 8000792:	2300      	movs	r3, #0
 8000794:	469b      	mov	fp, r3
 8000796:	3301      	adds	r3, #1
 8000798:	2500      	movs	r5, #0
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	e669      	b.n	8000472 <__aeabi_ddiv+0x4a>
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	000007ff 	.word	0x000007ff
 80007a4:	fffffc01 	.word	0xfffffc01
 80007a8:	08005194 	.word	0x08005194
 80007ac:	000003ff 	.word	0x000003ff
 80007b0:	feffffff 	.word	0xfeffffff
 80007b4:	000007fe 	.word	0x000007fe
 80007b8:	000003f3 	.word	0x000003f3
 80007bc:	fffffc0d 	.word	0xfffffc0d
 80007c0:	fffff801 	.word	0xfffff801
 80007c4:	4649      	mov	r1, r9
 80007c6:	2301      	movs	r3, #1
 80007c8:	4319      	orrs	r1, r3
 80007ca:	4689      	mov	r9, r1
 80007cc:	2400      	movs	r4, #0
 80007ce:	2001      	movs	r0, #1
 80007d0:	e66a      	b.n	80004a8 <__aeabi_ddiv+0x80>
 80007d2:	2300      	movs	r3, #0
 80007d4:	2480      	movs	r4, #128	; 0x80
 80007d6:	469a      	mov	sl, r3
 80007d8:	2500      	movs	r5, #0
 80007da:	4b8a      	ldr	r3, [pc, #552]	; (8000a04 <__aeabi_ddiv+0x5dc>)
 80007dc:	0324      	lsls	r4, r4, #12
 80007de:	e67a      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80007e0:	2501      	movs	r5, #1
 80007e2:	426d      	negs	r5, r5
 80007e4:	2301      	movs	r3, #1
 80007e6:	1a9b      	subs	r3, r3, r2
 80007e8:	2b38      	cmp	r3, #56	; 0x38
 80007ea:	dd00      	ble.n	80007ee <__aeabi_ddiv+0x3c6>
 80007ec:	e670      	b.n	80004d0 <__aeabi_ddiv+0xa8>
 80007ee:	2b1f      	cmp	r3, #31
 80007f0:	dc00      	bgt.n	80007f4 <__aeabi_ddiv+0x3cc>
 80007f2:	e0bf      	b.n	8000974 <__aeabi_ddiv+0x54c>
 80007f4:	211f      	movs	r1, #31
 80007f6:	4249      	negs	r1, r1
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	4641      	mov	r1, r8
 80007fc:	40d1      	lsrs	r1, r2
 80007fe:	000a      	movs	r2, r1
 8000800:	2b20      	cmp	r3, #32
 8000802:	d004      	beq.n	800080e <__aeabi_ddiv+0x3e6>
 8000804:	4641      	mov	r1, r8
 8000806:	4b80      	ldr	r3, [pc, #512]	; (8000a08 <__aeabi_ddiv+0x5e0>)
 8000808:	445b      	add	r3, fp
 800080a:	4099      	lsls	r1, r3
 800080c:	430d      	orrs	r5, r1
 800080e:	1e6b      	subs	r3, r5, #1
 8000810:	419d      	sbcs	r5, r3
 8000812:	2307      	movs	r3, #7
 8000814:	432a      	orrs	r2, r5
 8000816:	001d      	movs	r5, r3
 8000818:	2400      	movs	r4, #0
 800081a:	4015      	ands	r5, r2
 800081c:	4213      	tst	r3, r2
 800081e:	d100      	bne.n	8000822 <__aeabi_ddiv+0x3fa>
 8000820:	e0d4      	b.n	80009cc <__aeabi_ddiv+0x5a4>
 8000822:	210f      	movs	r1, #15
 8000824:	2300      	movs	r3, #0
 8000826:	4011      	ands	r1, r2
 8000828:	2904      	cmp	r1, #4
 800082a:	d100      	bne.n	800082e <__aeabi_ddiv+0x406>
 800082c:	e0cb      	b.n	80009c6 <__aeabi_ddiv+0x59e>
 800082e:	1d11      	adds	r1, r2, #4
 8000830:	4291      	cmp	r1, r2
 8000832:	4192      	sbcs	r2, r2
 8000834:	4252      	negs	r2, r2
 8000836:	189b      	adds	r3, r3, r2
 8000838:	000a      	movs	r2, r1
 800083a:	0219      	lsls	r1, r3, #8
 800083c:	d400      	bmi.n	8000840 <__aeabi_ddiv+0x418>
 800083e:	e0c2      	b.n	80009c6 <__aeabi_ddiv+0x59e>
 8000840:	2301      	movs	r3, #1
 8000842:	2400      	movs	r4, #0
 8000844:	2500      	movs	r5, #0
 8000846:	e646      	b.n	80004d6 <__aeabi_ddiv+0xae>
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	4641      	mov	r1, r8
 800084c:	031b      	lsls	r3, r3, #12
 800084e:	4219      	tst	r1, r3
 8000850:	d008      	beq.n	8000864 <__aeabi_ddiv+0x43c>
 8000852:	421c      	tst	r4, r3
 8000854:	d106      	bne.n	8000864 <__aeabi_ddiv+0x43c>
 8000856:	431c      	orrs	r4, r3
 8000858:	0324      	lsls	r4, r4, #12
 800085a:	46ba      	mov	sl, r7
 800085c:	0015      	movs	r5, r2
 800085e:	4b69      	ldr	r3, [pc, #420]	; (8000a04 <__aeabi_ddiv+0x5dc>)
 8000860:	0b24      	lsrs	r4, r4, #12
 8000862:	e638      	b.n	80004d6 <__aeabi_ddiv+0xae>
 8000864:	2480      	movs	r4, #128	; 0x80
 8000866:	4643      	mov	r3, r8
 8000868:	0324      	lsls	r4, r4, #12
 800086a:	431c      	orrs	r4, r3
 800086c:	0324      	lsls	r4, r4, #12
 800086e:	46b2      	mov	sl, r6
 8000870:	4b64      	ldr	r3, [pc, #400]	; (8000a04 <__aeabi_ddiv+0x5dc>)
 8000872:	0b24      	lsrs	r4, r4, #12
 8000874:	e62f      	b.n	80004d6 <__aeabi_ddiv+0xae>
 8000876:	2b00      	cmp	r3, #0
 8000878:	d100      	bne.n	800087c <__aeabi_ddiv+0x454>
 800087a:	e703      	b.n	8000684 <__aeabi_ddiv+0x25c>
 800087c:	19a6      	adds	r6, r4, r6
 800087e:	1e68      	subs	r0, r5, #1
 8000880:	42a6      	cmp	r6, r4
 8000882:	d200      	bcs.n	8000886 <__aeabi_ddiv+0x45e>
 8000884:	e08d      	b.n	80009a2 <__aeabi_ddiv+0x57a>
 8000886:	428e      	cmp	r6, r1
 8000888:	d200      	bcs.n	800088c <__aeabi_ddiv+0x464>
 800088a:	e0a3      	b.n	80009d4 <__aeabi_ddiv+0x5ac>
 800088c:	d100      	bne.n	8000890 <__aeabi_ddiv+0x468>
 800088e:	e0b3      	b.n	80009f8 <__aeabi_ddiv+0x5d0>
 8000890:	0005      	movs	r5, r0
 8000892:	e6f5      	b.n	8000680 <__aeabi_ddiv+0x258>
 8000894:	42aa      	cmp	r2, r5
 8000896:	d900      	bls.n	800089a <__aeabi_ddiv+0x472>
 8000898:	e639      	b.n	800050e <__aeabi_ddiv+0xe6>
 800089a:	4643      	mov	r3, r8
 800089c:	07de      	lsls	r6, r3, #31
 800089e:	0858      	lsrs	r0, r3, #1
 80008a0:	086b      	lsrs	r3, r5, #1
 80008a2:	431e      	orrs	r6, r3
 80008a4:	07ed      	lsls	r5, r5, #31
 80008a6:	e639      	b.n	800051c <__aeabi_ddiv+0xf4>
 80008a8:	4648      	mov	r0, r9
 80008aa:	f000 fd01 	bl	80012b0 <__clzsi2>
 80008ae:	0001      	movs	r1, r0
 80008b0:	0002      	movs	r2, r0
 80008b2:	3115      	adds	r1, #21
 80008b4:	3220      	adds	r2, #32
 80008b6:	291c      	cmp	r1, #28
 80008b8:	dc00      	bgt.n	80008bc <__aeabi_ddiv+0x494>
 80008ba:	e72c      	b.n	8000716 <__aeabi_ddiv+0x2ee>
 80008bc:	464b      	mov	r3, r9
 80008be:	3808      	subs	r0, #8
 80008c0:	4083      	lsls	r3, r0
 80008c2:	2500      	movs	r5, #0
 80008c4:	4698      	mov	r8, r3
 80008c6:	e732      	b.n	800072e <__aeabi_ddiv+0x306>
 80008c8:	f000 fcf2 	bl	80012b0 <__clzsi2>
 80008cc:	0003      	movs	r3, r0
 80008ce:	001a      	movs	r2, r3
 80008d0:	3215      	adds	r2, #21
 80008d2:	3020      	adds	r0, #32
 80008d4:	2a1c      	cmp	r2, #28
 80008d6:	dc00      	bgt.n	80008da <__aeabi_ddiv+0x4b2>
 80008d8:	e700      	b.n	80006dc <__aeabi_ddiv+0x2b4>
 80008da:	4654      	mov	r4, sl
 80008dc:	3b08      	subs	r3, #8
 80008de:	2200      	movs	r2, #0
 80008e0:	409c      	lsls	r4, r3
 80008e2:	e705      	b.n	80006f0 <__aeabi_ddiv+0x2c8>
 80008e4:	1936      	adds	r6, r6, r4
 80008e6:	3b01      	subs	r3, #1
 80008e8:	42b4      	cmp	r4, r6
 80008ea:	d900      	bls.n	80008ee <__aeabi_ddiv+0x4c6>
 80008ec:	e6a6      	b.n	800063c <__aeabi_ddiv+0x214>
 80008ee:	42b2      	cmp	r2, r6
 80008f0:	d800      	bhi.n	80008f4 <__aeabi_ddiv+0x4cc>
 80008f2:	e6a3      	b.n	800063c <__aeabi_ddiv+0x214>
 80008f4:	1e83      	subs	r3, r0, #2
 80008f6:	1936      	adds	r6, r6, r4
 80008f8:	e6a0      	b.n	800063c <__aeabi_ddiv+0x214>
 80008fa:	1909      	adds	r1, r1, r4
 80008fc:	3d01      	subs	r5, #1
 80008fe:	428c      	cmp	r4, r1
 8000900:	d900      	bls.n	8000904 <__aeabi_ddiv+0x4dc>
 8000902:	e68d      	b.n	8000620 <__aeabi_ddiv+0x1f8>
 8000904:	428a      	cmp	r2, r1
 8000906:	d800      	bhi.n	800090a <__aeabi_ddiv+0x4e2>
 8000908:	e68a      	b.n	8000620 <__aeabi_ddiv+0x1f8>
 800090a:	1e85      	subs	r5, r0, #2
 800090c:	1909      	adds	r1, r1, r4
 800090e:	e687      	b.n	8000620 <__aeabi_ddiv+0x1f8>
 8000910:	230f      	movs	r3, #15
 8000912:	402b      	ands	r3, r5
 8000914:	2b04      	cmp	r3, #4
 8000916:	d100      	bne.n	800091a <__aeabi_ddiv+0x4f2>
 8000918:	e6bc      	b.n	8000694 <__aeabi_ddiv+0x26c>
 800091a:	2305      	movs	r3, #5
 800091c:	425b      	negs	r3, r3
 800091e:	42ab      	cmp	r3, r5
 8000920:	419b      	sbcs	r3, r3
 8000922:	3504      	adds	r5, #4
 8000924:	425b      	negs	r3, r3
 8000926:	08ed      	lsrs	r5, r5, #3
 8000928:	4498      	add	r8, r3
 800092a:	e6b4      	b.n	8000696 <__aeabi_ddiv+0x26e>
 800092c:	42af      	cmp	r7, r5
 800092e:	d900      	bls.n	8000932 <__aeabi_ddiv+0x50a>
 8000930:	e660      	b.n	80005f4 <__aeabi_ddiv+0x1cc>
 8000932:	4282      	cmp	r2, r0
 8000934:	d804      	bhi.n	8000940 <__aeabi_ddiv+0x518>
 8000936:	d000      	beq.n	800093a <__aeabi_ddiv+0x512>
 8000938:	e65c      	b.n	80005f4 <__aeabi_ddiv+0x1cc>
 800093a:	42ae      	cmp	r6, r5
 800093c:	d800      	bhi.n	8000940 <__aeabi_ddiv+0x518>
 800093e:	e659      	b.n	80005f4 <__aeabi_ddiv+0x1cc>
 8000940:	2302      	movs	r3, #2
 8000942:	425b      	negs	r3, r3
 8000944:	469c      	mov	ip, r3
 8000946:	9b00      	ldr	r3, [sp, #0]
 8000948:	44e0      	add	r8, ip
 800094a:	469c      	mov	ip, r3
 800094c:	4465      	add	r5, ip
 800094e:	429d      	cmp	r5, r3
 8000950:	419b      	sbcs	r3, r3
 8000952:	425b      	negs	r3, r3
 8000954:	191b      	adds	r3, r3, r4
 8000956:	18c0      	adds	r0, r0, r3
 8000958:	e64d      	b.n	80005f6 <__aeabi_ddiv+0x1ce>
 800095a:	428a      	cmp	r2, r1
 800095c:	d800      	bhi.n	8000960 <__aeabi_ddiv+0x538>
 800095e:	e60e      	b.n	800057e <__aeabi_ddiv+0x156>
 8000960:	1e83      	subs	r3, r0, #2
 8000962:	1909      	adds	r1, r1, r4
 8000964:	e60b      	b.n	800057e <__aeabi_ddiv+0x156>
 8000966:	428a      	cmp	r2, r1
 8000968:	d800      	bhi.n	800096c <__aeabi_ddiv+0x544>
 800096a:	e5f4      	b.n	8000556 <__aeabi_ddiv+0x12e>
 800096c:	1e83      	subs	r3, r0, #2
 800096e:	4698      	mov	r8, r3
 8000970:	1909      	adds	r1, r1, r4
 8000972:	e5f0      	b.n	8000556 <__aeabi_ddiv+0x12e>
 8000974:	4925      	ldr	r1, [pc, #148]	; (8000a0c <__aeabi_ddiv+0x5e4>)
 8000976:	0028      	movs	r0, r5
 8000978:	4459      	add	r1, fp
 800097a:	408d      	lsls	r5, r1
 800097c:	4642      	mov	r2, r8
 800097e:	408a      	lsls	r2, r1
 8000980:	1e69      	subs	r1, r5, #1
 8000982:	418d      	sbcs	r5, r1
 8000984:	4641      	mov	r1, r8
 8000986:	40d8      	lsrs	r0, r3
 8000988:	40d9      	lsrs	r1, r3
 800098a:	4302      	orrs	r2, r0
 800098c:	432a      	orrs	r2, r5
 800098e:	000b      	movs	r3, r1
 8000990:	0751      	lsls	r1, r2, #29
 8000992:	d100      	bne.n	8000996 <__aeabi_ddiv+0x56e>
 8000994:	e751      	b.n	800083a <__aeabi_ddiv+0x412>
 8000996:	210f      	movs	r1, #15
 8000998:	4011      	ands	r1, r2
 800099a:	2904      	cmp	r1, #4
 800099c:	d000      	beq.n	80009a0 <__aeabi_ddiv+0x578>
 800099e:	e746      	b.n	800082e <__aeabi_ddiv+0x406>
 80009a0:	e74b      	b.n	800083a <__aeabi_ddiv+0x412>
 80009a2:	0005      	movs	r5, r0
 80009a4:	428e      	cmp	r6, r1
 80009a6:	d000      	beq.n	80009aa <__aeabi_ddiv+0x582>
 80009a8:	e66a      	b.n	8000680 <__aeabi_ddiv+0x258>
 80009aa:	9a00      	ldr	r2, [sp, #0]
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d000      	beq.n	80009b2 <__aeabi_ddiv+0x58a>
 80009b0:	e666      	b.n	8000680 <__aeabi_ddiv+0x258>
 80009b2:	e667      	b.n	8000684 <__aeabi_ddiv+0x25c>
 80009b4:	4a16      	ldr	r2, [pc, #88]	; (8000a10 <__aeabi_ddiv+0x5e8>)
 80009b6:	445a      	add	r2, fp
 80009b8:	2a00      	cmp	r2, #0
 80009ba:	dc00      	bgt.n	80009be <__aeabi_ddiv+0x596>
 80009bc:	e710      	b.n	80007e0 <__aeabi_ddiv+0x3b8>
 80009be:	2301      	movs	r3, #1
 80009c0:	2500      	movs	r5, #0
 80009c2:	4498      	add	r8, r3
 80009c4:	e667      	b.n	8000696 <__aeabi_ddiv+0x26e>
 80009c6:	075d      	lsls	r5, r3, #29
 80009c8:	025b      	lsls	r3, r3, #9
 80009ca:	0b1c      	lsrs	r4, r3, #12
 80009cc:	08d2      	lsrs	r2, r2, #3
 80009ce:	2300      	movs	r3, #0
 80009d0:	4315      	orrs	r5, r2
 80009d2:	e580      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80009d4:	9800      	ldr	r0, [sp, #0]
 80009d6:	3d02      	subs	r5, #2
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	4282      	cmp	r2, r0
 80009dc:	41bf      	sbcs	r7, r7
 80009de:	427f      	negs	r7, r7
 80009e0:	193c      	adds	r4, r7, r4
 80009e2:	1936      	adds	r6, r6, r4
 80009e4:	9200      	str	r2, [sp, #0]
 80009e6:	e7dd      	b.n	80009a4 <__aeabi_ddiv+0x57c>
 80009e8:	2480      	movs	r4, #128	; 0x80
 80009ea:	4643      	mov	r3, r8
 80009ec:	0324      	lsls	r4, r4, #12
 80009ee:	431c      	orrs	r4, r3
 80009f0:	0324      	lsls	r4, r4, #12
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <__aeabi_ddiv+0x5dc>)
 80009f4:	0b24      	lsrs	r4, r4, #12
 80009f6:	e56e      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80009f8:	9a00      	ldr	r2, [sp, #0]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d3ea      	bcc.n	80009d4 <__aeabi_ddiv+0x5ac>
 80009fe:	0005      	movs	r5, r0
 8000a00:	e7d3      	b.n	80009aa <__aeabi_ddiv+0x582>
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	000007ff 	.word	0x000007ff
 8000a08:	0000043e 	.word	0x0000043e
 8000a0c:	0000041e 	.word	0x0000041e
 8000a10:	000003ff 	.word	0x000003ff

08000a14 <__aeabi_dsub>:
 8000a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a16:	4657      	mov	r7, sl
 8000a18:	464e      	mov	r6, r9
 8000a1a:	4645      	mov	r5, r8
 8000a1c:	46de      	mov	lr, fp
 8000a1e:	b5e0      	push	{r5, r6, r7, lr}
 8000a20:	001e      	movs	r6, r3
 8000a22:	0017      	movs	r7, r2
 8000a24:	004a      	lsls	r2, r1, #1
 8000a26:	030b      	lsls	r3, r1, #12
 8000a28:	0d52      	lsrs	r2, r2, #21
 8000a2a:	0a5b      	lsrs	r3, r3, #9
 8000a2c:	4690      	mov	r8, r2
 8000a2e:	0f42      	lsrs	r2, r0, #29
 8000a30:	431a      	orrs	r2, r3
 8000a32:	0fcd      	lsrs	r5, r1, #31
 8000a34:	4ccd      	ldr	r4, [pc, #820]	; (8000d6c <__aeabi_dsub+0x358>)
 8000a36:	0331      	lsls	r1, r6, #12
 8000a38:	00c3      	lsls	r3, r0, #3
 8000a3a:	4694      	mov	ip, r2
 8000a3c:	0070      	lsls	r0, r6, #1
 8000a3e:	0f7a      	lsrs	r2, r7, #29
 8000a40:	0a49      	lsrs	r1, r1, #9
 8000a42:	00ff      	lsls	r7, r7, #3
 8000a44:	469a      	mov	sl, r3
 8000a46:	46b9      	mov	r9, r7
 8000a48:	0d40      	lsrs	r0, r0, #21
 8000a4a:	0ff6      	lsrs	r6, r6, #31
 8000a4c:	4311      	orrs	r1, r2
 8000a4e:	42a0      	cmp	r0, r4
 8000a50:	d100      	bne.n	8000a54 <__aeabi_dsub+0x40>
 8000a52:	e0b1      	b.n	8000bb8 <__aeabi_dsub+0x1a4>
 8000a54:	2201      	movs	r2, #1
 8000a56:	4056      	eors	r6, r2
 8000a58:	46b3      	mov	fp, r6
 8000a5a:	42b5      	cmp	r5, r6
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_dsub+0x4c>
 8000a5e:	e088      	b.n	8000b72 <__aeabi_dsub+0x15e>
 8000a60:	4642      	mov	r2, r8
 8000a62:	1a12      	subs	r2, r2, r0
 8000a64:	2a00      	cmp	r2, #0
 8000a66:	dc00      	bgt.n	8000a6a <__aeabi_dsub+0x56>
 8000a68:	e0ae      	b.n	8000bc8 <__aeabi_dsub+0x1b4>
 8000a6a:	2800      	cmp	r0, #0
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_dsub+0x5c>
 8000a6e:	e0c1      	b.n	8000bf4 <__aeabi_dsub+0x1e0>
 8000a70:	48be      	ldr	r0, [pc, #760]	; (8000d6c <__aeabi_dsub+0x358>)
 8000a72:	4580      	cmp	r8, r0
 8000a74:	d100      	bne.n	8000a78 <__aeabi_dsub+0x64>
 8000a76:	e151      	b.n	8000d1c <__aeabi_dsub+0x308>
 8000a78:	2080      	movs	r0, #128	; 0x80
 8000a7a:	0400      	lsls	r0, r0, #16
 8000a7c:	4301      	orrs	r1, r0
 8000a7e:	2a38      	cmp	r2, #56	; 0x38
 8000a80:	dd00      	ble.n	8000a84 <__aeabi_dsub+0x70>
 8000a82:	e17b      	b.n	8000d7c <__aeabi_dsub+0x368>
 8000a84:	2a1f      	cmp	r2, #31
 8000a86:	dd00      	ble.n	8000a8a <__aeabi_dsub+0x76>
 8000a88:	e1ee      	b.n	8000e68 <__aeabi_dsub+0x454>
 8000a8a:	2020      	movs	r0, #32
 8000a8c:	003e      	movs	r6, r7
 8000a8e:	1a80      	subs	r0, r0, r2
 8000a90:	000c      	movs	r4, r1
 8000a92:	40d6      	lsrs	r6, r2
 8000a94:	40d1      	lsrs	r1, r2
 8000a96:	4087      	lsls	r7, r0
 8000a98:	4662      	mov	r2, ip
 8000a9a:	4084      	lsls	r4, r0
 8000a9c:	1a52      	subs	r2, r2, r1
 8000a9e:	1e78      	subs	r0, r7, #1
 8000aa0:	4187      	sbcs	r7, r0
 8000aa2:	4694      	mov	ip, r2
 8000aa4:	4334      	orrs	r4, r6
 8000aa6:	4327      	orrs	r7, r4
 8000aa8:	1bdc      	subs	r4, r3, r7
 8000aaa:	42a3      	cmp	r3, r4
 8000aac:	419b      	sbcs	r3, r3
 8000aae:	4662      	mov	r2, ip
 8000ab0:	425b      	negs	r3, r3
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	4699      	mov	r9, r3
 8000ab6:	464b      	mov	r3, r9
 8000ab8:	021b      	lsls	r3, r3, #8
 8000aba:	d400      	bmi.n	8000abe <__aeabi_dsub+0xaa>
 8000abc:	e118      	b.n	8000cf0 <__aeabi_dsub+0x2dc>
 8000abe:	464b      	mov	r3, r9
 8000ac0:	0258      	lsls	r0, r3, #9
 8000ac2:	0a43      	lsrs	r3, r0, #9
 8000ac4:	4699      	mov	r9, r3
 8000ac6:	464b      	mov	r3, r9
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d100      	bne.n	8000ace <__aeabi_dsub+0xba>
 8000acc:	e137      	b.n	8000d3e <__aeabi_dsub+0x32a>
 8000ace:	4648      	mov	r0, r9
 8000ad0:	f000 fbee 	bl	80012b0 <__clzsi2>
 8000ad4:	0001      	movs	r1, r0
 8000ad6:	3908      	subs	r1, #8
 8000ad8:	2320      	movs	r3, #32
 8000ada:	0022      	movs	r2, r4
 8000adc:	4648      	mov	r0, r9
 8000ade:	1a5b      	subs	r3, r3, r1
 8000ae0:	40da      	lsrs	r2, r3
 8000ae2:	4088      	lsls	r0, r1
 8000ae4:	408c      	lsls	r4, r1
 8000ae6:	4643      	mov	r3, r8
 8000ae8:	4310      	orrs	r0, r2
 8000aea:	4588      	cmp	r8, r1
 8000aec:	dd00      	ble.n	8000af0 <__aeabi_dsub+0xdc>
 8000aee:	e136      	b.n	8000d5e <__aeabi_dsub+0x34a>
 8000af0:	1ac9      	subs	r1, r1, r3
 8000af2:	1c4b      	adds	r3, r1, #1
 8000af4:	2b1f      	cmp	r3, #31
 8000af6:	dd00      	ble.n	8000afa <__aeabi_dsub+0xe6>
 8000af8:	e0ea      	b.n	8000cd0 <__aeabi_dsub+0x2bc>
 8000afa:	2220      	movs	r2, #32
 8000afc:	0026      	movs	r6, r4
 8000afe:	1ad2      	subs	r2, r2, r3
 8000b00:	0001      	movs	r1, r0
 8000b02:	4094      	lsls	r4, r2
 8000b04:	40de      	lsrs	r6, r3
 8000b06:	40d8      	lsrs	r0, r3
 8000b08:	2300      	movs	r3, #0
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	1e62      	subs	r2, r4, #1
 8000b0e:	4194      	sbcs	r4, r2
 8000b10:	4681      	mov	r9, r0
 8000b12:	4698      	mov	r8, r3
 8000b14:	4331      	orrs	r1, r6
 8000b16:	430c      	orrs	r4, r1
 8000b18:	0763      	lsls	r3, r4, #29
 8000b1a:	d009      	beq.n	8000b30 <__aeabi_dsub+0x11c>
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	4023      	ands	r3, r4
 8000b20:	2b04      	cmp	r3, #4
 8000b22:	d005      	beq.n	8000b30 <__aeabi_dsub+0x11c>
 8000b24:	1d23      	adds	r3, r4, #4
 8000b26:	42a3      	cmp	r3, r4
 8000b28:	41a4      	sbcs	r4, r4
 8000b2a:	4264      	negs	r4, r4
 8000b2c:	44a1      	add	r9, r4
 8000b2e:	001c      	movs	r4, r3
 8000b30:	464b      	mov	r3, r9
 8000b32:	021b      	lsls	r3, r3, #8
 8000b34:	d400      	bmi.n	8000b38 <__aeabi_dsub+0x124>
 8000b36:	e0de      	b.n	8000cf6 <__aeabi_dsub+0x2e2>
 8000b38:	4641      	mov	r1, r8
 8000b3a:	4b8c      	ldr	r3, [pc, #560]	; (8000d6c <__aeabi_dsub+0x358>)
 8000b3c:	3101      	adds	r1, #1
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	d100      	bne.n	8000b44 <__aeabi_dsub+0x130>
 8000b42:	e0e7      	b.n	8000d14 <__aeabi_dsub+0x300>
 8000b44:	464b      	mov	r3, r9
 8000b46:	488a      	ldr	r0, [pc, #552]	; (8000d70 <__aeabi_dsub+0x35c>)
 8000b48:	08e4      	lsrs	r4, r4, #3
 8000b4a:	4003      	ands	r3, r0
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	0549      	lsls	r1, r1, #21
 8000b50:	075b      	lsls	r3, r3, #29
 8000b52:	0240      	lsls	r0, r0, #9
 8000b54:	4323      	orrs	r3, r4
 8000b56:	0d4a      	lsrs	r2, r1, #21
 8000b58:	0b04      	lsrs	r4, r0, #12
 8000b5a:	0512      	lsls	r2, r2, #20
 8000b5c:	07ed      	lsls	r5, r5, #31
 8000b5e:	4322      	orrs	r2, r4
 8000b60:	432a      	orrs	r2, r5
 8000b62:	0018      	movs	r0, r3
 8000b64:	0011      	movs	r1, r2
 8000b66:	bcf0      	pop	{r4, r5, r6, r7}
 8000b68:	46bb      	mov	fp, r7
 8000b6a:	46b2      	mov	sl, r6
 8000b6c:	46a9      	mov	r9, r5
 8000b6e:	46a0      	mov	r8, r4
 8000b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b72:	4642      	mov	r2, r8
 8000b74:	1a12      	subs	r2, r2, r0
 8000b76:	2a00      	cmp	r2, #0
 8000b78:	dd52      	ble.n	8000c20 <__aeabi_dsub+0x20c>
 8000b7a:	2800      	cmp	r0, #0
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_dsub+0x16c>
 8000b7e:	e09c      	b.n	8000cba <__aeabi_dsub+0x2a6>
 8000b80:	45a0      	cmp	r8, r4
 8000b82:	d100      	bne.n	8000b86 <__aeabi_dsub+0x172>
 8000b84:	e0ca      	b.n	8000d1c <__aeabi_dsub+0x308>
 8000b86:	2080      	movs	r0, #128	; 0x80
 8000b88:	0400      	lsls	r0, r0, #16
 8000b8a:	4301      	orrs	r1, r0
 8000b8c:	2a38      	cmp	r2, #56	; 0x38
 8000b8e:	dd00      	ble.n	8000b92 <__aeabi_dsub+0x17e>
 8000b90:	e149      	b.n	8000e26 <__aeabi_dsub+0x412>
 8000b92:	2a1f      	cmp	r2, #31
 8000b94:	dc00      	bgt.n	8000b98 <__aeabi_dsub+0x184>
 8000b96:	e197      	b.n	8000ec8 <__aeabi_dsub+0x4b4>
 8000b98:	0010      	movs	r0, r2
 8000b9a:	000e      	movs	r6, r1
 8000b9c:	3820      	subs	r0, #32
 8000b9e:	40c6      	lsrs	r6, r0
 8000ba0:	2a20      	cmp	r2, #32
 8000ba2:	d004      	beq.n	8000bae <__aeabi_dsub+0x19a>
 8000ba4:	2040      	movs	r0, #64	; 0x40
 8000ba6:	1a82      	subs	r2, r0, r2
 8000ba8:	4091      	lsls	r1, r2
 8000baa:	430f      	orrs	r7, r1
 8000bac:	46b9      	mov	r9, r7
 8000bae:	464c      	mov	r4, r9
 8000bb0:	1e62      	subs	r2, r4, #1
 8000bb2:	4194      	sbcs	r4, r2
 8000bb4:	4334      	orrs	r4, r6
 8000bb6:	e13a      	b.n	8000e2e <__aeabi_dsub+0x41a>
 8000bb8:	000a      	movs	r2, r1
 8000bba:	433a      	orrs	r2, r7
 8000bbc:	d028      	beq.n	8000c10 <__aeabi_dsub+0x1fc>
 8000bbe:	46b3      	mov	fp, r6
 8000bc0:	42b5      	cmp	r5, r6
 8000bc2:	d02b      	beq.n	8000c1c <__aeabi_dsub+0x208>
 8000bc4:	4a6b      	ldr	r2, [pc, #428]	; (8000d74 <__aeabi_dsub+0x360>)
 8000bc6:	4442      	add	r2, r8
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	d05d      	beq.n	8000c88 <__aeabi_dsub+0x274>
 8000bcc:	4642      	mov	r2, r8
 8000bce:	4644      	mov	r4, r8
 8000bd0:	1a82      	subs	r2, r0, r2
 8000bd2:	2c00      	cmp	r4, #0
 8000bd4:	d000      	beq.n	8000bd8 <__aeabi_dsub+0x1c4>
 8000bd6:	e0f5      	b.n	8000dc4 <__aeabi_dsub+0x3b0>
 8000bd8:	4665      	mov	r5, ip
 8000bda:	431d      	orrs	r5, r3
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_dsub+0x1cc>
 8000bde:	e19c      	b.n	8000f1a <__aeabi_dsub+0x506>
 8000be0:	1e55      	subs	r5, r2, #1
 8000be2:	2a01      	cmp	r2, #1
 8000be4:	d100      	bne.n	8000be8 <__aeabi_dsub+0x1d4>
 8000be6:	e1fb      	b.n	8000fe0 <__aeabi_dsub+0x5cc>
 8000be8:	4c60      	ldr	r4, [pc, #384]	; (8000d6c <__aeabi_dsub+0x358>)
 8000bea:	42a2      	cmp	r2, r4
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_dsub+0x1dc>
 8000bee:	e1bd      	b.n	8000f6c <__aeabi_dsub+0x558>
 8000bf0:	002a      	movs	r2, r5
 8000bf2:	e0f0      	b.n	8000dd6 <__aeabi_dsub+0x3c2>
 8000bf4:	0008      	movs	r0, r1
 8000bf6:	4338      	orrs	r0, r7
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_dsub+0x1e8>
 8000bfa:	e0c3      	b.n	8000d84 <__aeabi_dsub+0x370>
 8000bfc:	1e50      	subs	r0, r2, #1
 8000bfe:	2a01      	cmp	r2, #1
 8000c00:	d100      	bne.n	8000c04 <__aeabi_dsub+0x1f0>
 8000c02:	e1a8      	b.n	8000f56 <__aeabi_dsub+0x542>
 8000c04:	4c59      	ldr	r4, [pc, #356]	; (8000d6c <__aeabi_dsub+0x358>)
 8000c06:	42a2      	cmp	r2, r4
 8000c08:	d100      	bne.n	8000c0c <__aeabi_dsub+0x1f8>
 8000c0a:	e087      	b.n	8000d1c <__aeabi_dsub+0x308>
 8000c0c:	0002      	movs	r2, r0
 8000c0e:	e736      	b.n	8000a7e <__aeabi_dsub+0x6a>
 8000c10:	2201      	movs	r2, #1
 8000c12:	4056      	eors	r6, r2
 8000c14:	46b3      	mov	fp, r6
 8000c16:	42b5      	cmp	r5, r6
 8000c18:	d000      	beq.n	8000c1c <__aeabi_dsub+0x208>
 8000c1a:	e721      	b.n	8000a60 <__aeabi_dsub+0x4c>
 8000c1c:	4a55      	ldr	r2, [pc, #340]	; (8000d74 <__aeabi_dsub+0x360>)
 8000c1e:	4442      	add	r2, r8
 8000c20:	2a00      	cmp	r2, #0
 8000c22:	d100      	bne.n	8000c26 <__aeabi_dsub+0x212>
 8000c24:	e0b5      	b.n	8000d92 <__aeabi_dsub+0x37e>
 8000c26:	4642      	mov	r2, r8
 8000c28:	4644      	mov	r4, r8
 8000c2a:	1a82      	subs	r2, r0, r2
 8000c2c:	2c00      	cmp	r4, #0
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_dsub+0x21e>
 8000c30:	e138      	b.n	8000ea4 <__aeabi_dsub+0x490>
 8000c32:	4e4e      	ldr	r6, [pc, #312]	; (8000d6c <__aeabi_dsub+0x358>)
 8000c34:	42b0      	cmp	r0, r6
 8000c36:	d100      	bne.n	8000c3a <__aeabi_dsub+0x226>
 8000c38:	e1de      	b.n	8000ff8 <__aeabi_dsub+0x5e4>
 8000c3a:	2680      	movs	r6, #128	; 0x80
 8000c3c:	4664      	mov	r4, ip
 8000c3e:	0436      	lsls	r6, r6, #16
 8000c40:	4334      	orrs	r4, r6
 8000c42:	46a4      	mov	ip, r4
 8000c44:	2a38      	cmp	r2, #56	; 0x38
 8000c46:	dd00      	ble.n	8000c4a <__aeabi_dsub+0x236>
 8000c48:	e196      	b.n	8000f78 <__aeabi_dsub+0x564>
 8000c4a:	2a1f      	cmp	r2, #31
 8000c4c:	dd00      	ble.n	8000c50 <__aeabi_dsub+0x23c>
 8000c4e:	e224      	b.n	800109a <__aeabi_dsub+0x686>
 8000c50:	2620      	movs	r6, #32
 8000c52:	1ab4      	subs	r4, r6, r2
 8000c54:	46a2      	mov	sl, r4
 8000c56:	4664      	mov	r4, ip
 8000c58:	4656      	mov	r6, sl
 8000c5a:	40b4      	lsls	r4, r6
 8000c5c:	46a1      	mov	r9, r4
 8000c5e:	001c      	movs	r4, r3
 8000c60:	464e      	mov	r6, r9
 8000c62:	40d4      	lsrs	r4, r2
 8000c64:	4326      	orrs	r6, r4
 8000c66:	0034      	movs	r4, r6
 8000c68:	4656      	mov	r6, sl
 8000c6a:	40b3      	lsls	r3, r6
 8000c6c:	1e5e      	subs	r6, r3, #1
 8000c6e:	41b3      	sbcs	r3, r6
 8000c70:	431c      	orrs	r4, r3
 8000c72:	4663      	mov	r3, ip
 8000c74:	40d3      	lsrs	r3, r2
 8000c76:	18c9      	adds	r1, r1, r3
 8000c78:	19e4      	adds	r4, r4, r7
 8000c7a:	42bc      	cmp	r4, r7
 8000c7c:	41bf      	sbcs	r7, r7
 8000c7e:	427f      	negs	r7, r7
 8000c80:	46b9      	mov	r9, r7
 8000c82:	4680      	mov	r8, r0
 8000c84:	4489      	add	r9, r1
 8000c86:	e0d8      	b.n	8000e3a <__aeabi_dsub+0x426>
 8000c88:	4640      	mov	r0, r8
 8000c8a:	4c3b      	ldr	r4, [pc, #236]	; (8000d78 <__aeabi_dsub+0x364>)
 8000c8c:	3001      	adds	r0, #1
 8000c8e:	4220      	tst	r0, r4
 8000c90:	d000      	beq.n	8000c94 <__aeabi_dsub+0x280>
 8000c92:	e0b4      	b.n	8000dfe <__aeabi_dsub+0x3ea>
 8000c94:	4640      	mov	r0, r8
 8000c96:	2800      	cmp	r0, #0
 8000c98:	d000      	beq.n	8000c9c <__aeabi_dsub+0x288>
 8000c9a:	e144      	b.n	8000f26 <__aeabi_dsub+0x512>
 8000c9c:	4660      	mov	r0, ip
 8000c9e:	4318      	orrs	r0, r3
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_dsub+0x290>
 8000ca2:	e190      	b.n	8000fc6 <__aeabi_dsub+0x5b2>
 8000ca4:	0008      	movs	r0, r1
 8000ca6:	4338      	orrs	r0, r7
 8000ca8:	d000      	beq.n	8000cac <__aeabi_dsub+0x298>
 8000caa:	e1aa      	b.n	8001002 <__aeabi_dsub+0x5ee>
 8000cac:	4661      	mov	r1, ip
 8000cae:	08db      	lsrs	r3, r3, #3
 8000cb0:	0749      	lsls	r1, r1, #29
 8000cb2:	430b      	orrs	r3, r1
 8000cb4:	4661      	mov	r1, ip
 8000cb6:	08cc      	lsrs	r4, r1, #3
 8000cb8:	e027      	b.n	8000d0a <__aeabi_dsub+0x2f6>
 8000cba:	0008      	movs	r0, r1
 8000cbc:	4338      	orrs	r0, r7
 8000cbe:	d061      	beq.n	8000d84 <__aeabi_dsub+0x370>
 8000cc0:	1e50      	subs	r0, r2, #1
 8000cc2:	2a01      	cmp	r2, #1
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_dsub+0x2b4>
 8000cc6:	e139      	b.n	8000f3c <__aeabi_dsub+0x528>
 8000cc8:	42a2      	cmp	r2, r4
 8000cca:	d027      	beq.n	8000d1c <__aeabi_dsub+0x308>
 8000ccc:	0002      	movs	r2, r0
 8000cce:	e75d      	b.n	8000b8c <__aeabi_dsub+0x178>
 8000cd0:	0002      	movs	r2, r0
 8000cd2:	391f      	subs	r1, #31
 8000cd4:	40ca      	lsrs	r2, r1
 8000cd6:	0011      	movs	r1, r2
 8000cd8:	2b20      	cmp	r3, #32
 8000cda:	d003      	beq.n	8000ce4 <__aeabi_dsub+0x2d0>
 8000cdc:	2240      	movs	r2, #64	; 0x40
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	4098      	lsls	r0, r3
 8000ce2:	4304      	orrs	r4, r0
 8000ce4:	1e63      	subs	r3, r4, #1
 8000ce6:	419c      	sbcs	r4, r3
 8000ce8:	2300      	movs	r3, #0
 8000cea:	4699      	mov	r9, r3
 8000cec:	4698      	mov	r8, r3
 8000cee:	430c      	orrs	r4, r1
 8000cf0:	0763      	lsls	r3, r4, #29
 8000cf2:	d000      	beq.n	8000cf6 <__aeabi_dsub+0x2e2>
 8000cf4:	e712      	b.n	8000b1c <__aeabi_dsub+0x108>
 8000cf6:	464b      	mov	r3, r9
 8000cf8:	464a      	mov	r2, r9
 8000cfa:	08e4      	lsrs	r4, r4, #3
 8000cfc:	075b      	lsls	r3, r3, #29
 8000cfe:	4323      	orrs	r3, r4
 8000d00:	08d4      	lsrs	r4, r2, #3
 8000d02:	4642      	mov	r2, r8
 8000d04:	4919      	ldr	r1, [pc, #100]	; (8000d6c <__aeabi_dsub+0x358>)
 8000d06:	428a      	cmp	r2, r1
 8000d08:	d00e      	beq.n	8000d28 <__aeabi_dsub+0x314>
 8000d0a:	0324      	lsls	r4, r4, #12
 8000d0c:	0552      	lsls	r2, r2, #21
 8000d0e:	0b24      	lsrs	r4, r4, #12
 8000d10:	0d52      	lsrs	r2, r2, #21
 8000d12:	e722      	b.n	8000b5a <__aeabi_dsub+0x146>
 8000d14:	000a      	movs	r2, r1
 8000d16:	2400      	movs	r4, #0
 8000d18:	2300      	movs	r3, #0
 8000d1a:	e71e      	b.n	8000b5a <__aeabi_dsub+0x146>
 8000d1c:	08db      	lsrs	r3, r3, #3
 8000d1e:	4662      	mov	r2, ip
 8000d20:	0752      	lsls	r2, r2, #29
 8000d22:	4313      	orrs	r3, r2
 8000d24:	4662      	mov	r2, ip
 8000d26:	08d4      	lsrs	r4, r2, #3
 8000d28:	001a      	movs	r2, r3
 8000d2a:	4322      	orrs	r2, r4
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_dsub+0x31c>
 8000d2e:	e1fc      	b.n	800112a <__aeabi_dsub+0x716>
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	0312      	lsls	r2, r2, #12
 8000d34:	4314      	orrs	r4, r2
 8000d36:	0324      	lsls	r4, r4, #12
 8000d38:	4a0c      	ldr	r2, [pc, #48]	; (8000d6c <__aeabi_dsub+0x358>)
 8000d3a:	0b24      	lsrs	r4, r4, #12
 8000d3c:	e70d      	b.n	8000b5a <__aeabi_dsub+0x146>
 8000d3e:	0020      	movs	r0, r4
 8000d40:	f000 fab6 	bl	80012b0 <__clzsi2>
 8000d44:	0001      	movs	r1, r0
 8000d46:	3118      	adds	r1, #24
 8000d48:	291f      	cmp	r1, #31
 8000d4a:	dc00      	bgt.n	8000d4e <__aeabi_dsub+0x33a>
 8000d4c:	e6c4      	b.n	8000ad8 <__aeabi_dsub+0xc4>
 8000d4e:	3808      	subs	r0, #8
 8000d50:	4084      	lsls	r4, r0
 8000d52:	4643      	mov	r3, r8
 8000d54:	0020      	movs	r0, r4
 8000d56:	2400      	movs	r4, #0
 8000d58:	4588      	cmp	r8, r1
 8000d5a:	dc00      	bgt.n	8000d5e <__aeabi_dsub+0x34a>
 8000d5c:	e6c8      	b.n	8000af0 <__aeabi_dsub+0xdc>
 8000d5e:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <__aeabi_dsub+0x35c>)
 8000d60:	1a5b      	subs	r3, r3, r1
 8000d62:	4010      	ands	r0, r2
 8000d64:	4698      	mov	r8, r3
 8000d66:	4681      	mov	r9, r0
 8000d68:	e6d6      	b.n	8000b18 <__aeabi_dsub+0x104>
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	000007ff 	.word	0x000007ff
 8000d70:	ff7fffff 	.word	0xff7fffff
 8000d74:	fffff801 	.word	0xfffff801
 8000d78:	000007fe 	.word	0x000007fe
 8000d7c:	430f      	orrs	r7, r1
 8000d7e:	1e7a      	subs	r2, r7, #1
 8000d80:	4197      	sbcs	r7, r2
 8000d82:	e691      	b.n	8000aa8 <__aeabi_dsub+0x94>
 8000d84:	4661      	mov	r1, ip
 8000d86:	08db      	lsrs	r3, r3, #3
 8000d88:	0749      	lsls	r1, r1, #29
 8000d8a:	430b      	orrs	r3, r1
 8000d8c:	4661      	mov	r1, ip
 8000d8e:	08cc      	lsrs	r4, r1, #3
 8000d90:	e7b8      	b.n	8000d04 <__aeabi_dsub+0x2f0>
 8000d92:	4640      	mov	r0, r8
 8000d94:	4cd3      	ldr	r4, [pc, #844]	; (80010e4 <__aeabi_dsub+0x6d0>)
 8000d96:	3001      	adds	r0, #1
 8000d98:	4220      	tst	r0, r4
 8000d9a:	d000      	beq.n	8000d9e <__aeabi_dsub+0x38a>
 8000d9c:	e0a2      	b.n	8000ee4 <__aeabi_dsub+0x4d0>
 8000d9e:	4640      	mov	r0, r8
 8000da0:	2800      	cmp	r0, #0
 8000da2:	d000      	beq.n	8000da6 <__aeabi_dsub+0x392>
 8000da4:	e101      	b.n	8000faa <__aeabi_dsub+0x596>
 8000da6:	4660      	mov	r0, ip
 8000da8:	4318      	orrs	r0, r3
 8000daa:	d100      	bne.n	8000dae <__aeabi_dsub+0x39a>
 8000dac:	e15e      	b.n	800106c <__aeabi_dsub+0x658>
 8000dae:	0008      	movs	r0, r1
 8000db0:	4338      	orrs	r0, r7
 8000db2:	d000      	beq.n	8000db6 <__aeabi_dsub+0x3a2>
 8000db4:	e15f      	b.n	8001076 <__aeabi_dsub+0x662>
 8000db6:	4661      	mov	r1, ip
 8000db8:	08db      	lsrs	r3, r3, #3
 8000dba:	0749      	lsls	r1, r1, #29
 8000dbc:	430b      	orrs	r3, r1
 8000dbe:	4661      	mov	r1, ip
 8000dc0:	08cc      	lsrs	r4, r1, #3
 8000dc2:	e7a2      	b.n	8000d0a <__aeabi_dsub+0x2f6>
 8000dc4:	4dc8      	ldr	r5, [pc, #800]	; (80010e8 <__aeabi_dsub+0x6d4>)
 8000dc6:	42a8      	cmp	r0, r5
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_dsub+0x3b8>
 8000dca:	e0cf      	b.n	8000f6c <__aeabi_dsub+0x558>
 8000dcc:	2580      	movs	r5, #128	; 0x80
 8000dce:	4664      	mov	r4, ip
 8000dd0:	042d      	lsls	r5, r5, #16
 8000dd2:	432c      	orrs	r4, r5
 8000dd4:	46a4      	mov	ip, r4
 8000dd6:	2a38      	cmp	r2, #56	; 0x38
 8000dd8:	dc56      	bgt.n	8000e88 <__aeabi_dsub+0x474>
 8000dda:	2a1f      	cmp	r2, #31
 8000ddc:	dd00      	ble.n	8000de0 <__aeabi_dsub+0x3cc>
 8000dde:	e0d1      	b.n	8000f84 <__aeabi_dsub+0x570>
 8000de0:	2520      	movs	r5, #32
 8000de2:	001e      	movs	r6, r3
 8000de4:	1aad      	subs	r5, r5, r2
 8000de6:	4664      	mov	r4, ip
 8000de8:	40ab      	lsls	r3, r5
 8000dea:	40ac      	lsls	r4, r5
 8000dec:	40d6      	lsrs	r6, r2
 8000dee:	1e5d      	subs	r5, r3, #1
 8000df0:	41ab      	sbcs	r3, r5
 8000df2:	4334      	orrs	r4, r6
 8000df4:	4323      	orrs	r3, r4
 8000df6:	4664      	mov	r4, ip
 8000df8:	40d4      	lsrs	r4, r2
 8000dfa:	1b09      	subs	r1, r1, r4
 8000dfc:	e049      	b.n	8000e92 <__aeabi_dsub+0x47e>
 8000dfe:	4660      	mov	r0, ip
 8000e00:	1bdc      	subs	r4, r3, r7
 8000e02:	1a46      	subs	r6, r0, r1
 8000e04:	42a3      	cmp	r3, r4
 8000e06:	4180      	sbcs	r0, r0
 8000e08:	4240      	negs	r0, r0
 8000e0a:	4681      	mov	r9, r0
 8000e0c:	0030      	movs	r0, r6
 8000e0e:	464e      	mov	r6, r9
 8000e10:	1b80      	subs	r0, r0, r6
 8000e12:	4681      	mov	r9, r0
 8000e14:	0200      	lsls	r0, r0, #8
 8000e16:	d476      	bmi.n	8000f06 <__aeabi_dsub+0x4f2>
 8000e18:	464b      	mov	r3, r9
 8000e1a:	4323      	orrs	r3, r4
 8000e1c:	d000      	beq.n	8000e20 <__aeabi_dsub+0x40c>
 8000e1e:	e652      	b.n	8000ac6 <__aeabi_dsub+0xb2>
 8000e20:	2400      	movs	r4, #0
 8000e22:	2500      	movs	r5, #0
 8000e24:	e771      	b.n	8000d0a <__aeabi_dsub+0x2f6>
 8000e26:	4339      	orrs	r1, r7
 8000e28:	000c      	movs	r4, r1
 8000e2a:	1e62      	subs	r2, r4, #1
 8000e2c:	4194      	sbcs	r4, r2
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	429c      	cmp	r4, r3
 8000e32:	419b      	sbcs	r3, r3
 8000e34:	425b      	negs	r3, r3
 8000e36:	4463      	add	r3, ip
 8000e38:	4699      	mov	r9, r3
 8000e3a:	464b      	mov	r3, r9
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	d400      	bmi.n	8000e42 <__aeabi_dsub+0x42e>
 8000e40:	e756      	b.n	8000cf0 <__aeabi_dsub+0x2dc>
 8000e42:	2301      	movs	r3, #1
 8000e44:	469c      	mov	ip, r3
 8000e46:	4ba8      	ldr	r3, [pc, #672]	; (80010e8 <__aeabi_dsub+0x6d4>)
 8000e48:	44e0      	add	r8, ip
 8000e4a:	4598      	cmp	r8, r3
 8000e4c:	d038      	beq.n	8000ec0 <__aeabi_dsub+0x4ac>
 8000e4e:	464b      	mov	r3, r9
 8000e50:	48a6      	ldr	r0, [pc, #664]	; (80010ec <__aeabi_dsub+0x6d8>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	4003      	ands	r3, r0
 8000e56:	0018      	movs	r0, r3
 8000e58:	0863      	lsrs	r3, r4, #1
 8000e5a:	4014      	ands	r4, r2
 8000e5c:	431c      	orrs	r4, r3
 8000e5e:	07c3      	lsls	r3, r0, #31
 8000e60:	431c      	orrs	r4, r3
 8000e62:	0843      	lsrs	r3, r0, #1
 8000e64:	4699      	mov	r9, r3
 8000e66:	e657      	b.n	8000b18 <__aeabi_dsub+0x104>
 8000e68:	0010      	movs	r0, r2
 8000e6a:	000e      	movs	r6, r1
 8000e6c:	3820      	subs	r0, #32
 8000e6e:	40c6      	lsrs	r6, r0
 8000e70:	2a20      	cmp	r2, #32
 8000e72:	d004      	beq.n	8000e7e <__aeabi_dsub+0x46a>
 8000e74:	2040      	movs	r0, #64	; 0x40
 8000e76:	1a82      	subs	r2, r0, r2
 8000e78:	4091      	lsls	r1, r2
 8000e7a:	430f      	orrs	r7, r1
 8000e7c:	46b9      	mov	r9, r7
 8000e7e:	464f      	mov	r7, r9
 8000e80:	1e7a      	subs	r2, r7, #1
 8000e82:	4197      	sbcs	r7, r2
 8000e84:	4337      	orrs	r7, r6
 8000e86:	e60f      	b.n	8000aa8 <__aeabi_dsub+0x94>
 8000e88:	4662      	mov	r2, ip
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	0013      	movs	r3, r2
 8000e8e:	1e5a      	subs	r2, r3, #1
 8000e90:	4193      	sbcs	r3, r2
 8000e92:	1afc      	subs	r4, r7, r3
 8000e94:	42a7      	cmp	r7, r4
 8000e96:	41bf      	sbcs	r7, r7
 8000e98:	427f      	negs	r7, r7
 8000e9a:	1bcb      	subs	r3, r1, r7
 8000e9c:	4699      	mov	r9, r3
 8000e9e:	465d      	mov	r5, fp
 8000ea0:	4680      	mov	r8, r0
 8000ea2:	e608      	b.n	8000ab6 <__aeabi_dsub+0xa2>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	431e      	orrs	r6, r3
 8000ea8:	d100      	bne.n	8000eac <__aeabi_dsub+0x498>
 8000eaa:	e0be      	b.n	800102a <__aeabi_dsub+0x616>
 8000eac:	1e56      	subs	r6, r2, #1
 8000eae:	2a01      	cmp	r2, #1
 8000eb0:	d100      	bne.n	8000eb4 <__aeabi_dsub+0x4a0>
 8000eb2:	e109      	b.n	80010c8 <__aeabi_dsub+0x6b4>
 8000eb4:	4c8c      	ldr	r4, [pc, #560]	; (80010e8 <__aeabi_dsub+0x6d4>)
 8000eb6:	42a2      	cmp	r2, r4
 8000eb8:	d100      	bne.n	8000ebc <__aeabi_dsub+0x4a8>
 8000eba:	e119      	b.n	80010f0 <__aeabi_dsub+0x6dc>
 8000ebc:	0032      	movs	r2, r6
 8000ebe:	e6c1      	b.n	8000c44 <__aeabi_dsub+0x230>
 8000ec0:	4642      	mov	r2, r8
 8000ec2:	2400      	movs	r4, #0
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	e648      	b.n	8000b5a <__aeabi_dsub+0x146>
 8000ec8:	2020      	movs	r0, #32
 8000eca:	000c      	movs	r4, r1
 8000ecc:	1a80      	subs	r0, r0, r2
 8000ece:	003e      	movs	r6, r7
 8000ed0:	4087      	lsls	r7, r0
 8000ed2:	4084      	lsls	r4, r0
 8000ed4:	40d6      	lsrs	r6, r2
 8000ed6:	1e78      	subs	r0, r7, #1
 8000ed8:	4187      	sbcs	r7, r0
 8000eda:	40d1      	lsrs	r1, r2
 8000edc:	4334      	orrs	r4, r6
 8000ede:	433c      	orrs	r4, r7
 8000ee0:	448c      	add	ip, r1
 8000ee2:	e7a4      	b.n	8000e2e <__aeabi_dsub+0x41a>
 8000ee4:	4a80      	ldr	r2, [pc, #512]	; (80010e8 <__aeabi_dsub+0x6d4>)
 8000ee6:	4290      	cmp	r0, r2
 8000ee8:	d100      	bne.n	8000eec <__aeabi_dsub+0x4d8>
 8000eea:	e0e9      	b.n	80010c0 <__aeabi_dsub+0x6ac>
 8000eec:	19df      	adds	r7, r3, r7
 8000eee:	429f      	cmp	r7, r3
 8000ef0:	419b      	sbcs	r3, r3
 8000ef2:	4461      	add	r1, ip
 8000ef4:	425b      	negs	r3, r3
 8000ef6:	18c9      	adds	r1, r1, r3
 8000ef8:	07cc      	lsls	r4, r1, #31
 8000efa:	087f      	lsrs	r7, r7, #1
 8000efc:	084b      	lsrs	r3, r1, #1
 8000efe:	4699      	mov	r9, r3
 8000f00:	4680      	mov	r8, r0
 8000f02:	433c      	orrs	r4, r7
 8000f04:	e6f4      	b.n	8000cf0 <__aeabi_dsub+0x2dc>
 8000f06:	1afc      	subs	r4, r7, r3
 8000f08:	42a7      	cmp	r7, r4
 8000f0a:	41bf      	sbcs	r7, r7
 8000f0c:	4663      	mov	r3, ip
 8000f0e:	427f      	negs	r7, r7
 8000f10:	1ac9      	subs	r1, r1, r3
 8000f12:	1bcb      	subs	r3, r1, r7
 8000f14:	4699      	mov	r9, r3
 8000f16:	465d      	mov	r5, fp
 8000f18:	e5d5      	b.n	8000ac6 <__aeabi_dsub+0xb2>
 8000f1a:	08ff      	lsrs	r7, r7, #3
 8000f1c:	074b      	lsls	r3, r1, #29
 8000f1e:	465d      	mov	r5, fp
 8000f20:	433b      	orrs	r3, r7
 8000f22:	08cc      	lsrs	r4, r1, #3
 8000f24:	e6ee      	b.n	8000d04 <__aeabi_dsub+0x2f0>
 8000f26:	4662      	mov	r2, ip
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	d000      	beq.n	8000f2e <__aeabi_dsub+0x51a>
 8000f2c:	e082      	b.n	8001034 <__aeabi_dsub+0x620>
 8000f2e:	000b      	movs	r3, r1
 8000f30:	433b      	orrs	r3, r7
 8000f32:	d11b      	bne.n	8000f6c <__aeabi_dsub+0x558>
 8000f34:	2480      	movs	r4, #128	; 0x80
 8000f36:	2500      	movs	r5, #0
 8000f38:	0324      	lsls	r4, r4, #12
 8000f3a:	e6f9      	b.n	8000d30 <__aeabi_dsub+0x31c>
 8000f3c:	19dc      	adds	r4, r3, r7
 8000f3e:	429c      	cmp	r4, r3
 8000f40:	419b      	sbcs	r3, r3
 8000f42:	4461      	add	r1, ip
 8000f44:	4689      	mov	r9, r1
 8000f46:	425b      	negs	r3, r3
 8000f48:	4499      	add	r9, r3
 8000f4a:	464b      	mov	r3, r9
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	d444      	bmi.n	8000fda <__aeabi_dsub+0x5c6>
 8000f50:	2301      	movs	r3, #1
 8000f52:	4698      	mov	r8, r3
 8000f54:	e6cc      	b.n	8000cf0 <__aeabi_dsub+0x2dc>
 8000f56:	1bdc      	subs	r4, r3, r7
 8000f58:	4662      	mov	r2, ip
 8000f5a:	42a3      	cmp	r3, r4
 8000f5c:	419b      	sbcs	r3, r3
 8000f5e:	1a51      	subs	r1, r2, r1
 8000f60:	425b      	negs	r3, r3
 8000f62:	1acb      	subs	r3, r1, r3
 8000f64:	4699      	mov	r9, r3
 8000f66:	2301      	movs	r3, #1
 8000f68:	4698      	mov	r8, r3
 8000f6a:	e5a4      	b.n	8000ab6 <__aeabi_dsub+0xa2>
 8000f6c:	08ff      	lsrs	r7, r7, #3
 8000f6e:	074b      	lsls	r3, r1, #29
 8000f70:	465d      	mov	r5, fp
 8000f72:	433b      	orrs	r3, r7
 8000f74:	08cc      	lsrs	r4, r1, #3
 8000f76:	e6d7      	b.n	8000d28 <__aeabi_dsub+0x314>
 8000f78:	4662      	mov	r2, ip
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	0014      	movs	r4, r2
 8000f7e:	1e63      	subs	r3, r4, #1
 8000f80:	419c      	sbcs	r4, r3
 8000f82:	e679      	b.n	8000c78 <__aeabi_dsub+0x264>
 8000f84:	0015      	movs	r5, r2
 8000f86:	4664      	mov	r4, ip
 8000f88:	3d20      	subs	r5, #32
 8000f8a:	40ec      	lsrs	r4, r5
 8000f8c:	46a0      	mov	r8, r4
 8000f8e:	2a20      	cmp	r2, #32
 8000f90:	d005      	beq.n	8000f9e <__aeabi_dsub+0x58a>
 8000f92:	2540      	movs	r5, #64	; 0x40
 8000f94:	4664      	mov	r4, ip
 8000f96:	1aaa      	subs	r2, r5, r2
 8000f98:	4094      	lsls	r4, r2
 8000f9a:	4323      	orrs	r3, r4
 8000f9c:	469a      	mov	sl, r3
 8000f9e:	4654      	mov	r4, sl
 8000fa0:	1e63      	subs	r3, r4, #1
 8000fa2:	419c      	sbcs	r4, r3
 8000fa4:	4643      	mov	r3, r8
 8000fa6:	4323      	orrs	r3, r4
 8000fa8:	e773      	b.n	8000e92 <__aeabi_dsub+0x47e>
 8000faa:	4662      	mov	r2, ip
 8000fac:	431a      	orrs	r2, r3
 8000fae:	d023      	beq.n	8000ff8 <__aeabi_dsub+0x5e4>
 8000fb0:	000a      	movs	r2, r1
 8000fb2:	433a      	orrs	r2, r7
 8000fb4:	d000      	beq.n	8000fb8 <__aeabi_dsub+0x5a4>
 8000fb6:	e0a0      	b.n	80010fa <__aeabi_dsub+0x6e6>
 8000fb8:	4662      	mov	r2, ip
 8000fba:	08db      	lsrs	r3, r3, #3
 8000fbc:	0752      	lsls	r2, r2, #29
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	4662      	mov	r2, ip
 8000fc2:	08d4      	lsrs	r4, r2, #3
 8000fc4:	e6b0      	b.n	8000d28 <__aeabi_dsub+0x314>
 8000fc6:	000b      	movs	r3, r1
 8000fc8:	433b      	orrs	r3, r7
 8000fca:	d100      	bne.n	8000fce <__aeabi_dsub+0x5ba>
 8000fcc:	e728      	b.n	8000e20 <__aeabi_dsub+0x40c>
 8000fce:	08ff      	lsrs	r7, r7, #3
 8000fd0:	074b      	lsls	r3, r1, #29
 8000fd2:	465d      	mov	r5, fp
 8000fd4:	433b      	orrs	r3, r7
 8000fd6:	08cc      	lsrs	r4, r1, #3
 8000fd8:	e697      	b.n	8000d0a <__aeabi_dsub+0x2f6>
 8000fda:	2302      	movs	r3, #2
 8000fdc:	4698      	mov	r8, r3
 8000fde:	e736      	b.n	8000e4e <__aeabi_dsub+0x43a>
 8000fe0:	1afc      	subs	r4, r7, r3
 8000fe2:	42a7      	cmp	r7, r4
 8000fe4:	41bf      	sbcs	r7, r7
 8000fe6:	4663      	mov	r3, ip
 8000fe8:	427f      	negs	r7, r7
 8000fea:	1ac9      	subs	r1, r1, r3
 8000fec:	1bcb      	subs	r3, r1, r7
 8000fee:	4699      	mov	r9, r3
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	465d      	mov	r5, fp
 8000ff4:	4698      	mov	r8, r3
 8000ff6:	e55e      	b.n	8000ab6 <__aeabi_dsub+0xa2>
 8000ff8:	074b      	lsls	r3, r1, #29
 8000ffa:	08ff      	lsrs	r7, r7, #3
 8000ffc:	433b      	orrs	r3, r7
 8000ffe:	08cc      	lsrs	r4, r1, #3
 8001000:	e692      	b.n	8000d28 <__aeabi_dsub+0x314>
 8001002:	1bdc      	subs	r4, r3, r7
 8001004:	4660      	mov	r0, ip
 8001006:	42a3      	cmp	r3, r4
 8001008:	41b6      	sbcs	r6, r6
 800100a:	1a40      	subs	r0, r0, r1
 800100c:	4276      	negs	r6, r6
 800100e:	1b80      	subs	r0, r0, r6
 8001010:	4681      	mov	r9, r0
 8001012:	0200      	lsls	r0, r0, #8
 8001014:	d560      	bpl.n	80010d8 <__aeabi_dsub+0x6c4>
 8001016:	1afc      	subs	r4, r7, r3
 8001018:	42a7      	cmp	r7, r4
 800101a:	41bf      	sbcs	r7, r7
 800101c:	4663      	mov	r3, ip
 800101e:	427f      	negs	r7, r7
 8001020:	1ac9      	subs	r1, r1, r3
 8001022:	1bcb      	subs	r3, r1, r7
 8001024:	4699      	mov	r9, r3
 8001026:	465d      	mov	r5, fp
 8001028:	e576      	b.n	8000b18 <__aeabi_dsub+0x104>
 800102a:	08ff      	lsrs	r7, r7, #3
 800102c:	074b      	lsls	r3, r1, #29
 800102e:	433b      	orrs	r3, r7
 8001030:	08cc      	lsrs	r4, r1, #3
 8001032:	e667      	b.n	8000d04 <__aeabi_dsub+0x2f0>
 8001034:	000a      	movs	r2, r1
 8001036:	08db      	lsrs	r3, r3, #3
 8001038:	433a      	orrs	r2, r7
 800103a:	d100      	bne.n	800103e <__aeabi_dsub+0x62a>
 800103c:	e66f      	b.n	8000d1e <__aeabi_dsub+0x30a>
 800103e:	4662      	mov	r2, ip
 8001040:	0752      	lsls	r2, r2, #29
 8001042:	4313      	orrs	r3, r2
 8001044:	4662      	mov	r2, ip
 8001046:	08d4      	lsrs	r4, r2, #3
 8001048:	2280      	movs	r2, #128	; 0x80
 800104a:	0312      	lsls	r2, r2, #12
 800104c:	4214      	tst	r4, r2
 800104e:	d007      	beq.n	8001060 <__aeabi_dsub+0x64c>
 8001050:	08c8      	lsrs	r0, r1, #3
 8001052:	4210      	tst	r0, r2
 8001054:	d104      	bne.n	8001060 <__aeabi_dsub+0x64c>
 8001056:	465d      	mov	r5, fp
 8001058:	0004      	movs	r4, r0
 800105a:	08fb      	lsrs	r3, r7, #3
 800105c:	0749      	lsls	r1, r1, #29
 800105e:	430b      	orrs	r3, r1
 8001060:	0f5a      	lsrs	r2, r3, #29
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	08db      	lsrs	r3, r3, #3
 8001066:	0752      	lsls	r2, r2, #29
 8001068:	4313      	orrs	r3, r2
 800106a:	e65d      	b.n	8000d28 <__aeabi_dsub+0x314>
 800106c:	074b      	lsls	r3, r1, #29
 800106e:	08ff      	lsrs	r7, r7, #3
 8001070:	433b      	orrs	r3, r7
 8001072:	08cc      	lsrs	r4, r1, #3
 8001074:	e649      	b.n	8000d0a <__aeabi_dsub+0x2f6>
 8001076:	19dc      	adds	r4, r3, r7
 8001078:	429c      	cmp	r4, r3
 800107a:	419b      	sbcs	r3, r3
 800107c:	4461      	add	r1, ip
 800107e:	4689      	mov	r9, r1
 8001080:	425b      	negs	r3, r3
 8001082:	4499      	add	r9, r3
 8001084:	464b      	mov	r3, r9
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	d400      	bmi.n	800108c <__aeabi_dsub+0x678>
 800108a:	e631      	b.n	8000cf0 <__aeabi_dsub+0x2dc>
 800108c:	464a      	mov	r2, r9
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <__aeabi_dsub+0x6d8>)
 8001090:	401a      	ands	r2, r3
 8001092:	2301      	movs	r3, #1
 8001094:	4691      	mov	r9, r2
 8001096:	4698      	mov	r8, r3
 8001098:	e62a      	b.n	8000cf0 <__aeabi_dsub+0x2dc>
 800109a:	0016      	movs	r6, r2
 800109c:	4664      	mov	r4, ip
 800109e:	3e20      	subs	r6, #32
 80010a0:	40f4      	lsrs	r4, r6
 80010a2:	46a0      	mov	r8, r4
 80010a4:	2a20      	cmp	r2, #32
 80010a6:	d005      	beq.n	80010b4 <__aeabi_dsub+0x6a0>
 80010a8:	2640      	movs	r6, #64	; 0x40
 80010aa:	4664      	mov	r4, ip
 80010ac:	1ab2      	subs	r2, r6, r2
 80010ae:	4094      	lsls	r4, r2
 80010b0:	4323      	orrs	r3, r4
 80010b2:	469a      	mov	sl, r3
 80010b4:	4654      	mov	r4, sl
 80010b6:	1e63      	subs	r3, r4, #1
 80010b8:	419c      	sbcs	r4, r3
 80010ba:	4643      	mov	r3, r8
 80010bc:	431c      	orrs	r4, r3
 80010be:	e5db      	b.n	8000c78 <__aeabi_dsub+0x264>
 80010c0:	0002      	movs	r2, r0
 80010c2:	2400      	movs	r4, #0
 80010c4:	2300      	movs	r3, #0
 80010c6:	e548      	b.n	8000b5a <__aeabi_dsub+0x146>
 80010c8:	19dc      	adds	r4, r3, r7
 80010ca:	42bc      	cmp	r4, r7
 80010cc:	41bf      	sbcs	r7, r7
 80010ce:	4461      	add	r1, ip
 80010d0:	4689      	mov	r9, r1
 80010d2:	427f      	negs	r7, r7
 80010d4:	44b9      	add	r9, r7
 80010d6:	e738      	b.n	8000f4a <__aeabi_dsub+0x536>
 80010d8:	464b      	mov	r3, r9
 80010da:	4323      	orrs	r3, r4
 80010dc:	d100      	bne.n	80010e0 <__aeabi_dsub+0x6cc>
 80010de:	e69f      	b.n	8000e20 <__aeabi_dsub+0x40c>
 80010e0:	e606      	b.n	8000cf0 <__aeabi_dsub+0x2dc>
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	000007fe 	.word	0x000007fe
 80010e8:	000007ff 	.word	0x000007ff
 80010ec:	ff7fffff 	.word	0xff7fffff
 80010f0:	08ff      	lsrs	r7, r7, #3
 80010f2:	074b      	lsls	r3, r1, #29
 80010f4:	433b      	orrs	r3, r7
 80010f6:	08cc      	lsrs	r4, r1, #3
 80010f8:	e616      	b.n	8000d28 <__aeabi_dsub+0x314>
 80010fa:	4662      	mov	r2, ip
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	0752      	lsls	r2, r2, #29
 8001100:	4313      	orrs	r3, r2
 8001102:	4662      	mov	r2, ip
 8001104:	08d4      	lsrs	r4, r2, #3
 8001106:	2280      	movs	r2, #128	; 0x80
 8001108:	0312      	lsls	r2, r2, #12
 800110a:	4214      	tst	r4, r2
 800110c:	d007      	beq.n	800111e <__aeabi_dsub+0x70a>
 800110e:	08c8      	lsrs	r0, r1, #3
 8001110:	4210      	tst	r0, r2
 8001112:	d104      	bne.n	800111e <__aeabi_dsub+0x70a>
 8001114:	465d      	mov	r5, fp
 8001116:	0004      	movs	r4, r0
 8001118:	08fb      	lsrs	r3, r7, #3
 800111a:	0749      	lsls	r1, r1, #29
 800111c:	430b      	orrs	r3, r1
 800111e:	0f5a      	lsrs	r2, r3, #29
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	0752      	lsls	r2, r2, #29
 8001124:	08db      	lsrs	r3, r3, #3
 8001126:	4313      	orrs	r3, r2
 8001128:	e5fe      	b.n	8000d28 <__aeabi_dsub+0x314>
 800112a:	2300      	movs	r3, #0
 800112c:	4a01      	ldr	r2, [pc, #4]	; (8001134 <__aeabi_dsub+0x720>)
 800112e:	001c      	movs	r4, r3
 8001130:	e513      	b.n	8000b5a <__aeabi_dsub+0x146>
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	000007ff 	.word	0x000007ff

08001138 <__aeabi_d2iz>:
 8001138:	000a      	movs	r2, r1
 800113a:	b530      	push	{r4, r5, lr}
 800113c:	4c13      	ldr	r4, [pc, #76]	; (800118c <__aeabi_d2iz+0x54>)
 800113e:	0053      	lsls	r3, r2, #1
 8001140:	0309      	lsls	r1, r1, #12
 8001142:	0005      	movs	r5, r0
 8001144:	0b09      	lsrs	r1, r1, #12
 8001146:	2000      	movs	r0, #0
 8001148:	0d5b      	lsrs	r3, r3, #21
 800114a:	0fd2      	lsrs	r2, r2, #31
 800114c:	42a3      	cmp	r3, r4
 800114e:	dd04      	ble.n	800115a <__aeabi_d2iz+0x22>
 8001150:	480f      	ldr	r0, [pc, #60]	; (8001190 <__aeabi_d2iz+0x58>)
 8001152:	4283      	cmp	r3, r0
 8001154:	dd02      	ble.n	800115c <__aeabi_d2iz+0x24>
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <__aeabi_d2iz+0x5c>)
 8001158:	18d0      	adds	r0, r2, r3
 800115a:	bd30      	pop	{r4, r5, pc}
 800115c:	2080      	movs	r0, #128	; 0x80
 800115e:	0340      	lsls	r0, r0, #13
 8001160:	4301      	orrs	r1, r0
 8001162:	480d      	ldr	r0, [pc, #52]	; (8001198 <__aeabi_d2iz+0x60>)
 8001164:	1ac0      	subs	r0, r0, r3
 8001166:	281f      	cmp	r0, #31
 8001168:	dd08      	ble.n	800117c <__aeabi_d2iz+0x44>
 800116a:	480c      	ldr	r0, [pc, #48]	; (800119c <__aeabi_d2iz+0x64>)
 800116c:	1ac3      	subs	r3, r0, r3
 800116e:	40d9      	lsrs	r1, r3
 8001170:	000b      	movs	r3, r1
 8001172:	4258      	negs	r0, r3
 8001174:	2a00      	cmp	r2, #0
 8001176:	d1f0      	bne.n	800115a <__aeabi_d2iz+0x22>
 8001178:	0018      	movs	r0, r3
 800117a:	e7ee      	b.n	800115a <__aeabi_d2iz+0x22>
 800117c:	4c08      	ldr	r4, [pc, #32]	; (80011a0 <__aeabi_d2iz+0x68>)
 800117e:	40c5      	lsrs	r5, r0
 8001180:	46a4      	mov	ip, r4
 8001182:	4463      	add	r3, ip
 8001184:	4099      	lsls	r1, r3
 8001186:	000b      	movs	r3, r1
 8001188:	432b      	orrs	r3, r5
 800118a:	e7f2      	b.n	8001172 <__aeabi_d2iz+0x3a>
 800118c:	000003fe 	.word	0x000003fe
 8001190:	0000041d 	.word	0x0000041d
 8001194:	7fffffff 	.word	0x7fffffff
 8001198:	00000433 	.word	0x00000433
 800119c:	00000413 	.word	0x00000413
 80011a0:	fffffbed 	.word	0xfffffbed

080011a4 <__aeabi_f2d>:
 80011a4:	b570      	push	{r4, r5, r6, lr}
 80011a6:	0043      	lsls	r3, r0, #1
 80011a8:	0246      	lsls	r6, r0, #9
 80011aa:	0fc4      	lsrs	r4, r0, #31
 80011ac:	20fe      	movs	r0, #254	; 0xfe
 80011ae:	0e1b      	lsrs	r3, r3, #24
 80011b0:	1c59      	adds	r1, r3, #1
 80011b2:	0a75      	lsrs	r5, r6, #9
 80011b4:	4208      	tst	r0, r1
 80011b6:	d00c      	beq.n	80011d2 <__aeabi_f2d+0x2e>
 80011b8:	22e0      	movs	r2, #224	; 0xe0
 80011ba:	0092      	lsls	r2, r2, #2
 80011bc:	4694      	mov	ip, r2
 80011be:	076d      	lsls	r5, r5, #29
 80011c0:	0b36      	lsrs	r6, r6, #12
 80011c2:	4463      	add	r3, ip
 80011c4:	051b      	lsls	r3, r3, #20
 80011c6:	4333      	orrs	r3, r6
 80011c8:	07e4      	lsls	r4, r4, #31
 80011ca:	4323      	orrs	r3, r4
 80011cc:	0028      	movs	r0, r5
 80011ce:	0019      	movs	r1, r3
 80011d0:	bd70      	pop	{r4, r5, r6, pc}
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d114      	bne.n	8001200 <__aeabi_f2d+0x5c>
 80011d6:	2d00      	cmp	r5, #0
 80011d8:	d01b      	beq.n	8001212 <__aeabi_f2d+0x6e>
 80011da:	0028      	movs	r0, r5
 80011dc:	f000 f868 	bl	80012b0 <__clzsi2>
 80011e0:	280a      	cmp	r0, #10
 80011e2:	dc1c      	bgt.n	800121e <__aeabi_f2d+0x7a>
 80011e4:	230b      	movs	r3, #11
 80011e6:	002e      	movs	r6, r5
 80011e8:	1a1b      	subs	r3, r3, r0
 80011ea:	40de      	lsrs	r6, r3
 80011ec:	0003      	movs	r3, r0
 80011ee:	3315      	adds	r3, #21
 80011f0:	409d      	lsls	r5, r3
 80011f2:	4a0e      	ldr	r2, [pc, #56]	; (800122c <__aeabi_f2d+0x88>)
 80011f4:	0336      	lsls	r6, r6, #12
 80011f6:	1a12      	subs	r2, r2, r0
 80011f8:	0552      	lsls	r2, r2, #21
 80011fa:	0b36      	lsrs	r6, r6, #12
 80011fc:	0d53      	lsrs	r3, r2, #21
 80011fe:	e7e1      	b.n	80011c4 <__aeabi_f2d+0x20>
 8001200:	2d00      	cmp	r5, #0
 8001202:	d009      	beq.n	8001218 <__aeabi_f2d+0x74>
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	0b36      	lsrs	r6, r6, #12
 8001208:	0312      	lsls	r2, r2, #12
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <__aeabi_f2d+0x8c>)
 800120c:	076d      	lsls	r5, r5, #29
 800120e:	4316      	orrs	r6, r2
 8001210:	e7d8      	b.n	80011c4 <__aeabi_f2d+0x20>
 8001212:	2300      	movs	r3, #0
 8001214:	2600      	movs	r6, #0
 8001216:	e7d5      	b.n	80011c4 <__aeabi_f2d+0x20>
 8001218:	2600      	movs	r6, #0
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <__aeabi_f2d+0x8c>)
 800121c:	e7d2      	b.n	80011c4 <__aeabi_f2d+0x20>
 800121e:	0003      	movs	r3, r0
 8001220:	3b0b      	subs	r3, #11
 8001222:	409d      	lsls	r5, r3
 8001224:	002e      	movs	r6, r5
 8001226:	2500      	movs	r5, #0
 8001228:	e7e3      	b.n	80011f2 <__aeabi_f2d+0x4e>
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	00000389 	.word	0x00000389
 8001230:	000007ff 	.word	0x000007ff

08001234 <__aeabi_cdrcmple>:
 8001234:	4684      	mov	ip, r0
 8001236:	0010      	movs	r0, r2
 8001238:	4662      	mov	r2, ip
 800123a:	468c      	mov	ip, r1
 800123c:	0019      	movs	r1, r3
 800123e:	4663      	mov	r3, ip
 8001240:	e000      	b.n	8001244 <__aeabi_cdcmpeq>
 8001242:	46c0      	nop			; (mov r8, r8)

08001244 <__aeabi_cdcmpeq>:
 8001244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001246:	f000 f8f9 	bl	800143c <__ledf2>
 800124a:	2800      	cmp	r0, #0
 800124c:	d401      	bmi.n	8001252 <__aeabi_cdcmpeq+0xe>
 800124e:	2100      	movs	r1, #0
 8001250:	42c8      	cmn	r0, r1
 8001252:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001254 <__aeabi_dcmpeq>:
 8001254:	b510      	push	{r4, lr}
 8001256:	f000 f849 	bl	80012ec <__eqdf2>
 800125a:	4240      	negs	r0, r0
 800125c:	3001      	adds	r0, #1
 800125e:	bd10      	pop	{r4, pc}

08001260 <__aeabi_dcmplt>:
 8001260:	b510      	push	{r4, lr}
 8001262:	f000 f8eb 	bl	800143c <__ledf2>
 8001266:	2800      	cmp	r0, #0
 8001268:	db01      	blt.n	800126e <__aeabi_dcmplt+0xe>
 800126a:	2000      	movs	r0, #0
 800126c:	bd10      	pop	{r4, pc}
 800126e:	2001      	movs	r0, #1
 8001270:	bd10      	pop	{r4, pc}
 8001272:	46c0      	nop			; (mov r8, r8)

08001274 <__aeabi_dcmple>:
 8001274:	b510      	push	{r4, lr}
 8001276:	f000 f8e1 	bl	800143c <__ledf2>
 800127a:	2800      	cmp	r0, #0
 800127c:	dd01      	ble.n	8001282 <__aeabi_dcmple+0xe>
 800127e:	2000      	movs	r0, #0
 8001280:	bd10      	pop	{r4, pc}
 8001282:	2001      	movs	r0, #1
 8001284:	bd10      	pop	{r4, pc}
 8001286:	46c0      	nop			; (mov r8, r8)

08001288 <__aeabi_dcmpgt>:
 8001288:	b510      	push	{r4, lr}
 800128a:	f000 f871 	bl	8001370 <__gedf2>
 800128e:	2800      	cmp	r0, #0
 8001290:	dc01      	bgt.n	8001296 <__aeabi_dcmpgt+0xe>
 8001292:	2000      	movs	r0, #0
 8001294:	bd10      	pop	{r4, pc}
 8001296:	2001      	movs	r0, #1
 8001298:	bd10      	pop	{r4, pc}
 800129a:	46c0      	nop			; (mov r8, r8)

0800129c <__aeabi_dcmpge>:
 800129c:	b510      	push	{r4, lr}
 800129e:	f000 f867 	bl	8001370 <__gedf2>
 80012a2:	2800      	cmp	r0, #0
 80012a4:	da01      	bge.n	80012aa <__aeabi_dcmpge+0xe>
 80012a6:	2000      	movs	r0, #0
 80012a8:	bd10      	pop	{r4, pc}
 80012aa:	2001      	movs	r0, #1
 80012ac:	bd10      	pop	{r4, pc}
 80012ae:	46c0      	nop			; (mov r8, r8)

080012b0 <__clzsi2>:
 80012b0:	211c      	movs	r1, #28
 80012b2:	2301      	movs	r3, #1
 80012b4:	041b      	lsls	r3, r3, #16
 80012b6:	4298      	cmp	r0, r3
 80012b8:	d301      	bcc.n	80012be <__clzsi2+0xe>
 80012ba:	0c00      	lsrs	r0, r0, #16
 80012bc:	3910      	subs	r1, #16
 80012be:	0a1b      	lsrs	r3, r3, #8
 80012c0:	4298      	cmp	r0, r3
 80012c2:	d301      	bcc.n	80012c8 <__clzsi2+0x18>
 80012c4:	0a00      	lsrs	r0, r0, #8
 80012c6:	3908      	subs	r1, #8
 80012c8:	091b      	lsrs	r3, r3, #4
 80012ca:	4298      	cmp	r0, r3
 80012cc:	d301      	bcc.n	80012d2 <__clzsi2+0x22>
 80012ce:	0900      	lsrs	r0, r0, #4
 80012d0:	3904      	subs	r1, #4
 80012d2:	a202      	add	r2, pc, #8	; (adr r2, 80012dc <__clzsi2+0x2c>)
 80012d4:	5c10      	ldrb	r0, [r2, r0]
 80012d6:	1840      	adds	r0, r0, r1
 80012d8:	4770      	bx	lr
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	02020304 	.word	0x02020304
 80012e0:	01010101 	.word	0x01010101
	...

080012ec <__eqdf2>:
 80012ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ee:	464e      	mov	r6, r9
 80012f0:	4645      	mov	r5, r8
 80012f2:	46de      	mov	lr, fp
 80012f4:	4657      	mov	r7, sl
 80012f6:	4690      	mov	r8, r2
 80012f8:	b5e0      	push	{r5, r6, r7, lr}
 80012fa:	0017      	movs	r7, r2
 80012fc:	031a      	lsls	r2, r3, #12
 80012fe:	0b12      	lsrs	r2, r2, #12
 8001300:	0005      	movs	r5, r0
 8001302:	4684      	mov	ip, r0
 8001304:	4819      	ldr	r0, [pc, #100]	; (800136c <__eqdf2+0x80>)
 8001306:	030e      	lsls	r6, r1, #12
 8001308:	004c      	lsls	r4, r1, #1
 800130a:	4691      	mov	r9, r2
 800130c:	005a      	lsls	r2, r3, #1
 800130e:	0fdb      	lsrs	r3, r3, #31
 8001310:	469b      	mov	fp, r3
 8001312:	0b36      	lsrs	r6, r6, #12
 8001314:	0d64      	lsrs	r4, r4, #21
 8001316:	0fc9      	lsrs	r1, r1, #31
 8001318:	0d52      	lsrs	r2, r2, #21
 800131a:	4284      	cmp	r4, r0
 800131c:	d019      	beq.n	8001352 <__eqdf2+0x66>
 800131e:	4282      	cmp	r2, r0
 8001320:	d010      	beq.n	8001344 <__eqdf2+0x58>
 8001322:	2001      	movs	r0, #1
 8001324:	4294      	cmp	r4, r2
 8001326:	d10e      	bne.n	8001346 <__eqdf2+0x5a>
 8001328:	454e      	cmp	r6, r9
 800132a:	d10c      	bne.n	8001346 <__eqdf2+0x5a>
 800132c:	2001      	movs	r0, #1
 800132e:	45c4      	cmp	ip, r8
 8001330:	d109      	bne.n	8001346 <__eqdf2+0x5a>
 8001332:	4559      	cmp	r1, fp
 8001334:	d017      	beq.n	8001366 <__eqdf2+0x7a>
 8001336:	2c00      	cmp	r4, #0
 8001338:	d105      	bne.n	8001346 <__eqdf2+0x5a>
 800133a:	0030      	movs	r0, r6
 800133c:	4328      	orrs	r0, r5
 800133e:	1e43      	subs	r3, r0, #1
 8001340:	4198      	sbcs	r0, r3
 8001342:	e000      	b.n	8001346 <__eqdf2+0x5a>
 8001344:	2001      	movs	r0, #1
 8001346:	bcf0      	pop	{r4, r5, r6, r7}
 8001348:	46bb      	mov	fp, r7
 800134a:	46b2      	mov	sl, r6
 800134c:	46a9      	mov	r9, r5
 800134e:	46a0      	mov	r8, r4
 8001350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001352:	0033      	movs	r3, r6
 8001354:	2001      	movs	r0, #1
 8001356:	432b      	orrs	r3, r5
 8001358:	d1f5      	bne.n	8001346 <__eqdf2+0x5a>
 800135a:	42a2      	cmp	r2, r4
 800135c:	d1f3      	bne.n	8001346 <__eqdf2+0x5a>
 800135e:	464b      	mov	r3, r9
 8001360:	433b      	orrs	r3, r7
 8001362:	d1f0      	bne.n	8001346 <__eqdf2+0x5a>
 8001364:	e7e2      	b.n	800132c <__eqdf2+0x40>
 8001366:	2000      	movs	r0, #0
 8001368:	e7ed      	b.n	8001346 <__eqdf2+0x5a>
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	000007ff 	.word	0x000007ff

08001370 <__gedf2>:
 8001370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001372:	4647      	mov	r7, r8
 8001374:	46ce      	mov	lr, r9
 8001376:	0004      	movs	r4, r0
 8001378:	0018      	movs	r0, r3
 800137a:	0016      	movs	r6, r2
 800137c:	031b      	lsls	r3, r3, #12
 800137e:	0b1b      	lsrs	r3, r3, #12
 8001380:	4d2d      	ldr	r5, [pc, #180]	; (8001438 <__gedf2+0xc8>)
 8001382:	004a      	lsls	r2, r1, #1
 8001384:	4699      	mov	r9, r3
 8001386:	b580      	push	{r7, lr}
 8001388:	0043      	lsls	r3, r0, #1
 800138a:	030f      	lsls	r7, r1, #12
 800138c:	46a4      	mov	ip, r4
 800138e:	46b0      	mov	r8, r6
 8001390:	0b3f      	lsrs	r7, r7, #12
 8001392:	0d52      	lsrs	r2, r2, #21
 8001394:	0fc9      	lsrs	r1, r1, #31
 8001396:	0d5b      	lsrs	r3, r3, #21
 8001398:	0fc0      	lsrs	r0, r0, #31
 800139a:	42aa      	cmp	r2, r5
 800139c:	d021      	beq.n	80013e2 <__gedf2+0x72>
 800139e:	42ab      	cmp	r3, r5
 80013a0:	d013      	beq.n	80013ca <__gedf2+0x5a>
 80013a2:	2a00      	cmp	r2, #0
 80013a4:	d122      	bne.n	80013ec <__gedf2+0x7c>
 80013a6:	433c      	orrs	r4, r7
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d102      	bne.n	80013b2 <__gedf2+0x42>
 80013ac:	464d      	mov	r5, r9
 80013ae:	432e      	orrs	r6, r5
 80013b0:	d022      	beq.n	80013f8 <__gedf2+0x88>
 80013b2:	2c00      	cmp	r4, #0
 80013b4:	d010      	beq.n	80013d8 <__gedf2+0x68>
 80013b6:	4281      	cmp	r1, r0
 80013b8:	d022      	beq.n	8001400 <__gedf2+0x90>
 80013ba:	2002      	movs	r0, #2
 80013bc:	3901      	subs	r1, #1
 80013be:	4008      	ands	r0, r1
 80013c0:	3801      	subs	r0, #1
 80013c2:	bcc0      	pop	{r6, r7}
 80013c4:	46b9      	mov	r9, r7
 80013c6:	46b0      	mov	r8, r6
 80013c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ca:	464d      	mov	r5, r9
 80013cc:	432e      	orrs	r6, r5
 80013ce:	d129      	bne.n	8001424 <__gedf2+0xb4>
 80013d0:	2a00      	cmp	r2, #0
 80013d2:	d1f0      	bne.n	80013b6 <__gedf2+0x46>
 80013d4:	433c      	orrs	r4, r7
 80013d6:	d1ee      	bne.n	80013b6 <__gedf2+0x46>
 80013d8:	2800      	cmp	r0, #0
 80013da:	d1f2      	bne.n	80013c2 <__gedf2+0x52>
 80013dc:	2001      	movs	r0, #1
 80013de:	4240      	negs	r0, r0
 80013e0:	e7ef      	b.n	80013c2 <__gedf2+0x52>
 80013e2:	003d      	movs	r5, r7
 80013e4:	4325      	orrs	r5, r4
 80013e6:	d11d      	bne.n	8001424 <__gedf2+0xb4>
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d0ee      	beq.n	80013ca <__gedf2+0x5a>
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1e2      	bne.n	80013b6 <__gedf2+0x46>
 80013f0:	464c      	mov	r4, r9
 80013f2:	4326      	orrs	r6, r4
 80013f4:	d1df      	bne.n	80013b6 <__gedf2+0x46>
 80013f6:	e7e0      	b.n	80013ba <__gedf2+0x4a>
 80013f8:	2000      	movs	r0, #0
 80013fa:	2c00      	cmp	r4, #0
 80013fc:	d0e1      	beq.n	80013c2 <__gedf2+0x52>
 80013fe:	e7dc      	b.n	80013ba <__gedf2+0x4a>
 8001400:	429a      	cmp	r2, r3
 8001402:	dc0a      	bgt.n	800141a <__gedf2+0xaa>
 8001404:	dbe8      	blt.n	80013d8 <__gedf2+0x68>
 8001406:	454f      	cmp	r7, r9
 8001408:	d8d7      	bhi.n	80013ba <__gedf2+0x4a>
 800140a:	d00e      	beq.n	800142a <__gedf2+0xba>
 800140c:	2000      	movs	r0, #0
 800140e:	454f      	cmp	r7, r9
 8001410:	d2d7      	bcs.n	80013c2 <__gedf2+0x52>
 8001412:	2900      	cmp	r1, #0
 8001414:	d0e2      	beq.n	80013dc <__gedf2+0x6c>
 8001416:	0008      	movs	r0, r1
 8001418:	e7d3      	b.n	80013c2 <__gedf2+0x52>
 800141a:	4243      	negs	r3, r0
 800141c:	4158      	adcs	r0, r3
 800141e:	0040      	lsls	r0, r0, #1
 8001420:	3801      	subs	r0, #1
 8001422:	e7ce      	b.n	80013c2 <__gedf2+0x52>
 8001424:	2002      	movs	r0, #2
 8001426:	4240      	negs	r0, r0
 8001428:	e7cb      	b.n	80013c2 <__gedf2+0x52>
 800142a:	45c4      	cmp	ip, r8
 800142c:	d8c5      	bhi.n	80013ba <__gedf2+0x4a>
 800142e:	2000      	movs	r0, #0
 8001430:	45c4      	cmp	ip, r8
 8001432:	d2c6      	bcs.n	80013c2 <__gedf2+0x52>
 8001434:	e7ed      	b.n	8001412 <__gedf2+0xa2>
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	000007ff 	.word	0x000007ff

0800143c <__ledf2>:
 800143c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143e:	4647      	mov	r7, r8
 8001440:	46ce      	mov	lr, r9
 8001442:	0004      	movs	r4, r0
 8001444:	0018      	movs	r0, r3
 8001446:	0016      	movs	r6, r2
 8001448:	031b      	lsls	r3, r3, #12
 800144a:	0b1b      	lsrs	r3, r3, #12
 800144c:	4d2c      	ldr	r5, [pc, #176]	; (8001500 <__ledf2+0xc4>)
 800144e:	004a      	lsls	r2, r1, #1
 8001450:	4699      	mov	r9, r3
 8001452:	b580      	push	{r7, lr}
 8001454:	0043      	lsls	r3, r0, #1
 8001456:	030f      	lsls	r7, r1, #12
 8001458:	46a4      	mov	ip, r4
 800145a:	46b0      	mov	r8, r6
 800145c:	0b3f      	lsrs	r7, r7, #12
 800145e:	0d52      	lsrs	r2, r2, #21
 8001460:	0fc9      	lsrs	r1, r1, #31
 8001462:	0d5b      	lsrs	r3, r3, #21
 8001464:	0fc0      	lsrs	r0, r0, #31
 8001466:	42aa      	cmp	r2, r5
 8001468:	d00d      	beq.n	8001486 <__ledf2+0x4a>
 800146a:	42ab      	cmp	r3, r5
 800146c:	d010      	beq.n	8001490 <__ledf2+0x54>
 800146e:	2a00      	cmp	r2, #0
 8001470:	d127      	bne.n	80014c2 <__ledf2+0x86>
 8001472:	433c      	orrs	r4, r7
 8001474:	2b00      	cmp	r3, #0
 8001476:	d111      	bne.n	800149c <__ledf2+0x60>
 8001478:	464d      	mov	r5, r9
 800147a:	432e      	orrs	r6, r5
 800147c:	d10e      	bne.n	800149c <__ledf2+0x60>
 800147e:	2000      	movs	r0, #0
 8001480:	2c00      	cmp	r4, #0
 8001482:	d015      	beq.n	80014b0 <__ledf2+0x74>
 8001484:	e00e      	b.n	80014a4 <__ledf2+0x68>
 8001486:	003d      	movs	r5, r7
 8001488:	4325      	orrs	r5, r4
 800148a:	d110      	bne.n	80014ae <__ledf2+0x72>
 800148c:	4293      	cmp	r3, r2
 800148e:	d118      	bne.n	80014c2 <__ledf2+0x86>
 8001490:	464d      	mov	r5, r9
 8001492:	432e      	orrs	r6, r5
 8001494:	d10b      	bne.n	80014ae <__ledf2+0x72>
 8001496:	2a00      	cmp	r2, #0
 8001498:	d102      	bne.n	80014a0 <__ledf2+0x64>
 800149a:	433c      	orrs	r4, r7
 800149c:	2c00      	cmp	r4, #0
 800149e:	d00b      	beq.n	80014b8 <__ledf2+0x7c>
 80014a0:	4281      	cmp	r1, r0
 80014a2:	d014      	beq.n	80014ce <__ledf2+0x92>
 80014a4:	2002      	movs	r0, #2
 80014a6:	3901      	subs	r1, #1
 80014a8:	4008      	ands	r0, r1
 80014aa:	3801      	subs	r0, #1
 80014ac:	e000      	b.n	80014b0 <__ledf2+0x74>
 80014ae:	2002      	movs	r0, #2
 80014b0:	bcc0      	pop	{r6, r7}
 80014b2:	46b9      	mov	r9, r7
 80014b4:	46b0      	mov	r8, r6
 80014b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b8:	2800      	cmp	r0, #0
 80014ba:	d1f9      	bne.n	80014b0 <__ledf2+0x74>
 80014bc:	2001      	movs	r0, #1
 80014be:	4240      	negs	r0, r0
 80014c0:	e7f6      	b.n	80014b0 <__ledf2+0x74>
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1ec      	bne.n	80014a0 <__ledf2+0x64>
 80014c6:	464c      	mov	r4, r9
 80014c8:	4326      	orrs	r6, r4
 80014ca:	d1e9      	bne.n	80014a0 <__ledf2+0x64>
 80014cc:	e7ea      	b.n	80014a4 <__ledf2+0x68>
 80014ce:	429a      	cmp	r2, r3
 80014d0:	dd04      	ble.n	80014dc <__ledf2+0xa0>
 80014d2:	4243      	negs	r3, r0
 80014d4:	4158      	adcs	r0, r3
 80014d6:	0040      	lsls	r0, r0, #1
 80014d8:	3801      	subs	r0, #1
 80014da:	e7e9      	b.n	80014b0 <__ledf2+0x74>
 80014dc:	429a      	cmp	r2, r3
 80014de:	dbeb      	blt.n	80014b8 <__ledf2+0x7c>
 80014e0:	454f      	cmp	r7, r9
 80014e2:	d8df      	bhi.n	80014a4 <__ledf2+0x68>
 80014e4:	d006      	beq.n	80014f4 <__ledf2+0xb8>
 80014e6:	2000      	movs	r0, #0
 80014e8:	454f      	cmp	r7, r9
 80014ea:	d2e1      	bcs.n	80014b0 <__ledf2+0x74>
 80014ec:	2900      	cmp	r1, #0
 80014ee:	d0e5      	beq.n	80014bc <__ledf2+0x80>
 80014f0:	0008      	movs	r0, r1
 80014f2:	e7dd      	b.n	80014b0 <__ledf2+0x74>
 80014f4:	45c4      	cmp	ip, r8
 80014f6:	d8d5      	bhi.n	80014a4 <__ledf2+0x68>
 80014f8:	2000      	movs	r0, #0
 80014fa:	45c4      	cmp	ip, r8
 80014fc:	d2d8      	bcs.n	80014b0 <__ledf2+0x74>
 80014fe:	e7f5      	b.n	80014ec <__ledf2+0xb0>
 8001500:	000007ff 	.word	0x000007ff

08001504 <MX_GPIO_Init>:

/** Configure pins
     PA4   ------> S_TIM14_CH1
*/
void MX_GPIO_Init(void)
{
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b089      	sub	sp, #36	; 0x24
 8001508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150a:	240c      	movs	r4, #12
 800150c:	193b      	adds	r3, r7, r4
 800150e:	0018      	movs	r0, r3
 8001510:	2314      	movs	r3, #20
 8001512:	001a      	movs	r2, r3
 8001514:	2100      	movs	r1, #0
 8001516:	f002 fe04 	bl	8004122 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	4b19      	ldr	r3, [pc, #100]	; (8001580 <MX_GPIO_Init+0x7c>)
 800151c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <MX_GPIO_Init+0x7c>)
 8001520:	2101      	movs	r1, #1
 8001522:	430a      	orrs	r2, r1
 8001524:	635a      	str	r2, [r3, #52]	; 0x34
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <MX_GPIO_Init+0x7c>)
 8001528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800152a:	2201      	movs	r2, #1
 800152c:	4013      	ands	r3, r2
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <MX_GPIO_Init+0x7c>)
 8001534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_GPIO_Init+0x7c>)
 8001538:	2104      	movs	r1, #4
 800153a:	430a      	orrs	r2, r1
 800153c:	635a      	str	r2, [r3, #52]	; 0x34
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <MX_GPIO_Init+0x7c>)
 8001540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001542:	2204      	movs	r2, #4
 8001544:	4013      	ands	r3, r2
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800154a:	0021      	movs	r1, r4
 800154c:	187b      	adds	r3, r7, r1
 800154e:	2210      	movs	r2, #16
 8001550:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001552:	187b      	adds	r3, r7, r1
 8001554:	2202      	movs	r2, #2
 8001556:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	187b      	adds	r3, r7, r1
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	187b      	adds	r3, r7, r1
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8001564:	187b      	adds	r3, r7, r1
 8001566:	2204      	movs	r2, #4
 8001568:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	187a      	adds	r2, r7, r1
 800156c:	23a0      	movs	r3, #160	; 0xa0
 800156e:	05db      	lsls	r3, r3, #23
 8001570:	0011      	movs	r1, r2
 8001572:	0018      	movs	r0, r3
 8001574:	f000 fe92 	bl	800229c <HAL_GPIO_Init>

}
 8001578:	46c0      	nop			; (mov r8, r8)
 800157a:	46bd      	mov	sp, r7
 800157c:	b009      	add	sp, #36	; 0x24
 800157e:	bd90      	pop	{r4, r7, pc}
 8001580:	40021000 	.word	0x40021000

08001584 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <__io_putchar+0x20>)
 800158e:	1d39      	adds	r1, r7, #4
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <__io_putchar+0x24>)
 8001592:	2201      	movs	r2, #1
 8001594:	f001 fed4 	bl	8003340 <HAL_UART_Transmit>
	return ch;
 8001598:	687b      	ldr	r3, [r7, #4]
}
 800159a:	0018      	movs	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	b002      	add	sp, #8
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	0000ffff 	.word	0x0000ffff
 80015a8:	2000009c 	.word	0x2000009c

080015ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b0:	f000 fd16 	bl	8001fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b4:	f000 f848 	bl	8001648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b8:	f7ff ffa4 	bl	8001504 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80015bc:	f000 f9a6 	bl	800190c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80015c0:	f000 f9f2 	bl	80019a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	xl320.serial.transmit = uart_half_duplex_transmit;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <main+0x88>)
 80015c6:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <main+0x8c>)
 80015c8:	605a      	str	r2, [r3, #4]
	xl320.serial.receive  = uart_half_duplex_receive;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <main+0x88>)
 80015cc:	4a1b      	ldr	r2, [pc, #108]	; (800163c <main+0x90>)
 80015ce:	609a      	str	r2, [r3, #8]

	xl320_init(&xl320, 1, BR_1M);
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <main+0x88>)
 80015d2:	2203      	movs	r2, #3
 80015d4:	2101      	movs	r1, #1
 80015d6:	0018      	movs	r0, r3
 80015d8:	f000 fade 	bl	8001b98 <xl320_init>
	xl320_setSpeed(&xl320, 20);
 80015dc:	4a18      	ldr	r2, [pc, #96]	; (8001640 <main+0x94>)
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <main+0x88>)
 80015e0:	1c11      	adds	r1, r2, #0
 80015e2:	0018      	movs	r0, r3
 80015e4:	f000 fc68 	bl	8001eb8 <xl320_setSpeed>
	xl320_torqueEnable(&xl320);
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <main+0x88>)
 80015ea:	0018      	movs	r0, r3
 80015ec:	f000 fcb6 	bl	8001f5c <xl320_torqueEnable>
	HAL_Delay(250);
 80015f0:	20fa      	movs	r0, #250	; 0xfa
 80015f2:	f000 fd7b 	bl	80020ec <HAL_Delay>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		xl320_setGoalPosition(&xl320, 75);
 80015f6:	4a13      	ldr	r2, [pc, #76]	; (8001644 <main+0x98>)
 80015f8:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <main+0x88>)
 80015fa:	1c11      	adds	r1, r2, #0
 80015fc:	0018      	movs	r0, r3
 80015fe:	f000 fc23 	bl	8001e48 <xl320_setGoalPosition>
		xl320_executeAction(&xl320);
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <main+0x88>)
 8001604:	0018      	movs	r0, r3
 8001606:	f000 fc99 	bl	8001f3c <xl320_executeAction>
		HAL_Delay(2000);
 800160a:	23fa      	movs	r3, #250	; 0xfa
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	0018      	movs	r0, r3
 8001610:	f000 fd6c 	bl	80020ec <HAL_Delay>
		xl320_setGoalPosition(&xl320, 0);
 8001614:	2200      	movs	r2, #0
 8001616:	4b07      	ldr	r3, [pc, #28]	; (8001634 <main+0x88>)
 8001618:	1c11      	adds	r1, r2, #0
 800161a:	0018      	movs	r0, r3
 800161c:	f000 fc14 	bl	8001e48 <xl320_setGoalPosition>
		xl320_executeAction(&xl320);
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <main+0x88>)
 8001622:	0018      	movs	r0, r3
 8001624:	f000 fc8a 	bl	8001f3c <xl320_executeAction>
		HAL_Delay(2000);
 8001628:	23fa      	movs	r3, #250	; 0xfa
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	0018      	movs	r0, r3
 800162e:	f000 fd5d 	bl	80020ec <HAL_Delay>
		xl320_setGoalPosition(&xl320, 75);
 8001632:	e7e0      	b.n	80015f6 <main+0x4a>
 8001634:	2000008c 	.word	0x2000008c
 8001638:	0800189d 	.word	0x0800189d
 800163c:	080018d5 	.word	0x080018d5
 8001640:	41a00000 	.word	0x41a00000
 8001644:	42960000 	.word	0x42960000

08001648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b093      	sub	sp, #76	; 0x4c
 800164c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164e:	2414      	movs	r4, #20
 8001650:	193b      	adds	r3, r7, r4
 8001652:	0018      	movs	r0, r3
 8001654:	2334      	movs	r3, #52	; 0x34
 8001656:	001a      	movs	r2, r3
 8001658:	2100      	movs	r1, #0
 800165a:	f002 fd62 	bl	8004122 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	0018      	movs	r0, r3
 8001662:	2310      	movs	r3, #16
 8001664:	001a      	movs	r2, r3
 8001666:	2100      	movs	r1, #0
 8001668:	f002 fd5b 	bl	8004122 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	0018      	movs	r0, r3
 8001672:	f000 ff77 	bl	8002564 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001676:	193b      	adds	r3, r7, r4
 8001678:	2202      	movs	r2, #2
 800167a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800167c:	193b      	adds	r3, r7, r4
 800167e:	2280      	movs	r2, #128	; 0x80
 8001680:	0052      	lsls	r2, r2, #1
 8001682:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001684:	193b      	adds	r3, r7, r4
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800168a:	193b      	adds	r3, r7, r4
 800168c:	2240      	movs	r2, #64	; 0x40
 800168e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001690:	193b      	adds	r3, r7, r4
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001696:	193b      	adds	r3, r7, r4
 8001698:	0018      	movs	r0, r3
 800169a:	f000 ffaf 	bl	80025fc <HAL_RCC_OscConfig>
 800169e:	1e03      	subs	r3, r0, #0
 80016a0:	d001      	beq.n	80016a6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80016a2:	f000 f819 	bl	80016d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	2200      	movs	r2, #0
 80016b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016b8:	1d3b      	adds	r3, r7, #4
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	2100      	movs	r1, #0
 80016c2:	0018      	movs	r0, r3
 80016c4:	f001 faaa 	bl	8002c1c <HAL_RCC_ClockConfig>
 80016c8:	1e03      	subs	r3, r0, #0
 80016ca:	d001      	beq.n	80016d0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80016cc:	f000 f804 	bl	80016d8 <Error_Handler>
  }
}
 80016d0:	46c0      	nop			; (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b013      	add	sp, #76	; 0x4c
 80016d6:	bd90      	pop	{r4, r7, pc}

080016d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016dc:	b672      	cpsid	i
}
 80016de:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016e0:	e7fe      	b.n	80016e0 <Error_Handler+0x8>
	...

080016e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_MspInit+0x44>)
 80016ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <HAL_MspInit+0x44>)
 80016f0:	2101      	movs	r1, #1
 80016f2:	430a      	orrs	r2, r1
 80016f4:	641a      	str	r2, [r3, #64]	; 0x40
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <HAL_MspInit+0x44>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	2201      	movs	r2, #1
 80016fc:	4013      	ands	r3, r2
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_MspInit+0x44>)
 8001704:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <HAL_MspInit+0x44>)
 8001708:	2180      	movs	r1, #128	; 0x80
 800170a:	0549      	lsls	r1, r1, #21
 800170c:	430a      	orrs	r2, r1
 800170e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <HAL_MspInit+0x44>)
 8001712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	055b      	lsls	r3, r3, #21
 8001718:	4013      	ands	r3, r2
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	46bd      	mov	sp, r7
 8001722:	b002      	add	sp, #8
 8001724:	bd80      	pop	{r7, pc}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	40021000 	.word	0x40021000

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <NMI_Handler+0x4>

08001732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <HardFault_Handler+0x4>

08001738 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001750:	f000 fcb0 	bl	80020b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001754:	46c0      	nop			; (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	60f8      	str	r0, [r7, #12]
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	e00a      	b.n	8001782 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800176c:	e000      	b.n	8001770 <_read+0x16>
 800176e:	bf00      	nop
 8001770:	0001      	movs	r1, r0
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	1c5a      	adds	r2, r3, #1
 8001776:	60ba      	str	r2, [r7, #8]
 8001778:	b2ca      	uxtb	r2, r1
 800177a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	3301      	adds	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	429a      	cmp	r2, r3
 8001788:	dbf0      	blt.n	800176c <_read+0x12>
	}

return len;
 800178a:	687b      	ldr	r3, [r7, #4]
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b006      	add	sp, #24
 8001792:	bd80      	pop	{r7, pc}

08001794 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	e009      	b.n	80017ba <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	60ba      	str	r2, [r7, #8]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	0018      	movs	r0, r3
 80017b0:	f7ff fee8 	bl	8001584 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	3301      	adds	r3, #1
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	429a      	cmp	r2, r3
 80017c0:	dbf1      	blt.n	80017a6 <_write+0x12>
	}
	return len;
 80017c2:	687b      	ldr	r3, [r7, #4]
}
 80017c4:	0018      	movs	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b006      	add	sp, #24
 80017ca:	bd80      	pop	{r7, pc}

080017cc <_close>:

int _close(int file)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	return -1;
 80017d4:	2301      	movs	r3, #1
 80017d6:	425b      	negs	r3, r3
}
 80017d8:	0018      	movs	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	b002      	add	sp, #8
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2280      	movs	r2, #128	; 0x80
 80017ee:	0192      	lsls	r2, r2, #6
 80017f0:	605a      	str	r2, [r3, #4]
	return 0;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	0018      	movs	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	b002      	add	sp, #8
 80017fa:	bd80      	pop	{r7, pc}

080017fc <_isatty>:

int _isatty(int file)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	return 1;
 8001804:	2301      	movs	r3, #1
}
 8001806:	0018      	movs	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	b002      	add	sp, #8
 800180c:	bd80      	pop	{r7, pc}

0800180e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b084      	sub	sp, #16
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
	return 0;
 800181a:	2300      	movs	r3, #0
}
 800181c:	0018      	movs	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	b004      	add	sp, #16
 8001822:	bd80      	pop	{r7, pc}

08001824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800182c:	4a14      	ldr	r2, [pc, #80]	; (8001880 <_sbrk+0x5c>)
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <_sbrk+0x60>)
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d102      	bne.n	8001846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001840:	4b11      	ldr	r3, [pc, #68]	; (8001888 <_sbrk+0x64>)
 8001842:	4a12      	ldr	r2, [pc, #72]	; (800188c <_sbrk+0x68>)
 8001844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <_sbrk+0x64>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	18d3      	adds	r3, r2, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	429a      	cmp	r2, r3
 8001852:	d207      	bcs.n	8001864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001854:	f002 fc1e 	bl	8004094 <__errno>
 8001858:	0003      	movs	r3, r0
 800185a:	220c      	movs	r2, #12
 800185c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185e:	2301      	movs	r3, #1
 8001860:	425b      	negs	r3, r3
 8001862:	e009      	b.n	8001878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800186a:	4b07      	ldr	r3, [pc, #28]	; (8001888 <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	18d2      	adds	r2, r2, r3
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <_sbrk+0x64>)
 8001874:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001876:	68fb      	ldr	r3, [r7, #12]
}
 8001878:	0018      	movs	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	b006      	add	sp, #24
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20009000 	.word	0x20009000
 8001884:	00000400 	.word	0x00000400
 8001888:	20000098 	.word	0x20000098
 800188c:	200001d8 	.word	0x200001d8

08001890 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001894:	46c0      	nop			; (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <uart_half_duplex_transmit>:
 *  Created on: Oct 27, 2022
 *      Author: lucas
 */
#include "uart_half_duplex_driver.h"

int uart_half_duplex_transmit(uint8_t *pData, uint16_t size, uint32_t timeout){
 800189c:	b5b0      	push	{r4, r5, r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	250a      	movs	r5, #10
 80018a8:	197b      	adds	r3, r7, r5
 80018aa:	1c0a      	adds	r2, r1, #0
 80018ac:	801a      	strh	r2, [r3, #0]
	HAL_HalfDuplex_EnableTransmitter(&USART_PORT);
 80018ae:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <uart_half_duplex_transmit+0x34>)
 80018b0:	0018      	movs	r0, r3
 80018b2:	f001 fec3 	bl	800363c <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&USART_PORT, pData, size, timeout);
 80018b6:	687c      	ldr	r4, [r7, #4]
 80018b8:	197b      	adds	r3, r7, r5
 80018ba:	881a      	ldrh	r2, [r3, #0]
 80018bc:	68f9      	ldr	r1, [r7, #12]
 80018be:	4804      	ldr	r0, [pc, #16]	; (80018d0 <uart_half_duplex_transmit+0x34>)
 80018c0:	0023      	movs	r3, r4
 80018c2:	f001 fd3d 	bl	8003340 <HAL_UART_Transmit>

	return 0;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	0018      	movs	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b004      	add	sp, #16
 80018ce:	bdb0      	pop	{r4, r5, r7, pc}
 80018d0:	20000130 	.word	0x20000130

080018d4 <uart_half_duplex_receive>:

int uart_half_duplex_receive(uint8_t *pData, uint16_t size, uint32_t timeout) {
 80018d4:	b5b0      	push	{r4, r5, r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	250a      	movs	r5, #10
 80018e0:	197b      	adds	r3, r7, r5
 80018e2:	1c0a      	adds	r2, r1, #0
 80018e4:	801a      	strh	r2, [r3, #0]
	HAL_HalfDuplex_EnableReceiver(&USART_PORT);
 80018e6:	4b08      	ldr	r3, [pc, #32]	; (8001908 <uart_half_duplex_receive+0x34>)
 80018e8:	0018      	movs	r0, r3
 80018ea:	f001 fef9 	bl	80036e0 <HAL_HalfDuplex_EnableReceiver>
	HAL_UART_Receive(&USART_PORT, pData, size, timeout);
 80018ee:	687c      	ldr	r4, [r7, #4]
 80018f0:	197b      	adds	r3, r7, r5
 80018f2:	881a      	ldrh	r2, [r3, #0]
 80018f4:	68f9      	ldr	r1, [r7, #12]
 80018f6:	4804      	ldr	r0, [pc, #16]	; (8001908 <uart_half_duplex_receive+0x34>)
 80018f8:	0023      	movs	r3, r4
 80018fa:	f001 fdbd 	bl	8003478 <HAL_UART_Receive>

	return 0;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	0018      	movs	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	b004      	add	sp, #16
 8001906:	bdb0      	pop	{r4, r5, r7, pc}
 8001908:	20000130 	.word	0x20000130

0800190c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001910:	4b23      	ldr	r3, [pc, #140]	; (80019a0 <MX_USART1_UART_Init+0x94>)
 8001912:	4a24      	ldr	r2, [pc, #144]	; (80019a4 <MX_USART1_UART_Init+0x98>)
 8001914:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001916:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <MX_USART1_UART_Init+0x94>)
 8001918:	22e1      	movs	r2, #225	; 0xe1
 800191a:	0252      	lsls	r2, r2, #9
 800191c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800191e:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <MX_USART1_UART_Init+0x94>)
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001924:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <MX_USART1_UART_Init+0x94>)
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800192a:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <MX_USART1_UART_Init+0x94>)
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <MX_USART1_UART_Init+0x94>)
 8001932:	220c      	movs	r2, #12
 8001934:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <MX_USART1_UART_Init+0x94>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <MX_USART1_UART_Init+0x94>)
 800193e:	2200      	movs	r2, #0
 8001940:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001942:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <MX_USART1_UART_Init+0x94>)
 8001944:	2200      	movs	r2, #0
 8001946:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <MX_USART1_UART_Init+0x94>)
 800194a:	2200      	movs	r2, #0
 800194c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800194e:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <MX_USART1_UART_Init+0x94>)
 8001950:	2200      	movs	r2, #0
 8001952:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <MX_USART1_UART_Init+0x94>)
 8001956:	0018      	movs	r0, r3
 8001958:	f001 fc3e 	bl	80031d8 <HAL_UART_Init>
 800195c:	1e03      	subs	r3, r0, #0
 800195e:	d001      	beq.n	8001964 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001960:	f7ff feba 	bl	80016d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <MX_USART1_UART_Init+0x94>)
 8001966:	2100      	movs	r1, #0
 8001968:	0018      	movs	r0, r3
 800196a:	f002 fab3 	bl	8003ed4 <HAL_UARTEx_SetTxFifoThreshold>
 800196e:	1e03      	subs	r3, r0, #0
 8001970:	d001      	beq.n	8001976 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001972:	f7ff feb1 	bl	80016d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <MX_USART1_UART_Init+0x94>)
 8001978:	2100      	movs	r1, #0
 800197a:	0018      	movs	r0, r3
 800197c:	f002 faea 	bl	8003f54 <HAL_UARTEx_SetRxFifoThreshold>
 8001980:	1e03      	subs	r3, r0, #0
 8001982:	d001      	beq.n	8001988 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001984:	f7ff fea8 	bl	80016d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <MX_USART1_UART_Init+0x94>)
 800198a:	0018      	movs	r0, r3
 800198c:	f002 fa68 	bl	8003e60 <HAL_UARTEx_DisableFifoMode>
 8001990:	1e03      	subs	r3, r0, #0
 8001992:	d001      	beq.n	8001998 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001994:	f7ff fea0 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001998:	46c0      	nop			; (mov r8, r8)
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	2000009c 	.word	0x2000009c
 80019a4:	40013800 	.word	0x40013800

080019a8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019ac:	4b22      	ldr	r3, [pc, #136]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 80019ae:	4a23      	ldr	r2, [pc, #140]	; (8001a3c <MX_USART2_UART_Init+0x94>)
 80019b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 80019b2:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 80019b4:	4a22      	ldr	r2, [pc, #136]	; (8001a40 <MX_USART2_UART_Init+0x98>)
 80019b6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019b8:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019be:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019c4:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019ca:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 80019cc:	220c      	movs	r2, #12
 80019ce:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d0:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d6:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 80019d8:	2200      	movs	r2, #0
 80019da:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019dc:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 80019de:	2200      	movs	r2, #0
 80019e0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019e8:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 80019f0:	0018      	movs	r0, r3
 80019f2:	f001 fc47 	bl	8003284 <HAL_HalfDuplex_Init>
 80019f6:	1e03      	subs	r3, r0, #0
 80019f8:	d001      	beq.n	80019fe <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 80019fa:	f7ff fe6d 	bl	80016d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 8001a00:	2100      	movs	r1, #0
 8001a02:	0018      	movs	r0, r3
 8001a04:	f002 fa66 	bl	8003ed4 <HAL_UARTEx_SetTxFifoThreshold>
 8001a08:	1e03      	subs	r3, r0, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8001a0c:	f7ff fe64 	bl	80016d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 8001a12:	2100      	movs	r1, #0
 8001a14:	0018      	movs	r0, r3
 8001a16:	f002 fa9d 	bl	8003f54 <HAL_UARTEx_SetRxFifoThreshold>
 8001a1a:	1e03      	subs	r3, r0, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8001a1e:	f7ff fe5b 	bl	80016d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a22:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <MX_USART2_UART_Init+0x90>)
 8001a24:	0018      	movs	r0, r3
 8001a26:	f002 fa1b 	bl	8003e60 <HAL_UARTEx_DisableFifoMode>
 8001a2a:	1e03      	subs	r3, r0, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8001a2e:	f7ff fe53 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000130 	.word	0x20000130
 8001a3c:	40004400 	.word	0x40004400
 8001a40:	000f4240 	.word	0x000f4240

08001a44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b093      	sub	sp, #76	; 0x4c
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	2334      	movs	r3, #52	; 0x34
 8001a4e:	18fb      	adds	r3, r7, r3
 8001a50:	0018      	movs	r0, r3
 8001a52:	2314      	movs	r3, #20
 8001a54:	001a      	movs	r2, r3
 8001a56:	2100      	movs	r1, #0
 8001a58:	f002 fb63 	bl	8004122 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a5c:	2418      	movs	r4, #24
 8001a5e:	193b      	adds	r3, r7, r4
 8001a60:	0018      	movs	r0, r3
 8001a62:	231c      	movs	r3, #28
 8001a64:	001a      	movs	r2, r3
 8001a66:	2100      	movs	r1, #0
 8001a68:	f002 fb5b 	bl	8004122 <memset>
  if(uartHandle->Instance==USART1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a45      	ldr	r2, [pc, #276]	; (8001b88 <HAL_UART_MspInit+0x144>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d13e      	bne.n	8001af4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a76:	193b      	adds	r3, r7, r4
 8001a78:	2201      	movs	r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001a7c:	193b      	adds	r3, r7, r4
 8001a7e:	2200      	movs	r2, #0
 8001a80:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a82:	193b      	adds	r3, r7, r4
 8001a84:	0018      	movs	r0, r3
 8001a86:	f001 fa73 	bl	8002f70 <HAL_RCCEx_PeriphCLKConfig>
 8001a8a:	1e03      	subs	r3, r0, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a8e:	f7ff fe23 	bl	80016d8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a92:	4b3e      	ldr	r3, [pc, #248]	; (8001b8c <HAL_UART_MspInit+0x148>)
 8001a94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a96:	4b3d      	ldr	r3, [pc, #244]	; (8001b8c <HAL_UART_MspInit+0x148>)
 8001a98:	2180      	movs	r1, #128	; 0x80
 8001a9a:	01c9      	lsls	r1, r1, #7
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	641a      	str	r2, [r3, #64]	; 0x40
 8001aa0:	4b3a      	ldr	r3, [pc, #232]	; (8001b8c <HAL_UART_MspInit+0x148>)
 8001aa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	01db      	lsls	r3, r3, #7
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aae:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <HAL_UART_MspInit+0x148>)
 8001ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ab2:	4b36      	ldr	r3, [pc, #216]	; (8001b8c <HAL_UART_MspInit+0x148>)
 8001ab4:	2104      	movs	r1, #4
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	635a      	str	r2, [r3, #52]	; 0x34
 8001aba:	4b34      	ldr	r3, [pc, #208]	; (8001b8c <HAL_UART_MspInit+0x148>)
 8001abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abe:	2204      	movs	r2, #4
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ac6:	2134      	movs	r1, #52	; 0x34
 8001ac8:	187b      	adds	r3, r7, r1
 8001aca:	2230      	movs	r2, #48	; 0x30
 8001acc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	187b      	adds	r3, r7, r1
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ada:	187b      	adds	r3, r7, r1
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001ae0:	187b      	adds	r3, r7, r1
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae6:	187b      	adds	r3, r7, r1
 8001ae8:	4a29      	ldr	r2, [pc, #164]	; (8001b90 <HAL_UART_MspInit+0x14c>)
 8001aea:	0019      	movs	r1, r3
 8001aec:	0010      	movs	r0, r2
 8001aee:	f000 fbd5 	bl	800229c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001af2:	e044      	b.n	8001b7e <HAL_UART_MspInit+0x13a>
  else if(uartHandle->Instance==USART2)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a26      	ldr	r2, [pc, #152]	; (8001b94 <HAL_UART_MspInit+0x150>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d13f      	bne.n	8001b7e <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001afe:	2118      	movs	r1, #24
 8001b00:	187b      	adds	r3, r7, r1
 8001b02:	2202      	movs	r2, #2
 8001b04:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b06:	187b      	adds	r3, r7, r1
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b0c:	187b      	adds	r3, r7, r1
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f001 fa2e 	bl	8002f70 <HAL_RCCEx_PeriphCLKConfig>
 8001b14:	1e03      	subs	r3, r0, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001b18:	f7ff fdde 	bl	80016d8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <HAL_UART_MspInit+0x148>)
 8001b1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <HAL_UART_MspInit+0x148>)
 8001b22:	2180      	movs	r1, #128	; 0x80
 8001b24:	0289      	lsls	r1, r1, #10
 8001b26:	430a      	orrs	r2, r1
 8001b28:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b2a:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_UART_MspInit+0x148>)
 8001b2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	029b      	lsls	r3, r3, #10
 8001b32:	4013      	ands	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <HAL_UART_MspInit+0x148>)
 8001b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b3c:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <HAL_UART_MspInit+0x148>)
 8001b3e:	2101      	movs	r1, #1
 8001b40:	430a      	orrs	r2, r1
 8001b42:	635a      	str	r2, [r3, #52]	; 0x34
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <HAL_UART_MspInit+0x148>)
 8001b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b48:	2201      	movs	r2, #1
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b50:	2134      	movs	r1, #52	; 0x34
 8001b52:	187b      	adds	r3, r7, r1
 8001b54:	2204      	movs	r2, #4
 8001b56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b58:	187b      	adds	r3, r7, r1
 8001b5a:	2212      	movs	r2, #18
 8001b5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b5e:	187b      	adds	r3, r7, r1
 8001b60:	2201      	movs	r2, #1
 8001b62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	187b      	adds	r3, r7, r1
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001b6a:	187b      	adds	r3, r7, r1
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b70:	187a      	adds	r2, r7, r1
 8001b72:	23a0      	movs	r3, #160	; 0xa0
 8001b74:	05db      	lsls	r3, r3, #23
 8001b76:	0011      	movs	r1, r2
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f000 fb8f 	bl	800229c <HAL_GPIO_Init>
}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b013      	add	sp, #76	; 0x4c
 8001b84:	bd90      	pop	{r4, r7, pc}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	40013800 	.word	0x40013800
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	50000800 	.word	0x50000800
 8001b94:	40004400 	.word	0x40004400

08001b98 <xl320_init>:
 *	@author Lucas Vallery
 *
 */
#include "xl320_driver.h"

int xl320_init(XL320_t* xl320, uint8_t id, XL320_BaudRate_t br){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	0008      	movs	r0, r1
 8001ba2:	0011      	movs	r1, r2
 8001ba4:	1cfb      	adds	r3, r7, #3
 8001ba6:	1c02      	adds	r2, r0, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
 8001baa:	1cbb      	adds	r3, r7, #2
 8001bac:	1c0a      	adds	r2, r1, #0
 8001bae:	701a      	strb	r2, [r3, #0]
	xl320->id 	= id;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	1cfa      	adds	r2, r7, #3
 8001bb4:	7812      	ldrb	r2, [r2, #0]
 8001bb6:	701a      	strb	r2, [r3, #0]
	xl320->br	= br;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	1cba      	adds	r2, r7, #2
 8001bbc:	7812      	ldrb	r2, [r2, #0]
 8001bbe:	705a      	strb	r2, [r3, #1]

	return 0;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b002      	add	sp, #8
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <xl320_addHeader2Buff>:

void xl320_addHeader2Buff(uint8_t* buff){
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
	buff[0] = 0xFF;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	22ff      	movs	r2, #255	; 0xff
 8001bd6:	701a      	strb	r2, [r3, #0]
	buff[1] = 0xFF;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	22ff      	movs	r2, #255	; 0xff
 8001bde:	701a      	strb	r2, [r3, #0]
	buff[2] = 0xFD;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3302      	adds	r3, #2
 8001be4:	22fd      	movs	r2, #253	; 0xfd
 8001be6:	701a      	strb	r2, [r3, #0]
	buff[3] = 0x00;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3303      	adds	r3, #3
 8001bec:	2200      	movs	r2, #0
 8001bee:	701a      	strb	r2, [r3, #0]
}
 8001bf0:	46c0      	nop			; (mov r8, r8)
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	b002      	add	sp, #8
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <xl320_updateCrc>:

unsigned short xl320_updateCrc(unsigned short crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size) {
 8001bf8:	b5b0      	push	{r4, r5, r7, lr}
 8001bfa:	4c33      	ldr	r4, [pc, #204]	; (8001cc8 <xl320_updateCrc+0xd0>)
 8001bfc:	44a5      	add	sp, r4
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6039      	str	r1, [r7, #0]
 8001c02:	0011      	movs	r1, r2
 8001c04:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <xl320_updateCrc+0xd4>)
 8001c06:	2484      	movs	r4, #132	; 0x84
 8001c08:	00a4      	lsls	r4, r4, #2
 8001c0a:	191b      	adds	r3, r3, r4
 8001c0c:	19db      	adds	r3, r3, r7
 8001c0e:	1c02      	adds	r2, r0, #0
 8001c10:	801a      	strh	r2, [r3, #0]
 8001c12:	4b2f      	ldr	r3, [pc, #188]	; (8001cd0 <xl320_updateCrc+0xd8>)
 8001c14:	0020      	movs	r0, r4
 8001c16:	181b      	adds	r3, r3, r0
 8001c18:	19db      	adds	r3, r3, r7
 8001c1a:	1c0a      	adds	r2, r1, #0
 8001c1c:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] = {
 8001c1e:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <xl320_updateCrc+0xdc>)
 8001c20:	181b      	adds	r3, r3, r0
 8001c22:	19da      	adds	r2, r3, r7
 8001c24:	4b2c      	ldr	r3, [pc, #176]	; (8001cd8 <xl320_updateCrc+0xe0>)
 8001c26:	0010      	movs	r0, r2
 8001c28:	0019      	movs	r1, r3
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	001a      	movs	r2, r3
 8001c30:	f002 fa6e 	bl	8004110 <memcpy>
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};

	for(j = 0; j < data_blk_size; j++) {
 8001c34:	4b29      	ldr	r3, [pc, #164]	; (8001cdc <xl320_updateCrc+0xe4>)
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	2200      	movs	r2, #0
 8001c3a:	801a      	strh	r2, [r3, #0]
 8001c3c:	e02f      	b.n	8001c9e <xl320_updateCrc+0xa6>
		i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8001c3e:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <xl320_updateCrc+0xd4>)
 8001c40:	2084      	movs	r0, #132	; 0x84
 8001c42:	0080      	lsls	r0, r0, #2
 8001c44:	181b      	adds	r3, r3, r0
 8001c46:	19db      	adds	r3, r3, r7
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	0a1b      	lsrs	r3, r3, #8
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	4c23      	ldr	r4, [pc, #140]	; (8001cdc <xl320_updateCrc+0xe4>)
 8001c50:	193b      	adds	r3, r7, r4
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	6839      	ldr	r1, [r7, #0]
 8001c56:	18cb      	adds	r3, r1, r3
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	4053      	eors	r3, r2
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	2583      	movs	r5, #131	; 0x83
 8001c62:	00ad      	lsls	r5, r5, #2
 8001c64:	197b      	adds	r3, r7, r5
 8001c66:	21ff      	movs	r1, #255	; 0xff
 8001c68:	400a      	ands	r2, r1
 8001c6a:	801a      	strh	r2, [r3, #0]
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8001c6c:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <xl320_updateCrc+0xd4>)
 8001c6e:	181b      	adds	r3, r3, r0
 8001c70:	19db      	adds	r3, r3, r7
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	197b      	adds	r3, r7, r5
 8001c7a:	8819      	ldrh	r1, [r3, #0]
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <xl320_updateCrc+0xdc>)
 8001c7e:	181b      	adds	r3, r3, r0
 8001c80:	19db      	adds	r3, r3, r7
 8001c82:	0049      	lsls	r1, r1, #1
 8001c84:	5acb      	ldrh	r3, [r1, r3]
 8001c86:	b21b      	sxth	r3, r3
 8001c88:	4053      	eors	r3, r2
 8001c8a:	b21a      	sxth	r2, r3
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <xl320_updateCrc+0xd4>)
 8001c8e:	181b      	adds	r3, r3, r0
 8001c90:	19db      	adds	r3, r3, r7
 8001c92:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++) {
 8001c94:	193b      	adds	r3, r7, r4
 8001c96:	881a      	ldrh	r2, [r3, #0]
 8001c98:	193b      	adds	r3, r7, r4
 8001c9a:	3201      	adds	r2, #1
 8001c9c:	801a      	strh	r2, [r3, #0]
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <xl320_updateCrc+0xe4>)
 8001ca0:	18fa      	adds	r2, r7, r3
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <xl320_updateCrc+0xd8>)
 8001ca4:	2184      	movs	r1, #132	; 0x84
 8001ca6:	0089      	lsls	r1, r1, #2
 8001ca8:	185b      	adds	r3, r3, r1
 8001caa:	19db      	adds	r3, r3, r7
 8001cac:	8812      	ldrh	r2, [r2, #0]
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d3c4      	bcc.n	8001c3e <xl320_updateCrc+0x46>
	}

	return crc_accum;
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <xl320_updateCrc+0xd4>)
 8001cb6:	185b      	adds	r3, r3, r1
 8001cb8:	19db      	adds	r3, r3, r7
 8001cba:	881b      	ldrh	r3, [r3, #0]
}
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	2384      	movs	r3, #132	; 0x84
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	449d      	add	sp, r3
 8001cc6:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc8:	fffffdf0 	.word	0xfffffdf0
 8001ccc:	fffffdf6 	.word	0xfffffdf6
 8001cd0:	fffffdf4 	.word	0xfffffdf4
 8001cd4:	fffffdfc 	.word	0xfffffdfc
 8001cd8:	08004be0 	.word	0x08004be0
 8001cdc:	0000020e 	.word	0x0000020e

08001ce0 <xl320_copyParams2Buff>:

void xl320_copyParams2Buff(uint8_t buffStartIndex, uint8_t* buff, uint16_t nbParams, uint8_t* params){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	0011      	movs	r1, r2
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	230f      	movs	r3, #15
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	1c02      	adds	r2, r0, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
 8001cf4:	230c      	movs	r3, #12
 8001cf6:	18fb      	adds	r3, r7, r3
 8001cf8:	1c0a      	adds	r2, r1, #0
 8001cfa:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < nbParams; i++){
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	e00f      	b.n	8001d22 <xl320_copyParams2Buff+0x42>
		buff[i + buffStartIndex] = params[i];
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	18d2      	adds	r2, r2, r3
 8001d08:	230f      	movs	r3, #15
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	7819      	ldrb	r1, [r3, #0]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	18cb      	adds	r3, r1, r3
 8001d12:	0019      	movs	r1, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	185b      	adds	r3, r3, r1
 8001d18:	7812      	ldrb	r2, [r2, #0]
 8001d1a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < nbParams; i++){
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	230c      	movs	r3, #12
 8001d24:	18fb      	adds	r3, r7, r3
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	dbe9      	blt.n	8001d02 <xl320_copyParams2Buff+0x22>
	}
}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	46c0      	nop			; (mov r8, r8)
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b006      	add	sp, #24
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <xl320_sendCommand>:

int xl320_sendCommand(XL320_t* xl320, XL320_Instruction_t inst, uint16_t nbParams, uint8_t* params){
 8001d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	0008      	movs	r0, r1
 8001d42:	0011      	movs	r1, r2
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	230b      	movs	r3, #11
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	1c02      	adds	r2, r0, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
 8001d4e:	2008      	movs	r0, #8
 8001d50:	183b      	adds	r3, r7, r0
 8001d52:	1c0a      	adds	r2, r1, #0
 8001d54:	801a      	strh	r2, [r3, #0]
	uint8_t* txBuff = NULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
	txBuff = (uint8_t*) malloc((MIN_FRAME_SIZE + nbParams)*sizeof(uint8_t));
 8001d5a:	183b      	adds	r3, r7, r0
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	330a      	adds	r3, #10
 8001d60:	0018      	movs	r0, r3
 8001d62:	f002 f9c1 	bl	80040e8 <malloc>
 8001d66:	0003      	movs	r3, r0
 8001d68:	617b      	str	r3, [r7, #20]

	if(txBuff == NULL){
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d106      	bne.n	8001d7e <xl320_sendCommand+0x46>
		DEBUG_PRINTF("XL320 ERROT : Malloc failed\r\n");
 8001d70:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <xl320_sendCommand+0x10c>)
 8001d72:	0018      	movs	r0, r3
 8001d74:	f002 fb32 	bl	80043dc <puts>
		return -1;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	425b      	negs	r3, r3
 8001d7c:	e05d      	b.n	8001e3a <xl320_sendCommand+0x102>
	}

	uint16_t length = nbParams + 3;
 8001d7e:	2512      	movs	r5, #18
 8001d80:	197b      	adds	r3, r7, r5
 8001d82:	2408      	movs	r4, #8
 8001d84:	193a      	adds	r2, r7, r4
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	3203      	adds	r2, #3
 8001d8a:	801a      	strh	r2, [r3, #0]

	xl320_addHeader2Buff(txBuff);
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f7ff ff1b 	bl	8001bca <xl320_addHeader2Buff>
	txBuff[4] = xl320->id;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	3304      	adds	r3, #4
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	7812      	ldrb	r2, [r2, #0]
 8001d9c:	701a      	strb	r2, [r3, #0]
	txBuff[5] = (uint8_t) (length & 0xFF);
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	3305      	adds	r3, #5
 8001da2:	197a      	adds	r2, r7, r5
 8001da4:	8812      	ldrh	r2, [r2, #0]
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	701a      	strb	r2, [r3, #0]
	txBuff[6] = (uint8_t) (length >> 8);
 8001daa:	197b      	adds	r3, r7, r5
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	3306      	adds	r3, #6
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	701a      	strb	r2, [r3, #0]
	txBuff[7] = inst;
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	3307      	adds	r3, #7
 8001dbe:	220b      	movs	r2, #11
 8001dc0:	18ba      	adds	r2, r7, r2
 8001dc2:	7812      	ldrb	r2, [r2, #0]
 8001dc4:	701a      	strb	r2, [r3, #0]
	xl320_copyParams2Buff(8, txBuff, nbParams, params);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	193b      	adds	r3, r7, r4
 8001dca:	881a      	ldrh	r2, [r3, #0]
 8001dcc:	6979      	ldr	r1, [r7, #20]
 8001dce:	0003      	movs	r3, r0
 8001dd0:	2008      	movs	r0, #8
 8001dd2:	f7ff ff85 	bl	8001ce0 <xl320_copyParams2Buff>

	uint16_t crc = xl320_updateCrc(0, txBuff, MIN_FRAME_SIZE + nbParams - CRC_FIELD_SIZE);
 8001dd6:	0025      	movs	r5, r4
 8001dd8:	193b      	adds	r3, r7, r4
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	3308      	adds	r3, #8
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	2610      	movs	r6, #16
 8001de2:	19bc      	adds	r4, r7, r6
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	0019      	movs	r1, r3
 8001de8:	2000      	movs	r0, #0
 8001dea:	f7ff ff05 	bl	8001bf8 <xl320_updateCrc>
 8001dee:	0003      	movs	r3, r0
 8001df0:	8023      	strh	r3, [r4, #0]

	txBuff[(MIN_FRAME_SIZE + nbParams) - 2] = (uint8_t) (crc & 0xFF);
 8001df2:	002c      	movs	r4, r5
 8001df4:	193b      	adds	r3, r7, r4
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	3308      	adds	r3, #8
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	18d3      	adds	r3, r2, r3
 8001dfe:	19ba      	adds	r2, r7, r6
 8001e00:	8812      	ldrh	r2, [r2, #0]
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	701a      	strb	r2, [r3, #0]
	txBuff[(MIN_FRAME_SIZE + nbParams) - 1] = (uint8_t) (crc >> 8);
 8001e06:	19bb      	adds	r3, r7, r6
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	0a1b      	lsrs	r3, r3, #8
 8001e0c:	b299      	uxth	r1, r3
 8001e0e:	193b      	adds	r3, r7, r4
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	3309      	adds	r3, #9
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	18d3      	adds	r3, r2, r3
 8001e18:	b2ca      	uxtb	r2, r1
 8001e1a:	701a      	strb	r2, [r3, #0]

	xl320->serial.transmit(txBuff, (MIN_FRAME_SIZE + nbParams)*sizeof(uint8_t), 0x1F4);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	193a      	adds	r2, r7, r4
 8001e22:	8812      	ldrh	r2, [r2, #0]
 8001e24:	320a      	adds	r2, #10
 8001e26:	b291      	uxth	r1, r2
 8001e28:	22fa      	movs	r2, #250	; 0xfa
 8001e2a:	0052      	lsls	r2, r2, #1
 8001e2c:	6978      	ldr	r0, [r7, #20]
 8001e2e:	4798      	blx	r3

	free(txBuff);
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	0018      	movs	r0, r3
 8001e34:	f002 f962 	bl	80040fc <free>
	return 0;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b007      	add	sp, #28
 8001e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	08004de0 	.word	0x08004de0

08001e48 <xl320_setGoalPosition>:
	xl320_sendCommand(xl320, WRITE, 3, (uint8_t*) &params);

	return 0;
}

int xl320_setGoalPosition(XL320_t* xl320, float goalPositionInDeg){
 8001e48:	b5b0      	push	{r4, r5, r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
	uint16_t position = (uint16_t)(goalPositionInDeg/BIT_RESOLUTION_IN_DEG);
 8001e52:	6838      	ldr	r0, [r7, #0]
 8001e54:	f7ff f9a6 	bl	80011a4 <__aeabi_f2d>
 8001e58:	4a15      	ldr	r2, [pc, #84]	; (8001eb0 <xl320_setGoalPosition+0x68>)
 8001e5a:	4b16      	ldr	r3, [pc, #88]	; (8001eb4 <xl320_setGoalPosition+0x6c>)
 8001e5c:	f7fe fae4 	bl	8000428 <__aeabi_ddiv>
 8001e60:	0002      	movs	r2, r0
 8001e62:	000b      	movs	r3, r1
 8001e64:	250e      	movs	r5, #14
 8001e66:	197c      	adds	r4, r7, r5
 8001e68:	0010      	movs	r0, r2
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	f7fe fabe 	bl	80003ec <__aeabi_d2uiz>
 8001e70:	0003      	movs	r3, r0
 8001e72:	8023      	strh	r3, [r4, #0]
	uint8_t params[4] = {POSITION, 0, (uint8_t)(position & 0xFF) , (uint8_t)(position >> 8)};
 8001e74:	2108      	movs	r1, #8
 8001e76:	187b      	adds	r3, r7, r1
 8001e78:	221e      	movs	r2, #30
 8001e7a:	701a      	strb	r2, [r3, #0]
 8001e7c:	187b      	adds	r3, r7, r1
 8001e7e:	2200      	movs	r2, #0
 8001e80:	705a      	strb	r2, [r3, #1]
 8001e82:	197b      	adds	r3, r7, r5
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	187b      	adds	r3, r7, r1
 8001e8a:	709a      	strb	r2, [r3, #2]
 8001e8c:	197b      	adds	r3, r7, r5
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	0a1b      	lsrs	r3, r3, #8
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	187b      	adds	r3, r7, r1
 8001e98:	70da      	strb	r2, [r3, #3]

	xl320_sendCommand(xl320, WRITE, 4, (uint8_t*) &params);
 8001e9a:	187b      	adds	r3, r7, r1
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	2103      	movs	r1, #3
 8001ea2:	f7ff ff49 	bl	8001d38 <xl320_sendCommand>

	return 0;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b004      	add	sp, #16
 8001eae:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb0:	28f5c28f 	.word	0x28f5c28f
 8001eb4:	3fd28f5c 	.word	0x3fd28f5c

08001eb8 <xl320_setSpeed>:

int xl320_setSpeed(XL320_t* xl320, float rpm){
 8001eb8:	b5b0      	push	{r4, r5, r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
	uint16_t speedValue = (uint16_t)(rpm/RESOLUTION_SPEED);
 8001ec2:	6838      	ldr	r0, [r7, #0]
 8001ec4:	f7ff f96e 	bl	80011a4 <__aeabi_f2d>
 8001ec8:	4a1a      	ldr	r2, [pc, #104]	; (8001f34 <xl320_setSpeed+0x7c>)
 8001eca:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <xl320_setSpeed+0x80>)
 8001ecc:	f7fe faac 	bl	8000428 <__aeabi_ddiv>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	000b      	movs	r3, r1
 8001ed4:	250e      	movs	r5, #14
 8001ed6:	197c      	adds	r4, r7, r5
 8001ed8:	0010      	movs	r0, r2
 8001eda:	0019      	movs	r1, r3
 8001edc:	f7fe fa86 	bl	80003ec <__aeabi_d2uiz>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	8023      	strh	r3, [r4, #0]
	uint8_t highByte = (uint8_t)((speedValue >> 8) & 0xFF);
 8001ee4:	0029      	movs	r1, r5
 8001ee6:	187b      	adds	r3, r7, r1
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	0a1b      	lsrs	r3, r3, #8
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	200d      	movs	r0, #13
 8001ef0:	183b      	adds	r3, r7, r0
 8001ef2:	701a      	strb	r2, [r3, #0]
	uint8_t lowByte = (uint8_t)(speedValue & 0xFF);
 8001ef4:	240c      	movs	r4, #12
 8001ef6:	193b      	adds	r3, r7, r4
 8001ef8:	187a      	adds	r2, r7, r1
 8001efa:	8812      	ldrh	r2, [r2, #0]
 8001efc:	701a      	strb	r2, [r3, #0]

	uint8_t params[4] = {SPEED, 0, lowByte, highByte};
 8001efe:	2108      	movs	r1, #8
 8001f00:	187b      	adds	r3, r7, r1
 8001f02:	2220      	movs	r2, #32
 8001f04:	701a      	strb	r2, [r3, #0]
 8001f06:	187b      	adds	r3, r7, r1
 8001f08:	2200      	movs	r2, #0
 8001f0a:	705a      	strb	r2, [r3, #1]
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	193a      	adds	r2, r7, r4
 8001f10:	7812      	ldrb	r2, [r2, #0]
 8001f12:	709a      	strb	r2, [r3, #2]
 8001f14:	187b      	adds	r3, r7, r1
 8001f16:	183a      	adds	r2, r7, r0
 8001f18:	7812      	ldrb	r2, [r2, #0]
 8001f1a:	70da      	strb	r2, [r3, #3]
	xl320_sendCommand(xl320, WRITE, 4, (uint8_t*) &params);
 8001f1c:	187b      	adds	r3, r7, r1
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	2204      	movs	r2, #4
 8001f22:	2103      	movs	r1, #3
 8001f24:	f7ff ff08 	bl	8001d38 <xl320_sendCommand>

	return 0;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b004      	add	sp, #16
 8001f30:	bdb0      	pop	{r4, r5, r7, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	f9db22d1 	.word	0xf9db22d1
 8001f38:	3fbc6a7e 	.word	0x3fbc6a7e

08001f3c <xl320_executeAction>:

int xl320_executeAction(XL320_t* xl320){
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	xl320_sendCommand(xl320, ACTION, 0, NULL);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	2300      	movs	r3, #0
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2105      	movs	r1, #5
 8001f4c:	f7ff fef4 	bl	8001d38 <xl320_sendCommand>

	return 0;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	0018      	movs	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b002      	add	sp, #8
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <xl320_torqueEnable>:

int xl320_torqueEnable(XL320_t* xl320){
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	uint8_t params[3] = {TORQUE_EN, 0, ENABLE};
 8001f64:	200c      	movs	r0, #12
 8001f66:	183b      	adds	r3, r7, r0
 8001f68:	4a07      	ldr	r2, [pc, #28]	; (8001f88 <xl320_torqueEnable+0x2c>)
 8001f6a:	8811      	ldrh	r1, [r2, #0]
 8001f6c:	8019      	strh	r1, [r3, #0]
 8001f6e:	7892      	ldrb	r2, [r2, #2]
 8001f70:	709a      	strb	r2, [r3, #2]

	xl320_sendCommand(xl320, WRITE, 3, (uint8_t*) &params);
 8001f72:	183b      	adds	r3, r7, r0
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	2203      	movs	r2, #3
 8001f78:	2103      	movs	r1, #3
 8001f7a:	f7ff fedd 	bl	8001d38 <xl320_sendCommand>

	return 0;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	0018      	movs	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b004      	add	sp, #16
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	08005190 	.word	0x08005190

08001f8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f8c:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f8e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f90:	f7ff fc7e 	bl	8001890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f94:	480c      	ldr	r0, [pc, #48]	; (8001fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f96:	490d      	ldr	r1, [pc, #52]	; (8001fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f98:	4a0d      	ldr	r2, [pc, #52]	; (8001fd0 <LoopForever+0xe>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f9c:	e002      	b.n	8001fa4 <LoopCopyDataInit>

08001f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fa2:	3304      	adds	r3, #4

08001fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa8:	d3f9      	bcc.n	8001f9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fac:	4c0a      	ldr	r4, [pc, #40]	; (8001fd8 <LoopForever+0x16>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb0:	e001      	b.n	8001fb6 <LoopFillZerobss>

08001fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb4:	3204      	adds	r2, #4

08001fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb8:	d3fb      	bcc.n	8001fb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fba:	f002 f871 	bl	80040a0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001fbe:	f7ff faf5 	bl	80015ac <main>

08001fc2 <LoopForever>:

LoopForever:
  b LoopForever
 8001fc2:	e7fe      	b.n	8001fc2 <LoopForever>
  ldr   r0, =_estack
 8001fc4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fcc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001fd0:	080052c8 	.word	0x080052c8
  ldr r2, =_sbss
 8001fd4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001fd8:	200001d8 	.word	0x200001d8

08001fdc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fdc:	e7fe      	b.n	8001fdc <ADC1_IRQHandler>
	...

08001fe0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fe6:	1dfb      	adds	r3, r7, #7
 8001fe8:	2200      	movs	r2, #0
 8001fea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_Init+0x3c>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <HAL_Init+0x3c>)
 8001ff2:	2180      	movs	r1, #128	; 0x80
 8001ff4:	0049      	lsls	r1, r1, #1
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ffa:	2003      	movs	r0, #3
 8001ffc:	f000 f810 	bl	8002020 <HAL_InitTick>
 8002000:	1e03      	subs	r3, r0, #0
 8002002:	d003      	beq.n	800200c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002004:	1dfb      	adds	r3, r7, #7
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]
 800200a:	e001      	b.n	8002010 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800200c:	f7ff fb6a 	bl	80016e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002010:	1dfb      	adds	r3, r7, #7
 8002012:	781b      	ldrb	r3, [r3, #0]
}
 8002014:	0018      	movs	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	b002      	add	sp, #8
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40022000 	.word	0x40022000

08002020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002028:	230f      	movs	r3, #15
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002030:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <HAL_InitTick+0x88>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d02b      	beq.n	8002090 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002038:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <HAL_InitTick+0x8c>)
 800203a:	681c      	ldr	r4, [r3, #0]
 800203c:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <HAL_InitTick+0x88>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	0019      	movs	r1, r3
 8002042:	23fa      	movs	r3, #250	; 0xfa
 8002044:	0098      	lsls	r0, r3, #2
 8002046:	f7fe f85b 	bl	8000100 <__udivsi3>
 800204a:	0003      	movs	r3, r0
 800204c:	0019      	movs	r1, r3
 800204e:	0020      	movs	r0, r4
 8002050:	f7fe f856 	bl	8000100 <__udivsi3>
 8002054:	0003      	movs	r3, r0
 8002056:	0018      	movs	r0, r3
 8002058:	f000 f913 	bl	8002282 <HAL_SYSTICK_Config>
 800205c:	1e03      	subs	r3, r0, #0
 800205e:	d112      	bne.n	8002086 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b03      	cmp	r3, #3
 8002064:	d80a      	bhi.n	800207c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	2301      	movs	r3, #1
 800206a:	425b      	negs	r3, r3
 800206c:	2200      	movs	r2, #0
 800206e:	0018      	movs	r0, r3
 8002070:	f000 f8f2 	bl	8002258 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002074:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <HAL_InitTick+0x90>)
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	e00d      	b.n	8002098 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800207c:	230f      	movs	r3, #15
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	2201      	movs	r2, #1
 8002082:	701a      	strb	r2, [r3, #0]
 8002084:	e008      	b.n	8002098 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002086:	230f      	movs	r3, #15
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	2201      	movs	r2, #1
 800208c:	701a      	strb	r2, [r3, #0]
 800208e:	e003      	b.n	8002098 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002090:	230f      	movs	r3, #15
 8002092:	18fb      	adds	r3, r7, r3
 8002094:	2201      	movs	r2, #1
 8002096:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002098:	230f      	movs	r3, #15
 800209a:	18fb      	adds	r3, r7, r3
 800209c:	781b      	ldrb	r3, [r3, #0]
}
 800209e:	0018      	movs	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b005      	add	sp, #20
 80020a4:	bd90      	pop	{r4, r7, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	20000008 	.word	0x20000008
 80020ac:	20000000 	.word	0x20000000
 80020b0:	20000004 	.word	0x20000004

080020b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <HAL_IncTick+0x1c>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	001a      	movs	r2, r3
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <HAL_IncTick+0x20>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	18d2      	adds	r2, r2, r3
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <HAL_IncTick+0x20>)
 80020c6:	601a      	str	r2, [r3, #0]
}
 80020c8:	46c0      	nop			; (mov r8, r8)
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	20000008 	.word	0x20000008
 80020d4:	200001c4 	.word	0x200001c4

080020d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  return uwTick;
 80020dc:	4b02      	ldr	r3, [pc, #8]	; (80020e8 <HAL_GetTick+0x10>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	0018      	movs	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	200001c4 	.word	0x200001c4

080020ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f4:	f7ff fff0 	bl	80020d8 <HAL_GetTick>
 80020f8:	0003      	movs	r3, r0
 80020fa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	3301      	adds	r3, #1
 8002104:	d005      	beq.n	8002112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <HAL_Delay+0x44>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	001a      	movs	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	189b      	adds	r3, r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	f7ff ffe0 	bl	80020d8 <HAL_GetTick>
 8002118:	0002      	movs	r2, r0
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	429a      	cmp	r2, r3
 8002122:	d8f7      	bhi.n	8002114 <HAL_Delay+0x28>
  {
  }
}
 8002124:	46c0      	nop			; (mov r8, r8)
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	46bd      	mov	sp, r7
 800212a:	b004      	add	sp, #16
 800212c:	bd80      	pop	{r7, pc}
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	20000008 	.word	0x20000008

08002134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	0002      	movs	r2, r0
 800213c:	6039      	str	r1, [r7, #0]
 800213e:	1dfb      	adds	r3, r7, #7
 8002140:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002142:	1dfb      	adds	r3, r7, #7
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b7f      	cmp	r3, #127	; 0x7f
 8002148:	d828      	bhi.n	800219c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800214a:	4a2f      	ldr	r2, [pc, #188]	; (8002208 <__NVIC_SetPriority+0xd4>)
 800214c:	1dfb      	adds	r3, r7, #7
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	b25b      	sxtb	r3, r3
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	33c0      	adds	r3, #192	; 0xc0
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	589b      	ldr	r3, [r3, r2]
 800215a:	1dfa      	adds	r2, r7, #7
 800215c:	7812      	ldrb	r2, [r2, #0]
 800215e:	0011      	movs	r1, r2
 8002160:	2203      	movs	r2, #3
 8002162:	400a      	ands	r2, r1
 8002164:	00d2      	lsls	r2, r2, #3
 8002166:	21ff      	movs	r1, #255	; 0xff
 8002168:	4091      	lsls	r1, r2
 800216a:	000a      	movs	r2, r1
 800216c:	43d2      	mvns	r2, r2
 800216e:	401a      	ands	r2, r3
 8002170:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	019b      	lsls	r3, r3, #6
 8002176:	22ff      	movs	r2, #255	; 0xff
 8002178:	401a      	ands	r2, r3
 800217a:	1dfb      	adds	r3, r7, #7
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	0018      	movs	r0, r3
 8002180:	2303      	movs	r3, #3
 8002182:	4003      	ands	r3, r0
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002188:	481f      	ldr	r0, [pc, #124]	; (8002208 <__NVIC_SetPriority+0xd4>)
 800218a:	1dfb      	adds	r3, r7, #7
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	b25b      	sxtb	r3, r3
 8002190:	089b      	lsrs	r3, r3, #2
 8002192:	430a      	orrs	r2, r1
 8002194:	33c0      	adds	r3, #192	; 0xc0
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800219a:	e031      	b.n	8002200 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800219c:	4a1b      	ldr	r2, [pc, #108]	; (800220c <__NVIC_SetPriority+0xd8>)
 800219e:	1dfb      	adds	r3, r7, #7
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	0019      	movs	r1, r3
 80021a4:	230f      	movs	r3, #15
 80021a6:	400b      	ands	r3, r1
 80021a8:	3b08      	subs	r3, #8
 80021aa:	089b      	lsrs	r3, r3, #2
 80021ac:	3306      	adds	r3, #6
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	18d3      	adds	r3, r2, r3
 80021b2:	3304      	adds	r3, #4
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	1dfa      	adds	r2, r7, #7
 80021b8:	7812      	ldrb	r2, [r2, #0]
 80021ba:	0011      	movs	r1, r2
 80021bc:	2203      	movs	r2, #3
 80021be:	400a      	ands	r2, r1
 80021c0:	00d2      	lsls	r2, r2, #3
 80021c2:	21ff      	movs	r1, #255	; 0xff
 80021c4:	4091      	lsls	r1, r2
 80021c6:	000a      	movs	r2, r1
 80021c8:	43d2      	mvns	r2, r2
 80021ca:	401a      	ands	r2, r3
 80021cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	019b      	lsls	r3, r3, #6
 80021d2:	22ff      	movs	r2, #255	; 0xff
 80021d4:	401a      	ands	r2, r3
 80021d6:	1dfb      	adds	r3, r7, #7
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	0018      	movs	r0, r3
 80021dc:	2303      	movs	r3, #3
 80021de:	4003      	ands	r3, r0
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021e4:	4809      	ldr	r0, [pc, #36]	; (800220c <__NVIC_SetPriority+0xd8>)
 80021e6:	1dfb      	adds	r3, r7, #7
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	001c      	movs	r4, r3
 80021ec:	230f      	movs	r3, #15
 80021ee:	4023      	ands	r3, r4
 80021f0:	3b08      	subs	r3, #8
 80021f2:	089b      	lsrs	r3, r3, #2
 80021f4:	430a      	orrs	r2, r1
 80021f6:	3306      	adds	r3, #6
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	18c3      	adds	r3, r0, r3
 80021fc:	3304      	adds	r3, #4
 80021fe:	601a      	str	r2, [r3, #0]
}
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b003      	add	sp, #12
 8002206:	bd90      	pop	{r4, r7, pc}
 8002208:	e000e100 	.word	0xe000e100
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	1e5a      	subs	r2, r3, #1
 800221c:	2380      	movs	r3, #128	; 0x80
 800221e:	045b      	lsls	r3, r3, #17
 8002220:	429a      	cmp	r2, r3
 8002222:	d301      	bcc.n	8002228 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002224:	2301      	movs	r3, #1
 8002226:	e010      	b.n	800224a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002228:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <SysTick_Config+0x44>)
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	3a01      	subs	r2, #1
 800222e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002230:	2301      	movs	r3, #1
 8002232:	425b      	negs	r3, r3
 8002234:	2103      	movs	r1, #3
 8002236:	0018      	movs	r0, r3
 8002238:	f7ff ff7c 	bl	8002134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <SysTick_Config+0x44>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002242:	4b04      	ldr	r3, [pc, #16]	; (8002254 <SysTick_Config+0x44>)
 8002244:	2207      	movs	r2, #7
 8002246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002248:	2300      	movs	r3, #0
}
 800224a:	0018      	movs	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	b002      	add	sp, #8
 8002250:	bd80      	pop	{r7, pc}
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	e000e010 	.word	0xe000e010

08002258 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	210f      	movs	r1, #15
 8002264:	187b      	adds	r3, r7, r1
 8002266:	1c02      	adds	r2, r0, #0
 8002268:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	187b      	adds	r3, r7, r1
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	b25b      	sxtb	r3, r3
 8002272:	0011      	movs	r1, r2
 8002274:	0018      	movs	r0, r3
 8002276:	f7ff ff5d 	bl	8002134 <__NVIC_SetPriority>
}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	46bd      	mov	sp, r7
 800227e:	b004      	add	sp, #16
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	0018      	movs	r0, r3
 800228e:	f7ff ffbf 	bl	8002210 <SysTick_Config>
 8002292:	0003      	movs	r3, r0
}
 8002294:	0018      	movs	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	b002      	add	sp, #8
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022aa:	e147      	b.n	800253c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2101      	movs	r1, #1
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	4091      	lsls	r1, r2
 80022b6:	000a      	movs	r2, r1
 80022b8:	4013      	ands	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d100      	bne.n	80022c4 <HAL_GPIO_Init+0x28>
 80022c2:	e138      	b.n	8002536 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2203      	movs	r2, #3
 80022ca:	4013      	ands	r3, r2
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d005      	beq.n	80022dc <HAL_GPIO_Init+0x40>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2203      	movs	r2, #3
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d130      	bne.n	800233e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	2203      	movs	r2, #3
 80022e8:	409a      	lsls	r2, r3
 80022ea:	0013      	movs	r3, r2
 80022ec:	43da      	mvns	r2, r3
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	409a      	lsls	r2, r3
 80022fe:	0013      	movs	r3, r2
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002312:	2201      	movs	r2, #1
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	409a      	lsls	r2, r3
 8002318:	0013      	movs	r3, r2
 800231a:	43da      	mvns	r2, r3
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4013      	ands	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	091b      	lsrs	r3, r3, #4
 8002328:	2201      	movs	r2, #1
 800232a:	401a      	ands	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	409a      	lsls	r2, r3
 8002330:	0013      	movs	r3, r2
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2203      	movs	r2, #3
 8002344:	4013      	ands	r3, r2
 8002346:	2b03      	cmp	r3, #3
 8002348:	d017      	beq.n	800237a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	2203      	movs	r2, #3
 8002356:	409a      	lsls	r2, r3
 8002358:	0013      	movs	r3, r2
 800235a:	43da      	mvns	r2, r3
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4013      	ands	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	409a      	lsls	r2, r3
 800236c:	0013      	movs	r3, r2
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2203      	movs	r2, #3
 8002380:	4013      	ands	r3, r2
 8002382:	2b02      	cmp	r3, #2
 8002384:	d123      	bne.n	80023ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	08da      	lsrs	r2, r3, #3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3208      	adds	r2, #8
 800238e:	0092      	lsls	r2, r2, #2
 8002390:	58d3      	ldr	r3, [r2, r3]
 8002392:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	2207      	movs	r2, #7
 8002398:	4013      	ands	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	220f      	movs	r2, #15
 800239e:	409a      	lsls	r2, r3
 80023a0:	0013      	movs	r3, r2
 80023a2:	43da      	mvns	r2, r3
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2107      	movs	r1, #7
 80023b2:	400b      	ands	r3, r1
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	409a      	lsls	r2, r3
 80023b8:	0013      	movs	r3, r2
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	08da      	lsrs	r2, r3, #3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3208      	adds	r2, #8
 80023c8:	0092      	lsls	r2, r2, #2
 80023ca:	6939      	ldr	r1, [r7, #16]
 80023cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	2203      	movs	r2, #3
 80023da:	409a      	lsls	r2, r3
 80023dc:	0013      	movs	r3, r2
 80023de:	43da      	mvns	r2, r3
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4013      	ands	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2203      	movs	r2, #3
 80023ec:	401a      	ands	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	409a      	lsls	r2, r3
 80023f4:	0013      	movs	r3, r2
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	23c0      	movs	r3, #192	; 0xc0
 8002408:	029b      	lsls	r3, r3, #10
 800240a:	4013      	ands	r3, r2
 800240c:	d100      	bne.n	8002410 <HAL_GPIO_Init+0x174>
 800240e:	e092      	b.n	8002536 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002410:	4a50      	ldr	r2, [pc, #320]	; (8002554 <HAL_GPIO_Init+0x2b8>)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	089b      	lsrs	r3, r3, #2
 8002416:	3318      	adds	r3, #24
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	589b      	ldr	r3, [r3, r2]
 800241c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2203      	movs	r2, #3
 8002422:	4013      	ands	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	220f      	movs	r2, #15
 8002428:	409a      	lsls	r2, r3
 800242a:	0013      	movs	r3, r2
 800242c:	43da      	mvns	r2, r3
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	23a0      	movs	r3, #160	; 0xa0
 8002438:	05db      	lsls	r3, r3, #23
 800243a:	429a      	cmp	r2, r3
 800243c:	d013      	beq.n	8002466 <HAL_GPIO_Init+0x1ca>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a45      	ldr	r2, [pc, #276]	; (8002558 <HAL_GPIO_Init+0x2bc>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d00d      	beq.n	8002462 <HAL_GPIO_Init+0x1c6>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a44      	ldr	r2, [pc, #272]	; (800255c <HAL_GPIO_Init+0x2c0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d007      	beq.n	800245e <HAL_GPIO_Init+0x1c2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a43      	ldr	r2, [pc, #268]	; (8002560 <HAL_GPIO_Init+0x2c4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d101      	bne.n	800245a <HAL_GPIO_Init+0x1be>
 8002456:	2303      	movs	r3, #3
 8002458:	e006      	b.n	8002468 <HAL_GPIO_Init+0x1cc>
 800245a:	2305      	movs	r3, #5
 800245c:	e004      	b.n	8002468 <HAL_GPIO_Init+0x1cc>
 800245e:	2302      	movs	r3, #2
 8002460:	e002      	b.n	8002468 <HAL_GPIO_Init+0x1cc>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <HAL_GPIO_Init+0x1cc>
 8002466:	2300      	movs	r3, #0
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	2103      	movs	r1, #3
 800246c:	400a      	ands	r2, r1
 800246e:	00d2      	lsls	r2, r2, #3
 8002470:	4093      	lsls	r3, r2
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002478:	4936      	ldr	r1, [pc, #216]	; (8002554 <HAL_GPIO_Init+0x2b8>)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	089b      	lsrs	r3, r3, #2
 800247e:	3318      	adds	r3, #24
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002486:	4b33      	ldr	r3, [pc, #204]	; (8002554 <HAL_GPIO_Init+0x2b8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	43da      	mvns	r2, r3
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	2380      	movs	r3, #128	; 0x80
 800249c:	035b      	lsls	r3, r3, #13
 800249e:	4013      	ands	r3, r2
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024aa:	4b2a      	ldr	r3, [pc, #168]	; (8002554 <HAL_GPIO_Init+0x2b8>)
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80024b0:	4b28      	ldr	r3, [pc, #160]	; (8002554 <HAL_GPIO_Init+0x2b8>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	43da      	mvns	r2, r3
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	039b      	lsls	r3, r3, #14
 80024c8:	4013      	ands	r3, r2
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024d4:	4b1f      	ldr	r3, [pc, #124]	; (8002554 <HAL_GPIO_Init+0x2b8>)
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024da:	4a1e      	ldr	r2, [pc, #120]	; (8002554 <HAL_GPIO_Init+0x2b8>)
 80024dc:	2384      	movs	r3, #132	; 0x84
 80024de:	58d3      	ldr	r3, [r2, r3]
 80024e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	43da      	mvns	r2, r3
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	029b      	lsls	r3, r3, #10
 80024f4:	4013      	ands	r3, r2
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002500:	4914      	ldr	r1, [pc, #80]	; (8002554 <HAL_GPIO_Init+0x2b8>)
 8002502:	2284      	movs	r2, #132	; 0x84
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002508:	4a12      	ldr	r2, [pc, #72]	; (8002554 <HAL_GPIO_Init+0x2b8>)
 800250a:	2380      	movs	r3, #128	; 0x80
 800250c:	58d3      	ldr	r3, [r2, r3]
 800250e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	43da      	mvns	r2, r3
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4013      	ands	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	025b      	lsls	r3, r3, #9
 8002522:	4013      	ands	r3, r2
 8002524:	d003      	beq.n	800252e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800252e:	4909      	ldr	r1, [pc, #36]	; (8002554 <HAL_GPIO_Init+0x2b8>)
 8002530:	2280      	movs	r2, #128	; 0x80
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	3301      	adds	r3, #1
 800253a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	40da      	lsrs	r2, r3
 8002544:	1e13      	subs	r3, r2, #0
 8002546:	d000      	beq.n	800254a <HAL_GPIO_Init+0x2ae>
 8002548:	e6b0      	b.n	80022ac <HAL_GPIO_Init+0x10>
  }
}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	46c0      	nop			; (mov r8, r8)
 800254e:	46bd      	mov	sp, r7
 8002550:	b006      	add	sp, #24
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40021800 	.word	0x40021800
 8002558:	50000400 	.word	0x50000400
 800255c:	50000800 	.word	0x50000800
 8002560:	50000c00 	.word	0x50000c00

08002564 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800256c:	4b19      	ldr	r3, [pc, #100]	; (80025d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a19      	ldr	r2, [pc, #100]	; (80025d8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002572:	4013      	ands	r3, r2
 8002574:	0019      	movs	r1, r3
 8002576:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	430a      	orrs	r2, r1
 800257c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	429a      	cmp	r2, r3
 8002586:	d11f      	bne.n	80025c8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002588:	4b14      	ldr	r3, [pc, #80]	; (80025dc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	0013      	movs	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	189b      	adds	r3, r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4912      	ldr	r1, [pc, #72]	; (80025e0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002596:	0018      	movs	r0, r3
 8002598:	f7fd fdb2 	bl	8000100 <__udivsi3>
 800259c:	0003      	movs	r3, r0
 800259e:	3301      	adds	r3, #1
 80025a0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025a2:	e008      	b.n	80025b6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	e001      	b.n	80025b6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e009      	b.n	80025ca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025b6:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	2380      	movs	r3, #128	; 0x80
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	401a      	ands	r2, r3
 80025c0:	2380      	movs	r3, #128	; 0x80
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d0ed      	beq.n	80025a4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	0018      	movs	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b004      	add	sp, #16
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	40007000 	.word	0x40007000
 80025d8:	fffff9ff 	.word	0xfffff9ff
 80025dc:	20000000 	.word	0x20000000
 80025e0:	000f4240 	.word	0x000f4240

080025e4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	23e0      	movs	r3, #224	; 0xe0
 80025ee:	01db      	lsls	r3, r3, #7
 80025f0:	4013      	ands	r3, r2
}
 80025f2:	0018      	movs	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000

080025fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e2f3      	b.n	8002bf6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2201      	movs	r2, #1
 8002614:	4013      	ands	r3, r2
 8002616:	d100      	bne.n	800261a <HAL_RCC_OscConfig+0x1e>
 8002618:	e07c      	b.n	8002714 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800261a:	4bc3      	ldr	r3, [pc, #780]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2238      	movs	r2, #56	; 0x38
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002624:	4bc0      	ldr	r3, [pc, #768]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2203      	movs	r2, #3
 800262a:	4013      	ands	r3, r2
 800262c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	2b10      	cmp	r3, #16
 8002632:	d102      	bne.n	800263a <HAL_RCC_OscConfig+0x3e>
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	2b03      	cmp	r3, #3
 8002638:	d002      	beq.n	8002640 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	2b08      	cmp	r3, #8
 800263e:	d10b      	bne.n	8002658 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002640:	4bb9      	ldr	r3, [pc, #740]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	029b      	lsls	r3, r3, #10
 8002648:	4013      	ands	r3, r2
 800264a:	d062      	beq.n	8002712 <HAL_RCC_OscConfig+0x116>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d15e      	bne.n	8002712 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e2ce      	b.n	8002bf6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	025b      	lsls	r3, r3, #9
 8002660:	429a      	cmp	r2, r3
 8002662:	d107      	bne.n	8002674 <HAL_RCC_OscConfig+0x78>
 8002664:	4bb0      	ldr	r3, [pc, #704]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	4baf      	ldr	r3, [pc, #700]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 800266a:	2180      	movs	r1, #128	; 0x80
 800266c:	0249      	lsls	r1, r1, #9
 800266e:	430a      	orrs	r2, r1
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	e020      	b.n	80026b6 <HAL_RCC_OscConfig+0xba>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	23a0      	movs	r3, #160	; 0xa0
 800267a:	02db      	lsls	r3, r3, #11
 800267c:	429a      	cmp	r2, r3
 800267e:	d10e      	bne.n	800269e <HAL_RCC_OscConfig+0xa2>
 8002680:	4ba9      	ldr	r3, [pc, #676]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4ba8      	ldr	r3, [pc, #672]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 8002686:	2180      	movs	r1, #128	; 0x80
 8002688:	02c9      	lsls	r1, r1, #11
 800268a:	430a      	orrs	r2, r1
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	4ba6      	ldr	r3, [pc, #664]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	4ba5      	ldr	r3, [pc, #660]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 8002694:	2180      	movs	r1, #128	; 0x80
 8002696:	0249      	lsls	r1, r1, #9
 8002698:	430a      	orrs	r2, r1
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	e00b      	b.n	80026b6 <HAL_RCC_OscConfig+0xba>
 800269e:	4ba2      	ldr	r3, [pc, #648]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	4ba1      	ldr	r3, [pc, #644]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 80026a4:	49a1      	ldr	r1, [pc, #644]	; (800292c <HAL_RCC_OscConfig+0x330>)
 80026a6:	400a      	ands	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	4b9f      	ldr	r3, [pc, #636]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4b9e      	ldr	r3, [pc, #632]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 80026b0:	499f      	ldr	r1, [pc, #636]	; (8002930 <HAL_RCC_OscConfig+0x334>)
 80026b2:	400a      	ands	r2, r1
 80026b4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d014      	beq.n	80026e8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026be:	f7ff fd0b 	bl	80020d8 <HAL_GetTick>
 80026c2:	0003      	movs	r3, r0
 80026c4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c8:	f7ff fd06 	bl	80020d8 <HAL_GetTick>
 80026cc:	0002      	movs	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	; 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e28d      	b.n	8002bf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026da:	4b93      	ldr	r3, [pc, #588]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	029b      	lsls	r3, r3, #10
 80026e2:	4013      	ands	r3, r2
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0xcc>
 80026e6:	e015      	b.n	8002714 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e8:	f7ff fcf6 	bl	80020d8 <HAL_GetTick>
 80026ec:	0003      	movs	r3, r0
 80026ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f2:	f7ff fcf1 	bl	80020d8 <HAL_GetTick>
 80026f6:	0002      	movs	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b64      	cmp	r3, #100	; 0x64
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e278      	b.n	8002bf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002704:	4b88      	ldr	r3, [pc, #544]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	029b      	lsls	r3, r3, #10
 800270c:	4013      	ands	r3, r2
 800270e:	d1f0      	bne.n	80026f2 <HAL_RCC_OscConfig+0xf6>
 8002710:	e000      	b.n	8002714 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002712:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2202      	movs	r2, #2
 800271a:	4013      	ands	r3, r2
 800271c:	d100      	bne.n	8002720 <HAL_RCC_OscConfig+0x124>
 800271e:	e099      	b.n	8002854 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002720:	4b81      	ldr	r3, [pc, #516]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2238      	movs	r2, #56	; 0x38
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800272a:	4b7f      	ldr	r3, [pc, #508]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	2203      	movs	r2, #3
 8002730:	4013      	ands	r3, r2
 8002732:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	2b10      	cmp	r3, #16
 8002738:	d102      	bne.n	8002740 <HAL_RCC_OscConfig+0x144>
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d002      	beq.n	8002746 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d135      	bne.n	80027b2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002746:	4b78      	ldr	r3, [pc, #480]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	2380      	movs	r3, #128	; 0x80
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4013      	ands	r3, r2
 8002750:	d005      	beq.n	800275e <HAL_RCC_OscConfig+0x162>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e24b      	b.n	8002bf6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275e:	4b72      	ldr	r3, [pc, #456]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	4a74      	ldr	r2, [pc, #464]	; (8002934 <HAL_RCC_OscConfig+0x338>)
 8002764:	4013      	ands	r3, r2
 8002766:	0019      	movs	r1, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	021a      	lsls	r2, r3, #8
 800276e:	4b6e      	ldr	r3, [pc, #440]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 8002770:	430a      	orrs	r2, r1
 8002772:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d112      	bne.n	80027a0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800277a:	4b6b      	ldr	r3, [pc, #428]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a6e      	ldr	r2, [pc, #440]	; (8002938 <HAL_RCC_OscConfig+0x33c>)
 8002780:	4013      	ands	r3, r2
 8002782:	0019      	movs	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	4b67      	ldr	r3, [pc, #412]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 800278a:	430a      	orrs	r2, r1
 800278c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800278e:	4b66      	ldr	r3, [pc, #408]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	0adb      	lsrs	r3, r3, #11
 8002794:	2207      	movs	r2, #7
 8002796:	4013      	ands	r3, r2
 8002798:	4a68      	ldr	r2, [pc, #416]	; (800293c <HAL_RCC_OscConfig+0x340>)
 800279a:	40da      	lsrs	r2, r3
 800279c:	4b68      	ldr	r3, [pc, #416]	; (8002940 <HAL_RCC_OscConfig+0x344>)
 800279e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027a0:	4b68      	ldr	r3, [pc, #416]	; (8002944 <HAL_RCC_OscConfig+0x348>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	0018      	movs	r0, r3
 80027a6:	f7ff fc3b 	bl	8002020 <HAL_InitTick>
 80027aa:	1e03      	subs	r3, r0, #0
 80027ac:	d051      	beq.n	8002852 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e221      	b.n	8002bf6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d030      	beq.n	800281c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80027ba:	4b5b      	ldr	r3, [pc, #364]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a5e      	ldr	r2, [pc, #376]	; (8002938 <HAL_RCC_OscConfig+0x33c>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	0019      	movs	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	4b57      	ldr	r3, [pc, #348]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 80027ca:	430a      	orrs	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80027ce:	4b56      	ldr	r3, [pc, #344]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	4b55      	ldr	r3, [pc, #340]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 80027d4:	2180      	movs	r1, #128	; 0x80
 80027d6:	0049      	lsls	r1, r1, #1
 80027d8:	430a      	orrs	r2, r1
 80027da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7ff fc7c 	bl	80020d8 <HAL_GetTick>
 80027e0:	0003      	movs	r3, r0
 80027e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e6:	f7ff fc77 	bl	80020d8 <HAL_GetTick>
 80027ea:	0002      	movs	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e1fe      	b.n	8002bf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f8:	4b4b      	ldr	r3, [pc, #300]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4013      	ands	r3, r2
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002804:	4b48      	ldr	r3, [pc, #288]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4a4a      	ldr	r2, [pc, #296]	; (8002934 <HAL_RCC_OscConfig+0x338>)
 800280a:	4013      	ands	r3, r2
 800280c:	0019      	movs	r1, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	021a      	lsls	r2, r3, #8
 8002814:	4b44      	ldr	r3, [pc, #272]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 8002816:	430a      	orrs	r2, r1
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	e01b      	b.n	8002854 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800281c:	4b42      	ldr	r3, [pc, #264]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b41      	ldr	r3, [pc, #260]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 8002822:	4949      	ldr	r1, [pc, #292]	; (8002948 <HAL_RCC_OscConfig+0x34c>)
 8002824:	400a      	ands	r2, r1
 8002826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002828:	f7ff fc56 	bl	80020d8 <HAL_GetTick>
 800282c:	0003      	movs	r3, r0
 800282e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002832:	f7ff fc51 	bl	80020d8 <HAL_GetTick>
 8002836:	0002      	movs	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e1d8      	b.n	8002bf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002844:	4b38      	ldr	r3, [pc, #224]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	2380      	movs	r3, #128	; 0x80
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	4013      	ands	r3, r2
 800284e:	d1f0      	bne.n	8002832 <HAL_RCC_OscConfig+0x236>
 8002850:	e000      	b.n	8002854 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002852:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2208      	movs	r2, #8
 800285a:	4013      	ands	r3, r2
 800285c:	d047      	beq.n	80028ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800285e:	4b32      	ldr	r3, [pc, #200]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2238      	movs	r2, #56	; 0x38
 8002864:	4013      	ands	r3, r2
 8002866:	2b18      	cmp	r3, #24
 8002868:	d10a      	bne.n	8002880 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800286a:	4b2f      	ldr	r3, [pc, #188]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 800286c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286e:	2202      	movs	r2, #2
 8002870:	4013      	ands	r3, r2
 8002872:	d03c      	beq.n	80028ee <HAL_RCC_OscConfig+0x2f2>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d138      	bne.n	80028ee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e1ba      	b.n	8002bf6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d019      	beq.n	80028bc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002888:	4b27      	ldr	r3, [pc, #156]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 800288a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800288c:	4b26      	ldr	r3, [pc, #152]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 800288e:	2101      	movs	r1, #1
 8002890:	430a      	orrs	r2, r1
 8002892:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002894:	f7ff fc20 	bl	80020d8 <HAL_GetTick>
 8002898:	0003      	movs	r3, r0
 800289a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800289e:	f7ff fc1b 	bl	80020d8 <HAL_GetTick>
 80028a2:	0002      	movs	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e1a2      	b.n	8002bf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028b0:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 80028b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b4:	2202      	movs	r2, #2
 80028b6:	4013      	ands	r3, r2
 80028b8:	d0f1      	beq.n	800289e <HAL_RCC_OscConfig+0x2a2>
 80028ba:	e018      	b.n	80028ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80028bc:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 80028be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028c0:	4b19      	ldr	r3, [pc, #100]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 80028c2:	2101      	movs	r1, #1
 80028c4:	438a      	bics	r2, r1
 80028c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7ff fc06 	bl	80020d8 <HAL_GetTick>
 80028cc:	0003      	movs	r3, r0
 80028ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d2:	f7ff fc01 	bl	80020d8 <HAL_GetTick>
 80028d6:	0002      	movs	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e188      	b.n	8002bf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028e4:	4b10      	ldr	r3, [pc, #64]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 80028e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e8:	2202      	movs	r2, #2
 80028ea:	4013      	ands	r3, r2
 80028ec:	d1f1      	bne.n	80028d2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2204      	movs	r2, #4
 80028f4:	4013      	ands	r3, r2
 80028f6:	d100      	bne.n	80028fa <HAL_RCC_OscConfig+0x2fe>
 80028f8:	e0c6      	b.n	8002a88 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028fa:	231f      	movs	r3, #31
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002902:	4b09      	ldr	r3, [pc, #36]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2238      	movs	r2, #56	; 0x38
 8002908:	4013      	ands	r3, r2
 800290a:	2b20      	cmp	r3, #32
 800290c:	d11e      	bne.n	800294c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_RCC_OscConfig+0x32c>)
 8002910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002912:	2202      	movs	r2, #2
 8002914:	4013      	ands	r3, r2
 8002916:	d100      	bne.n	800291a <HAL_RCC_OscConfig+0x31e>
 8002918:	e0b6      	b.n	8002a88 <HAL_RCC_OscConfig+0x48c>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d000      	beq.n	8002924 <HAL_RCC_OscConfig+0x328>
 8002922:	e0b1      	b.n	8002a88 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e166      	b.n	8002bf6 <HAL_RCC_OscConfig+0x5fa>
 8002928:	40021000 	.word	0x40021000
 800292c:	fffeffff 	.word	0xfffeffff
 8002930:	fffbffff 	.word	0xfffbffff
 8002934:	ffff80ff 	.word	0xffff80ff
 8002938:	ffffc7ff 	.word	0xffffc7ff
 800293c:	00f42400 	.word	0x00f42400
 8002940:	20000000 	.word	0x20000000
 8002944:	20000004 	.word	0x20000004
 8002948:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800294c:	4bac      	ldr	r3, [pc, #688]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 800294e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002950:	2380      	movs	r3, #128	; 0x80
 8002952:	055b      	lsls	r3, r3, #21
 8002954:	4013      	ands	r3, r2
 8002956:	d101      	bne.n	800295c <HAL_RCC_OscConfig+0x360>
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <HAL_RCC_OscConfig+0x362>
 800295c:	2300      	movs	r3, #0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d011      	beq.n	8002986 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002962:	4ba7      	ldr	r3, [pc, #668]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002964:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002966:	4ba6      	ldr	r3, [pc, #664]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002968:	2180      	movs	r1, #128	; 0x80
 800296a:	0549      	lsls	r1, r1, #21
 800296c:	430a      	orrs	r2, r1
 800296e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002970:	4ba3      	ldr	r3, [pc, #652]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002972:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	055b      	lsls	r3, r3, #21
 8002978:	4013      	ands	r3, r2
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800297e:	231f      	movs	r3, #31
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002986:	4b9f      	ldr	r3, [pc, #636]	; (8002c04 <HAL_RCC_OscConfig+0x608>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4013      	ands	r3, r2
 8002990:	d11a      	bne.n	80029c8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002992:	4b9c      	ldr	r3, [pc, #624]	; (8002c04 <HAL_RCC_OscConfig+0x608>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	4b9b      	ldr	r3, [pc, #620]	; (8002c04 <HAL_RCC_OscConfig+0x608>)
 8002998:	2180      	movs	r1, #128	; 0x80
 800299a:	0049      	lsls	r1, r1, #1
 800299c:	430a      	orrs	r2, r1
 800299e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80029a0:	f7ff fb9a 	bl	80020d8 <HAL_GetTick>
 80029a4:	0003      	movs	r3, r0
 80029a6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029aa:	f7ff fb95 	bl	80020d8 <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e11c      	b.n	8002bf6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029bc:	4b91      	ldr	r3, [pc, #580]	; (8002c04 <HAL_RCC_OscConfig+0x608>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	2380      	movs	r3, #128	; 0x80
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4013      	ands	r3, r2
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d106      	bne.n	80029de <HAL_RCC_OscConfig+0x3e2>
 80029d0:	4b8b      	ldr	r3, [pc, #556]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 80029d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029d4:	4b8a      	ldr	r3, [pc, #552]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 80029d6:	2101      	movs	r1, #1
 80029d8:	430a      	orrs	r2, r1
 80029da:	65da      	str	r2, [r3, #92]	; 0x5c
 80029dc:	e01c      	b.n	8002a18 <HAL_RCC_OscConfig+0x41c>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b05      	cmp	r3, #5
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x404>
 80029e6:	4b86      	ldr	r3, [pc, #536]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 80029e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029ea:	4b85      	ldr	r3, [pc, #532]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 80029ec:	2104      	movs	r1, #4
 80029ee:	430a      	orrs	r2, r1
 80029f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80029f2:	4b83      	ldr	r3, [pc, #524]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 80029f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029f6:	4b82      	ldr	r3, [pc, #520]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 80029f8:	2101      	movs	r1, #1
 80029fa:	430a      	orrs	r2, r1
 80029fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80029fe:	e00b      	b.n	8002a18 <HAL_RCC_OscConfig+0x41c>
 8002a00:	4b7f      	ldr	r3, [pc, #508]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002a02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a04:	4b7e      	ldr	r3, [pc, #504]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002a06:	2101      	movs	r1, #1
 8002a08:	438a      	bics	r2, r1
 8002a0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a0c:	4b7c      	ldr	r3, [pc, #496]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002a0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a10:	4b7b      	ldr	r3, [pc, #492]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002a12:	2104      	movs	r1, #4
 8002a14:	438a      	bics	r2, r1
 8002a16:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d014      	beq.n	8002a4a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7ff fb5a 	bl	80020d8 <HAL_GetTick>
 8002a24:	0003      	movs	r3, r0
 8002a26:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a28:	e009      	b.n	8002a3e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2a:	f7ff fb55 	bl	80020d8 <HAL_GetTick>
 8002a2e:	0002      	movs	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	4a74      	ldr	r2, [pc, #464]	; (8002c08 <HAL_RCC_OscConfig+0x60c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e0db      	b.n	8002bf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a3e:	4b70      	ldr	r3, [pc, #448]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a42:	2202      	movs	r2, #2
 8002a44:	4013      	ands	r3, r2
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x42e>
 8002a48:	e013      	b.n	8002a72 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4a:	f7ff fb45 	bl	80020d8 <HAL_GetTick>
 8002a4e:	0003      	movs	r3, r0
 8002a50:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a52:	e009      	b.n	8002a68 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a54:	f7ff fb40 	bl	80020d8 <HAL_GetTick>
 8002a58:	0002      	movs	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	4a6a      	ldr	r2, [pc, #424]	; (8002c08 <HAL_RCC_OscConfig+0x60c>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e0c6      	b.n	8002bf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a68:	4b65      	ldr	r3, [pc, #404]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002a72:	231f      	movs	r3, #31
 8002a74:	18fb      	adds	r3, r7, r3
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d105      	bne.n	8002a88 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002a7c:	4b60      	ldr	r3, [pc, #384]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002a7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a80:	4b5f      	ldr	r3, [pc, #380]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002a82:	4962      	ldr	r1, [pc, #392]	; (8002c0c <HAL_RCC_OscConfig+0x610>)
 8002a84:	400a      	ands	r2, r1
 8002a86:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d100      	bne.n	8002a92 <HAL_RCC_OscConfig+0x496>
 8002a90:	e0b0      	b.n	8002bf4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a92:	4b5b      	ldr	r3, [pc, #364]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2238      	movs	r2, #56	; 0x38
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b10      	cmp	r3, #16
 8002a9c:	d100      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x4a4>
 8002a9e:	e078      	b.n	8002b92 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d153      	bne.n	8002b50 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa8:	4b55      	ldr	r3, [pc, #340]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b54      	ldr	r3, [pc, #336]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002aae:	4958      	ldr	r1, [pc, #352]	; (8002c10 <HAL_RCC_OscConfig+0x614>)
 8002ab0:	400a      	ands	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab4:	f7ff fb10 	bl	80020d8 <HAL_GetTick>
 8002ab8:	0003      	movs	r3, r0
 8002aba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002abe:	f7ff fb0b 	bl	80020d8 <HAL_GetTick>
 8002ac2:	0002      	movs	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e092      	b.n	8002bf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad0:	4b4b      	ldr	r3, [pc, #300]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	049b      	lsls	r3, r3, #18
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d1f0      	bne.n	8002abe <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002adc:	4b48      	ldr	r3, [pc, #288]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4a4c      	ldr	r2, [pc, #304]	; (8002c14 <HAL_RCC_OscConfig+0x618>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	0019      	movs	r1, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1a      	ldr	r2, [r3, #32]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	431a      	orrs	r2, r3
 8002b04:	4b3e      	ldr	r3, [pc, #248]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002b06:	430a      	orrs	r2, r1
 8002b08:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b0a:	4b3d      	ldr	r3, [pc, #244]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4b3c      	ldr	r3, [pc, #240]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002b10:	2180      	movs	r1, #128	; 0x80
 8002b12:	0449      	lsls	r1, r1, #17
 8002b14:	430a      	orrs	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002b18:	4b39      	ldr	r3, [pc, #228]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	4b38      	ldr	r3, [pc, #224]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002b1e:	2180      	movs	r1, #128	; 0x80
 8002b20:	0549      	lsls	r1, r1, #21
 8002b22:	430a      	orrs	r2, r1
 8002b24:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b26:	f7ff fad7 	bl	80020d8 <HAL_GetTick>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b30:	f7ff fad2 	bl	80020d8 <HAL_GetTick>
 8002b34:	0002      	movs	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e059      	b.n	8002bf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b42:	4b2f      	ldr	r3, [pc, #188]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	049b      	lsls	r3, r3, #18
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCC_OscConfig+0x534>
 8002b4e:	e051      	b.n	8002bf4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b50:	4b2b      	ldr	r3, [pc, #172]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	4b2a      	ldr	r3, [pc, #168]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002b56:	492e      	ldr	r1, [pc, #184]	; (8002c10 <HAL_RCC_OscConfig+0x614>)
 8002b58:	400a      	ands	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7ff fabc 	bl	80020d8 <HAL_GetTick>
 8002b60:	0003      	movs	r3, r0
 8002b62:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b66:	f7ff fab7 	bl	80020d8 <HAL_GetTick>
 8002b6a:	0002      	movs	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e03e      	b.n	8002bf6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b78:	4b21      	ldr	r3, [pc, #132]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	049b      	lsls	r3, r3, #18
 8002b80:	4013      	ands	r3, r2
 8002b82:	d1f0      	bne.n	8002b66 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002b84:	4b1e      	ldr	r3, [pc, #120]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	4b1d      	ldr	r3, [pc, #116]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002b8a:	4923      	ldr	r1, [pc, #140]	; (8002c18 <HAL_RCC_OscConfig+0x61c>)
 8002b8c:	400a      	ands	r2, r1
 8002b8e:	60da      	str	r2, [r3, #12]
 8002b90:	e030      	b.n	8002bf4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e02b      	b.n	8002bf6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002b9e:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <HAL_RCC_OscConfig+0x604>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	401a      	ands	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d11e      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2270      	movs	r2, #112	; 0x70
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d117      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	23fe      	movs	r3, #254	; 0xfe
 8002bc4:	01db      	lsls	r3, r3, #7
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d10e      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	23f8      	movs	r3, #248	; 0xf8
 8002bd6:	039b      	lsls	r3, r3, #14
 8002bd8:	401a      	ands	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d106      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	0f5b      	lsrs	r3, r3, #29
 8002be6:	075a      	lsls	r2, r3, #29
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e000      	b.n	8002bf6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	b008      	add	sp, #32
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	40021000 	.word	0x40021000
 8002c04:	40007000 	.word	0x40007000
 8002c08:	00001388 	.word	0x00001388
 8002c0c:	efffffff 	.word	0xefffffff
 8002c10:	feffffff 	.word	0xfeffffff
 8002c14:	1fc1808c 	.word	0x1fc1808c
 8002c18:	effefffc 	.word	0xeffefffc

08002c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0e9      	b.n	8002e04 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c30:	4b76      	ldr	r3, [pc, #472]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2207      	movs	r2, #7
 8002c36:	4013      	ands	r3, r2
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d91e      	bls.n	8002c7c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b73      	ldr	r3, [pc, #460]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2207      	movs	r2, #7
 8002c44:	4393      	bics	r3, r2
 8002c46:	0019      	movs	r1, r3
 8002c48:	4b70      	ldr	r3, [pc, #448]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c50:	f7ff fa42 	bl	80020d8 <HAL_GetTick>
 8002c54:	0003      	movs	r3, r0
 8002c56:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c58:	e009      	b.n	8002c6e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5a:	f7ff fa3d 	bl	80020d8 <HAL_GetTick>
 8002c5e:	0002      	movs	r2, r0
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	4a6a      	ldr	r2, [pc, #424]	; (8002e10 <HAL_RCC_ClockConfig+0x1f4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e0ca      	b.n	8002e04 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c6e:	4b67      	ldr	r3, [pc, #412]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2207      	movs	r2, #7
 8002c74:	4013      	ands	r3, r2
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d1ee      	bne.n	8002c5a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2202      	movs	r2, #2
 8002c82:	4013      	ands	r3, r2
 8002c84:	d015      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d006      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c90:	4b60      	ldr	r3, [pc, #384]	; (8002e14 <HAL_RCC_ClockConfig+0x1f8>)
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	4b5f      	ldr	r3, [pc, #380]	; (8002e14 <HAL_RCC_ClockConfig+0x1f8>)
 8002c96:	21e0      	movs	r1, #224	; 0xe0
 8002c98:	01c9      	lsls	r1, r1, #7
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c9e:	4b5d      	ldr	r3, [pc, #372]	; (8002e14 <HAL_RCC_ClockConfig+0x1f8>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	4a5d      	ldr	r2, [pc, #372]	; (8002e18 <HAL_RCC_ClockConfig+0x1fc>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	4b59      	ldr	r3, [pc, #356]	; (8002e14 <HAL_RCC_ClockConfig+0x1f8>)
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d057      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d107      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cc4:	4b53      	ldr	r3, [pc, #332]	; (8002e14 <HAL_RCC_ClockConfig+0x1f8>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	2380      	movs	r3, #128	; 0x80
 8002cca:	029b      	lsls	r3, r3, #10
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d12b      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e097      	b.n	8002e04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d107      	bne.n	8002cec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cdc:	4b4d      	ldr	r3, [pc, #308]	; (8002e14 <HAL_RCC_ClockConfig+0x1f8>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	2380      	movs	r3, #128	; 0x80
 8002ce2:	049b      	lsls	r3, r3, #18
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d11f      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e08b      	b.n	8002e04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d107      	bne.n	8002d04 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cf4:	4b47      	ldr	r3, [pc, #284]	; (8002e14 <HAL_RCC_ClockConfig+0x1f8>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d113      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e07f      	b.n	8002e04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b03      	cmp	r3, #3
 8002d0a:	d106      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d0c:	4b41      	ldr	r3, [pc, #260]	; (8002e14 <HAL_RCC_ClockConfig+0x1f8>)
 8002d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d10:	2202      	movs	r2, #2
 8002d12:	4013      	ands	r3, r2
 8002d14:	d108      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e074      	b.n	8002e04 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d1a:	4b3e      	ldr	r3, [pc, #248]	; (8002e14 <HAL_RCC_ClockConfig+0x1f8>)
 8002d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1e:	2202      	movs	r2, #2
 8002d20:	4013      	ands	r3, r2
 8002d22:	d101      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e06d      	b.n	8002e04 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d28:	4b3a      	ldr	r3, [pc, #232]	; (8002e14 <HAL_RCC_ClockConfig+0x1f8>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2207      	movs	r2, #7
 8002d2e:	4393      	bics	r3, r2
 8002d30:	0019      	movs	r1, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	4b37      	ldr	r3, [pc, #220]	; (8002e14 <HAL_RCC_ClockConfig+0x1f8>)
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d3c:	f7ff f9cc 	bl	80020d8 <HAL_GetTick>
 8002d40:	0003      	movs	r3, r0
 8002d42:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d44:	e009      	b.n	8002d5a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d46:	f7ff f9c7 	bl	80020d8 <HAL_GetTick>
 8002d4a:	0002      	movs	r2, r0
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	4a2f      	ldr	r2, [pc, #188]	; (8002e10 <HAL_RCC_ClockConfig+0x1f4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e054      	b.n	8002e04 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5a:	4b2e      	ldr	r3, [pc, #184]	; (8002e14 <HAL_RCC_ClockConfig+0x1f8>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2238      	movs	r2, #56	; 0x38
 8002d60:	401a      	ands	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d1ec      	bne.n	8002d46 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b27      	ldr	r3, [pc, #156]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2207      	movs	r2, #7
 8002d72:	4013      	ands	r3, r2
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d21e      	bcs.n	8002db8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b24      	ldr	r3, [pc, #144]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2207      	movs	r2, #7
 8002d80:	4393      	bics	r3, r2
 8002d82:	0019      	movs	r1, r3
 8002d84:	4b21      	ldr	r3, [pc, #132]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d8c:	f7ff f9a4 	bl	80020d8 <HAL_GetTick>
 8002d90:	0003      	movs	r3, r0
 8002d92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d94:	e009      	b.n	8002daa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d96:	f7ff f99f 	bl	80020d8 <HAL_GetTick>
 8002d9a:	0002      	movs	r2, r0
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	4a1b      	ldr	r2, [pc, #108]	; (8002e10 <HAL_RCC_ClockConfig+0x1f4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e02c      	b.n	8002e04 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002daa:	4b18      	ldr	r3, [pc, #96]	; (8002e0c <HAL_RCC_ClockConfig+0x1f0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2207      	movs	r2, #7
 8002db0:	4013      	ands	r3, r2
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d1ee      	bne.n	8002d96 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2204      	movs	r2, #4
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d009      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc2:	4b14      	ldr	r3, [pc, #80]	; (8002e14 <HAL_RCC_ClockConfig+0x1f8>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	4a15      	ldr	r2, [pc, #84]	; (8002e1c <HAL_RCC_ClockConfig+0x200>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	0019      	movs	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	4b10      	ldr	r3, [pc, #64]	; (8002e14 <HAL_RCC_ClockConfig+0x1f8>)
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002dd6:	f000 f829 	bl	8002e2c <HAL_RCC_GetSysClockFreq>
 8002dda:	0001      	movs	r1, r0
 8002ddc:	4b0d      	ldr	r3, [pc, #52]	; (8002e14 <HAL_RCC_ClockConfig+0x1f8>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	0a1b      	lsrs	r3, r3, #8
 8002de2:	220f      	movs	r2, #15
 8002de4:	401a      	ands	r2, r3
 8002de6:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <HAL_RCC_ClockConfig+0x204>)
 8002de8:	0092      	lsls	r2, r2, #2
 8002dea:	58d3      	ldr	r3, [r2, r3]
 8002dec:	221f      	movs	r2, #31
 8002dee:	4013      	ands	r3, r2
 8002df0:	000a      	movs	r2, r1
 8002df2:	40da      	lsrs	r2, r3
 8002df4:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <HAL_RCC_ClockConfig+0x208>)
 8002df6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_ClockConfig+0x20c>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f7ff f90f 	bl	8002020 <HAL_InitTick>
 8002e02:	0003      	movs	r3, r0
}
 8002e04:	0018      	movs	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b004      	add	sp, #16
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40022000 	.word	0x40022000
 8002e10:	00001388 	.word	0x00001388
 8002e14:	40021000 	.word	0x40021000
 8002e18:	fffff0ff 	.word	0xfffff0ff
 8002e1c:	ffff8fff 	.word	0xffff8fff
 8002e20:	080051d4 	.word	0x080051d4
 8002e24:	20000000 	.word	0x20000000
 8002e28:	20000004 	.word	0x20000004

08002e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e32:	4b3c      	ldr	r3, [pc, #240]	; (8002f24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2238      	movs	r2, #56	; 0x38
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d10f      	bne.n	8002e5c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002e3c:	4b39      	ldr	r3, [pc, #228]	; (8002f24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	0adb      	lsrs	r3, r3, #11
 8002e42:	2207      	movs	r2, #7
 8002e44:	4013      	ands	r3, r2
 8002e46:	2201      	movs	r2, #1
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	0013      	movs	r3, r2
 8002e4c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002e4e:	6839      	ldr	r1, [r7, #0]
 8002e50:	4835      	ldr	r0, [pc, #212]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e52:	f7fd f955 	bl	8000100 <__udivsi3>
 8002e56:	0003      	movs	r3, r0
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	e05d      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e5c:	4b31      	ldr	r3, [pc, #196]	; (8002f24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2238      	movs	r2, #56	; 0x38
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d102      	bne.n	8002e6e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e68:	4b30      	ldr	r3, [pc, #192]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x100>)
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	e054      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e6e:	4b2d      	ldr	r3, [pc, #180]	; (8002f24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2238      	movs	r2, #56	; 0x38
 8002e74:	4013      	ands	r3, r2
 8002e76:	2b10      	cmp	r3, #16
 8002e78:	d138      	bne.n	8002eec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002e7a:	4b2a      	ldr	r3, [pc, #168]	; (8002f24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	2203      	movs	r2, #3
 8002e80:	4013      	ands	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e84:	4b27      	ldr	r3, [pc, #156]	; (8002f24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	2207      	movs	r2, #7
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	3301      	adds	r3, #1
 8002e90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d10d      	bne.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	4824      	ldr	r0, [pc, #144]	; (8002f2c <HAL_RCC_GetSysClockFreq+0x100>)
 8002e9c:	f7fd f930 	bl	8000100 <__udivsi3>
 8002ea0:	0003      	movs	r3, r0
 8002ea2:	0019      	movs	r1, r3
 8002ea4:	4b1f      	ldr	r3, [pc, #124]	; (8002f24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	0a1b      	lsrs	r3, r3, #8
 8002eaa:	227f      	movs	r2, #127	; 0x7f
 8002eac:	4013      	ands	r3, r2
 8002eae:	434b      	muls	r3, r1
 8002eb0:	617b      	str	r3, [r7, #20]
        break;
 8002eb2:	e00d      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	481c      	ldr	r0, [pc, #112]	; (8002f28 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002eb8:	f7fd f922 	bl	8000100 <__udivsi3>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	0019      	movs	r1, r3
 8002ec0:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	0a1b      	lsrs	r3, r3, #8
 8002ec6:	227f      	movs	r2, #127	; 0x7f
 8002ec8:	4013      	ands	r3, r2
 8002eca:	434b      	muls	r3, r1
 8002ecc:	617b      	str	r3, [r7, #20]
        break;
 8002ece:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002ed0:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	0f5b      	lsrs	r3, r3, #29
 8002ed6:	2207      	movs	r2, #7
 8002ed8:	4013      	ands	r3, r2
 8002eda:	3301      	adds	r3, #1
 8002edc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	6978      	ldr	r0, [r7, #20]
 8002ee2:	f7fd f90d 	bl	8000100 <__udivsi3>
 8002ee6:	0003      	movs	r3, r0
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	e015      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002eec:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2238      	movs	r2, #56	; 0x38
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d103      	bne.n	8002f00 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002ef8:	2380      	movs	r3, #128	; 0x80
 8002efa:	021b      	lsls	r3, r3, #8
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	e00b      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2238      	movs	r2, #56	; 0x38
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b18      	cmp	r3, #24
 8002f0a:	d103      	bne.n	8002f14 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002f0c:	23fa      	movs	r3, #250	; 0xfa
 8002f0e:	01db      	lsls	r3, r3, #7
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	e001      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002f18:	693b      	ldr	r3, [r7, #16]
}
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	b006      	add	sp, #24
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	40021000 	.word	0x40021000
 8002f28:	00f42400 	.word	0x00f42400
 8002f2c:	007a1200 	.word	0x007a1200

08002f30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f34:	4b02      	ldr	r3, [pc, #8]	; (8002f40 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f36:	681b      	ldr	r3, [r3, #0]
}
 8002f38:	0018      	movs	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	20000000 	.word	0x20000000

08002f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f44:	b5b0      	push	{r4, r5, r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002f48:	f7ff fff2 	bl	8002f30 <HAL_RCC_GetHCLKFreq>
 8002f4c:	0004      	movs	r4, r0
 8002f4e:	f7ff fb49 	bl	80025e4 <LL_RCC_GetAPB1Prescaler>
 8002f52:	0003      	movs	r3, r0
 8002f54:	0b1a      	lsrs	r2, r3, #12
 8002f56:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f58:	0092      	lsls	r2, r2, #2
 8002f5a:	58d3      	ldr	r3, [r2, r3]
 8002f5c:	221f      	movs	r2, #31
 8002f5e:	4013      	ands	r3, r2
 8002f60:	40dc      	lsrs	r4, r3
 8002f62:	0023      	movs	r3, r4
}
 8002f64:	0018      	movs	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bdb0      	pop	{r4, r5, r7, pc}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	08005214 	.word	0x08005214

08002f70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002f78:	2313      	movs	r3, #19
 8002f7a:	18fb      	adds	r3, r7, r3
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f80:	2312      	movs	r3, #18
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	2200      	movs	r2, #0
 8002f86:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	029b      	lsls	r3, r3, #10
 8002f90:	4013      	ands	r3, r2
 8002f92:	d100      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002f94:	e0a3      	b.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f96:	2011      	movs	r0, #17
 8002f98:	183b      	adds	r3, r7, r0
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f9e:	4b86      	ldr	r3, [pc, #536]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	055b      	lsls	r3, r3, #21
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d110      	bne.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002faa:	4b83      	ldr	r3, [pc, #524]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fae:	4b82      	ldr	r3, [pc, #520]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fb0:	2180      	movs	r1, #128	; 0x80
 8002fb2:	0549      	lsls	r1, r1, #21
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002fb8:	4b7f      	ldr	r3, [pc, #508]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	055b      	lsls	r3, r3, #21
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc6:	183b      	adds	r3, r7, r0
 8002fc8:	2201      	movs	r2, #1
 8002fca:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fcc:	4b7b      	ldr	r3, [pc, #492]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b7a      	ldr	r3, [pc, #488]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002fd2:	2180      	movs	r1, #128	; 0x80
 8002fd4:	0049      	lsls	r1, r1, #1
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fda:	f7ff f87d 	bl	80020d8 <HAL_GetTick>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fe2:	e00b      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe4:	f7ff f878 	bl	80020d8 <HAL_GetTick>
 8002fe8:	0002      	movs	r2, r0
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d904      	bls.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002ff2:	2313      	movs	r3, #19
 8002ff4:	18fb      	adds	r3, r7, r3
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	701a      	strb	r2, [r3, #0]
        break;
 8002ffa:	e005      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ffc:	4b6f      	ldr	r3, [pc, #444]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	2380      	movs	r3, #128	; 0x80
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4013      	ands	r3, r2
 8003006:	d0ed      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003008:	2313      	movs	r3, #19
 800300a:	18fb      	adds	r3, r7, r3
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d154      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003012:	4b69      	ldr	r3, [pc, #420]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003014:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003016:	23c0      	movs	r3, #192	; 0xc0
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4013      	ands	r3, r2
 800301c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d019      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	429a      	cmp	r2, r3
 800302c:	d014      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800302e:	4b62      	ldr	r3, [pc, #392]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003032:	4a63      	ldr	r2, [pc, #396]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003034:	4013      	ands	r3, r2
 8003036:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003038:	4b5f      	ldr	r3, [pc, #380]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800303a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800303c:	4b5e      	ldr	r3, [pc, #376]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800303e:	2180      	movs	r1, #128	; 0x80
 8003040:	0249      	lsls	r1, r1, #9
 8003042:	430a      	orrs	r2, r1
 8003044:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003046:	4b5c      	ldr	r3, [pc, #368]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003048:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800304a:	4b5b      	ldr	r3, [pc, #364]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800304c:	495d      	ldr	r1, [pc, #372]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800304e:	400a      	ands	r2, r1
 8003050:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003052:	4b59      	ldr	r3, [pc, #356]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2201      	movs	r2, #1
 800305c:	4013      	ands	r3, r2
 800305e:	d016      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003060:	f7ff f83a 	bl	80020d8 <HAL_GetTick>
 8003064:	0003      	movs	r3, r0
 8003066:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003068:	e00c      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800306a:	f7ff f835 	bl	80020d8 <HAL_GetTick>
 800306e:	0002      	movs	r2, r0
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	4a54      	ldr	r2, [pc, #336]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d904      	bls.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800307a:	2313      	movs	r3, #19
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	2203      	movs	r2, #3
 8003080:	701a      	strb	r2, [r3, #0]
            break;
 8003082:	e004      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003084:	4b4c      	ldr	r3, [pc, #304]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003088:	2202      	movs	r2, #2
 800308a:	4013      	ands	r3, r2
 800308c:	d0ed      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800308e:	2313      	movs	r3, #19
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10a      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003098:	4b47      	ldr	r3, [pc, #284]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800309a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309c:	4a48      	ldr	r2, [pc, #288]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800309e:	4013      	ands	r3, r2
 80030a0:	0019      	movs	r1, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699a      	ldr	r2, [r3, #24]
 80030a6:	4b44      	ldr	r3, [pc, #272]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030a8:	430a      	orrs	r2, r1
 80030aa:	65da      	str	r2, [r3, #92]	; 0x5c
 80030ac:	e00c      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030ae:	2312      	movs	r3, #18
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	2213      	movs	r2, #19
 80030b4:	18ba      	adds	r2, r7, r2
 80030b6:	7812      	ldrb	r2, [r2, #0]
 80030b8:	701a      	strb	r2, [r3, #0]
 80030ba:	e005      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030bc:	2312      	movs	r3, #18
 80030be:	18fb      	adds	r3, r7, r3
 80030c0:	2213      	movs	r2, #19
 80030c2:	18ba      	adds	r2, r7, r2
 80030c4:	7812      	ldrb	r2, [r2, #0]
 80030c6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030c8:	2311      	movs	r3, #17
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d105      	bne.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d2:	4b39      	ldr	r3, [pc, #228]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030d6:	4b38      	ldr	r3, [pc, #224]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030d8:	493c      	ldr	r1, [pc, #240]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80030da:	400a      	ands	r2, r1
 80030dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2201      	movs	r2, #1
 80030e4:	4013      	ands	r3, r2
 80030e6:	d009      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030e8:	4b33      	ldr	r3, [pc, #204]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ec:	2203      	movs	r2, #3
 80030ee:	4393      	bics	r3, r2
 80030f0:	0019      	movs	r1, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	4b30      	ldr	r3, [pc, #192]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030f8:	430a      	orrs	r2, r1
 80030fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2202      	movs	r2, #2
 8003102:	4013      	ands	r3, r2
 8003104:	d009      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003106:	4b2c      	ldr	r3, [pc, #176]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310a:	220c      	movs	r2, #12
 800310c:	4393      	bics	r3, r2
 800310e:	0019      	movs	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	4b28      	ldr	r3, [pc, #160]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003116:	430a      	orrs	r2, r1
 8003118:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2220      	movs	r2, #32
 8003120:	4013      	ands	r3, r2
 8003122:	d009      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003124:	4b24      	ldr	r3, [pc, #144]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003128:	4a29      	ldr	r2, [pc, #164]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312a:	4013      	ands	r3, r2
 800312c:	0019      	movs	r1, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68da      	ldr	r2, [r3, #12]
 8003132:	4b21      	ldr	r3, [pc, #132]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003134:	430a      	orrs	r2, r1
 8003136:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	2380      	movs	r3, #128	; 0x80
 800313e:	01db      	lsls	r3, r3, #7
 8003140:	4013      	ands	r3, r2
 8003142:	d015      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003144:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	0899      	lsrs	r1, r3, #2
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	695a      	ldr	r2, [r3, #20]
 8003150:	4b19      	ldr	r3, [pc, #100]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003152:	430a      	orrs	r2, r1
 8003154:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695a      	ldr	r2, [r3, #20]
 800315a:	2380      	movs	r3, #128	; 0x80
 800315c:	05db      	lsls	r3, r3, #23
 800315e:	429a      	cmp	r2, r3
 8003160:	d106      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003162:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003168:	2180      	movs	r1, #128	; 0x80
 800316a:	0249      	lsls	r1, r1, #9
 800316c:	430a      	orrs	r2, r1
 800316e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	2380      	movs	r3, #128	; 0x80
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	4013      	ands	r3, r2
 800317a:	d016      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800317c:	4b0e      	ldr	r3, [pc, #56]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800317e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003180:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003182:	4013      	ands	r3, r2
 8003184:	0019      	movs	r1, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	691a      	ldr	r2, [r3, #16]
 800318a:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800318c:	430a      	orrs	r2, r1
 800318e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	01db      	lsls	r3, r3, #7
 8003198:	429a      	cmp	r2, r3
 800319a:	d106      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031a2:	2180      	movs	r1, #128	; 0x80
 80031a4:	0249      	lsls	r1, r1, #9
 80031a6:	430a      	orrs	r2, r1
 80031a8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80031aa:	2312      	movs	r3, #18
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	781b      	ldrb	r3, [r3, #0]
}
 80031b0:	0018      	movs	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b006      	add	sp, #24
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40007000 	.word	0x40007000
 80031c0:	fffffcff 	.word	0xfffffcff
 80031c4:	fffeffff 	.word	0xfffeffff
 80031c8:	00001388 	.word	0x00001388
 80031cc:	efffffff 	.word	0xefffffff
 80031d0:	ffffcfff 	.word	0xffffcfff
 80031d4:	ffff3fff 	.word	0xffff3fff

080031d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e046      	b.n	8003278 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2288      	movs	r2, #136	; 0x88
 80031ee:	589b      	ldr	r3, [r3, r2]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d107      	bne.n	8003204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2284      	movs	r2, #132	; 0x84
 80031f8:	2100      	movs	r1, #0
 80031fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	0018      	movs	r0, r3
 8003200:	f7fe fc20 	bl	8001a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2288      	movs	r2, #136	; 0x88
 8003208:	2124      	movs	r1, #36	; 0x24
 800320a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2101      	movs	r1, #1
 8003218:	438a      	bics	r2, r1
 800321a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	0018      	movs	r0, r3
 8003220:	f000 fab0 	bl	8003784 <UART_SetConfig>
 8003224:	0003      	movs	r3, r0
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e024      	b.n	8003278 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	0018      	movs	r0, r3
 800323a:	f000 fc47 	bl	8003acc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	490d      	ldr	r1, [pc, #52]	; (8003280 <HAL_UART_Init+0xa8>)
 800324a:	400a      	ands	r2, r1
 800324c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	212a      	movs	r1, #42	; 0x2a
 800325a:	438a      	bics	r2, r1
 800325c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2101      	movs	r1, #1
 800326a:	430a      	orrs	r2, r1
 800326c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	0018      	movs	r0, r3
 8003272:	f000 fcdf 	bl	8003c34 <UART_CheckIdleState>
 8003276:	0003      	movs	r3, r0
}
 8003278:	0018      	movs	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	b002      	add	sp, #8
 800327e:	bd80      	pop	{r7, pc}
 8003280:	ffffb7ff 	.word	0xffffb7ff

08003284 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e04e      	b.n	8003334 <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2288      	movs	r2, #136	; 0x88
 800329a:	589b      	ldr	r3, [r3, r2]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d107      	bne.n	80032b0 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2284      	movs	r2, #132	; 0x84
 80032a4:	2100      	movs	r1, #0
 80032a6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	0018      	movs	r0, r3
 80032ac:	f7fe fbca 	bl	8001a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2288      	movs	r2, #136	; 0x88
 80032b4:	2124      	movs	r1, #36	; 0x24
 80032b6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2101      	movs	r1, #1
 80032c4:	438a      	bics	r2, r1
 80032c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	0018      	movs	r0, r3
 80032cc:	f000 fa5a 	bl	8003784 <UART_SetConfig>
 80032d0:	0003      	movs	r3, r0
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_HalfDuplex_Init+0x56>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e02c      	b.n	8003334 <HAL_HalfDuplex_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_HalfDuplex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	0018      	movs	r0, r3
 80032e6:	f000 fbf1 	bl	8003acc <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4911      	ldr	r1, [pc, #68]	; (800333c <HAL_HalfDuplex_Init+0xb8>)
 80032f6:	400a      	ands	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2122      	movs	r1, #34	; 0x22
 8003306:	438a      	bics	r2, r1
 8003308:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2108      	movs	r1, #8
 8003316:	430a      	orrs	r2, r1
 8003318:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2101      	movs	r1, #1
 8003326:	430a      	orrs	r2, r1
 8003328:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	0018      	movs	r0, r3
 800332e:	f000 fc81 	bl	8003c34 <UART_CheckIdleState>
 8003332:	0003      	movs	r3, r0
}
 8003334:	0018      	movs	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	b002      	add	sp, #8
 800333a:	bd80      	pop	{r7, pc}
 800333c:	ffffb7ff 	.word	0xffffb7ff

08003340 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	; 0x28
 8003344:	af02      	add	r7, sp, #8
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	1dbb      	adds	r3, r7, #6
 800334e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2288      	movs	r2, #136	; 0x88
 8003354:	589b      	ldr	r3, [r3, r2]
 8003356:	2b20      	cmp	r3, #32
 8003358:	d000      	beq.n	800335c <HAL_UART_Transmit+0x1c>
 800335a:	e088      	b.n	800346e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_UART_Transmit+0x2a>
 8003362:	1dbb      	adds	r3, r7, #6
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e080      	b.n	8003470 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	2380      	movs	r3, #128	; 0x80
 8003374:	015b      	lsls	r3, r3, #5
 8003376:	429a      	cmp	r2, r3
 8003378:	d109      	bne.n	800338e <HAL_UART_Transmit+0x4e>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d105      	bne.n	800338e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2201      	movs	r2, #1
 8003386:	4013      	ands	r3, r2
 8003388:	d001      	beq.n	800338e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e070      	b.n	8003470 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2290      	movs	r2, #144	; 0x90
 8003392:	2100      	movs	r1, #0
 8003394:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2288      	movs	r2, #136	; 0x88
 800339a:	2121      	movs	r1, #33	; 0x21
 800339c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800339e:	f7fe fe9b 	bl	80020d8 <HAL_GetTick>
 80033a2:	0003      	movs	r3, r0
 80033a4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	1dba      	adds	r2, r7, #6
 80033aa:	2154      	movs	r1, #84	; 0x54
 80033ac:	8812      	ldrh	r2, [r2, #0]
 80033ae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	1dba      	adds	r2, r7, #6
 80033b4:	2156      	movs	r1, #86	; 0x56
 80033b6:	8812      	ldrh	r2, [r2, #0]
 80033b8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	2380      	movs	r3, #128	; 0x80
 80033c0:	015b      	lsls	r3, r3, #5
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d108      	bne.n	80033d8 <HAL_UART_Transmit+0x98>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d104      	bne.n	80033d8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	e003      	b.n	80033e0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033e0:	e02c      	b.n	800343c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	0013      	movs	r3, r2
 80033ec:	2200      	movs	r2, #0
 80033ee:	2180      	movs	r1, #128	; 0x80
 80033f0:	f000 fc6e 	bl	8003cd0 <UART_WaitOnFlagUntilTimeout>
 80033f4:	1e03      	subs	r3, r0, #0
 80033f6:	d001      	beq.n	80033fc <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e039      	b.n	8003470 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10b      	bne.n	800341a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	001a      	movs	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	05d2      	lsls	r2, r2, #23
 800340e:	0dd2      	lsrs	r2, r2, #23
 8003410:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	3302      	adds	r3, #2
 8003416:	61bb      	str	r3, [r7, #24]
 8003418:	e007      	b.n	800342a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	781a      	ldrb	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	3301      	adds	r3, #1
 8003428:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2256      	movs	r2, #86	; 0x56
 800342e:	5a9b      	ldrh	r3, [r3, r2]
 8003430:	b29b      	uxth	r3, r3
 8003432:	3b01      	subs	r3, #1
 8003434:	b299      	uxth	r1, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2256      	movs	r2, #86	; 0x56
 800343a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2256      	movs	r2, #86	; 0x56
 8003440:	5a9b      	ldrh	r3, [r3, r2]
 8003442:	b29b      	uxth	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1cc      	bne.n	80033e2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	0013      	movs	r3, r2
 8003452:	2200      	movs	r2, #0
 8003454:	2140      	movs	r1, #64	; 0x40
 8003456:	f000 fc3b 	bl	8003cd0 <UART_WaitOnFlagUntilTimeout>
 800345a:	1e03      	subs	r3, r0, #0
 800345c:	d001      	beq.n	8003462 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e006      	b.n	8003470 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2288      	movs	r2, #136	; 0x88
 8003466:	2120      	movs	r1, #32
 8003468:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	e000      	b.n	8003470 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800346e:	2302      	movs	r3, #2
  }
}
 8003470:	0018      	movs	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	b008      	add	sp, #32
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08a      	sub	sp, #40	; 0x28
 800347c:	af02      	add	r7, sp, #8
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	1dbb      	adds	r3, r7, #6
 8003486:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	228c      	movs	r2, #140	; 0x8c
 800348c:	589b      	ldr	r3, [r3, r2]
 800348e:	2b20      	cmp	r3, #32
 8003490:	d000      	beq.n	8003494 <HAL_UART_Receive+0x1c>
 8003492:	e0cc      	b.n	800362e <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_UART_Receive+0x2a>
 800349a:	1dbb      	adds	r3, r7, #6
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e0c4      	b.n	8003630 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	2380      	movs	r3, #128	; 0x80
 80034ac:	015b      	lsls	r3, r3, #5
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d109      	bne.n	80034c6 <HAL_UART_Receive+0x4e>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d105      	bne.n	80034c6 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2201      	movs	r2, #1
 80034be:	4013      	ands	r3, r2
 80034c0:	d001      	beq.n	80034c6 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e0b4      	b.n	8003630 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2290      	movs	r2, #144	; 0x90
 80034ca:	2100      	movs	r1, #0
 80034cc:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	228c      	movs	r2, #140	; 0x8c
 80034d2:	2122      	movs	r1, #34	; 0x22
 80034d4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034dc:	f7fe fdfc 	bl	80020d8 <HAL_GetTick>
 80034e0:	0003      	movs	r3, r0
 80034e2:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1dba      	adds	r2, r7, #6
 80034e8:	215c      	movs	r1, #92	; 0x5c
 80034ea:	8812      	ldrh	r2, [r2, #0]
 80034ec:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	1dba      	adds	r2, r7, #6
 80034f2:	215e      	movs	r1, #94	; 0x5e
 80034f4:	8812      	ldrh	r2, [r2, #0]
 80034f6:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	015b      	lsls	r3, r3, #5
 8003500:	429a      	cmp	r2, r3
 8003502:	d10d      	bne.n	8003520 <HAL_UART_Receive+0xa8>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d104      	bne.n	8003516 <HAL_UART_Receive+0x9e>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2260      	movs	r2, #96	; 0x60
 8003510:	4949      	ldr	r1, [pc, #292]	; (8003638 <HAL_UART_Receive+0x1c0>)
 8003512:	5299      	strh	r1, [r3, r2]
 8003514:	e02e      	b.n	8003574 <HAL_UART_Receive+0xfc>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2260      	movs	r2, #96	; 0x60
 800351a:	21ff      	movs	r1, #255	; 0xff
 800351c:	5299      	strh	r1, [r3, r2]
 800351e:	e029      	b.n	8003574 <HAL_UART_Receive+0xfc>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10d      	bne.n	8003544 <HAL_UART_Receive+0xcc>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d104      	bne.n	800353a <HAL_UART_Receive+0xc2>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2260      	movs	r2, #96	; 0x60
 8003534:	21ff      	movs	r1, #255	; 0xff
 8003536:	5299      	strh	r1, [r3, r2]
 8003538:	e01c      	b.n	8003574 <HAL_UART_Receive+0xfc>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2260      	movs	r2, #96	; 0x60
 800353e:	217f      	movs	r1, #127	; 0x7f
 8003540:	5299      	strh	r1, [r3, r2]
 8003542:	e017      	b.n	8003574 <HAL_UART_Receive+0xfc>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	055b      	lsls	r3, r3, #21
 800354c:	429a      	cmp	r2, r3
 800354e:	d10d      	bne.n	800356c <HAL_UART_Receive+0xf4>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d104      	bne.n	8003562 <HAL_UART_Receive+0xea>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2260      	movs	r2, #96	; 0x60
 800355c:	217f      	movs	r1, #127	; 0x7f
 800355e:	5299      	strh	r1, [r3, r2]
 8003560:	e008      	b.n	8003574 <HAL_UART_Receive+0xfc>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2260      	movs	r2, #96	; 0x60
 8003566:	213f      	movs	r1, #63	; 0x3f
 8003568:	5299      	strh	r1, [r3, r2]
 800356a:	e003      	b.n	8003574 <HAL_UART_Receive+0xfc>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2260      	movs	r2, #96	; 0x60
 8003570:	2100      	movs	r1, #0
 8003572:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003574:	2312      	movs	r3, #18
 8003576:	18fb      	adds	r3, r7, r3
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	2160      	movs	r1, #96	; 0x60
 800357c:	5a52      	ldrh	r2, [r2, r1]
 800357e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	2380      	movs	r3, #128	; 0x80
 8003586:	015b      	lsls	r3, r3, #5
 8003588:	429a      	cmp	r2, r3
 800358a:	d108      	bne.n	800359e <HAL_UART_Receive+0x126>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d104      	bne.n	800359e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8003594:	2300      	movs	r3, #0
 8003596:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	61bb      	str	r3, [r7, #24]
 800359c:	e003      	b.n	80035a6 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80035a6:	e036      	b.n	8003616 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	0013      	movs	r3, r2
 80035b2:	2200      	movs	r2, #0
 80035b4:	2120      	movs	r1, #32
 80035b6:	f000 fb8b 	bl	8003cd0 <UART_WaitOnFlagUntilTimeout>
 80035ba:	1e03      	subs	r3, r0, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e036      	b.n	8003630 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10e      	bne.n	80035e6 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2212      	movs	r2, #18
 80035d2:	18ba      	adds	r2, r7, r2
 80035d4:	8812      	ldrh	r2, [r2, #0]
 80035d6:	4013      	ands	r3, r2
 80035d8:	b29a      	uxth	r2, r3
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	3302      	adds	r3, #2
 80035e2:	61bb      	str	r3, [r7, #24]
 80035e4:	e00e      	b.n	8003604 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2212      	movs	r2, #18
 80035f0:	18ba      	adds	r2, r7, r2
 80035f2:	8812      	ldrh	r2, [r2, #0]
 80035f4:	b2d2      	uxtb	r2, r2
 80035f6:	4013      	ands	r3, r2
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	3301      	adds	r3, #1
 8003602:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	225e      	movs	r2, #94	; 0x5e
 8003608:	5a9b      	ldrh	r3, [r3, r2]
 800360a:	b29b      	uxth	r3, r3
 800360c:	3b01      	subs	r3, #1
 800360e:	b299      	uxth	r1, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	225e      	movs	r2, #94	; 0x5e
 8003614:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	225e      	movs	r2, #94	; 0x5e
 800361a:	5a9b      	ldrh	r3, [r3, r2]
 800361c:	b29b      	uxth	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1c2      	bne.n	80035a8 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	228c      	movs	r2, #140	; 0x8c
 8003626:	2120      	movs	r1, #32
 8003628:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	e000      	b.n	8003630 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 800362e:	2302      	movs	r3, #2
  }
}
 8003630:	0018      	movs	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	b008      	add	sp, #32
 8003636:	bd80      	pop	{r7, pc}
 8003638:	000001ff 	.word	0x000001ff

0800363c <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08a      	sub	sp, #40	; 0x28
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2284      	movs	r2, #132	; 0x84
 8003648:	5c9b      	ldrb	r3, [r3, r2]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_HalfDuplex_EnableTransmitter+0x16>
 800364e:	2302      	movs	r3, #2
 8003650:	e042      	b.n	80036d8 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2284      	movs	r2, #132	; 0x84
 8003656:	2101      	movs	r1, #1
 8003658:	5499      	strb	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_BUSY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2288      	movs	r2, #136	; 0x88
 800365e:	2124      	movs	r1, #36	; 0x24
 8003660:	5099      	str	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003662:	f3ef 8310 	mrs	r3, PRIMASK
 8003666:	60bb      	str	r3, [r7, #8]
  return(result);
 8003668:	68bb      	ldr	r3, [r7, #8]

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
 800366c:	2301      	movs	r3, #1
 800366e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f383 8810 	msr	PRIMASK, r3
}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	210c      	movs	r1, #12
 8003684:	438a      	bics	r2, r1
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f383 8810 	msr	PRIMASK, r3
}
 8003692:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003694:	f3ef 8310 	mrs	r3, PRIMASK
 8003698:	617b      	str	r3, [r7, #20]
  return(result);
 800369a:	697b      	ldr	r3, [r7, #20]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800369c:	623b      	str	r3, [r7, #32]
 800369e:	2301      	movs	r3, #1
 80036a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	f383 8810 	msr	PRIMASK, r3
}
 80036a8:	46c0      	nop			; (mov r8, r8)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2108      	movs	r1, #8
 80036b6:	430a      	orrs	r2, r1
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f383 8810 	msr	PRIMASK, r3
}
 80036c4:	46c0      	nop			; (mov r8, r8)

  huart->gState = HAL_UART_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2288      	movs	r2, #136	; 0x88
 80036ca:	2120      	movs	r1, #32
 80036cc:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2284      	movs	r2, #132	; 0x84
 80036d2:	2100      	movs	r1, #0
 80036d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	0018      	movs	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	b00a      	add	sp, #40	; 0x28
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	; 0x28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2284      	movs	r2, #132	; 0x84
 80036ec:	5c9b      	ldrb	r3, [r3, r2]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d101      	bne.n	80036f6 <HAL_HalfDuplex_EnableReceiver+0x16>
 80036f2:	2302      	movs	r3, #2
 80036f4:	e042      	b.n	800377c <HAL_HalfDuplex_EnableReceiver+0x9c>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2284      	movs	r2, #132	; 0x84
 80036fa:	2101      	movs	r1, #1
 80036fc:	5499      	strb	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_BUSY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2288      	movs	r2, #136	; 0x88
 8003702:	2124      	movs	r1, #36	; 0x24
 8003704:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003706:	f3ef 8310 	mrs	r3, PRIMASK
 800370a:	60bb      	str	r3, [r7, #8]
  return(result);
 800370c:	68bb      	ldr	r3, [r7, #8]

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
 8003710:	2301      	movs	r3, #1
 8003712:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f383 8810 	msr	PRIMASK, r3
}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	210c      	movs	r1, #12
 8003728:	438a      	bics	r2, r1
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f383 8810 	msr	PRIMASK, r3
}
 8003736:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003738:	f3ef 8310 	mrs	r3, PRIMASK
 800373c:	617b      	str	r3, [r7, #20]
  return(result);
 800373e:	697b      	ldr	r3, [r7, #20]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8003740:	623b      	str	r3, [r7, #32]
 8003742:	2301      	movs	r3, #1
 8003744:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	f383 8810 	msr	PRIMASK, r3
}
 800374c:	46c0      	nop			; (mov r8, r8)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2104      	movs	r1, #4
 800375a:	430a      	orrs	r2, r1
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	f383 8810 	msr	PRIMASK, r3
}
 8003768:	46c0      	nop			; (mov r8, r8)

  huart->gState = HAL_UART_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2288      	movs	r2, #136	; 0x88
 800376e:	2120      	movs	r1, #32
 8003770:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2284      	movs	r2, #132	; 0x84
 8003776:	2100      	movs	r1, #0
 8003778:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	0018      	movs	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	b00a      	add	sp, #40	; 0x28
 8003782:	bd80      	pop	{r7, pc}

08003784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b088      	sub	sp, #32
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800378c:	231a      	movs	r3, #26
 800378e:	18fb      	adds	r3, r7, r3
 8003790:	2200      	movs	r2, #0
 8003792:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4abc      	ldr	r2, [pc, #752]	; (8003aa4 <UART_SetConfig+0x320>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	0019      	movs	r1, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	430a      	orrs	r2, r1
 80037c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	4ab7      	ldr	r2, [pc, #732]	; (8003aa8 <UART_SetConfig+0x324>)
 80037ca:	4013      	ands	r3, r2
 80037cc:	0019      	movs	r1, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68da      	ldr	r2, [r3, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	69fa      	ldr	r2, [r7, #28]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	4aae      	ldr	r2, [pc, #696]	; (8003aac <UART_SetConfig+0x328>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	0019      	movs	r1, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	220f      	movs	r2, #15
 8003808:	4393      	bics	r3, r2
 800380a:	0019      	movs	r1, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4aa4      	ldr	r2, [pc, #656]	; (8003ab0 <UART_SetConfig+0x32c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d127      	bne.n	8003872 <UART_SetConfig+0xee>
 8003822:	4ba4      	ldr	r3, [pc, #656]	; (8003ab4 <UART_SetConfig+0x330>)
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	2203      	movs	r2, #3
 8003828:	4013      	ands	r3, r2
 800382a:	2b03      	cmp	r3, #3
 800382c:	d017      	beq.n	800385e <UART_SetConfig+0xda>
 800382e:	d81b      	bhi.n	8003868 <UART_SetConfig+0xe4>
 8003830:	2b02      	cmp	r3, #2
 8003832:	d00a      	beq.n	800384a <UART_SetConfig+0xc6>
 8003834:	d818      	bhi.n	8003868 <UART_SetConfig+0xe4>
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <UART_SetConfig+0xbc>
 800383a:	2b01      	cmp	r3, #1
 800383c:	d00a      	beq.n	8003854 <UART_SetConfig+0xd0>
 800383e:	e013      	b.n	8003868 <UART_SetConfig+0xe4>
 8003840:	231b      	movs	r3, #27
 8003842:	18fb      	adds	r3, r7, r3
 8003844:	2200      	movs	r2, #0
 8003846:	701a      	strb	r2, [r3, #0]
 8003848:	e058      	b.n	80038fc <UART_SetConfig+0x178>
 800384a:	231b      	movs	r3, #27
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	2202      	movs	r2, #2
 8003850:	701a      	strb	r2, [r3, #0]
 8003852:	e053      	b.n	80038fc <UART_SetConfig+0x178>
 8003854:	231b      	movs	r3, #27
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	2204      	movs	r2, #4
 800385a:	701a      	strb	r2, [r3, #0]
 800385c:	e04e      	b.n	80038fc <UART_SetConfig+0x178>
 800385e:	231b      	movs	r3, #27
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	2208      	movs	r2, #8
 8003864:	701a      	strb	r2, [r3, #0]
 8003866:	e049      	b.n	80038fc <UART_SetConfig+0x178>
 8003868:	231b      	movs	r3, #27
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	2210      	movs	r2, #16
 800386e:	701a      	strb	r2, [r3, #0]
 8003870:	e044      	b.n	80038fc <UART_SetConfig+0x178>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a90      	ldr	r2, [pc, #576]	; (8003ab8 <UART_SetConfig+0x334>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d127      	bne.n	80038cc <UART_SetConfig+0x148>
 800387c:	4b8d      	ldr	r3, [pc, #564]	; (8003ab4 <UART_SetConfig+0x330>)
 800387e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003880:	220c      	movs	r2, #12
 8003882:	4013      	ands	r3, r2
 8003884:	2b0c      	cmp	r3, #12
 8003886:	d017      	beq.n	80038b8 <UART_SetConfig+0x134>
 8003888:	d81b      	bhi.n	80038c2 <UART_SetConfig+0x13e>
 800388a:	2b08      	cmp	r3, #8
 800388c:	d00a      	beq.n	80038a4 <UART_SetConfig+0x120>
 800388e:	d818      	bhi.n	80038c2 <UART_SetConfig+0x13e>
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <UART_SetConfig+0x116>
 8003894:	2b04      	cmp	r3, #4
 8003896:	d00a      	beq.n	80038ae <UART_SetConfig+0x12a>
 8003898:	e013      	b.n	80038c2 <UART_SetConfig+0x13e>
 800389a:	231b      	movs	r3, #27
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	2200      	movs	r2, #0
 80038a0:	701a      	strb	r2, [r3, #0]
 80038a2:	e02b      	b.n	80038fc <UART_SetConfig+0x178>
 80038a4:	231b      	movs	r3, #27
 80038a6:	18fb      	adds	r3, r7, r3
 80038a8:	2202      	movs	r2, #2
 80038aa:	701a      	strb	r2, [r3, #0]
 80038ac:	e026      	b.n	80038fc <UART_SetConfig+0x178>
 80038ae:	231b      	movs	r3, #27
 80038b0:	18fb      	adds	r3, r7, r3
 80038b2:	2204      	movs	r2, #4
 80038b4:	701a      	strb	r2, [r3, #0]
 80038b6:	e021      	b.n	80038fc <UART_SetConfig+0x178>
 80038b8:	231b      	movs	r3, #27
 80038ba:	18fb      	adds	r3, r7, r3
 80038bc:	2208      	movs	r2, #8
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	e01c      	b.n	80038fc <UART_SetConfig+0x178>
 80038c2:	231b      	movs	r3, #27
 80038c4:	18fb      	adds	r3, r7, r3
 80038c6:	2210      	movs	r2, #16
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	e017      	b.n	80038fc <UART_SetConfig+0x178>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a7a      	ldr	r2, [pc, #488]	; (8003abc <UART_SetConfig+0x338>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d104      	bne.n	80038e0 <UART_SetConfig+0x15c>
 80038d6:	231b      	movs	r3, #27
 80038d8:	18fb      	adds	r3, r7, r3
 80038da:	2200      	movs	r2, #0
 80038dc:	701a      	strb	r2, [r3, #0]
 80038de:	e00d      	b.n	80038fc <UART_SetConfig+0x178>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a76      	ldr	r2, [pc, #472]	; (8003ac0 <UART_SetConfig+0x33c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d104      	bne.n	80038f4 <UART_SetConfig+0x170>
 80038ea:	231b      	movs	r3, #27
 80038ec:	18fb      	adds	r3, r7, r3
 80038ee:	2200      	movs	r2, #0
 80038f0:	701a      	strb	r2, [r3, #0]
 80038f2:	e003      	b.n	80038fc <UART_SetConfig+0x178>
 80038f4:	231b      	movs	r3, #27
 80038f6:	18fb      	adds	r3, r7, r3
 80038f8:	2210      	movs	r2, #16
 80038fa:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	69da      	ldr	r2, [r3, #28]
 8003900:	2380      	movs	r3, #128	; 0x80
 8003902:	021b      	lsls	r3, r3, #8
 8003904:	429a      	cmp	r2, r3
 8003906:	d000      	beq.n	800390a <UART_SetConfig+0x186>
 8003908:	e065      	b.n	80039d6 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800390a:	231b      	movs	r3, #27
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b08      	cmp	r3, #8
 8003912:	d015      	beq.n	8003940 <UART_SetConfig+0x1bc>
 8003914:	dc18      	bgt.n	8003948 <UART_SetConfig+0x1c4>
 8003916:	2b04      	cmp	r3, #4
 8003918:	d00d      	beq.n	8003936 <UART_SetConfig+0x1b2>
 800391a:	dc15      	bgt.n	8003948 <UART_SetConfig+0x1c4>
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <UART_SetConfig+0x1a2>
 8003920:	2b02      	cmp	r3, #2
 8003922:	d005      	beq.n	8003930 <UART_SetConfig+0x1ac>
 8003924:	e010      	b.n	8003948 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003926:	f7ff fb0d 	bl	8002f44 <HAL_RCC_GetPCLK1Freq>
 800392a:	0003      	movs	r3, r0
 800392c:	617b      	str	r3, [r7, #20]
        break;
 800392e:	e012      	b.n	8003956 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003930:	4b64      	ldr	r3, [pc, #400]	; (8003ac4 <UART_SetConfig+0x340>)
 8003932:	617b      	str	r3, [r7, #20]
        break;
 8003934:	e00f      	b.n	8003956 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003936:	f7ff fa79 	bl	8002e2c <HAL_RCC_GetSysClockFreq>
 800393a:	0003      	movs	r3, r0
 800393c:	617b      	str	r3, [r7, #20]
        break;
 800393e:	e00a      	b.n	8003956 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003940:	2380      	movs	r3, #128	; 0x80
 8003942:	021b      	lsls	r3, r3, #8
 8003944:	617b      	str	r3, [r7, #20]
        break;
 8003946:	e006      	b.n	8003956 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800394c:	231a      	movs	r3, #26
 800394e:	18fb      	adds	r3, r7, r3
 8003950:	2201      	movs	r2, #1
 8003952:	701a      	strb	r2, [r3, #0]
        break;
 8003954:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d100      	bne.n	800395e <UART_SetConfig+0x1da>
 800395c:	e08d      	b.n	8003a7a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003962:	4b59      	ldr	r3, [pc, #356]	; (8003ac8 <UART_SetConfig+0x344>)
 8003964:	0052      	lsls	r2, r2, #1
 8003966:	5ad3      	ldrh	r3, [r2, r3]
 8003968:	0019      	movs	r1, r3
 800396a:	6978      	ldr	r0, [r7, #20]
 800396c:	f7fc fbc8 	bl	8000100 <__udivsi3>
 8003970:	0003      	movs	r3, r0
 8003972:	005a      	lsls	r2, r3, #1
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	085b      	lsrs	r3, r3, #1
 800397a:	18d2      	adds	r2, r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	0019      	movs	r1, r3
 8003982:	0010      	movs	r0, r2
 8003984:	f7fc fbbc 	bl	8000100 <__udivsi3>
 8003988:	0003      	movs	r3, r0
 800398a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	2b0f      	cmp	r3, #15
 8003990:	d91c      	bls.n	80039cc <UART_SetConfig+0x248>
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	2380      	movs	r3, #128	; 0x80
 8003996:	025b      	lsls	r3, r3, #9
 8003998:	429a      	cmp	r2, r3
 800399a:	d217      	bcs.n	80039cc <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	b29a      	uxth	r2, r3
 80039a0:	200e      	movs	r0, #14
 80039a2:	183b      	adds	r3, r7, r0
 80039a4:	210f      	movs	r1, #15
 80039a6:	438a      	bics	r2, r1
 80039a8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	085b      	lsrs	r3, r3, #1
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2207      	movs	r2, #7
 80039b2:	4013      	ands	r3, r2
 80039b4:	b299      	uxth	r1, r3
 80039b6:	183b      	adds	r3, r7, r0
 80039b8:	183a      	adds	r2, r7, r0
 80039ba:	8812      	ldrh	r2, [r2, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	183a      	adds	r2, r7, r0
 80039c6:	8812      	ldrh	r2, [r2, #0]
 80039c8:	60da      	str	r2, [r3, #12]
 80039ca:	e056      	b.n	8003a7a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80039cc:	231a      	movs	r3, #26
 80039ce:	18fb      	adds	r3, r7, r3
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
 80039d4:	e051      	b.n	8003a7a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039d6:	231b      	movs	r3, #27
 80039d8:	18fb      	adds	r3, r7, r3
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d015      	beq.n	8003a0c <UART_SetConfig+0x288>
 80039e0:	dc18      	bgt.n	8003a14 <UART_SetConfig+0x290>
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d00d      	beq.n	8003a02 <UART_SetConfig+0x27e>
 80039e6:	dc15      	bgt.n	8003a14 <UART_SetConfig+0x290>
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <UART_SetConfig+0x26e>
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d005      	beq.n	80039fc <UART_SetConfig+0x278>
 80039f0:	e010      	b.n	8003a14 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f2:	f7ff faa7 	bl	8002f44 <HAL_RCC_GetPCLK1Freq>
 80039f6:	0003      	movs	r3, r0
 80039f8:	617b      	str	r3, [r7, #20]
        break;
 80039fa:	e012      	b.n	8003a22 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039fc:	4b31      	ldr	r3, [pc, #196]	; (8003ac4 <UART_SetConfig+0x340>)
 80039fe:	617b      	str	r3, [r7, #20]
        break;
 8003a00:	e00f      	b.n	8003a22 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a02:	f7ff fa13 	bl	8002e2c <HAL_RCC_GetSysClockFreq>
 8003a06:	0003      	movs	r3, r0
 8003a08:	617b      	str	r3, [r7, #20]
        break;
 8003a0a:	e00a      	b.n	8003a22 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a0c:	2380      	movs	r3, #128	; 0x80
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	617b      	str	r3, [r7, #20]
        break;
 8003a12:	e006      	b.n	8003a22 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a18:	231a      	movs	r3, #26
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	701a      	strb	r2, [r3, #0]
        break;
 8003a20:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d028      	beq.n	8003a7a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a2c:	4b26      	ldr	r3, [pc, #152]	; (8003ac8 <UART_SetConfig+0x344>)
 8003a2e:	0052      	lsls	r2, r2, #1
 8003a30:	5ad3      	ldrh	r3, [r2, r3]
 8003a32:	0019      	movs	r1, r3
 8003a34:	6978      	ldr	r0, [r7, #20]
 8003a36:	f7fc fb63 	bl	8000100 <__udivsi3>
 8003a3a:	0003      	movs	r3, r0
 8003a3c:	001a      	movs	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	085b      	lsrs	r3, r3, #1
 8003a44:	18d2      	adds	r2, r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	0019      	movs	r1, r3
 8003a4c:	0010      	movs	r0, r2
 8003a4e:	f7fc fb57 	bl	8000100 <__udivsi3>
 8003a52:	0003      	movs	r3, r0
 8003a54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b0f      	cmp	r3, #15
 8003a5a:	d90a      	bls.n	8003a72 <UART_SetConfig+0x2ee>
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	2380      	movs	r3, #128	; 0x80
 8003a60:	025b      	lsls	r3, r3, #9
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d205      	bcs.n	8003a72 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60da      	str	r2, [r3, #12]
 8003a70:	e003      	b.n	8003a7a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003a72:	231a      	movs	r3, #26
 8003a74:	18fb      	adds	r3, r7, r3
 8003a76:	2201      	movs	r2, #1
 8003a78:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	226a      	movs	r2, #106	; 0x6a
 8003a7e:	2101      	movs	r1, #1
 8003a80:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2268      	movs	r2, #104	; 0x68
 8003a86:	2101      	movs	r1, #1
 8003a88:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003a96:	231a      	movs	r3, #26
 8003a98:	18fb      	adds	r3, r7, r3
 8003a9a:	781b      	ldrb	r3, [r3, #0]
}
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b008      	add	sp, #32
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	cfff69f3 	.word	0xcfff69f3
 8003aa8:	ffffcfff 	.word	0xffffcfff
 8003aac:	11fff4ff 	.word	0x11fff4ff
 8003ab0:	40013800 	.word	0x40013800
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40004400 	.word	0x40004400
 8003abc:	40004800 	.word	0x40004800
 8003ac0:	40004c00 	.word	0x40004c00
 8003ac4:	00f42400 	.word	0x00f42400
 8003ac8:	08005234 	.word	0x08005234

08003acc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad8:	2201      	movs	r2, #1
 8003ada:	4013      	ands	r3, r2
 8003adc:	d00b      	beq.n	8003af6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4a4a      	ldr	r2, [pc, #296]	; (8003c10 <UART_AdvFeatureConfig+0x144>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	0019      	movs	r1, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afa:	2202      	movs	r2, #2
 8003afc:	4013      	ands	r3, r2
 8003afe:	d00b      	beq.n	8003b18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4a43      	ldr	r2, [pc, #268]	; (8003c14 <UART_AdvFeatureConfig+0x148>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	0019      	movs	r1, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1c:	2204      	movs	r2, #4
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d00b      	beq.n	8003b3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4a3b      	ldr	r2, [pc, #236]	; (8003c18 <UART_AdvFeatureConfig+0x14c>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	0019      	movs	r1, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3e:	2208      	movs	r2, #8
 8003b40:	4013      	ands	r3, r2
 8003b42:	d00b      	beq.n	8003b5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	4a34      	ldr	r2, [pc, #208]	; (8003c1c <UART_AdvFeatureConfig+0x150>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	0019      	movs	r1, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	2210      	movs	r2, #16
 8003b62:	4013      	ands	r3, r2
 8003b64:	d00b      	beq.n	8003b7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	4a2c      	ldr	r2, [pc, #176]	; (8003c20 <UART_AdvFeatureConfig+0x154>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	0019      	movs	r1, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b82:	2220      	movs	r2, #32
 8003b84:	4013      	ands	r3, r2
 8003b86:	d00b      	beq.n	8003ba0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	4a25      	ldr	r2, [pc, #148]	; (8003c24 <UART_AdvFeatureConfig+0x158>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	0019      	movs	r1, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	2240      	movs	r2, #64	; 0x40
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d01d      	beq.n	8003be6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	4a1d      	ldr	r2, [pc, #116]	; (8003c28 <UART_AdvFeatureConfig+0x15c>)
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	0019      	movs	r1, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	035b      	lsls	r3, r3, #13
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d10b      	bne.n	8003be6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4a15      	ldr	r2, [pc, #84]	; (8003c2c <UART_AdvFeatureConfig+0x160>)
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	0019      	movs	r1, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bea:	2280      	movs	r2, #128	; 0x80
 8003bec:	4013      	ands	r3, r2
 8003bee:	d00b      	beq.n	8003c08 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4a0e      	ldr	r2, [pc, #56]	; (8003c30 <UART_AdvFeatureConfig+0x164>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	0019      	movs	r1, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	605a      	str	r2, [r3, #4]
  }
}
 8003c08:	46c0      	nop			; (mov r8, r8)
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b002      	add	sp, #8
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	fffdffff 	.word	0xfffdffff
 8003c14:	fffeffff 	.word	0xfffeffff
 8003c18:	fffbffff 	.word	0xfffbffff
 8003c1c:	ffff7fff 	.word	0xffff7fff
 8003c20:	ffffefff 	.word	0xffffefff
 8003c24:	ffffdfff 	.word	0xffffdfff
 8003c28:	ffefffff 	.word	0xffefffff
 8003c2c:	ff9fffff 	.word	0xff9fffff
 8003c30:	fff7ffff 	.word	0xfff7ffff

08003c34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2290      	movs	r2, #144	; 0x90
 8003c40:	2100      	movs	r1, #0
 8003c42:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c44:	f7fe fa48 	bl	80020d8 <HAL_GetTick>
 8003c48:	0003      	movs	r3, r0
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2208      	movs	r2, #8
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b08      	cmp	r3, #8
 8003c58:	d10c      	bne.n	8003c74 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2280      	movs	r2, #128	; 0x80
 8003c5e:	0391      	lsls	r1, r2, #14
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	4a1a      	ldr	r2, [pc, #104]	; (8003ccc <UART_CheckIdleState+0x98>)
 8003c64:	9200      	str	r2, [sp, #0]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f000 f832 	bl	8003cd0 <UART_WaitOnFlagUntilTimeout>
 8003c6c:	1e03      	subs	r3, r0, #0
 8003c6e:	d001      	beq.n	8003c74 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e026      	b.n	8003cc2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2204      	movs	r2, #4
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d10c      	bne.n	8003c9c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2280      	movs	r2, #128	; 0x80
 8003c86:	03d1      	lsls	r1, r2, #15
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	4a10      	ldr	r2, [pc, #64]	; (8003ccc <UART_CheckIdleState+0x98>)
 8003c8c:	9200      	str	r2, [sp, #0]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f000 f81e 	bl	8003cd0 <UART_WaitOnFlagUntilTimeout>
 8003c94:	1e03      	subs	r3, r0, #0
 8003c96:	d001      	beq.n	8003c9c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e012      	b.n	8003cc2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2288      	movs	r2, #136	; 0x88
 8003ca0:	2120      	movs	r1, #32
 8003ca2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	228c      	movs	r2, #140	; 0x8c
 8003ca8:	2120      	movs	r1, #32
 8003caa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2284      	movs	r2, #132	; 0x84
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	b004      	add	sp, #16
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	46c0      	nop			; (mov r8, r8)
 8003ccc:	01ffffff 	.word	0x01ffffff

08003cd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b094      	sub	sp, #80	; 0x50
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	1dfb      	adds	r3, r7, #7
 8003cde:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce0:	e0a7      	b.n	8003e32 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	d100      	bne.n	8003cea <UART_WaitOnFlagUntilTimeout+0x1a>
 8003ce8:	e0a3      	b.n	8003e32 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cea:	f7fe f9f5 	bl	80020d8 <HAL_GetTick>
 8003cee:	0002      	movs	r2, r0
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d302      	bcc.n	8003d00 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d13f      	bne.n	8003d80 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d00:	f3ef 8310 	mrs	r3, PRIMASK
 8003d04:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003d08:	647b      	str	r3, [r7, #68]	; 0x44
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d10:	f383 8810 	msr	PRIMASK, r3
}
 8003d14:	46c0      	nop			; (mov r8, r8)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	494e      	ldr	r1, [pc, #312]	; (8003e5c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003d22:	400a      	ands	r2, r1
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d28:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	f383 8810 	msr	PRIMASK, r3
}
 8003d30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d32:	f3ef 8310 	mrs	r3, PRIMASK
 8003d36:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3a:	643b      	str	r3, [r7, #64]	; 0x40
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d42:	f383 8810 	msr	PRIMASK, r3
}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2101      	movs	r1, #1
 8003d54:	438a      	bics	r2, r1
 8003d56:	609a      	str	r2, [r3, #8]
 8003d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d5e:	f383 8810 	msr	PRIMASK, r3
}
 8003d62:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2288      	movs	r2, #136	; 0x88
 8003d68:	2120      	movs	r1, #32
 8003d6a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	228c      	movs	r2, #140	; 0x8c
 8003d70:	2120      	movs	r1, #32
 8003d72:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2284      	movs	r2, #132	; 0x84
 8003d78:	2100      	movs	r1, #0
 8003d7a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e069      	b.n	8003e54 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2204      	movs	r2, #4
 8003d88:	4013      	ands	r3, r2
 8003d8a:	d052      	beq.n	8003e32 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69da      	ldr	r2, [r3, #28]
 8003d92:	2380      	movs	r3, #128	; 0x80
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	401a      	ands	r2, r3
 8003d98:	2380      	movs	r3, #128	; 0x80
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d148      	bne.n	8003e32 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2280      	movs	r2, #128	; 0x80
 8003da6:	0112      	lsls	r2, r2, #4
 8003da8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003daa:	f3ef 8310 	mrs	r3, PRIMASK
 8003dae:	613b      	str	r3, [r7, #16]
  return(result);
 8003db0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003db4:	2301      	movs	r3, #1
 8003db6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f383 8810 	msr	PRIMASK, r3
}
 8003dbe:	46c0      	nop			; (mov r8, r8)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4924      	ldr	r1, [pc, #144]	; (8003e5c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003dcc:	400a      	ands	r2, r1
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dd2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	f383 8810 	msr	PRIMASK, r3
}
 8003dda:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8003de0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003de2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003de6:	2301      	movs	r3, #1
 8003de8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	f383 8810 	msr	PRIMASK, r3
}
 8003df0:	46c0      	nop			; (mov r8, r8)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2101      	movs	r1, #1
 8003dfe:	438a      	bics	r2, r1
 8003e00:	609a      	str	r2, [r3, #8]
 8003e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	f383 8810 	msr	PRIMASK, r3
}
 8003e0c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2288      	movs	r2, #136	; 0x88
 8003e12:	2120      	movs	r1, #32
 8003e14:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	228c      	movs	r2, #140	; 0x8c
 8003e1a:	2120      	movs	r1, #32
 8003e1c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2290      	movs	r2, #144	; 0x90
 8003e22:	2120      	movs	r1, #32
 8003e24:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2284      	movs	r2, #132	; 0x84
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e010      	b.n	8003e54 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	425a      	negs	r2, r3
 8003e42:	4153      	adcs	r3, r2
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	001a      	movs	r2, r3
 8003e48:	1dfb      	adds	r3, r7, #7
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d100      	bne.n	8003e52 <UART_WaitOnFlagUntilTimeout+0x182>
 8003e50:	e747      	b.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	0018      	movs	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b014      	add	sp, #80	; 0x50
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	fffffe5f 	.word	0xfffffe5f

08003e60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2284      	movs	r2, #132	; 0x84
 8003e6c:	5c9b      	ldrb	r3, [r3, r2]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_UARTEx_DisableFifoMode+0x16>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e027      	b.n	8003ec6 <HAL_UARTEx_DisableFifoMode+0x66>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2284      	movs	r2, #132	; 0x84
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2288      	movs	r2, #136	; 0x88
 8003e82:	2124      	movs	r1, #36	; 0x24
 8003e84:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2101      	movs	r1, #1
 8003e9a:	438a      	bics	r2, r1
 8003e9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4a0b      	ldr	r2, [pc, #44]	; (8003ed0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2288      	movs	r2, #136	; 0x88
 8003eb8:	2120      	movs	r1, #32
 8003eba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2284      	movs	r2, #132	; 0x84
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	b004      	add	sp, #16
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	46c0      	nop			; (mov r8, r8)
 8003ed0:	dfffffff 	.word	0xdfffffff

08003ed4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2284      	movs	r2, #132	; 0x84
 8003ee2:	5c9b      	ldrb	r3, [r3, r2]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e02e      	b.n	8003f4a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2284      	movs	r2, #132	; 0x84
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2288      	movs	r2, #136	; 0x88
 8003ef8:	2124      	movs	r1, #36	; 0x24
 8003efa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2101      	movs	r1, #1
 8003f10:	438a      	bics	r2, r1
 8003f12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	08d9      	lsrs	r1, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f000 f854 	bl	8003fd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2288      	movs	r2, #136	; 0x88
 8003f3c:	2120      	movs	r1, #32
 8003f3e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2284      	movs	r2, #132	; 0x84
 8003f44:	2100      	movs	r1, #0
 8003f46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b004      	add	sp, #16
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2284      	movs	r2, #132	; 0x84
 8003f62:	5c9b      	ldrb	r3, [r3, r2]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d101      	bne.n	8003f6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e02f      	b.n	8003fcc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2284      	movs	r2, #132	; 0x84
 8003f70:	2101      	movs	r1, #1
 8003f72:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2288      	movs	r2, #136	; 0x88
 8003f78:	2124      	movs	r1, #36	; 0x24
 8003f7a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2101      	movs	r1, #1
 8003f90:	438a      	bics	r2, r1
 8003f92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	4a0e      	ldr	r2, [pc, #56]	; (8003fd4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	0019      	movs	r1, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	0018      	movs	r0, r3
 8003fae:	f000 f813 	bl	8003fd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2288      	movs	r2, #136	; 0x88
 8003fbe:	2120      	movs	r1, #32
 8003fc0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2284      	movs	r2, #132	; 0x84
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	0018      	movs	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	b004      	add	sp, #16
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	f1ffffff 	.word	0xf1ffffff

08003fd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d108      	bne.n	8003ffa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	226a      	movs	r2, #106	; 0x6a
 8003fec:	2101      	movs	r1, #1
 8003fee:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2268      	movs	r2, #104	; 0x68
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ff8:	e043      	b.n	8004082 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ffa:	260f      	movs	r6, #15
 8003ffc:	19bb      	adds	r3, r7, r6
 8003ffe:	2208      	movs	r2, #8
 8004000:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004002:	200e      	movs	r0, #14
 8004004:	183b      	adds	r3, r7, r0
 8004006:	2208      	movs	r2, #8
 8004008:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	0e5b      	lsrs	r3, r3, #25
 8004012:	b2da      	uxtb	r2, r3
 8004014:	240d      	movs	r4, #13
 8004016:	193b      	adds	r3, r7, r4
 8004018:	2107      	movs	r1, #7
 800401a:	400a      	ands	r2, r1
 800401c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	0f5b      	lsrs	r3, r3, #29
 8004026:	b2da      	uxtb	r2, r3
 8004028:	250c      	movs	r5, #12
 800402a:	197b      	adds	r3, r7, r5
 800402c:	2107      	movs	r1, #7
 800402e:	400a      	ands	r2, r1
 8004030:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004032:	183b      	adds	r3, r7, r0
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	197a      	adds	r2, r7, r5
 8004038:	7812      	ldrb	r2, [r2, #0]
 800403a:	4914      	ldr	r1, [pc, #80]	; (800408c <UARTEx_SetNbDataToProcess+0xb4>)
 800403c:	5c8a      	ldrb	r2, [r1, r2]
 800403e:	435a      	muls	r2, r3
 8004040:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004042:	197b      	adds	r3, r7, r5
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	4a12      	ldr	r2, [pc, #72]	; (8004090 <UARTEx_SetNbDataToProcess+0xb8>)
 8004048:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800404a:	0019      	movs	r1, r3
 800404c:	f7fc f8e2 	bl	8000214 <__divsi3>
 8004050:	0003      	movs	r3, r0
 8004052:	b299      	uxth	r1, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	226a      	movs	r2, #106	; 0x6a
 8004058:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800405a:	19bb      	adds	r3, r7, r6
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	193a      	adds	r2, r7, r4
 8004060:	7812      	ldrb	r2, [r2, #0]
 8004062:	490a      	ldr	r1, [pc, #40]	; (800408c <UARTEx_SetNbDataToProcess+0xb4>)
 8004064:	5c8a      	ldrb	r2, [r1, r2]
 8004066:	435a      	muls	r2, r3
 8004068:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800406a:	193b      	adds	r3, r7, r4
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	4a08      	ldr	r2, [pc, #32]	; (8004090 <UARTEx_SetNbDataToProcess+0xb8>)
 8004070:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004072:	0019      	movs	r1, r3
 8004074:	f7fc f8ce 	bl	8000214 <__divsi3>
 8004078:	0003      	movs	r3, r0
 800407a:	b299      	uxth	r1, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2268      	movs	r2, #104	; 0x68
 8004080:	5299      	strh	r1, [r3, r2]
}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	46bd      	mov	sp, r7
 8004086:	b005      	add	sp, #20
 8004088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	0800524c 	.word	0x0800524c
 8004090:	08005254 	.word	0x08005254

08004094 <__errno>:
 8004094:	4b01      	ldr	r3, [pc, #4]	; (800409c <__errno+0x8>)
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	4770      	bx	lr
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	2000000c 	.word	0x2000000c

080040a0 <__libc_init_array>:
 80040a0:	b570      	push	{r4, r5, r6, lr}
 80040a2:	2600      	movs	r6, #0
 80040a4:	4d0c      	ldr	r5, [pc, #48]	; (80040d8 <__libc_init_array+0x38>)
 80040a6:	4c0d      	ldr	r4, [pc, #52]	; (80040dc <__libc_init_array+0x3c>)
 80040a8:	1b64      	subs	r4, r4, r5
 80040aa:	10a4      	asrs	r4, r4, #2
 80040ac:	42a6      	cmp	r6, r4
 80040ae:	d109      	bne.n	80040c4 <__libc_init_array+0x24>
 80040b0:	2600      	movs	r6, #0
 80040b2:	f000 fd89 	bl	8004bc8 <_init>
 80040b6:	4d0a      	ldr	r5, [pc, #40]	; (80040e0 <__libc_init_array+0x40>)
 80040b8:	4c0a      	ldr	r4, [pc, #40]	; (80040e4 <__libc_init_array+0x44>)
 80040ba:	1b64      	subs	r4, r4, r5
 80040bc:	10a4      	asrs	r4, r4, #2
 80040be:	42a6      	cmp	r6, r4
 80040c0:	d105      	bne.n	80040ce <__libc_init_array+0x2e>
 80040c2:	bd70      	pop	{r4, r5, r6, pc}
 80040c4:	00b3      	lsls	r3, r6, #2
 80040c6:	58eb      	ldr	r3, [r5, r3]
 80040c8:	4798      	blx	r3
 80040ca:	3601      	adds	r6, #1
 80040cc:	e7ee      	b.n	80040ac <__libc_init_array+0xc>
 80040ce:	00b3      	lsls	r3, r6, #2
 80040d0:	58eb      	ldr	r3, [r5, r3]
 80040d2:	4798      	blx	r3
 80040d4:	3601      	adds	r6, #1
 80040d6:	e7f2      	b.n	80040be <__libc_init_array+0x1e>
 80040d8:	080052c0 	.word	0x080052c0
 80040dc:	080052c0 	.word	0x080052c0
 80040e0:	080052c0 	.word	0x080052c0
 80040e4:	080052c4 	.word	0x080052c4

080040e8 <malloc>:
 80040e8:	b510      	push	{r4, lr}
 80040ea:	4b03      	ldr	r3, [pc, #12]	; (80040f8 <malloc+0x10>)
 80040ec:	0001      	movs	r1, r0
 80040ee:	6818      	ldr	r0, [r3, #0]
 80040f0:	f000 f88c 	bl	800420c <_malloc_r>
 80040f4:	bd10      	pop	{r4, pc}
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	2000000c 	.word	0x2000000c

080040fc <free>:
 80040fc:	b510      	push	{r4, lr}
 80040fe:	4b03      	ldr	r3, [pc, #12]	; (800410c <free+0x10>)
 8004100:	0001      	movs	r1, r0
 8004102:	6818      	ldr	r0, [r3, #0]
 8004104:	f000 f816 	bl	8004134 <_free_r>
 8004108:	bd10      	pop	{r4, pc}
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	2000000c 	.word	0x2000000c

08004110 <memcpy>:
 8004110:	2300      	movs	r3, #0
 8004112:	b510      	push	{r4, lr}
 8004114:	429a      	cmp	r2, r3
 8004116:	d100      	bne.n	800411a <memcpy+0xa>
 8004118:	bd10      	pop	{r4, pc}
 800411a:	5ccc      	ldrb	r4, [r1, r3]
 800411c:	54c4      	strb	r4, [r0, r3]
 800411e:	3301      	adds	r3, #1
 8004120:	e7f8      	b.n	8004114 <memcpy+0x4>

08004122 <memset>:
 8004122:	0003      	movs	r3, r0
 8004124:	1882      	adds	r2, r0, r2
 8004126:	4293      	cmp	r3, r2
 8004128:	d100      	bne.n	800412c <memset+0xa>
 800412a:	4770      	bx	lr
 800412c:	7019      	strb	r1, [r3, #0]
 800412e:	3301      	adds	r3, #1
 8004130:	e7f9      	b.n	8004126 <memset+0x4>
	...

08004134 <_free_r>:
 8004134:	b570      	push	{r4, r5, r6, lr}
 8004136:	0005      	movs	r5, r0
 8004138:	2900      	cmp	r1, #0
 800413a:	d010      	beq.n	800415e <_free_r+0x2a>
 800413c:	1f0c      	subs	r4, r1, #4
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	da00      	bge.n	8004146 <_free_r+0x12>
 8004144:	18e4      	adds	r4, r4, r3
 8004146:	0028      	movs	r0, r5
 8004148:	f000 fc70 	bl	8004a2c <__malloc_lock>
 800414c:	4a1d      	ldr	r2, [pc, #116]	; (80041c4 <_free_r+0x90>)
 800414e:	6813      	ldr	r3, [r2, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d105      	bne.n	8004160 <_free_r+0x2c>
 8004154:	6063      	str	r3, [r4, #4]
 8004156:	6014      	str	r4, [r2, #0]
 8004158:	0028      	movs	r0, r5
 800415a:	f000 fc6f 	bl	8004a3c <__malloc_unlock>
 800415e:	bd70      	pop	{r4, r5, r6, pc}
 8004160:	42a3      	cmp	r3, r4
 8004162:	d908      	bls.n	8004176 <_free_r+0x42>
 8004164:	6821      	ldr	r1, [r4, #0]
 8004166:	1860      	adds	r0, r4, r1
 8004168:	4283      	cmp	r3, r0
 800416a:	d1f3      	bne.n	8004154 <_free_r+0x20>
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	1841      	adds	r1, r0, r1
 8004172:	6021      	str	r1, [r4, #0]
 8004174:	e7ee      	b.n	8004154 <_free_r+0x20>
 8004176:	001a      	movs	r2, r3
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d001      	beq.n	8004182 <_free_r+0x4e>
 800417e:	42a3      	cmp	r3, r4
 8004180:	d9f9      	bls.n	8004176 <_free_r+0x42>
 8004182:	6811      	ldr	r1, [r2, #0]
 8004184:	1850      	adds	r0, r2, r1
 8004186:	42a0      	cmp	r0, r4
 8004188:	d10b      	bne.n	80041a2 <_free_r+0x6e>
 800418a:	6820      	ldr	r0, [r4, #0]
 800418c:	1809      	adds	r1, r1, r0
 800418e:	1850      	adds	r0, r2, r1
 8004190:	6011      	str	r1, [r2, #0]
 8004192:	4283      	cmp	r3, r0
 8004194:	d1e0      	bne.n	8004158 <_free_r+0x24>
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	1841      	adds	r1, r0, r1
 800419c:	6011      	str	r1, [r2, #0]
 800419e:	6053      	str	r3, [r2, #4]
 80041a0:	e7da      	b.n	8004158 <_free_r+0x24>
 80041a2:	42a0      	cmp	r0, r4
 80041a4:	d902      	bls.n	80041ac <_free_r+0x78>
 80041a6:	230c      	movs	r3, #12
 80041a8:	602b      	str	r3, [r5, #0]
 80041aa:	e7d5      	b.n	8004158 <_free_r+0x24>
 80041ac:	6821      	ldr	r1, [r4, #0]
 80041ae:	1860      	adds	r0, r4, r1
 80041b0:	4283      	cmp	r3, r0
 80041b2:	d103      	bne.n	80041bc <_free_r+0x88>
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	1841      	adds	r1, r0, r1
 80041ba:	6021      	str	r1, [r4, #0]
 80041bc:	6063      	str	r3, [r4, #4]
 80041be:	6054      	str	r4, [r2, #4]
 80041c0:	e7ca      	b.n	8004158 <_free_r+0x24>
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	200001c8 	.word	0x200001c8

080041c8 <sbrk_aligned>:
 80041c8:	b570      	push	{r4, r5, r6, lr}
 80041ca:	4e0f      	ldr	r6, [pc, #60]	; (8004208 <sbrk_aligned+0x40>)
 80041cc:	000d      	movs	r5, r1
 80041ce:	6831      	ldr	r1, [r6, #0]
 80041d0:	0004      	movs	r4, r0
 80041d2:	2900      	cmp	r1, #0
 80041d4:	d102      	bne.n	80041dc <sbrk_aligned+0x14>
 80041d6:	f000 f90b 	bl	80043f0 <_sbrk_r>
 80041da:	6030      	str	r0, [r6, #0]
 80041dc:	0029      	movs	r1, r5
 80041de:	0020      	movs	r0, r4
 80041e0:	f000 f906 	bl	80043f0 <_sbrk_r>
 80041e4:	1c43      	adds	r3, r0, #1
 80041e6:	d00a      	beq.n	80041fe <sbrk_aligned+0x36>
 80041e8:	2303      	movs	r3, #3
 80041ea:	1cc5      	adds	r5, r0, #3
 80041ec:	439d      	bics	r5, r3
 80041ee:	42a8      	cmp	r0, r5
 80041f0:	d007      	beq.n	8004202 <sbrk_aligned+0x3a>
 80041f2:	1a29      	subs	r1, r5, r0
 80041f4:	0020      	movs	r0, r4
 80041f6:	f000 f8fb 	bl	80043f0 <_sbrk_r>
 80041fa:	1c43      	adds	r3, r0, #1
 80041fc:	d101      	bne.n	8004202 <sbrk_aligned+0x3a>
 80041fe:	2501      	movs	r5, #1
 8004200:	426d      	negs	r5, r5
 8004202:	0028      	movs	r0, r5
 8004204:	bd70      	pop	{r4, r5, r6, pc}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	200001cc 	.word	0x200001cc

0800420c <_malloc_r>:
 800420c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800420e:	2203      	movs	r2, #3
 8004210:	1ccb      	adds	r3, r1, #3
 8004212:	4393      	bics	r3, r2
 8004214:	3308      	adds	r3, #8
 8004216:	0006      	movs	r6, r0
 8004218:	001f      	movs	r7, r3
 800421a:	2b0c      	cmp	r3, #12
 800421c:	d232      	bcs.n	8004284 <_malloc_r+0x78>
 800421e:	270c      	movs	r7, #12
 8004220:	42b9      	cmp	r1, r7
 8004222:	d831      	bhi.n	8004288 <_malloc_r+0x7c>
 8004224:	0030      	movs	r0, r6
 8004226:	f000 fc01 	bl	8004a2c <__malloc_lock>
 800422a:	4d32      	ldr	r5, [pc, #200]	; (80042f4 <_malloc_r+0xe8>)
 800422c:	682b      	ldr	r3, [r5, #0]
 800422e:	001c      	movs	r4, r3
 8004230:	2c00      	cmp	r4, #0
 8004232:	d12e      	bne.n	8004292 <_malloc_r+0x86>
 8004234:	0039      	movs	r1, r7
 8004236:	0030      	movs	r0, r6
 8004238:	f7ff ffc6 	bl	80041c8 <sbrk_aligned>
 800423c:	0004      	movs	r4, r0
 800423e:	1c43      	adds	r3, r0, #1
 8004240:	d11e      	bne.n	8004280 <_malloc_r+0x74>
 8004242:	682c      	ldr	r4, [r5, #0]
 8004244:	0025      	movs	r5, r4
 8004246:	2d00      	cmp	r5, #0
 8004248:	d14a      	bne.n	80042e0 <_malloc_r+0xd4>
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	0029      	movs	r1, r5
 800424e:	18e3      	adds	r3, r4, r3
 8004250:	0030      	movs	r0, r6
 8004252:	9301      	str	r3, [sp, #4]
 8004254:	f000 f8cc 	bl	80043f0 <_sbrk_r>
 8004258:	9b01      	ldr	r3, [sp, #4]
 800425a:	4283      	cmp	r3, r0
 800425c:	d143      	bne.n	80042e6 <_malloc_r+0xda>
 800425e:	6823      	ldr	r3, [r4, #0]
 8004260:	3703      	adds	r7, #3
 8004262:	1aff      	subs	r7, r7, r3
 8004264:	2303      	movs	r3, #3
 8004266:	439f      	bics	r7, r3
 8004268:	3708      	adds	r7, #8
 800426a:	2f0c      	cmp	r7, #12
 800426c:	d200      	bcs.n	8004270 <_malloc_r+0x64>
 800426e:	270c      	movs	r7, #12
 8004270:	0039      	movs	r1, r7
 8004272:	0030      	movs	r0, r6
 8004274:	f7ff ffa8 	bl	80041c8 <sbrk_aligned>
 8004278:	1c43      	adds	r3, r0, #1
 800427a:	d034      	beq.n	80042e6 <_malloc_r+0xda>
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	19df      	adds	r7, r3, r7
 8004280:	6027      	str	r7, [r4, #0]
 8004282:	e013      	b.n	80042ac <_malloc_r+0xa0>
 8004284:	2b00      	cmp	r3, #0
 8004286:	dacb      	bge.n	8004220 <_malloc_r+0x14>
 8004288:	230c      	movs	r3, #12
 800428a:	2500      	movs	r5, #0
 800428c:	6033      	str	r3, [r6, #0]
 800428e:	0028      	movs	r0, r5
 8004290:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004292:	6822      	ldr	r2, [r4, #0]
 8004294:	1bd1      	subs	r1, r2, r7
 8004296:	d420      	bmi.n	80042da <_malloc_r+0xce>
 8004298:	290b      	cmp	r1, #11
 800429a:	d917      	bls.n	80042cc <_malloc_r+0xc0>
 800429c:	19e2      	adds	r2, r4, r7
 800429e:	6027      	str	r7, [r4, #0]
 80042a0:	42a3      	cmp	r3, r4
 80042a2:	d111      	bne.n	80042c8 <_malloc_r+0xbc>
 80042a4:	602a      	str	r2, [r5, #0]
 80042a6:	6863      	ldr	r3, [r4, #4]
 80042a8:	6011      	str	r1, [r2, #0]
 80042aa:	6053      	str	r3, [r2, #4]
 80042ac:	0030      	movs	r0, r6
 80042ae:	0025      	movs	r5, r4
 80042b0:	f000 fbc4 	bl	8004a3c <__malloc_unlock>
 80042b4:	2207      	movs	r2, #7
 80042b6:	350b      	adds	r5, #11
 80042b8:	1d23      	adds	r3, r4, #4
 80042ba:	4395      	bics	r5, r2
 80042bc:	1aea      	subs	r2, r5, r3
 80042be:	429d      	cmp	r5, r3
 80042c0:	d0e5      	beq.n	800428e <_malloc_r+0x82>
 80042c2:	1b5b      	subs	r3, r3, r5
 80042c4:	50a3      	str	r3, [r4, r2]
 80042c6:	e7e2      	b.n	800428e <_malloc_r+0x82>
 80042c8:	605a      	str	r2, [r3, #4]
 80042ca:	e7ec      	b.n	80042a6 <_malloc_r+0x9a>
 80042cc:	6862      	ldr	r2, [r4, #4]
 80042ce:	42a3      	cmp	r3, r4
 80042d0:	d101      	bne.n	80042d6 <_malloc_r+0xca>
 80042d2:	602a      	str	r2, [r5, #0]
 80042d4:	e7ea      	b.n	80042ac <_malloc_r+0xa0>
 80042d6:	605a      	str	r2, [r3, #4]
 80042d8:	e7e8      	b.n	80042ac <_malloc_r+0xa0>
 80042da:	0023      	movs	r3, r4
 80042dc:	6864      	ldr	r4, [r4, #4]
 80042de:	e7a7      	b.n	8004230 <_malloc_r+0x24>
 80042e0:	002c      	movs	r4, r5
 80042e2:	686d      	ldr	r5, [r5, #4]
 80042e4:	e7af      	b.n	8004246 <_malloc_r+0x3a>
 80042e6:	230c      	movs	r3, #12
 80042e8:	0030      	movs	r0, r6
 80042ea:	6033      	str	r3, [r6, #0]
 80042ec:	f000 fba6 	bl	8004a3c <__malloc_unlock>
 80042f0:	e7cd      	b.n	800428e <_malloc_r+0x82>
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	200001c8 	.word	0x200001c8

080042f8 <_puts_r>:
 80042f8:	b570      	push	{r4, r5, r6, lr}
 80042fa:	0005      	movs	r5, r0
 80042fc:	000e      	movs	r6, r1
 80042fe:	2800      	cmp	r0, #0
 8004300:	d004      	beq.n	800430c <_puts_r+0x14>
 8004302:	6983      	ldr	r3, [r0, #24]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <_puts_r+0x14>
 8004308:	f000 fa80 	bl	800480c <__sinit>
 800430c:	69ab      	ldr	r3, [r5, #24]
 800430e:	68ac      	ldr	r4, [r5, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d102      	bne.n	800431a <_puts_r+0x22>
 8004314:	0028      	movs	r0, r5
 8004316:	f000 fa79 	bl	800480c <__sinit>
 800431a:	4b2d      	ldr	r3, [pc, #180]	; (80043d0 <_puts_r+0xd8>)
 800431c:	429c      	cmp	r4, r3
 800431e:	d122      	bne.n	8004366 <_puts_r+0x6e>
 8004320:	686c      	ldr	r4, [r5, #4]
 8004322:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004324:	07db      	lsls	r3, r3, #31
 8004326:	d405      	bmi.n	8004334 <_puts_r+0x3c>
 8004328:	89a3      	ldrh	r3, [r4, #12]
 800432a:	059b      	lsls	r3, r3, #22
 800432c:	d402      	bmi.n	8004334 <_puts_r+0x3c>
 800432e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004330:	f000 fb0d 	bl	800494e <__retarget_lock_acquire_recursive>
 8004334:	89a3      	ldrh	r3, [r4, #12]
 8004336:	071b      	lsls	r3, r3, #28
 8004338:	d502      	bpl.n	8004340 <_puts_r+0x48>
 800433a:	6923      	ldr	r3, [r4, #16]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d129      	bne.n	8004394 <_puts_r+0x9c>
 8004340:	0021      	movs	r1, r4
 8004342:	0028      	movs	r0, r5
 8004344:	f000 f8bc 	bl	80044c0 <__swsetup_r>
 8004348:	2800      	cmp	r0, #0
 800434a:	d023      	beq.n	8004394 <_puts_r+0x9c>
 800434c:	2501      	movs	r5, #1
 800434e:	426d      	negs	r5, r5
 8004350:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004352:	07db      	lsls	r3, r3, #31
 8004354:	d405      	bmi.n	8004362 <_puts_r+0x6a>
 8004356:	89a3      	ldrh	r3, [r4, #12]
 8004358:	059b      	lsls	r3, r3, #22
 800435a:	d402      	bmi.n	8004362 <_puts_r+0x6a>
 800435c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800435e:	f000 faf7 	bl	8004950 <__retarget_lock_release_recursive>
 8004362:	0028      	movs	r0, r5
 8004364:	bd70      	pop	{r4, r5, r6, pc}
 8004366:	4b1b      	ldr	r3, [pc, #108]	; (80043d4 <_puts_r+0xdc>)
 8004368:	429c      	cmp	r4, r3
 800436a:	d101      	bne.n	8004370 <_puts_r+0x78>
 800436c:	68ac      	ldr	r4, [r5, #8]
 800436e:	e7d8      	b.n	8004322 <_puts_r+0x2a>
 8004370:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <_puts_r+0xe0>)
 8004372:	429c      	cmp	r4, r3
 8004374:	d1d5      	bne.n	8004322 <_puts_r+0x2a>
 8004376:	68ec      	ldr	r4, [r5, #12]
 8004378:	e7d3      	b.n	8004322 <_puts_r+0x2a>
 800437a:	3601      	adds	r6, #1
 800437c:	60a3      	str	r3, [r4, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	da04      	bge.n	800438c <_puts_r+0x94>
 8004382:	69a2      	ldr	r2, [r4, #24]
 8004384:	429a      	cmp	r2, r3
 8004386:	dc16      	bgt.n	80043b6 <_puts_r+0xbe>
 8004388:	290a      	cmp	r1, #10
 800438a:	d014      	beq.n	80043b6 <_puts_r+0xbe>
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	6022      	str	r2, [r4, #0]
 8004392:	7019      	strb	r1, [r3, #0]
 8004394:	68a3      	ldr	r3, [r4, #8]
 8004396:	7831      	ldrb	r1, [r6, #0]
 8004398:	3b01      	subs	r3, #1
 800439a:	2900      	cmp	r1, #0
 800439c:	d1ed      	bne.n	800437a <_puts_r+0x82>
 800439e:	60a3      	str	r3, [r4, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	da0f      	bge.n	80043c4 <_puts_r+0xcc>
 80043a4:	0028      	movs	r0, r5
 80043a6:	0022      	movs	r2, r4
 80043a8:	310a      	adds	r1, #10
 80043aa:	f000 f833 	bl	8004414 <__swbuf_r>
 80043ae:	250a      	movs	r5, #10
 80043b0:	1c43      	adds	r3, r0, #1
 80043b2:	d1cd      	bne.n	8004350 <_puts_r+0x58>
 80043b4:	e7ca      	b.n	800434c <_puts_r+0x54>
 80043b6:	0022      	movs	r2, r4
 80043b8:	0028      	movs	r0, r5
 80043ba:	f000 f82b 	bl	8004414 <__swbuf_r>
 80043be:	1c43      	adds	r3, r0, #1
 80043c0:	d1e8      	bne.n	8004394 <_puts_r+0x9c>
 80043c2:	e7c3      	b.n	800434c <_puts_r+0x54>
 80043c4:	250a      	movs	r5, #10
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	6022      	str	r2, [r4, #0]
 80043cc:	701d      	strb	r5, [r3, #0]
 80043ce:	e7bf      	b.n	8004350 <_puts_r+0x58>
 80043d0:	08005280 	.word	0x08005280
 80043d4:	080052a0 	.word	0x080052a0
 80043d8:	08005260 	.word	0x08005260

080043dc <puts>:
 80043dc:	b510      	push	{r4, lr}
 80043de:	4b03      	ldr	r3, [pc, #12]	; (80043ec <puts+0x10>)
 80043e0:	0001      	movs	r1, r0
 80043e2:	6818      	ldr	r0, [r3, #0]
 80043e4:	f7ff ff88 	bl	80042f8 <_puts_r>
 80043e8:	bd10      	pop	{r4, pc}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	2000000c 	.word	0x2000000c

080043f0 <_sbrk_r>:
 80043f0:	2300      	movs	r3, #0
 80043f2:	b570      	push	{r4, r5, r6, lr}
 80043f4:	4d06      	ldr	r5, [pc, #24]	; (8004410 <_sbrk_r+0x20>)
 80043f6:	0004      	movs	r4, r0
 80043f8:	0008      	movs	r0, r1
 80043fa:	602b      	str	r3, [r5, #0]
 80043fc:	f7fd fa12 	bl	8001824 <_sbrk>
 8004400:	1c43      	adds	r3, r0, #1
 8004402:	d103      	bne.n	800440c <_sbrk_r+0x1c>
 8004404:	682b      	ldr	r3, [r5, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d000      	beq.n	800440c <_sbrk_r+0x1c>
 800440a:	6023      	str	r3, [r4, #0]
 800440c:	bd70      	pop	{r4, r5, r6, pc}
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	200001d4 	.word	0x200001d4

08004414 <__swbuf_r>:
 8004414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004416:	0005      	movs	r5, r0
 8004418:	000e      	movs	r6, r1
 800441a:	0014      	movs	r4, r2
 800441c:	2800      	cmp	r0, #0
 800441e:	d004      	beq.n	800442a <__swbuf_r+0x16>
 8004420:	6983      	ldr	r3, [r0, #24]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <__swbuf_r+0x16>
 8004426:	f000 f9f1 	bl	800480c <__sinit>
 800442a:	4b22      	ldr	r3, [pc, #136]	; (80044b4 <__swbuf_r+0xa0>)
 800442c:	429c      	cmp	r4, r3
 800442e:	d12e      	bne.n	800448e <__swbuf_r+0x7a>
 8004430:	686c      	ldr	r4, [r5, #4]
 8004432:	69a3      	ldr	r3, [r4, #24]
 8004434:	60a3      	str	r3, [r4, #8]
 8004436:	89a3      	ldrh	r3, [r4, #12]
 8004438:	071b      	lsls	r3, r3, #28
 800443a:	d532      	bpl.n	80044a2 <__swbuf_r+0x8e>
 800443c:	6923      	ldr	r3, [r4, #16]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d02f      	beq.n	80044a2 <__swbuf_r+0x8e>
 8004442:	6823      	ldr	r3, [r4, #0]
 8004444:	6922      	ldr	r2, [r4, #16]
 8004446:	b2f7      	uxtb	r7, r6
 8004448:	1a98      	subs	r0, r3, r2
 800444a:	6963      	ldr	r3, [r4, #20]
 800444c:	b2f6      	uxtb	r6, r6
 800444e:	4283      	cmp	r3, r0
 8004450:	dc05      	bgt.n	800445e <__swbuf_r+0x4a>
 8004452:	0021      	movs	r1, r4
 8004454:	0028      	movs	r0, r5
 8004456:	f000 f937 	bl	80046c8 <_fflush_r>
 800445a:	2800      	cmp	r0, #0
 800445c:	d127      	bne.n	80044ae <__swbuf_r+0x9a>
 800445e:	68a3      	ldr	r3, [r4, #8]
 8004460:	3001      	adds	r0, #1
 8004462:	3b01      	subs	r3, #1
 8004464:	60a3      	str	r3, [r4, #8]
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	6022      	str	r2, [r4, #0]
 800446c:	701f      	strb	r7, [r3, #0]
 800446e:	6963      	ldr	r3, [r4, #20]
 8004470:	4283      	cmp	r3, r0
 8004472:	d004      	beq.n	800447e <__swbuf_r+0x6a>
 8004474:	89a3      	ldrh	r3, [r4, #12]
 8004476:	07db      	lsls	r3, r3, #31
 8004478:	d507      	bpl.n	800448a <__swbuf_r+0x76>
 800447a:	2e0a      	cmp	r6, #10
 800447c:	d105      	bne.n	800448a <__swbuf_r+0x76>
 800447e:	0021      	movs	r1, r4
 8004480:	0028      	movs	r0, r5
 8004482:	f000 f921 	bl	80046c8 <_fflush_r>
 8004486:	2800      	cmp	r0, #0
 8004488:	d111      	bne.n	80044ae <__swbuf_r+0x9a>
 800448a:	0030      	movs	r0, r6
 800448c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800448e:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <__swbuf_r+0xa4>)
 8004490:	429c      	cmp	r4, r3
 8004492:	d101      	bne.n	8004498 <__swbuf_r+0x84>
 8004494:	68ac      	ldr	r4, [r5, #8]
 8004496:	e7cc      	b.n	8004432 <__swbuf_r+0x1e>
 8004498:	4b08      	ldr	r3, [pc, #32]	; (80044bc <__swbuf_r+0xa8>)
 800449a:	429c      	cmp	r4, r3
 800449c:	d1c9      	bne.n	8004432 <__swbuf_r+0x1e>
 800449e:	68ec      	ldr	r4, [r5, #12]
 80044a0:	e7c7      	b.n	8004432 <__swbuf_r+0x1e>
 80044a2:	0021      	movs	r1, r4
 80044a4:	0028      	movs	r0, r5
 80044a6:	f000 f80b 	bl	80044c0 <__swsetup_r>
 80044aa:	2800      	cmp	r0, #0
 80044ac:	d0c9      	beq.n	8004442 <__swbuf_r+0x2e>
 80044ae:	2601      	movs	r6, #1
 80044b0:	4276      	negs	r6, r6
 80044b2:	e7ea      	b.n	800448a <__swbuf_r+0x76>
 80044b4:	08005280 	.word	0x08005280
 80044b8:	080052a0 	.word	0x080052a0
 80044bc:	08005260 	.word	0x08005260

080044c0 <__swsetup_r>:
 80044c0:	4b37      	ldr	r3, [pc, #220]	; (80045a0 <__swsetup_r+0xe0>)
 80044c2:	b570      	push	{r4, r5, r6, lr}
 80044c4:	681d      	ldr	r5, [r3, #0]
 80044c6:	0006      	movs	r6, r0
 80044c8:	000c      	movs	r4, r1
 80044ca:	2d00      	cmp	r5, #0
 80044cc:	d005      	beq.n	80044da <__swsetup_r+0x1a>
 80044ce:	69ab      	ldr	r3, [r5, #24]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d102      	bne.n	80044da <__swsetup_r+0x1a>
 80044d4:	0028      	movs	r0, r5
 80044d6:	f000 f999 	bl	800480c <__sinit>
 80044da:	4b32      	ldr	r3, [pc, #200]	; (80045a4 <__swsetup_r+0xe4>)
 80044dc:	429c      	cmp	r4, r3
 80044de:	d10f      	bne.n	8004500 <__swsetup_r+0x40>
 80044e0:	686c      	ldr	r4, [r5, #4]
 80044e2:	230c      	movs	r3, #12
 80044e4:	5ee2      	ldrsh	r2, [r4, r3]
 80044e6:	b293      	uxth	r3, r2
 80044e8:	0711      	lsls	r1, r2, #28
 80044ea:	d42d      	bmi.n	8004548 <__swsetup_r+0x88>
 80044ec:	06d9      	lsls	r1, r3, #27
 80044ee:	d411      	bmi.n	8004514 <__swsetup_r+0x54>
 80044f0:	2309      	movs	r3, #9
 80044f2:	2001      	movs	r0, #1
 80044f4:	6033      	str	r3, [r6, #0]
 80044f6:	3337      	adds	r3, #55	; 0x37
 80044f8:	4313      	orrs	r3, r2
 80044fa:	81a3      	strh	r3, [r4, #12]
 80044fc:	4240      	negs	r0, r0
 80044fe:	bd70      	pop	{r4, r5, r6, pc}
 8004500:	4b29      	ldr	r3, [pc, #164]	; (80045a8 <__swsetup_r+0xe8>)
 8004502:	429c      	cmp	r4, r3
 8004504:	d101      	bne.n	800450a <__swsetup_r+0x4a>
 8004506:	68ac      	ldr	r4, [r5, #8]
 8004508:	e7eb      	b.n	80044e2 <__swsetup_r+0x22>
 800450a:	4b28      	ldr	r3, [pc, #160]	; (80045ac <__swsetup_r+0xec>)
 800450c:	429c      	cmp	r4, r3
 800450e:	d1e8      	bne.n	80044e2 <__swsetup_r+0x22>
 8004510:	68ec      	ldr	r4, [r5, #12]
 8004512:	e7e6      	b.n	80044e2 <__swsetup_r+0x22>
 8004514:	075b      	lsls	r3, r3, #29
 8004516:	d513      	bpl.n	8004540 <__swsetup_r+0x80>
 8004518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800451a:	2900      	cmp	r1, #0
 800451c:	d008      	beq.n	8004530 <__swsetup_r+0x70>
 800451e:	0023      	movs	r3, r4
 8004520:	3344      	adds	r3, #68	; 0x44
 8004522:	4299      	cmp	r1, r3
 8004524:	d002      	beq.n	800452c <__swsetup_r+0x6c>
 8004526:	0030      	movs	r0, r6
 8004528:	f7ff fe04 	bl	8004134 <_free_r>
 800452c:	2300      	movs	r3, #0
 800452e:	6363      	str	r3, [r4, #52]	; 0x34
 8004530:	2224      	movs	r2, #36	; 0x24
 8004532:	89a3      	ldrh	r3, [r4, #12]
 8004534:	4393      	bics	r3, r2
 8004536:	81a3      	strh	r3, [r4, #12]
 8004538:	2300      	movs	r3, #0
 800453a:	6063      	str	r3, [r4, #4]
 800453c:	6923      	ldr	r3, [r4, #16]
 800453e:	6023      	str	r3, [r4, #0]
 8004540:	2308      	movs	r3, #8
 8004542:	89a2      	ldrh	r2, [r4, #12]
 8004544:	4313      	orrs	r3, r2
 8004546:	81a3      	strh	r3, [r4, #12]
 8004548:	6923      	ldr	r3, [r4, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10b      	bne.n	8004566 <__swsetup_r+0xa6>
 800454e:	21a0      	movs	r1, #160	; 0xa0
 8004550:	2280      	movs	r2, #128	; 0x80
 8004552:	89a3      	ldrh	r3, [r4, #12]
 8004554:	0089      	lsls	r1, r1, #2
 8004556:	0092      	lsls	r2, r2, #2
 8004558:	400b      	ands	r3, r1
 800455a:	4293      	cmp	r3, r2
 800455c:	d003      	beq.n	8004566 <__swsetup_r+0xa6>
 800455e:	0021      	movs	r1, r4
 8004560:	0030      	movs	r0, r6
 8004562:	f000 fa1f 	bl	80049a4 <__smakebuf_r>
 8004566:	220c      	movs	r2, #12
 8004568:	5ea3      	ldrsh	r3, [r4, r2]
 800456a:	2001      	movs	r0, #1
 800456c:	001a      	movs	r2, r3
 800456e:	b299      	uxth	r1, r3
 8004570:	4002      	ands	r2, r0
 8004572:	4203      	tst	r3, r0
 8004574:	d00f      	beq.n	8004596 <__swsetup_r+0xd6>
 8004576:	2200      	movs	r2, #0
 8004578:	60a2      	str	r2, [r4, #8]
 800457a:	6962      	ldr	r2, [r4, #20]
 800457c:	4252      	negs	r2, r2
 800457e:	61a2      	str	r2, [r4, #24]
 8004580:	2000      	movs	r0, #0
 8004582:	6922      	ldr	r2, [r4, #16]
 8004584:	4282      	cmp	r2, r0
 8004586:	d1ba      	bne.n	80044fe <__swsetup_r+0x3e>
 8004588:	060a      	lsls	r2, r1, #24
 800458a:	d5b8      	bpl.n	80044fe <__swsetup_r+0x3e>
 800458c:	2240      	movs	r2, #64	; 0x40
 800458e:	4313      	orrs	r3, r2
 8004590:	81a3      	strh	r3, [r4, #12]
 8004592:	3801      	subs	r0, #1
 8004594:	e7b3      	b.n	80044fe <__swsetup_r+0x3e>
 8004596:	0788      	lsls	r0, r1, #30
 8004598:	d400      	bmi.n	800459c <__swsetup_r+0xdc>
 800459a:	6962      	ldr	r2, [r4, #20]
 800459c:	60a2      	str	r2, [r4, #8]
 800459e:	e7ef      	b.n	8004580 <__swsetup_r+0xc0>
 80045a0:	2000000c 	.word	0x2000000c
 80045a4:	08005280 	.word	0x08005280
 80045a8:	080052a0 	.word	0x080052a0
 80045ac:	08005260 	.word	0x08005260

080045b0 <__sflush_r>:
 80045b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045b2:	898b      	ldrh	r3, [r1, #12]
 80045b4:	0005      	movs	r5, r0
 80045b6:	000c      	movs	r4, r1
 80045b8:	071a      	lsls	r2, r3, #28
 80045ba:	d45f      	bmi.n	800467c <__sflush_r+0xcc>
 80045bc:	684a      	ldr	r2, [r1, #4]
 80045be:	2a00      	cmp	r2, #0
 80045c0:	dc04      	bgt.n	80045cc <__sflush_r+0x1c>
 80045c2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80045c4:	2a00      	cmp	r2, #0
 80045c6:	dc01      	bgt.n	80045cc <__sflush_r+0x1c>
 80045c8:	2000      	movs	r0, #0
 80045ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80045cc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80045ce:	2f00      	cmp	r7, #0
 80045d0:	d0fa      	beq.n	80045c8 <__sflush_r+0x18>
 80045d2:	2200      	movs	r2, #0
 80045d4:	2180      	movs	r1, #128	; 0x80
 80045d6:	682e      	ldr	r6, [r5, #0]
 80045d8:	602a      	str	r2, [r5, #0]
 80045da:	001a      	movs	r2, r3
 80045dc:	0149      	lsls	r1, r1, #5
 80045de:	400a      	ands	r2, r1
 80045e0:	420b      	tst	r3, r1
 80045e2:	d034      	beq.n	800464e <__sflush_r+0x9e>
 80045e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045e6:	89a3      	ldrh	r3, [r4, #12]
 80045e8:	075b      	lsls	r3, r3, #29
 80045ea:	d506      	bpl.n	80045fa <__sflush_r+0x4a>
 80045ec:	6863      	ldr	r3, [r4, #4]
 80045ee:	1ac0      	subs	r0, r0, r3
 80045f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <__sflush_r+0x4a>
 80045f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045f8:	1ac0      	subs	r0, r0, r3
 80045fa:	0002      	movs	r2, r0
 80045fc:	6a21      	ldr	r1, [r4, #32]
 80045fe:	2300      	movs	r3, #0
 8004600:	0028      	movs	r0, r5
 8004602:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004604:	47b8      	blx	r7
 8004606:	89a1      	ldrh	r1, [r4, #12]
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	d106      	bne.n	800461a <__sflush_r+0x6a>
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	2b1d      	cmp	r3, #29
 8004610:	d831      	bhi.n	8004676 <__sflush_r+0xc6>
 8004612:	4a2c      	ldr	r2, [pc, #176]	; (80046c4 <__sflush_r+0x114>)
 8004614:	40da      	lsrs	r2, r3
 8004616:	07d3      	lsls	r3, r2, #31
 8004618:	d52d      	bpl.n	8004676 <__sflush_r+0xc6>
 800461a:	2300      	movs	r3, #0
 800461c:	6063      	str	r3, [r4, #4]
 800461e:	6923      	ldr	r3, [r4, #16]
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	04cb      	lsls	r3, r1, #19
 8004624:	d505      	bpl.n	8004632 <__sflush_r+0x82>
 8004626:	1c43      	adds	r3, r0, #1
 8004628:	d102      	bne.n	8004630 <__sflush_r+0x80>
 800462a:	682b      	ldr	r3, [r5, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d100      	bne.n	8004632 <__sflush_r+0x82>
 8004630:	6560      	str	r0, [r4, #84]	; 0x54
 8004632:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004634:	602e      	str	r6, [r5, #0]
 8004636:	2900      	cmp	r1, #0
 8004638:	d0c6      	beq.n	80045c8 <__sflush_r+0x18>
 800463a:	0023      	movs	r3, r4
 800463c:	3344      	adds	r3, #68	; 0x44
 800463e:	4299      	cmp	r1, r3
 8004640:	d002      	beq.n	8004648 <__sflush_r+0x98>
 8004642:	0028      	movs	r0, r5
 8004644:	f7ff fd76 	bl	8004134 <_free_r>
 8004648:	2000      	movs	r0, #0
 800464a:	6360      	str	r0, [r4, #52]	; 0x34
 800464c:	e7bd      	b.n	80045ca <__sflush_r+0x1a>
 800464e:	2301      	movs	r3, #1
 8004650:	0028      	movs	r0, r5
 8004652:	6a21      	ldr	r1, [r4, #32]
 8004654:	47b8      	blx	r7
 8004656:	1c43      	adds	r3, r0, #1
 8004658:	d1c5      	bne.n	80045e6 <__sflush_r+0x36>
 800465a:	682b      	ldr	r3, [r5, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0c2      	beq.n	80045e6 <__sflush_r+0x36>
 8004660:	2b1d      	cmp	r3, #29
 8004662:	d001      	beq.n	8004668 <__sflush_r+0xb8>
 8004664:	2b16      	cmp	r3, #22
 8004666:	d101      	bne.n	800466c <__sflush_r+0xbc>
 8004668:	602e      	str	r6, [r5, #0]
 800466a:	e7ad      	b.n	80045c8 <__sflush_r+0x18>
 800466c:	2340      	movs	r3, #64	; 0x40
 800466e:	89a2      	ldrh	r2, [r4, #12]
 8004670:	4313      	orrs	r3, r2
 8004672:	81a3      	strh	r3, [r4, #12]
 8004674:	e7a9      	b.n	80045ca <__sflush_r+0x1a>
 8004676:	2340      	movs	r3, #64	; 0x40
 8004678:	430b      	orrs	r3, r1
 800467a:	e7fa      	b.n	8004672 <__sflush_r+0xc2>
 800467c:	690f      	ldr	r7, [r1, #16]
 800467e:	2f00      	cmp	r7, #0
 8004680:	d0a2      	beq.n	80045c8 <__sflush_r+0x18>
 8004682:	680a      	ldr	r2, [r1, #0]
 8004684:	600f      	str	r7, [r1, #0]
 8004686:	1bd2      	subs	r2, r2, r7
 8004688:	9201      	str	r2, [sp, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	079b      	lsls	r3, r3, #30
 800468e:	d100      	bne.n	8004692 <__sflush_r+0xe2>
 8004690:	694a      	ldr	r2, [r1, #20]
 8004692:	60a2      	str	r2, [r4, #8]
 8004694:	9b01      	ldr	r3, [sp, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	dc00      	bgt.n	800469c <__sflush_r+0xec>
 800469a:	e795      	b.n	80045c8 <__sflush_r+0x18>
 800469c:	003a      	movs	r2, r7
 800469e:	0028      	movs	r0, r5
 80046a0:	9b01      	ldr	r3, [sp, #4]
 80046a2:	6a21      	ldr	r1, [r4, #32]
 80046a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80046a6:	47b0      	blx	r6
 80046a8:	2800      	cmp	r0, #0
 80046aa:	dc06      	bgt.n	80046ba <__sflush_r+0x10a>
 80046ac:	2340      	movs	r3, #64	; 0x40
 80046ae:	2001      	movs	r0, #1
 80046b0:	89a2      	ldrh	r2, [r4, #12]
 80046b2:	4240      	negs	r0, r0
 80046b4:	4313      	orrs	r3, r2
 80046b6:	81a3      	strh	r3, [r4, #12]
 80046b8:	e787      	b.n	80045ca <__sflush_r+0x1a>
 80046ba:	9b01      	ldr	r3, [sp, #4]
 80046bc:	183f      	adds	r7, r7, r0
 80046be:	1a1b      	subs	r3, r3, r0
 80046c0:	9301      	str	r3, [sp, #4]
 80046c2:	e7e7      	b.n	8004694 <__sflush_r+0xe4>
 80046c4:	20400001 	.word	0x20400001

080046c8 <_fflush_r>:
 80046c8:	690b      	ldr	r3, [r1, #16]
 80046ca:	b570      	push	{r4, r5, r6, lr}
 80046cc:	0005      	movs	r5, r0
 80046ce:	000c      	movs	r4, r1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d102      	bne.n	80046da <_fflush_r+0x12>
 80046d4:	2500      	movs	r5, #0
 80046d6:	0028      	movs	r0, r5
 80046d8:	bd70      	pop	{r4, r5, r6, pc}
 80046da:	2800      	cmp	r0, #0
 80046dc:	d004      	beq.n	80046e8 <_fflush_r+0x20>
 80046de:	6983      	ldr	r3, [r0, #24]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <_fflush_r+0x20>
 80046e4:	f000 f892 	bl	800480c <__sinit>
 80046e8:	4b14      	ldr	r3, [pc, #80]	; (800473c <_fflush_r+0x74>)
 80046ea:	429c      	cmp	r4, r3
 80046ec:	d11b      	bne.n	8004726 <_fflush_r+0x5e>
 80046ee:	686c      	ldr	r4, [r5, #4]
 80046f0:	220c      	movs	r2, #12
 80046f2:	5ea3      	ldrsh	r3, [r4, r2]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0ed      	beq.n	80046d4 <_fflush_r+0xc>
 80046f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80046fa:	07d2      	lsls	r2, r2, #31
 80046fc:	d404      	bmi.n	8004708 <_fflush_r+0x40>
 80046fe:	059b      	lsls	r3, r3, #22
 8004700:	d402      	bmi.n	8004708 <_fflush_r+0x40>
 8004702:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004704:	f000 f923 	bl	800494e <__retarget_lock_acquire_recursive>
 8004708:	0028      	movs	r0, r5
 800470a:	0021      	movs	r1, r4
 800470c:	f7ff ff50 	bl	80045b0 <__sflush_r>
 8004710:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004712:	0005      	movs	r5, r0
 8004714:	07db      	lsls	r3, r3, #31
 8004716:	d4de      	bmi.n	80046d6 <_fflush_r+0xe>
 8004718:	89a3      	ldrh	r3, [r4, #12]
 800471a:	059b      	lsls	r3, r3, #22
 800471c:	d4db      	bmi.n	80046d6 <_fflush_r+0xe>
 800471e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004720:	f000 f916 	bl	8004950 <__retarget_lock_release_recursive>
 8004724:	e7d7      	b.n	80046d6 <_fflush_r+0xe>
 8004726:	4b06      	ldr	r3, [pc, #24]	; (8004740 <_fflush_r+0x78>)
 8004728:	429c      	cmp	r4, r3
 800472a:	d101      	bne.n	8004730 <_fflush_r+0x68>
 800472c:	68ac      	ldr	r4, [r5, #8]
 800472e:	e7df      	b.n	80046f0 <_fflush_r+0x28>
 8004730:	4b04      	ldr	r3, [pc, #16]	; (8004744 <_fflush_r+0x7c>)
 8004732:	429c      	cmp	r4, r3
 8004734:	d1dc      	bne.n	80046f0 <_fflush_r+0x28>
 8004736:	68ec      	ldr	r4, [r5, #12]
 8004738:	e7da      	b.n	80046f0 <_fflush_r+0x28>
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	08005280 	.word	0x08005280
 8004740:	080052a0 	.word	0x080052a0
 8004744:	08005260 	.word	0x08005260

08004748 <std>:
 8004748:	2300      	movs	r3, #0
 800474a:	b510      	push	{r4, lr}
 800474c:	0004      	movs	r4, r0
 800474e:	6003      	str	r3, [r0, #0]
 8004750:	6043      	str	r3, [r0, #4]
 8004752:	6083      	str	r3, [r0, #8]
 8004754:	8181      	strh	r1, [r0, #12]
 8004756:	6643      	str	r3, [r0, #100]	; 0x64
 8004758:	0019      	movs	r1, r3
 800475a:	81c2      	strh	r2, [r0, #14]
 800475c:	6103      	str	r3, [r0, #16]
 800475e:	6143      	str	r3, [r0, #20]
 8004760:	6183      	str	r3, [r0, #24]
 8004762:	2208      	movs	r2, #8
 8004764:	305c      	adds	r0, #92	; 0x5c
 8004766:	f7ff fcdc 	bl	8004122 <memset>
 800476a:	4b05      	ldr	r3, [pc, #20]	; (8004780 <std+0x38>)
 800476c:	6224      	str	r4, [r4, #32]
 800476e:	6263      	str	r3, [r4, #36]	; 0x24
 8004770:	4b04      	ldr	r3, [pc, #16]	; (8004784 <std+0x3c>)
 8004772:	62a3      	str	r3, [r4, #40]	; 0x28
 8004774:	4b04      	ldr	r3, [pc, #16]	; (8004788 <std+0x40>)
 8004776:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004778:	4b04      	ldr	r3, [pc, #16]	; (800478c <std+0x44>)
 800477a:	6323      	str	r3, [r4, #48]	; 0x30
 800477c:	bd10      	pop	{r4, pc}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	08004a4d 	.word	0x08004a4d
 8004784:	08004a75 	.word	0x08004a75
 8004788:	08004aad 	.word	0x08004aad
 800478c:	08004ad9 	.word	0x08004ad9

08004790 <_cleanup_r>:
 8004790:	b510      	push	{r4, lr}
 8004792:	4902      	ldr	r1, [pc, #8]	; (800479c <_cleanup_r+0xc>)
 8004794:	f000 f8ba 	bl	800490c <_fwalk_reent>
 8004798:	bd10      	pop	{r4, pc}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	080046c9 	.word	0x080046c9

080047a0 <__sfmoreglue>:
 80047a0:	b570      	push	{r4, r5, r6, lr}
 80047a2:	2568      	movs	r5, #104	; 0x68
 80047a4:	1e4a      	subs	r2, r1, #1
 80047a6:	4355      	muls	r5, r2
 80047a8:	000e      	movs	r6, r1
 80047aa:	0029      	movs	r1, r5
 80047ac:	3174      	adds	r1, #116	; 0x74
 80047ae:	f7ff fd2d 	bl	800420c <_malloc_r>
 80047b2:	1e04      	subs	r4, r0, #0
 80047b4:	d008      	beq.n	80047c8 <__sfmoreglue+0x28>
 80047b6:	2100      	movs	r1, #0
 80047b8:	002a      	movs	r2, r5
 80047ba:	6001      	str	r1, [r0, #0]
 80047bc:	6046      	str	r6, [r0, #4]
 80047be:	300c      	adds	r0, #12
 80047c0:	60a0      	str	r0, [r4, #8]
 80047c2:	3268      	adds	r2, #104	; 0x68
 80047c4:	f7ff fcad 	bl	8004122 <memset>
 80047c8:	0020      	movs	r0, r4
 80047ca:	bd70      	pop	{r4, r5, r6, pc}

080047cc <__sfp_lock_acquire>:
 80047cc:	b510      	push	{r4, lr}
 80047ce:	4802      	ldr	r0, [pc, #8]	; (80047d8 <__sfp_lock_acquire+0xc>)
 80047d0:	f000 f8bd 	bl	800494e <__retarget_lock_acquire_recursive>
 80047d4:	bd10      	pop	{r4, pc}
 80047d6:	46c0      	nop			; (mov r8, r8)
 80047d8:	200001d1 	.word	0x200001d1

080047dc <__sfp_lock_release>:
 80047dc:	b510      	push	{r4, lr}
 80047de:	4802      	ldr	r0, [pc, #8]	; (80047e8 <__sfp_lock_release+0xc>)
 80047e0:	f000 f8b6 	bl	8004950 <__retarget_lock_release_recursive>
 80047e4:	bd10      	pop	{r4, pc}
 80047e6:	46c0      	nop			; (mov r8, r8)
 80047e8:	200001d1 	.word	0x200001d1

080047ec <__sinit_lock_acquire>:
 80047ec:	b510      	push	{r4, lr}
 80047ee:	4802      	ldr	r0, [pc, #8]	; (80047f8 <__sinit_lock_acquire+0xc>)
 80047f0:	f000 f8ad 	bl	800494e <__retarget_lock_acquire_recursive>
 80047f4:	bd10      	pop	{r4, pc}
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	200001d2 	.word	0x200001d2

080047fc <__sinit_lock_release>:
 80047fc:	b510      	push	{r4, lr}
 80047fe:	4802      	ldr	r0, [pc, #8]	; (8004808 <__sinit_lock_release+0xc>)
 8004800:	f000 f8a6 	bl	8004950 <__retarget_lock_release_recursive>
 8004804:	bd10      	pop	{r4, pc}
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	200001d2 	.word	0x200001d2

0800480c <__sinit>:
 800480c:	b513      	push	{r0, r1, r4, lr}
 800480e:	0004      	movs	r4, r0
 8004810:	f7ff ffec 	bl	80047ec <__sinit_lock_acquire>
 8004814:	69a3      	ldr	r3, [r4, #24]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <__sinit+0x14>
 800481a:	f7ff ffef 	bl	80047fc <__sinit_lock_release>
 800481e:	bd13      	pop	{r0, r1, r4, pc}
 8004820:	64a3      	str	r3, [r4, #72]	; 0x48
 8004822:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004824:	6523      	str	r3, [r4, #80]	; 0x50
 8004826:	4b13      	ldr	r3, [pc, #76]	; (8004874 <__sinit+0x68>)
 8004828:	4a13      	ldr	r2, [pc, #76]	; (8004878 <__sinit+0x6c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	62a2      	str	r2, [r4, #40]	; 0x28
 800482e:	9301      	str	r3, [sp, #4]
 8004830:	42a3      	cmp	r3, r4
 8004832:	d101      	bne.n	8004838 <__sinit+0x2c>
 8004834:	2301      	movs	r3, #1
 8004836:	61a3      	str	r3, [r4, #24]
 8004838:	0020      	movs	r0, r4
 800483a:	f000 f81f 	bl	800487c <__sfp>
 800483e:	6060      	str	r0, [r4, #4]
 8004840:	0020      	movs	r0, r4
 8004842:	f000 f81b 	bl	800487c <__sfp>
 8004846:	60a0      	str	r0, [r4, #8]
 8004848:	0020      	movs	r0, r4
 800484a:	f000 f817 	bl	800487c <__sfp>
 800484e:	2200      	movs	r2, #0
 8004850:	2104      	movs	r1, #4
 8004852:	60e0      	str	r0, [r4, #12]
 8004854:	6860      	ldr	r0, [r4, #4]
 8004856:	f7ff ff77 	bl	8004748 <std>
 800485a:	2201      	movs	r2, #1
 800485c:	2109      	movs	r1, #9
 800485e:	68a0      	ldr	r0, [r4, #8]
 8004860:	f7ff ff72 	bl	8004748 <std>
 8004864:	2202      	movs	r2, #2
 8004866:	2112      	movs	r1, #18
 8004868:	68e0      	ldr	r0, [r4, #12]
 800486a:	f7ff ff6d 	bl	8004748 <std>
 800486e:	2301      	movs	r3, #1
 8004870:	61a3      	str	r3, [r4, #24]
 8004872:	e7d2      	b.n	800481a <__sinit+0xe>
 8004874:	0800525c 	.word	0x0800525c
 8004878:	08004791 	.word	0x08004791

0800487c <__sfp>:
 800487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487e:	0007      	movs	r7, r0
 8004880:	f7ff ffa4 	bl	80047cc <__sfp_lock_acquire>
 8004884:	4b1f      	ldr	r3, [pc, #124]	; (8004904 <__sfp+0x88>)
 8004886:	681e      	ldr	r6, [r3, #0]
 8004888:	69b3      	ldr	r3, [r6, #24]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d102      	bne.n	8004894 <__sfp+0x18>
 800488e:	0030      	movs	r0, r6
 8004890:	f7ff ffbc 	bl	800480c <__sinit>
 8004894:	3648      	adds	r6, #72	; 0x48
 8004896:	68b4      	ldr	r4, [r6, #8]
 8004898:	6873      	ldr	r3, [r6, #4]
 800489a:	3b01      	subs	r3, #1
 800489c:	d504      	bpl.n	80048a8 <__sfp+0x2c>
 800489e:	6833      	ldr	r3, [r6, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d022      	beq.n	80048ea <__sfp+0x6e>
 80048a4:	6836      	ldr	r6, [r6, #0]
 80048a6:	e7f6      	b.n	8004896 <__sfp+0x1a>
 80048a8:	220c      	movs	r2, #12
 80048aa:	5ea5      	ldrsh	r5, [r4, r2]
 80048ac:	2d00      	cmp	r5, #0
 80048ae:	d11a      	bne.n	80048e6 <__sfp+0x6a>
 80048b0:	0020      	movs	r0, r4
 80048b2:	4b15      	ldr	r3, [pc, #84]	; (8004908 <__sfp+0x8c>)
 80048b4:	3058      	adds	r0, #88	; 0x58
 80048b6:	60e3      	str	r3, [r4, #12]
 80048b8:	6665      	str	r5, [r4, #100]	; 0x64
 80048ba:	f000 f847 	bl	800494c <__retarget_lock_init_recursive>
 80048be:	f7ff ff8d 	bl	80047dc <__sfp_lock_release>
 80048c2:	0020      	movs	r0, r4
 80048c4:	2208      	movs	r2, #8
 80048c6:	0029      	movs	r1, r5
 80048c8:	6025      	str	r5, [r4, #0]
 80048ca:	60a5      	str	r5, [r4, #8]
 80048cc:	6065      	str	r5, [r4, #4]
 80048ce:	6125      	str	r5, [r4, #16]
 80048d0:	6165      	str	r5, [r4, #20]
 80048d2:	61a5      	str	r5, [r4, #24]
 80048d4:	305c      	adds	r0, #92	; 0x5c
 80048d6:	f7ff fc24 	bl	8004122 <memset>
 80048da:	6365      	str	r5, [r4, #52]	; 0x34
 80048dc:	63a5      	str	r5, [r4, #56]	; 0x38
 80048de:	64a5      	str	r5, [r4, #72]	; 0x48
 80048e0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80048e2:	0020      	movs	r0, r4
 80048e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048e6:	3468      	adds	r4, #104	; 0x68
 80048e8:	e7d7      	b.n	800489a <__sfp+0x1e>
 80048ea:	2104      	movs	r1, #4
 80048ec:	0038      	movs	r0, r7
 80048ee:	f7ff ff57 	bl	80047a0 <__sfmoreglue>
 80048f2:	1e04      	subs	r4, r0, #0
 80048f4:	6030      	str	r0, [r6, #0]
 80048f6:	d1d5      	bne.n	80048a4 <__sfp+0x28>
 80048f8:	f7ff ff70 	bl	80047dc <__sfp_lock_release>
 80048fc:	230c      	movs	r3, #12
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	e7ef      	b.n	80048e2 <__sfp+0x66>
 8004902:	46c0      	nop			; (mov r8, r8)
 8004904:	0800525c 	.word	0x0800525c
 8004908:	ffff0001 	.word	0xffff0001

0800490c <_fwalk_reent>:
 800490c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800490e:	0004      	movs	r4, r0
 8004910:	0006      	movs	r6, r0
 8004912:	2700      	movs	r7, #0
 8004914:	9101      	str	r1, [sp, #4]
 8004916:	3448      	adds	r4, #72	; 0x48
 8004918:	6863      	ldr	r3, [r4, #4]
 800491a:	68a5      	ldr	r5, [r4, #8]
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	9b00      	ldr	r3, [sp, #0]
 8004920:	3b01      	subs	r3, #1
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	d504      	bpl.n	8004930 <_fwalk_reent+0x24>
 8004926:	6824      	ldr	r4, [r4, #0]
 8004928:	2c00      	cmp	r4, #0
 800492a:	d1f5      	bne.n	8004918 <_fwalk_reent+0xc>
 800492c:	0038      	movs	r0, r7
 800492e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004930:	89ab      	ldrh	r3, [r5, #12]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d908      	bls.n	8004948 <_fwalk_reent+0x3c>
 8004936:	220e      	movs	r2, #14
 8004938:	5eab      	ldrsh	r3, [r5, r2]
 800493a:	3301      	adds	r3, #1
 800493c:	d004      	beq.n	8004948 <_fwalk_reent+0x3c>
 800493e:	0029      	movs	r1, r5
 8004940:	0030      	movs	r0, r6
 8004942:	9b01      	ldr	r3, [sp, #4]
 8004944:	4798      	blx	r3
 8004946:	4307      	orrs	r7, r0
 8004948:	3568      	adds	r5, #104	; 0x68
 800494a:	e7e8      	b.n	800491e <_fwalk_reent+0x12>

0800494c <__retarget_lock_init_recursive>:
 800494c:	4770      	bx	lr

0800494e <__retarget_lock_acquire_recursive>:
 800494e:	4770      	bx	lr

08004950 <__retarget_lock_release_recursive>:
 8004950:	4770      	bx	lr
	...

08004954 <__swhatbuf_r>:
 8004954:	b570      	push	{r4, r5, r6, lr}
 8004956:	000e      	movs	r6, r1
 8004958:	001d      	movs	r5, r3
 800495a:	230e      	movs	r3, #14
 800495c:	5ec9      	ldrsh	r1, [r1, r3]
 800495e:	0014      	movs	r4, r2
 8004960:	b096      	sub	sp, #88	; 0x58
 8004962:	2900      	cmp	r1, #0
 8004964:	da08      	bge.n	8004978 <__swhatbuf_r+0x24>
 8004966:	220c      	movs	r2, #12
 8004968:	5eb3      	ldrsh	r3, [r6, r2]
 800496a:	2200      	movs	r2, #0
 800496c:	602a      	str	r2, [r5, #0]
 800496e:	061b      	lsls	r3, r3, #24
 8004970:	d411      	bmi.n	8004996 <__swhatbuf_r+0x42>
 8004972:	2380      	movs	r3, #128	; 0x80
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	e00f      	b.n	8004998 <__swhatbuf_r+0x44>
 8004978:	466a      	mov	r2, sp
 800497a:	f000 f8d9 	bl	8004b30 <_fstat_r>
 800497e:	2800      	cmp	r0, #0
 8004980:	dbf1      	blt.n	8004966 <__swhatbuf_r+0x12>
 8004982:	23f0      	movs	r3, #240	; 0xf0
 8004984:	9901      	ldr	r1, [sp, #4]
 8004986:	021b      	lsls	r3, r3, #8
 8004988:	4019      	ands	r1, r3
 800498a:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <__swhatbuf_r+0x4c>)
 800498c:	18c9      	adds	r1, r1, r3
 800498e:	424b      	negs	r3, r1
 8004990:	4159      	adcs	r1, r3
 8004992:	6029      	str	r1, [r5, #0]
 8004994:	e7ed      	b.n	8004972 <__swhatbuf_r+0x1e>
 8004996:	2340      	movs	r3, #64	; 0x40
 8004998:	2000      	movs	r0, #0
 800499a:	6023      	str	r3, [r4, #0]
 800499c:	b016      	add	sp, #88	; 0x58
 800499e:	bd70      	pop	{r4, r5, r6, pc}
 80049a0:	ffffe000 	.word	0xffffe000

080049a4 <__smakebuf_r>:
 80049a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049a6:	2602      	movs	r6, #2
 80049a8:	898b      	ldrh	r3, [r1, #12]
 80049aa:	0005      	movs	r5, r0
 80049ac:	000c      	movs	r4, r1
 80049ae:	4233      	tst	r3, r6
 80049b0:	d006      	beq.n	80049c0 <__smakebuf_r+0x1c>
 80049b2:	0023      	movs	r3, r4
 80049b4:	3347      	adds	r3, #71	; 0x47
 80049b6:	6023      	str	r3, [r4, #0]
 80049b8:	6123      	str	r3, [r4, #16]
 80049ba:	2301      	movs	r3, #1
 80049bc:	6163      	str	r3, [r4, #20]
 80049be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80049c0:	466a      	mov	r2, sp
 80049c2:	ab01      	add	r3, sp, #4
 80049c4:	f7ff ffc6 	bl	8004954 <__swhatbuf_r>
 80049c8:	9900      	ldr	r1, [sp, #0]
 80049ca:	0007      	movs	r7, r0
 80049cc:	0028      	movs	r0, r5
 80049ce:	f7ff fc1d 	bl	800420c <_malloc_r>
 80049d2:	2800      	cmp	r0, #0
 80049d4:	d108      	bne.n	80049e8 <__smakebuf_r+0x44>
 80049d6:	220c      	movs	r2, #12
 80049d8:	5ea3      	ldrsh	r3, [r4, r2]
 80049da:	059a      	lsls	r2, r3, #22
 80049dc:	d4ef      	bmi.n	80049be <__smakebuf_r+0x1a>
 80049de:	2203      	movs	r2, #3
 80049e0:	4393      	bics	r3, r2
 80049e2:	431e      	orrs	r6, r3
 80049e4:	81a6      	strh	r6, [r4, #12]
 80049e6:	e7e4      	b.n	80049b2 <__smakebuf_r+0xe>
 80049e8:	4b0f      	ldr	r3, [pc, #60]	; (8004a28 <__smakebuf_r+0x84>)
 80049ea:	62ab      	str	r3, [r5, #40]	; 0x28
 80049ec:	2380      	movs	r3, #128	; 0x80
 80049ee:	89a2      	ldrh	r2, [r4, #12]
 80049f0:	6020      	str	r0, [r4, #0]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	81a3      	strh	r3, [r4, #12]
 80049f6:	9b00      	ldr	r3, [sp, #0]
 80049f8:	6120      	str	r0, [r4, #16]
 80049fa:	6163      	str	r3, [r4, #20]
 80049fc:	9b01      	ldr	r3, [sp, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00d      	beq.n	8004a1e <__smakebuf_r+0x7a>
 8004a02:	0028      	movs	r0, r5
 8004a04:	230e      	movs	r3, #14
 8004a06:	5ee1      	ldrsh	r1, [r4, r3]
 8004a08:	f000 f8a4 	bl	8004b54 <_isatty_r>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	d006      	beq.n	8004a1e <__smakebuf_r+0x7a>
 8004a10:	2203      	movs	r2, #3
 8004a12:	89a3      	ldrh	r3, [r4, #12]
 8004a14:	4393      	bics	r3, r2
 8004a16:	001a      	movs	r2, r3
 8004a18:	2301      	movs	r3, #1
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	81a3      	strh	r3, [r4, #12]
 8004a1e:	89a0      	ldrh	r0, [r4, #12]
 8004a20:	4307      	orrs	r7, r0
 8004a22:	81a7      	strh	r7, [r4, #12]
 8004a24:	e7cb      	b.n	80049be <__smakebuf_r+0x1a>
 8004a26:	46c0      	nop			; (mov r8, r8)
 8004a28:	08004791 	.word	0x08004791

08004a2c <__malloc_lock>:
 8004a2c:	b510      	push	{r4, lr}
 8004a2e:	4802      	ldr	r0, [pc, #8]	; (8004a38 <__malloc_lock+0xc>)
 8004a30:	f7ff ff8d 	bl	800494e <__retarget_lock_acquire_recursive>
 8004a34:	bd10      	pop	{r4, pc}
 8004a36:	46c0      	nop			; (mov r8, r8)
 8004a38:	200001d0 	.word	0x200001d0

08004a3c <__malloc_unlock>:
 8004a3c:	b510      	push	{r4, lr}
 8004a3e:	4802      	ldr	r0, [pc, #8]	; (8004a48 <__malloc_unlock+0xc>)
 8004a40:	f7ff ff86 	bl	8004950 <__retarget_lock_release_recursive>
 8004a44:	bd10      	pop	{r4, pc}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	200001d0 	.word	0x200001d0

08004a4c <__sread>:
 8004a4c:	b570      	push	{r4, r5, r6, lr}
 8004a4e:	000c      	movs	r4, r1
 8004a50:	250e      	movs	r5, #14
 8004a52:	5f49      	ldrsh	r1, [r1, r5]
 8004a54:	f000 f8a4 	bl	8004ba0 <_read_r>
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	db03      	blt.n	8004a64 <__sread+0x18>
 8004a5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004a5e:	181b      	adds	r3, r3, r0
 8004a60:	6563      	str	r3, [r4, #84]	; 0x54
 8004a62:	bd70      	pop	{r4, r5, r6, pc}
 8004a64:	89a3      	ldrh	r3, [r4, #12]
 8004a66:	4a02      	ldr	r2, [pc, #8]	; (8004a70 <__sread+0x24>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	81a3      	strh	r3, [r4, #12]
 8004a6c:	e7f9      	b.n	8004a62 <__sread+0x16>
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	ffffefff 	.word	0xffffefff

08004a74 <__swrite>:
 8004a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a76:	001f      	movs	r7, r3
 8004a78:	898b      	ldrh	r3, [r1, #12]
 8004a7a:	0005      	movs	r5, r0
 8004a7c:	000c      	movs	r4, r1
 8004a7e:	0016      	movs	r6, r2
 8004a80:	05db      	lsls	r3, r3, #23
 8004a82:	d505      	bpl.n	8004a90 <__swrite+0x1c>
 8004a84:	230e      	movs	r3, #14
 8004a86:	5ec9      	ldrsh	r1, [r1, r3]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	f000 f874 	bl	8004b78 <_lseek_r>
 8004a90:	89a3      	ldrh	r3, [r4, #12]
 8004a92:	4a05      	ldr	r2, [pc, #20]	; (8004aa8 <__swrite+0x34>)
 8004a94:	0028      	movs	r0, r5
 8004a96:	4013      	ands	r3, r2
 8004a98:	81a3      	strh	r3, [r4, #12]
 8004a9a:	0032      	movs	r2, r6
 8004a9c:	230e      	movs	r3, #14
 8004a9e:	5ee1      	ldrsh	r1, [r4, r3]
 8004aa0:	003b      	movs	r3, r7
 8004aa2:	f000 f81f 	bl	8004ae4 <_write_r>
 8004aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aa8:	ffffefff 	.word	0xffffefff

08004aac <__sseek>:
 8004aac:	b570      	push	{r4, r5, r6, lr}
 8004aae:	000c      	movs	r4, r1
 8004ab0:	250e      	movs	r5, #14
 8004ab2:	5f49      	ldrsh	r1, [r1, r5]
 8004ab4:	f000 f860 	bl	8004b78 <_lseek_r>
 8004ab8:	89a3      	ldrh	r3, [r4, #12]
 8004aba:	1c42      	adds	r2, r0, #1
 8004abc:	d103      	bne.n	8004ac6 <__sseek+0x1a>
 8004abe:	4a05      	ldr	r2, [pc, #20]	; (8004ad4 <__sseek+0x28>)
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	81a3      	strh	r3, [r4, #12]
 8004ac4:	bd70      	pop	{r4, r5, r6, pc}
 8004ac6:	2280      	movs	r2, #128	; 0x80
 8004ac8:	0152      	lsls	r2, r2, #5
 8004aca:	4313      	orrs	r3, r2
 8004acc:	81a3      	strh	r3, [r4, #12]
 8004ace:	6560      	str	r0, [r4, #84]	; 0x54
 8004ad0:	e7f8      	b.n	8004ac4 <__sseek+0x18>
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	ffffefff 	.word	0xffffefff

08004ad8 <__sclose>:
 8004ad8:	b510      	push	{r4, lr}
 8004ada:	230e      	movs	r3, #14
 8004adc:	5ec9      	ldrsh	r1, [r1, r3]
 8004ade:	f000 f815 	bl	8004b0c <_close_r>
 8004ae2:	bd10      	pop	{r4, pc}

08004ae4 <_write_r>:
 8004ae4:	b570      	push	{r4, r5, r6, lr}
 8004ae6:	0004      	movs	r4, r0
 8004ae8:	0008      	movs	r0, r1
 8004aea:	0011      	movs	r1, r2
 8004aec:	001a      	movs	r2, r3
 8004aee:	2300      	movs	r3, #0
 8004af0:	4d05      	ldr	r5, [pc, #20]	; (8004b08 <_write_r+0x24>)
 8004af2:	602b      	str	r3, [r5, #0]
 8004af4:	f7fc fe4e 	bl	8001794 <_write>
 8004af8:	1c43      	adds	r3, r0, #1
 8004afa:	d103      	bne.n	8004b04 <_write_r+0x20>
 8004afc:	682b      	ldr	r3, [r5, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d000      	beq.n	8004b04 <_write_r+0x20>
 8004b02:	6023      	str	r3, [r4, #0]
 8004b04:	bd70      	pop	{r4, r5, r6, pc}
 8004b06:	46c0      	nop			; (mov r8, r8)
 8004b08:	200001d4 	.word	0x200001d4

08004b0c <_close_r>:
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	b570      	push	{r4, r5, r6, lr}
 8004b10:	4d06      	ldr	r5, [pc, #24]	; (8004b2c <_close_r+0x20>)
 8004b12:	0004      	movs	r4, r0
 8004b14:	0008      	movs	r0, r1
 8004b16:	602b      	str	r3, [r5, #0]
 8004b18:	f7fc fe58 	bl	80017cc <_close>
 8004b1c:	1c43      	adds	r3, r0, #1
 8004b1e:	d103      	bne.n	8004b28 <_close_r+0x1c>
 8004b20:	682b      	ldr	r3, [r5, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d000      	beq.n	8004b28 <_close_r+0x1c>
 8004b26:	6023      	str	r3, [r4, #0]
 8004b28:	bd70      	pop	{r4, r5, r6, pc}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	200001d4 	.word	0x200001d4

08004b30 <_fstat_r>:
 8004b30:	2300      	movs	r3, #0
 8004b32:	b570      	push	{r4, r5, r6, lr}
 8004b34:	4d06      	ldr	r5, [pc, #24]	; (8004b50 <_fstat_r+0x20>)
 8004b36:	0004      	movs	r4, r0
 8004b38:	0008      	movs	r0, r1
 8004b3a:	0011      	movs	r1, r2
 8004b3c:	602b      	str	r3, [r5, #0]
 8004b3e:	f7fc fe4f 	bl	80017e0 <_fstat>
 8004b42:	1c43      	adds	r3, r0, #1
 8004b44:	d103      	bne.n	8004b4e <_fstat_r+0x1e>
 8004b46:	682b      	ldr	r3, [r5, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d000      	beq.n	8004b4e <_fstat_r+0x1e>
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	bd70      	pop	{r4, r5, r6, pc}
 8004b50:	200001d4 	.word	0x200001d4

08004b54 <_isatty_r>:
 8004b54:	2300      	movs	r3, #0
 8004b56:	b570      	push	{r4, r5, r6, lr}
 8004b58:	4d06      	ldr	r5, [pc, #24]	; (8004b74 <_isatty_r+0x20>)
 8004b5a:	0004      	movs	r4, r0
 8004b5c:	0008      	movs	r0, r1
 8004b5e:	602b      	str	r3, [r5, #0]
 8004b60:	f7fc fe4c 	bl	80017fc <_isatty>
 8004b64:	1c43      	adds	r3, r0, #1
 8004b66:	d103      	bne.n	8004b70 <_isatty_r+0x1c>
 8004b68:	682b      	ldr	r3, [r5, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d000      	beq.n	8004b70 <_isatty_r+0x1c>
 8004b6e:	6023      	str	r3, [r4, #0]
 8004b70:	bd70      	pop	{r4, r5, r6, pc}
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	200001d4 	.word	0x200001d4

08004b78 <_lseek_r>:
 8004b78:	b570      	push	{r4, r5, r6, lr}
 8004b7a:	0004      	movs	r4, r0
 8004b7c:	0008      	movs	r0, r1
 8004b7e:	0011      	movs	r1, r2
 8004b80:	001a      	movs	r2, r3
 8004b82:	2300      	movs	r3, #0
 8004b84:	4d05      	ldr	r5, [pc, #20]	; (8004b9c <_lseek_r+0x24>)
 8004b86:	602b      	str	r3, [r5, #0]
 8004b88:	f7fc fe41 	bl	800180e <_lseek>
 8004b8c:	1c43      	adds	r3, r0, #1
 8004b8e:	d103      	bne.n	8004b98 <_lseek_r+0x20>
 8004b90:	682b      	ldr	r3, [r5, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d000      	beq.n	8004b98 <_lseek_r+0x20>
 8004b96:	6023      	str	r3, [r4, #0]
 8004b98:	bd70      	pop	{r4, r5, r6, pc}
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	200001d4 	.word	0x200001d4

08004ba0 <_read_r>:
 8004ba0:	b570      	push	{r4, r5, r6, lr}
 8004ba2:	0004      	movs	r4, r0
 8004ba4:	0008      	movs	r0, r1
 8004ba6:	0011      	movs	r1, r2
 8004ba8:	001a      	movs	r2, r3
 8004baa:	2300      	movs	r3, #0
 8004bac:	4d05      	ldr	r5, [pc, #20]	; (8004bc4 <_read_r+0x24>)
 8004bae:	602b      	str	r3, [r5, #0]
 8004bb0:	f7fc fdd3 	bl	800175a <_read>
 8004bb4:	1c43      	adds	r3, r0, #1
 8004bb6:	d103      	bne.n	8004bc0 <_read_r+0x20>
 8004bb8:	682b      	ldr	r3, [r5, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d000      	beq.n	8004bc0 <_read_r+0x20>
 8004bbe:	6023      	str	r3, [r4, #0]
 8004bc0:	bd70      	pop	{r4, r5, r6, pc}
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	200001d4 	.word	0x200001d4

08004bc8 <_init>:
 8004bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bce:	bc08      	pop	{r3}
 8004bd0:	469e      	mov	lr, r3
 8004bd2:	4770      	bx	lr

08004bd4 <_fini>:
 8004bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bda:	bc08      	pop	{r3}
 8004bdc:	469e      	mov	lr, r3
 8004bde:	4770      	bx	lr
