
robot_biere.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005200  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  080052b8  080052b8  000152b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005998  08005998  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005998  08005998  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005998  08005998  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005998  08005998  00015998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800599c  0800599c  0001599c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080059a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000070  08005a10  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08005a10  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010065  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025ea  00000000  00000000  000300fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  000326e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  00033460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003631  00000000  00000000  000340c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b67  00000000  00000000  000376f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f6b4  00000000  00000000  00049258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d890c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d0  00000000  00000000  000d895c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080052a0 	.word	0x080052a0

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	080052a0 	.word	0x080052a0

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_d2uiz>:
 80003ec:	b570      	push	{r4, r5, r6, lr}
 80003ee:	2200      	movs	r2, #0
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <__aeabi_d2uiz+0x38>)
 80003f2:	0004      	movs	r4, r0
 80003f4:	000d      	movs	r5, r1
 80003f6:	f000 ff51 	bl	800129c <__aeabi_dcmpge>
 80003fa:	2800      	cmp	r0, #0
 80003fc:	d104      	bne.n	8000408 <__aeabi_d2uiz+0x1c>
 80003fe:	0020      	movs	r0, r4
 8000400:	0029      	movs	r1, r5
 8000402:	f000 fe99 	bl	8001138 <__aeabi_d2iz>
 8000406:	bd70      	pop	{r4, r5, r6, pc}
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <__aeabi_d2uiz+0x38>)
 800040a:	2200      	movs	r2, #0
 800040c:	0020      	movs	r0, r4
 800040e:	0029      	movs	r1, r5
 8000410:	f000 fb00 	bl	8000a14 <__aeabi_dsub>
 8000414:	f000 fe90 	bl	8001138 <__aeabi_d2iz>
 8000418:	2380      	movs	r3, #128	; 0x80
 800041a:	061b      	lsls	r3, r3, #24
 800041c:	469c      	mov	ip, r3
 800041e:	4460      	add	r0, ip
 8000420:	e7f1      	b.n	8000406 <__aeabi_d2uiz+0x1a>
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	41e00000 	.word	0x41e00000

08000428 <__aeabi_ddiv>:
 8000428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800042a:	4657      	mov	r7, sl
 800042c:	464e      	mov	r6, r9
 800042e:	4645      	mov	r5, r8
 8000430:	46de      	mov	lr, fp
 8000432:	b5e0      	push	{r5, r6, r7, lr}
 8000434:	4681      	mov	r9, r0
 8000436:	0005      	movs	r5, r0
 8000438:	030c      	lsls	r4, r1, #12
 800043a:	0048      	lsls	r0, r1, #1
 800043c:	4692      	mov	sl, r2
 800043e:	001f      	movs	r7, r3
 8000440:	b085      	sub	sp, #20
 8000442:	0b24      	lsrs	r4, r4, #12
 8000444:	0d40      	lsrs	r0, r0, #21
 8000446:	0fce      	lsrs	r6, r1, #31
 8000448:	2800      	cmp	r0, #0
 800044a:	d100      	bne.n	800044e <__aeabi_ddiv+0x26>
 800044c:	e156      	b.n	80006fc <__aeabi_ddiv+0x2d4>
 800044e:	4bd4      	ldr	r3, [pc, #848]	; (80007a0 <__aeabi_ddiv+0x378>)
 8000450:	4298      	cmp	r0, r3
 8000452:	d100      	bne.n	8000456 <__aeabi_ddiv+0x2e>
 8000454:	e172      	b.n	800073c <__aeabi_ddiv+0x314>
 8000456:	0f6b      	lsrs	r3, r5, #29
 8000458:	00e4      	lsls	r4, r4, #3
 800045a:	431c      	orrs	r4, r3
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	041b      	lsls	r3, r3, #16
 8000460:	4323      	orrs	r3, r4
 8000462:	4698      	mov	r8, r3
 8000464:	4bcf      	ldr	r3, [pc, #828]	; (80007a4 <__aeabi_ddiv+0x37c>)
 8000466:	00ed      	lsls	r5, r5, #3
 8000468:	469b      	mov	fp, r3
 800046a:	2300      	movs	r3, #0
 800046c:	4699      	mov	r9, r3
 800046e:	4483      	add	fp, r0
 8000470:	9300      	str	r3, [sp, #0]
 8000472:	033c      	lsls	r4, r7, #12
 8000474:	007b      	lsls	r3, r7, #1
 8000476:	4650      	mov	r0, sl
 8000478:	0b24      	lsrs	r4, r4, #12
 800047a:	0d5b      	lsrs	r3, r3, #21
 800047c:	0fff      	lsrs	r7, r7, #31
 800047e:	2b00      	cmp	r3, #0
 8000480:	d100      	bne.n	8000484 <__aeabi_ddiv+0x5c>
 8000482:	e11f      	b.n	80006c4 <__aeabi_ddiv+0x29c>
 8000484:	4ac6      	ldr	r2, [pc, #792]	; (80007a0 <__aeabi_ddiv+0x378>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d100      	bne.n	800048c <__aeabi_ddiv+0x64>
 800048a:	e162      	b.n	8000752 <__aeabi_ddiv+0x32a>
 800048c:	49c5      	ldr	r1, [pc, #788]	; (80007a4 <__aeabi_ddiv+0x37c>)
 800048e:	0f42      	lsrs	r2, r0, #29
 8000490:	468c      	mov	ip, r1
 8000492:	00e4      	lsls	r4, r4, #3
 8000494:	4659      	mov	r1, fp
 8000496:	4314      	orrs	r4, r2
 8000498:	2280      	movs	r2, #128	; 0x80
 800049a:	4463      	add	r3, ip
 800049c:	0412      	lsls	r2, r2, #16
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	4314      	orrs	r4, r2
 80004a2:	469b      	mov	fp, r3
 80004a4:	00c2      	lsls	r2, r0, #3
 80004a6:	2000      	movs	r0, #0
 80004a8:	0033      	movs	r3, r6
 80004aa:	407b      	eors	r3, r7
 80004ac:	469a      	mov	sl, r3
 80004ae:	464b      	mov	r3, r9
 80004b0:	2b0f      	cmp	r3, #15
 80004b2:	d827      	bhi.n	8000504 <__aeabi_ddiv+0xdc>
 80004b4:	49bc      	ldr	r1, [pc, #752]	; (80007a8 <__aeabi_ddiv+0x380>)
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	58cb      	ldr	r3, [r1, r3]
 80004ba:	469f      	mov	pc, r3
 80004bc:	46b2      	mov	sl, r6
 80004be:	9b00      	ldr	r3, [sp, #0]
 80004c0:	2b02      	cmp	r3, #2
 80004c2:	d016      	beq.n	80004f2 <__aeabi_ddiv+0xca>
 80004c4:	2b03      	cmp	r3, #3
 80004c6:	d100      	bne.n	80004ca <__aeabi_ddiv+0xa2>
 80004c8:	e28e      	b.n	80009e8 <__aeabi_ddiv+0x5c0>
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d000      	beq.n	80004d0 <__aeabi_ddiv+0xa8>
 80004ce:	e0d9      	b.n	8000684 <__aeabi_ddiv+0x25c>
 80004d0:	2300      	movs	r3, #0
 80004d2:	2400      	movs	r4, #0
 80004d4:	2500      	movs	r5, #0
 80004d6:	4652      	mov	r2, sl
 80004d8:	051b      	lsls	r3, r3, #20
 80004da:	4323      	orrs	r3, r4
 80004dc:	07d2      	lsls	r2, r2, #31
 80004de:	4313      	orrs	r3, r2
 80004e0:	0028      	movs	r0, r5
 80004e2:	0019      	movs	r1, r3
 80004e4:	b005      	add	sp, #20
 80004e6:	bcf0      	pop	{r4, r5, r6, r7}
 80004e8:	46bb      	mov	fp, r7
 80004ea:	46b2      	mov	sl, r6
 80004ec:	46a9      	mov	r9, r5
 80004ee:	46a0      	mov	r8, r4
 80004f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f2:	2400      	movs	r4, #0
 80004f4:	2500      	movs	r5, #0
 80004f6:	4baa      	ldr	r3, [pc, #680]	; (80007a0 <__aeabi_ddiv+0x378>)
 80004f8:	e7ed      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80004fa:	46ba      	mov	sl, r7
 80004fc:	46a0      	mov	r8, r4
 80004fe:	0015      	movs	r5, r2
 8000500:	9000      	str	r0, [sp, #0]
 8000502:	e7dc      	b.n	80004be <__aeabi_ddiv+0x96>
 8000504:	4544      	cmp	r4, r8
 8000506:	d200      	bcs.n	800050a <__aeabi_ddiv+0xe2>
 8000508:	e1c7      	b.n	800089a <__aeabi_ddiv+0x472>
 800050a:	d100      	bne.n	800050e <__aeabi_ddiv+0xe6>
 800050c:	e1c2      	b.n	8000894 <__aeabi_ddiv+0x46c>
 800050e:	2301      	movs	r3, #1
 8000510:	425b      	negs	r3, r3
 8000512:	469c      	mov	ip, r3
 8000514:	002e      	movs	r6, r5
 8000516:	4640      	mov	r0, r8
 8000518:	2500      	movs	r5, #0
 800051a:	44e3      	add	fp, ip
 800051c:	0223      	lsls	r3, r4, #8
 800051e:	0e14      	lsrs	r4, r2, #24
 8000520:	431c      	orrs	r4, r3
 8000522:	0c1b      	lsrs	r3, r3, #16
 8000524:	4699      	mov	r9, r3
 8000526:	0423      	lsls	r3, r4, #16
 8000528:	0c1f      	lsrs	r7, r3, #16
 800052a:	0212      	lsls	r2, r2, #8
 800052c:	4649      	mov	r1, r9
 800052e:	9200      	str	r2, [sp, #0]
 8000530:	9701      	str	r7, [sp, #4]
 8000532:	f7ff fe6b 	bl	800020c <__aeabi_uidivmod>
 8000536:	0002      	movs	r2, r0
 8000538:	437a      	muls	r2, r7
 800053a:	040b      	lsls	r3, r1, #16
 800053c:	0c31      	lsrs	r1, r6, #16
 800053e:	4680      	mov	r8, r0
 8000540:	4319      	orrs	r1, r3
 8000542:	428a      	cmp	r2, r1
 8000544:	d907      	bls.n	8000556 <__aeabi_ddiv+0x12e>
 8000546:	2301      	movs	r3, #1
 8000548:	425b      	negs	r3, r3
 800054a:	469c      	mov	ip, r3
 800054c:	1909      	adds	r1, r1, r4
 800054e:	44e0      	add	r8, ip
 8000550:	428c      	cmp	r4, r1
 8000552:	d800      	bhi.n	8000556 <__aeabi_ddiv+0x12e>
 8000554:	e207      	b.n	8000966 <__aeabi_ddiv+0x53e>
 8000556:	1a88      	subs	r0, r1, r2
 8000558:	4649      	mov	r1, r9
 800055a:	f7ff fe57 	bl	800020c <__aeabi_uidivmod>
 800055e:	0409      	lsls	r1, r1, #16
 8000560:	468c      	mov	ip, r1
 8000562:	0431      	lsls	r1, r6, #16
 8000564:	4666      	mov	r6, ip
 8000566:	9a01      	ldr	r2, [sp, #4]
 8000568:	0c09      	lsrs	r1, r1, #16
 800056a:	4342      	muls	r2, r0
 800056c:	0003      	movs	r3, r0
 800056e:	4331      	orrs	r1, r6
 8000570:	428a      	cmp	r2, r1
 8000572:	d904      	bls.n	800057e <__aeabi_ddiv+0x156>
 8000574:	1909      	adds	r1, r1, r4
 8000576:	3b01      	subs	r3, #1
 8000578:	428c      	cmp	r4, r1
 800057a:	d800      	bhi.n	800057e <__aeabi_ddiv+0x156>
 800057c:	e1ed      	b.n	800095a <__aeabi_ddiv+0x532>
 800057e:	1a88      	subs	r0, r1, r2
 8000580:	4642      	mov	r2, r8
 8000582:	0412      	lsls	r2, r2, #16
 8000584:	431a      	orrs	r2, r3
 8000586:	4690      	mov	r8, r2
 8000588:	4641      	mov	r1, r8
 800058a:	9b00      	ldr	r3, [sp, #0]
 800058c:	040e      	lsls	r6, r1, #16
 800058e:	0c1b      	lsrs	r3, r3, #16
 8000590:	001f      	movs	r7, r3
 8000592:	9302      	str	r3, [sp, #8]
 8000594:	9b00      	ldr	r3, [sp, #0]
 8000596:	0c36      	lsrs	r6, r6, #16
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	0c19      	lsrs	r1, r3, #16
 800059c:	000b      	movs	r3, r1
 800059e:	4373      	muls	r3, r6
 80005a0:	0c12      	lsrs	r2, r2, #16
 80005a2:	437e      	muls	r6, r7
 80005a4:	9103      	str	r1, [sp, #12]
 80005a6:	4351      	muls	r1, r2
 80005a8:	437a      	muls	r2, r7
 80005aa:	0c1f      	lsrs	r7, r3, #16
 80005ac:	46bc      	mov	ip, r7
 80005ae:	1876      	adds	r6, r6, r1
 80005b0:	4466      	add	r6, ip
 80005b2:	42b1      	cmp	r1, r6
 80005b4:	d903      	bls.n	80005be <__aeabi_ddiv+0x196>
 80005b6:	2180      	movs	r1, #128	; 0x80
 80005b8:	0249      	lsls	r1, r1, #9
 80005ba:	468c      	mov	ip, r1
 80005bc:	4462      	add	r2, ip
 80005be:	0c31      	lsrs	r1, r6, #16
 80005c0:	188a      	adds	r2, r1, r2
 80005c2:	0431      	lsls	r1, r6, #16
 80005c4:	041e      	lsls	r6, r3, #16
 80005c6:	0c36      	lsrs	r6, r6, #16
 80005c8:	198e      	adds	r6, r1, r6
 80005ca:	4290      	cmp	r0, r2
 80005cc:	d302      	bcc.n	80005d4 <__aeabi_ddiv+0x1ac>
 80005ce:	d112      	bne.n	80005f6 <__aeabi_ddiv+0x1ce>
 80005d0:	42b5      	cmp	r5, r6
 80005d2:	d210      	bcs.n	80005f6 <__aeabi_ddiv+0x1ce>
 80005d4:	4643      	mov	r3, r8
 80005d6:	1e59      	subs	r1, r3, #1
 80005d8:	9b00      	ldr	r3, [sp, #0]
 80005da:	469c      	mov	ip, r3
 80005dc:	4465      	add	r5, ip
 80005de:	001f      	movs	r7, r3
 80005e0:	429d      	cmp	r5, r3
 80005e2:	419b      	sbcs	r3, r3
 80005e4:	425b      	negs	r3, r3
 80005e6:	191b      	adds	r3, r3, r4
 80005e8:	18c0      	adds	r0, r0, r3
 80005ea:	4284      	cmp	r4, r0
 80005ec:	d200      	bcs.n	80005f0 <__aeabi_ddiv+0x1c8>
 80005ee:	e1a0      	b.n	8000932 <__aeabi_ddiv+0x50a>
 80005f0:	d100      	bne.n	80005f4 <__aeabi_ddiv+0x1cc>
 80005f2:	e19b      	b.n	800092c <__aeabi_ddiv+0x504>
 80005f4:	4688      	mov	r8, r1
 80005f6:	1bae      	subs	r6, r5, r6
 80005f8:	42b5      	cmp	r5, r6
 80005fa:	41ad      	sbcs	r5, r5
 80005fc:	1a80      	subs	r0, r0, r2
 80005fe:	426d      	negs	r5, r5
 8000600:	1b40      	subs	r0, r0, r5
 8000602:	4284      	cmp	r4, r0
 8000604:	d100      	bne.n	8000608 <__aeabi_ddiv+0x1e0>
 8000606:	e1d5      	b.n	80009b4 <__aeabi_ddiv+0x58c>
 8000608:	4649      	mov	r1, r9
 800060a:	f7ff fdff 	bl	800020c <__aeabi_uidivmod>
 800060e:	9a01      	ldr	r2, [sp, #4]
 8000610:	040b      	lsls	r3, r1, #16
 8000612:	4342      	muls	r2, r0
 8000614:	0c31      	lsrs	r1, r6, #16
 8000616:	0005      	movs	r5, r0
 8000618:	4319      	orrs	r1, r3
 800061a:	428a      	cmp	r2, r1
 800061c:	d900      	bls.n	8000620 <__aeabi_ddiv+0x1f8>
 800061e:	e16c      	b.n	80008fa <__aeabi_ddiv+0x4d2>
 8000620:	1a88      	subs	r0, r1, r2
 8000622:	4649      	mov	r1, r9
 8000624:	f7ff fdf2 	bl	800020c <__aeabi_uidivmod>
 8000628:	9a01      	ldr	r2, [sp, #4]
 800062a:	0436      	lsls	r6, r6, #16
 800062c:	4342      	muls	r2, r0
 800062e:	0409      	lsls	r1, r1, #16
 8000630:	0c36      	lsrs	r6, r6, #16
 8000632:	0003      	movs	r3, r0
 8000634:	430e      	orrs	r6, r1
 8000636:	42b2      	cmp	r2, r6
 8000638:	d900      	bls.n	800063c <__aeabi_ddiv+0x214>
 800063a:	e153      	b.n	80008e4 <__aeabi_ddiv+0x4bc>
 800063c:	9803      	ldr	r0, [sp, #12]
 800063e:	1ab6      	subs	r6, r6, r2
 8000640:	0002      	movs	r2, r0
 8000642:	042d      	lsls	r5, r5, #16
 8000644:	431d      	orrs	r5, r3
 8000646:	9f02      	ldr	r7, [sp, #8]
 8000648:	042b      	lsls	r3, r5, #16
 800064a:	0c1b      	lsrs	r3, r3, #16
 800064c:	435a      	muls	r2, r3
 800064e:	437b      	muls	r3, r7
 8000650:	469c      	mov	ip, r3
 8000652:	0c29      	lsrs	r1, r5, #16
 8000654:	4348      	muls	r0, r1
 8000656:	0c13      	lsrs	r3, r2, #16
 8000658:	4484      	add	ip, r0
 800065a:	4463      	add	r3, ip
 800065c:	4379      	muls	r1, r7
 800065e:	4298      	cmp	r0, r3
 8000660:	d903      	bls.n	800066a <__aeabi_ddiv+0x242>
 8000662:	2080      	movs	r0, #128	; 0x80
 8000664:	0240      	lsls	r0, r0, #9
 8000666:	4684      	mov	ip, r0
 8000668:	4461      	add	r1, ip
 800066a:	0c18      	lsrs	r0, r3, #16
 800066c:	0412      	lsls	r2, r2, #16
 800066e:	041b      	lsls	r3, r3, #16
 8000670:	0c12      	lsrs	r2, r2, #16
 8000672:	1841      	adds	r1, r0, r1
 8000674:	189b      	adds	r3, r3, r2
 8000676:	428e      	cmp	r6, r1
 8000678:	d200      	bcs.n	800067c <__aeabi_ddiv+0x254>
 800067a:	e0ff      	b.n	800087c <__aeabi_ddiv+0x454>
 800067c:	d100      	bne.n	8000680 <__aeabi_ddiv+0x258>
 800067e:	e0fa      	b.n	8000876 <__aeabi_ddiv+0x44e>
 8000680:	2301      	movs	r3, #1
 8000682:	431d      	orrs	r5, r3
 8000684:	4a49      	ldr	r2, [pc, #292]	; (80007ac <__aeabi_ddiv+0x384>)
 8000686:	445a      	add	r2, fp
 8000688:	2a00      	cmp	r2, #0
 800068a:	dc00      	bgt.n	800068e <__aeabi_ddiv+0x266>
 800068c:	e0aa      	b.n	80007e4 <__aeabi_ddiv+0x3bc>
 800068e:	076b      	lsls	r3, r5, #29
 8000690:	d000      	beq.n	8000694 <__aeabi_ddiv+0x26c>
 8000692:	e13d      	b.n	8000910 <__aeabi_ddiv+0x4e8>
 8000694:	08ed      	lsrs	r5, r5, #3
 8000696:	4643      	mov	r3, r8
 8000698:	01db      	lsls	r3, r3, #7
 800069a:	d506      	bpl.n	80006aa <__aeabi_ddiv+0x282>
 800069c:	4642      	mov	r2, r8
 800069e:	4b44      	ldr	r3, [pc, #272]	; (80007b0 <__aeabi_ddiv+0x388>)
 80006a0:	401a      	ands	r2, r3
 80006a2:	4690      	mov	r8, r2
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	00d2      	lsls	r2, r2, #3
 80006a8:	445a      	add	r2, fp
 80006aa:	4b42      	ldr	r3, [pc, #264]	; (80007b4 <__aeabi_ddiv+0x38c>)
 80006ac:	429a      	cmp	r2, r3
 80006ae:	dd00      	ble.n	80006b2 <__aeabi_ddiv+0x28a>
 80006b0:	e71f      	b.n	80004f2 <__aeabi_ddiv+0xca>
 80006b2:	4643      	mov	r3, r8
 80006b4:	075b      	lsls	r3, r3, #29
 80006b6:	431d      	orrs	r5, r3
 80006b8:	4643      	mov	r3, r8
 80006ba:	0552      	lsls	r2, r2, #21
 80006bc:	025c      	lsls	r4, r3, #9
 80006be:	0b24      	lsrs	r4, r4, #12
 80006c0:	0d53      	lsrs	r3, r2, #21
 80006c2:	e708      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80006c4:	4652      	mov	r2, sl
 80006c6:	4322      	orrs	r2, r4
 80006c8:	d100      	bne.n	80006cc <__aeabi_ddiv+0x2a4>
 80006ca:	e07b      	b.n	80007c4 <__aeabi_ddiv+0x39c>
 80006cc:	2c00      	cmp	r4, #0
 80006ce:	d100      	bne.n	80006d2 <__aeabi_ddiv+0x2aa>
 80006d0:	e0fa      	b.n	80008c8 <__aeabi_ddiv+0x4a0>
 80006d2:	0020      	movs	r0, r4
 80006d4:	f000 fdec 	bl	80012b0 <__clzsi2>
 80006d8:	0002      	movs	r2, r0
 80006da:	3a0b      	subs	r2, #11
 80006dc:	231d      	movs	r3, #29
 80006de:	0001      	movs	r1, r0
 80006e0:	1a9b      	subs	r3, r3, r2
 80006e2:	4652      	mov	r2, sl
 80006e4:	3908      	subs	r1, #8
 80006e6:	40da      	lsrs	r2, r3
 80006e8:	408c      	lsls	r4, r1
 80006ea:	4314      	orrs	r4, r2
 80006ec:	4652      	mov	r2, sl
 80006ee:	408a      	lsls	r2, r1
 80006f0:	4b31      	ldr	r3, [pc, #196]	; (80007b8 <__aeabi_ddiv+0x390>)
 80006f2:	4458      	add	r0, fp
 80006f4:	469b      	mov	fp, r3
 80006f6:	4483      	add	fp, r0
 80006f8:	2000      	movs	r0, #0
 80006fa:	e6d5      	b.n	80004a8 <__aeabi_ddiv+0x80>
 80006fc:	464b      	mov	r3, r9
 80006fe:	4323      	orrs	r3, r4
 8000700:	4698      	mov	r8, r3
 8000702:	d044      	beq.n	800078e <__aeabi_ddiv+0x366>
 8000704:	2c00      	cmp	r4, #0
 8000706:	d100      	bne.n	800070a <__aeabi_ddiv+0x2e2>
 8000708:	e0ce      	b.n	80008a8 <__aeabi_ddiv+0x480>
 800070a:	0020      	movs	r0, r4
 800070c:	f000 fdd0 	bl	80012b0 <__clzsi2>
 8000710:	0001      	movs	r1, r0
 8000712:	0002      	movs	r2, r0
 8000714:	390b      	subs	r1, #11
 8000716:	231d      	movs	r3, #29
 8000718:	1a5b      	subs	r3, r3, r1
 800071a:	4649      	mov	r1, r9
 800071c:	0010      	movs	r0, r2
 800071e:	40d9      	lsrs	r1, r3
 8000720:	3808      	subs	r0, #8
 8000722:	4084      	lsls	r4, r0
 8000724:	000b      	movs	r3, r1
 8000726:	464d      	mov	r5, r9
 8000728:	4323      	orrs	r3, r4
 800072a:	4698      	mov	r8, r3
 800072c:	4085      	lsls	r5, r0
 800072e:	4823      	ldr	r0, [pc, #140]	; (80007bc <__aeabi_ddiv+0x394>)
 8000730:	1a83      	subs	r3, r0, r2
 8000732:	469b      	mov	fp, r3
 8000734:	2300      	movs	r3, #0
 8000736:	4699      	mov	r9, r3
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	e69a      	b.n	8000472 <__aeabi_ddiv+0x4a>
 800073c:	464b      	mov	r3, r9
 800073e:	4323      	orrs	r3, r4
 8000740:	4698      	mov	r8, r3
 8000742:	d11d      	bne.n	8000780 <__aeabi_ddiv+0x358>
 8000744:	2308      	movs	r3, #8
 8000746:	4699      	mov	r9, r3
 8000748:	3b06      	subs	r3, #6
 800074a:	2500      	movs	r5, #0
 800074c:	4683      	mov	fp, r0
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	e68f      	b.n	8000472 <__aeabi_ddiv+0x4a>
 8000752:	4652      	mov	r2, sl
 8000754:	4322      	orrs	r2, r4
 8000756:	d109      	bne.n	800076c <__aeabi_ddiv+0x344>
 8000758:	2302      	movs	r3, #2
 800075a:	4649      	mov	r1, r9
 800075c:	4319      	orrs	r1, r3
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <__aeabi_ddiv+0x398>)
 8000760:	4689      	mov	r9, r1
 8000762:	469c      	mov	ip, r3
 8000764:	2400      	movs	r4, #0
 8000766:	2002      	movs	r0, #2
 8000768:	44e3      	add	fp, ip
 800076a:	e69d      	b.n	80004a8 <__aeabi_ddiv+0x80>
 800076c:	2303      	movs	r3, #3
 800076e:	464a      	mov	r2, r9
 8000770:	431a      	orrs	r2, r3
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <__aeabi_ddiv+0x398>)
 8000774:	4691      	mov	r9, r2
 8000776:	469c      	mov	ip, r3
 8000778:	4652      	mov	r2, sl
 800077a:	2003      	movs	r0, #3
 800077c:	44e3      	add	fp, ip
 800077e:	e693      	b.n	80004a8 <__aeabi_ddiv+0x80>
 8000780:	230c      	movs	r3, #12
 8000782:	4699      	mov	r9, r3
 8000784:	3b09      	subs	r3, #9
 8000786:	46a0      	mov	r8, r4
 8000788:	4683      	mov	fp, r0
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	e671      	b.n	8000472 <__aeabi_ddiv+0x4a>
 800078e:	2304      	movs	r3, #4
 8000790:	4699      	mov	r9, r3
 8000792:	2300      	movs	r3, #0
 8000794:	469b      	mov	fp, r3
 8000796:	3301      	adds	r3, #1
 8000798:	2500      	movs	r5, #0
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	e669      	b.n	8000472 <__aeabi_ddiv+0x4a>
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	000007ff 	.word	0x000007ff
 80007a4:	fffffc01 	.word	0xfffffc01
 80007a8:	0800586c 	.word	0x0800586c
 80007ac:	000003ff 	.word	0x000003ff
 80007b0:	feffffff 	.word	0xfeffffff
 80007b4:	000007fe 	.word	0x000007fe
 80007b8:	000003f3 	.word	0x000003f3
 80007bc:	fffffc0d 	.word	0xfffffc0d
 80007c0:	fffff801 	.word	0xfffff801
 80007c4:	4649      	mov	r1, r9
 80007c6:	2301      	movs	r3, #1
 80007c8:	4319      	orrs	r1, r3
 80007ca:	4689      	mov	r9, r1
 80007cc:	2400      	movs	r4, #0
 80007ce:	2001      	movs	r0, #1
 80007d0:	e66a      	b.n	80004a8 <__aeabi_ddiv+0x80>
 80007d2:	2300      	movs	r3, #0
 80007d4:	2480      	movs	r4, #128	; 0x80
 80007d6:	469a      	mov	sl, r3
 80007d8:	2500      	movs	r5, #0
 80007da:	4b8a      	ldr	r3, [pc, #552]	; (8000a04 <__aeabi_ddiv+0x5dc>)
 80007dc:	0324      	lsls	r4, r4, #12
 80007de:	e67a      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80007e0:	2501      	movs	r5, #1
 80007e2:	426d      	negs	r5, r5
 80007e4:	2301      	movs	r3, #1
 80007e6:	1a9b      	subs	r3, r3, r2
 80007e8:	2b38      	cmp	r3, #56	; 0x38
 80007ea:	dd00      	ble.n	80007ee <__aeabi_ddiv+0x3c6>
 80007ec:	e670      	b.n	80004d0 <__aeabi_ddiv+0xa8>
 80007ee:	2b1f      	cmp	r3, #31
 80007f0:	dc00      	bgt.n	80007f4 <__aeabi_ddiv+0x3cc>
 80007f2:	e0bf      	b.n	8000974 <__aeabi_ddiv+0x54c>
 80007f4:	211f      	movs	r1, #31
 80007f6:	4249      	negs	r1, r1
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	4641      	mov	r1, r8
 80007fc:	40d1      	lsrs	r1, r2
 80007fe:	000a      	movs	r2, r1
 8000800:	2b20      	cmp	r3, #32
 8000802:	d004      	beq.n	800080e <__aeabi_ddiv+0x3e6>
 8000804:	4641      	mov	r1, r8
 8000806:	4b80      	ldr	r3, [pc, #512]	; (8000a08 <__aeabi_ddiv+0x5e0>)
 8000808:	445b      	add	r3, fp
 800080a:	4099      	lsls	r1, r3
 800080c:	430d      	orrs	r5, r1
 800080e:	1e6b      	subs	r3, r5, #1
 8000810:	419d      	sbcs	r5, r3
 8000812:	2307      	movs	r3, #7
 8000814:	432a      	orrs	r2, r5
 8000816:	001d      	movs	r5, r3
 8000818:	2400      	movs	r4, #0
 800081a:	4015      	ands	r5, r2
 800081c:	4213      	tst	r3, r2
 800081e:	d100      	bne.n	8000822 <__aeabi_ddiv+0x3fa>
 8000820:	e0d4      	b.n	80009cc <__aeabi_ddiv+0x5a4>
 8000822:	210f      	movs	r1, #15
 8000824:	2300      	movs	r3, #0
 8000826:	4011      	ands	r1, r2
 8000828:	2904      	cmp	r1, #4
 800082a:	d100      	bne.n	800082e <__aeabi_ddiv+0x406>
 800082c:	e0cb      	b.n	80009c6 <__aeabi_ddiv+0x59e>
 800082e:	1d11      	adds	r1, r2, #4
 8000830:	4291      	cmp	r1, r2
 8000832:	4192      	sbcs	r2, r2
 8000834:	4252      	negs	r2, r2
 8000836:	189b      	adds	r3, r3, r2
 8000838:	000a      	movs	r2, r1
 800083a:	0219      	lsls	r1, r3, #8
 800083c:	d400      	bmi.n	8000840 <__aeabi_ddiv+0x418>
 800083e:	e0c2      	b.n	80009c6 <__aeabi_ddiv+0x59e>
 8000840:	2301      	movs	r3, #1
 8000842:	2400      	movs	r4, #0
 8000844:	2500      	movs	r5, #0
 8000846:	e646      	b.n	80004d6 <__aeabi_ddiv+0xae>
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	4641      	mov	r1, r8
 800084c:	031b      	lsls	r3, r3, #12
 800084e:	4219      	tst	r1, r3
 8000850:	d008      	beq.n	8000864 <__aeabi_ddiv+0x43c>
 8000852:	421c      	tst	r4, r3
 8000854:	d106      	bne.n	8000864 <__aeabi_ddiv+0x43c>
 8000856:	431c      	orrs	r4, r3
 8000858:	0324      	lsls	r4, r4, #12
 800085a:	46ba      	mov	sl, r7
 800085c:	0015      	movs	r5, r2
 800085e:	4b69      	ldr	r3, [pc, #420]	; (8000a04 <__aeabi_ddiv+0x5dc>)
 8000860:	0b24      	lsrs	r4, r4, #12
 8000862:	e638      	b.n	80004d6 <__aeabi_ddiv+0xae>
 8000864:	2480      	movs	r4, #128	; 0x80
 8000866:	4643      	mov	r3, r8
 8000868:	0324      	lsls	r4, r4, #12
 800086a:	431c      	orrs	r4, r3
 800086c:	0324      	lsls	r4, r4, #12
 800086e:	46b2      	mov	sl, r6
 8000870:	4b64      	ldr	r3, [pc, #400]	; (8000a04 <__aeabi_ddiv+0x5dc>)
 8000872:	0b24      	lsrs	r4, r4, #12
 8000874:	e62f      	b.n	80004d6 <__aeabi_ddiv+0xae>
 8000876:	2b00      	cmp	r3, #0
 8000878:	d100      	bne.n	800087c <__aeabi_ddiv+0x454>
 800087a:	e703      	b.n	8000684 <__aeabi_ddiv+0x25c>
 800087c:	19a6      	adds	r6, r4, r6
 800087e:	1e68      	subs	r0, r5, #1
 8000880:	42a6      	cmp	r6, r4
 8000882:	d200      	bcs.n	8000886 <__aeabi_ddiv+0x45e>
 8000884:	e08d      	b.n	80009a2 <__aeabi_ddiv+0x57a>
 8000886:	428e      	cmp	r6, r1
 8000888:	d200      	bcs.n	800088c <__aeabi_ddiv+0x464>
 800088a:	e0a3      	b.n	80009d4 <__aeabi_ddiv+0x5ac>
 800088c:	d100      	bne.n	8000890 <__aeabi_ddiv+0x468>
 800088e:	e0b3      	b.n	80009f8 <__aeabi_ddiv+0x5d0>
 8000890:	0005      	movs	r5, r0
 8000892:	e6f5      	b.n	8000680 <__aeabi_ddiv+0x258>
 8000894:	42aa      	cmp	r2, r5
 8000896:	d900      	bls.n	800089a <__aeabi_ddiv+0x472>
 8000898:	e639      	b.n	800050e <__aeabi_ddiv+0xe6>
 800089a:	4643      	mov	r3, r8
 800089c:	07de      	lsls	r6, r3, #31
 800089e:	0858      	lsrs	r0, r3, #1
 80008a0:	086b      	lsrs	r3, r5, #1
 80008a2:	431e      	orrs	r6, r3
 80008a4:	07ed      	lsls	r5, r5, #31
 80008a6:	e639      	b.n	800051c <__aeabi_ddiv+0xf4>
 80008a8:	4648      	mov	r0, r9
 80008aa:	f000 fd01 	bl	80012b0 <__clzsi2>
 80008ae:	0001      	movs	r1, r0
 80008b0:	0002      	movs	r2, r0
 80008b2:	3115      	adds	r1, #21
 80008b4:	3220      	adds	r2, #32
 80008b6:	291c      	cmp	r1, #28
 80008b8:	dc00      	bgt.n	80008bc <__aeabi_ddiv+0x494>
 80008ba:	e72c      	b.n	8000716 <__aeabi_ddiv+0x2ee>
 80008bc:	464b      	mov	r3, r9
 80008be:	3808      	subs	r0, #8
 80008c0:	4083      	lsls	r3, r0
 80008c2:	2500      	movs	r5, #0
 80008c4:	4698      	mov	r8, r3
 80008c6:	e732      	b.n	800072e <__aeabi_ddiv+0x306>
 80008c8:	f000 fcf2 	bl	80012b0 <__clzsi2>
 80008cc:	0003      	movs	r3, r0
 80008ce:	001a      	movs	r2, r3
 80008d0:	3215      	adds	r2, #21
 80008d2:	3020      	adds	r0, #32
 80008d4:	2a1c      	cmp	r2, #28
 80008d6:	dc00      	bgt.n	80008da <__aeabi_ddiv+0x4b2>
 80008d8:	e700      	b.n	80006dc <__aeabi_ddiv+0x2b4>
 80008da:	4654      	mov	r4, sl
 80008dc:	3b08      	subs	r3, #8
 80008de:	2200      	movs	r2, #0
 80008e0:	409c      	lsls	r4, r3
 80008e2:	e705      	b.n	80006f0 <__aeabi_ddiv+0x2c8>
 80008e4:	1936      	adds	r6, r6, r4
 80008e6:	3b01      	subs	r3, #1
 80008e8:	42b4      	cmp	r4, r6
 80008ea:	d900      	bls.n	80008ee <__aeabi_ddiv+0x4c6>
 80008ec:	e6a6      	b.n	800063c <__aeabi_ddiv+0x214>
 80008ee:	42b2      	cmp	r2, r6
 80008f0:	d800      	bhi.n	80008f4 <__aeabi_ddiv+0x4cc>
 80008f2:	e6a3      	b.n	800063c <__aeabi_ddiv+0x214>
 80008f4:	1e83      	subs	r3, r0, #2
 80008f6:	1936      	adds	r6, r6, r4
 80008f8:	e6a0      	b.n	800063c <__aeabi_ddiv+0x214>
 80008fa:	1909      	adds	r1, r1, r4
 80008fc:	3d01      	subs	r5, #1
 80008fe:	428c      	cmp	r4, r1
 8000900:	d900      	bls.n	8000904 <__aeabi_ddiv+0x4dc>
 8000902:	e68d      	b.n	8000620 <__aeabi_ddiv+0x1f8>
 8000904:	428a      	cmp	r2, r1
 8000906:	d800      	bhi.n	800090a <__aeabi_ddiv+0x4e2>
 8000908:	e68a      	b.n	8000620 <__aeabi_ddiv+0x1f8>
 800090a:	1e85      	subs	r5, r0, #2
 800090c:	1909      	adds	r1, r1, r4
 800090e:	e687      	b.n	8000620 <__aeabi_ddiv+0x1f8>
 8000910:	230f      	movs	r3, #15
 8000912:	402b      	ands	r3, r5
 8000914:	2b04      	cmp	r3, #4
 8000916:	d100      	bne.n	800091a <__aeabi_ddiv+0x4f2>
 8000918:	e6bc      	b.n	8000694 <__aeabi_ddiv+0x26c>
 800091a:	2305      	movs	r3, #5
 800091c:	425b      	negs	r3, r3
 800091e:	42ab      	cmp	r3, r5
 8000920:	419b      	sbcs	r3, r3
 8000922:	3504      	adds	r5, #4
 8000924:	425b      	negs	r3, r3
 8000926:	08ed      	lsrs	r5, r5, #3
 8000928:	4498      	add	r8, r3
 800092a:	e6b4      	b.n	8000696 <__aeabi_ddiv+0x26e>
 800092c:	42af      	cmp	r7, r5
 800092e:	d900      	bls.n	8000932 <__aeabi_ddiv+0x50a>
 8000930:	e660      	b.n	80005f4 <__aeabi_ddiv+0x1cc>
 8000932:	4282      	cmp	r2, r0
 8000934:	d804      	bhi.n	8000940 <__aeabi_ddiv+0x518>
 8000936:	d000      	beq.n	800093a <__aeabi_ddiv+0x512>
 8000938:	e65c      	b.n	80005f4 <__aeabi_ddiv+0x1cc>
 800093a:	42ae      	cmp	r6, r5
 800093c:	d800      	bhi.n	8000940 <__aeabi_ddiv+0x518>
 800093e:	e659      	b.n	80005f4 <__aeabi_ddiv+0x1cc>
 8000940:	2302      	movs	r3, #2
 8000942:	425b      	negs	r3, r3
 8000944:	469c      	mov	ip, r3
 8000946:	9b00      	ldr	r3, [sp, #0]
 8000948:	44e0      	add	r8, ip
 800094a:	469c      	mov	ip, r3
 800094c:	4465      	add	r5, ip
 800094e:	429d      	cmp	r5, r3
 8000950:	419b      	sbcs	r3, r3
 8000952:	425b      	negs	r3, r3
 8000954:	191b      	adds	r3, r3, r4
 8000956:	18c0      	adds	r0, r0, r3
 8000958:	e64d      	b.n	80005f6 <__aeabi_ddiv+0x1ce>
 800095a:	428a      	cmp	r2, r1
 800095c:	d800      	bhi.n	8000960 <__aeabi_ddiv+0x538>
 800095e:	e60e      	b.n	800057e <__aeabi_ddiv+0x156>
 8000960:	1e83      	subs	r3, r0, #2
 8000962:	1909      	adds	r1, r1, r4
 8000964:	e60b      	b.n	800057e <__aeabi_ddiv+0x156>
 8000966:	428a      	cmp	r2, r1
 8000968:	d800      	bhi.n	800096c <__aeabi_ddiv+0x544>
 800096a:	e5f4      	b.n	8000556 <__aeabi_ddiv+0x12e>
 800096c:	1e83      	subs	r3, r0, #2
 800096e:	4698      	mov	r8, r3
 8000970:	1909      	adds	r1, r1, r4
 8000972:	e5f0      	b.n	8000556 <__aeabi_ddiv+0x12e>
 8000974:	4925      	ldr	r1, [pc, #148]	; (8000a0c <__aeabi_ddiv+0x5e4>)
 8000976:	0028      	movs	r0, r5
 8000978:	4459      	add	r1, fp
 800097a:	408d      	lsls	r5, r1
 800097c:	4642      	mov	r2, r8
 800097e:	408a      	lsls	r2, r1
 8000980:	1e69      	subs	r1, r5, #1
 8000982:	418d      	sbcs	r5, r1
 8000984:	4641      	mov	r1, r8
 8000986:	40d8      	lsrs	r0, r3
 8000988:	40d9      	lsrs	r1, r3
 800098a:	4302      	orrs	r2, r0
 800098c:	432a      	orrs	r2, r5
 800098e:	000b      	movs	r3, r1
 8000990:	0751      	lsls	r1, r2, #29
 8000992:	d100      	bne.n	8000996 <__aeabi_ddiv+0x56e>
 8000994:	e751      	b.n	800083a <__aeabi_ddiv+0x412>
 8000996:	210f      	movs	r1, #15
 8000998:	4011      	ands	r1, r2
 800099a:	2904      	cmp	r1, #4
 800099c:	d000      	beq.n	80009a0 <__aeabi_ddiv+0x578>
 800099e:	e746      	b.n	800082e <__aeabi_ddiv+0x406>
 80009a0:	e74b      	b.n	800083a <__aeabi_ddiv+0x412>
 80009a2:	0005      	movs	r5, r0
 80009a4:	428e      	cmp	r6, r1
 80009a6:	d000      	beq.n	80009aa <__aeabi_ddiv+0x582>
 80009a8:	e66a      	b.n	8000680 <__aeabi_ddiv+0x258>
 80009aa:	9a00      	ldr	r2, [sp, #0]
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d000      	beq.n	80009b2 <__aeabi_ddiv+0x58a>
 80009b0:	e666      	b.n	8000680 <__aeabi_ddiv+0x258>
 80009b2:	e667      	b.n	8000684 <__aeabi_ddiv+0x25c>
 80009b4:	4a16      	ldr	r2, [pc, #88]	; (8000a10 <__aeabi_ddiv+0x5e8>)
 80009b6:	445a      	add	r2, fp
 80009b8:	2a00      	cmp	r2, #0
 80009ba:	dc00      	bgt.n	80009be <__aeabi_ddiv+0x596>
 80009bc:	e710      	b.n	80007e0 <__aeabi_ddiv+0x3b8>
 80009be:	2301      	movs	r3, #1
 80009c0:	2500      	movs	r5, #0
 80009c2:	4498      	add	r8, r3
 80009c4:	e667      	b.n	8000696 <__aeabi_ddiv+0x26e>
 80009c6:	075d      	lsls	r5, r3, #29
 80009c8:	025b      	lsls	r3, r3, #9
 80009ca:	0b1c      	lsrs	r4, r3, #12
 80009cc:	08d2      	lsrs	r2, r2, #3
 80009ce:	2300      	movs	r3, #0
 80009d0:	4315      	orrs	r5, r2
 80009d2:	e580      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80009d4:	9800      	ldr	r0, [sp, #0]
 80009d6:	3d02      	subs	r5, #2
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	4282      	cmp	r2, r0
 80009dc:	41bf      	sbcs	r7, r7
 80009de:	427f      	negs	r7, r7
 80009e0:	193c      	adds	r4, r7, r4
 80009e2:	1936      	adds	r6, r6, r4
 80009e4:	9200      	str	r2, [sp, #0]
 80009e6:	e7dd      	b.n	80009a4 <__aeabi_ddiv+0x57c>
 80009e8:	2480      	movs	r4, #128	; 0x80
 80009ea:	4643      	mov	r3, r8
 80009ec:	0324      	lsls	r4, r4, #12
 80009ee:	431c      	orrs	r4, r3
 80009f0:	0324      	lsls	r4, r4, #12
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <__aeabi_ddiv+0x5dc>)
 80009f4:	0b24      	lsrs	r4, r4, #12
 80009f6:	e56e      	b.n	80004d6 <__aeabi_ddiv+0xae>
 80009f8:	9a00      	ldr	r2, [sp, #0]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d3ea      	bcc.n	80009d4 <__aeabi_ddiv+0x5ac>
 80009fe:	0005      	movs	r5, r0
 8000a00:	e7d3      	b.n	80009aa <__aeabi_ddiv+0x582>
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	000007ff 	.word	0x000007ff
 8000a08:	0000043e 	.word	0x0000043e
 8000a0c:	0000041e 	.word	0x0000041e
 8000a10:	000003ff 	.word	0x000003ff

08000a14 <__aeabi_dsub>:
 8000a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a16:	4657      	mov	r7, sl
 8000a18:	464e      	mov	r6, r9
 8000a1a:	4645      	mov	r5, r8
 8000a1c:	46de      	mov	lr, fp
 8000a1e:	b5e0      	push	{r5, r6, r7, lr}
 8000a20:	001e      	movs	r6, r3
 8000a22:	0017      	movs	r7, r2
 8000a24:	004a      	lsls	r2, r1, #1
 8000a26:	030b      	lsls	r3, r1, #12
 8000a28:	0d52      	lsrs	r2, r2, #21
 8000a2a:	0a5b      	lsrs	r3, r3, #9
 8000a2c:	4690      	mov	r8, r2
 8000a2e:	0f42      	lsrs	r2, r0, #29
 8000a30:	431a      	orrs	r2, r3
 8000a32:	0fcd      	lsrs	r5, r1, #31
 8000a34:	4ccd      	ldr	r4, [pc, #820]	; (8000d6c <__aeabi_dsub+0x358>)
 8000a36:	0331      	lsls	r1, r6, #12
 8000a38:	00c3      	lsls	r3, r0, #3
 8000a3a:	4694      	mov	ip, r2
 8000a3c:	0070      	lsls	r0, r6, #1
 8000a3e:	0f7a      	lsrs	r2, r7, #29
 8000a40:	0a49      	lsrs	r1, r1, #9
 8000a42:	00ff      	lsls	r7, r7, #3
 8000a44:	469a      	mov	sl, r3
 8000a46:	46b9      	mov	r9, r7
 8000a48:	0d40      	lsrs	r0, r0, #21
 8000a4a:	0ff6      	lsrs	r6, r6, #31
 8000a4c:	4311      	orrs	r1, r2
 8000a4e:	42a0      	cmp	r0, r4
 8000a50:	d100      	bne.n	8000a54 <__aeabi_dsub+0x40>
 8000a52:	e0b1      	b.n	8000bb8 <__aeabi_dsub+0x1a4>
 8000a54:	2201      	movs	r2, #1
 8000a56:	4056      	eors	r6, r2
 8000a58:	46b3      	mov	fp, r6
 8000a5a:	42b5      	cmp	r5, r6
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_dsub+0x4c>
 8000a5e:	e088      	b.n	8000b72 <__aeabi_dsub+0x15e>
 8000a60:	4642      	mov	r2, r8
 8000a62:	1a12      	subs	r2, r2, r0
 8000a64:	2a00      	cmp	r2, #0
 8000a66:	dc00      	bgt.n	8000a6a <__aeabi_dsub+0x56>
 8000a68:	e0ae      	b.n	8000bc8 <__aeabi_dsub+0x1b4>
 8000a6a:	2800      	cmp	r0, #0
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_dsub+0x5c>
 8000a6e:	e0c1      	b.n	8000bf4 <__aeabi_dsub+0x1e0>
 8000a70:	48be      	ldr	r0, [pc, #760]	; (8000d6c <__aeabi_dsub+0x358>)
 8000a72:	4580      	cmp	r8, r0
 8000a74:	d100      	bne.n	8000a78 <__aeabi_dsub+0x64>
 8000a76:	e151      	b.n	8000d1c <__aeabi_dsub+0x308>
 8000a78:	2080      	movs	r0, #128	; 0x80
 8000a7a:	0400      	lsls	r0, r0, #16
 8000a7c:	4301      	orrs	r1, r0
 8000a7e:	2a38      	cmp	r2, #56	; 0x38
 8000a80:	dd00      	ble.n	8000a84 <__aeabi_dsub+0x70>
 8000a82:	e17b      	b.n	8000d7c <__aeabi_dsub+0x368>
 8000a84:	2a1f      	cmp	r2, #31
 8000a86:	dd00      	ble.n	8000a8a <__aeabi_dsub+0x76>
 8000a88:	e1ee      	b.n	8000e68 <__aeabi_dsub+0x454>
 8000a8a:	2020      	movs	r0, #32
 8000a8c:	003e      	movs	r6, r7
 8000a8e:	1a80      	subs	r0, r0, r2
 8000a90:	000c      	movs	r4, r1
 8000a92:	40d6      	lsrs	r6, r2
 8000a94:	40d1      	lsrs	r1, r2
 8000a96:	4087      	lsls	r7, r0
 8000a98:	4662      	mov	r2, ip
 8000a9a:	4084      	lsls	r4, r0
 8000a9c:	1a52      	subs	r2, r2, r1
 8000a9e:	1e78      	subs	r0, r7, #1
 8000aa0:	4187      	sbcs	r7, r0
 8000aa2:	4694      	mov	ip, r2
 8000aa4:	4334      	orrs	r4, r6
 8000aa6:	4327      	orrs	r7, r4
 8000aa8:	1bdc      	subs	r4, r3, r7
 8000aaa:	42a3      	cmp	r3, r4
 8000aac:	419b      	sbcs	r3, r3
 8000aae:	4662      	mov	r2, ip
 8000ab0:	425b      	negs	r3, r3
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	4699      	mov	r9, r3
 8000ab6:	464b      	mov	r3, r9
 8000ab8:	021b      	lsls	r3, r3, #8
 8000aba:	d400      	bmi.n	8000abe <__aeabi_dsub+0xaa>
 8000abc:	e118      	b.n	8000cf0 <__aeabi_dsub+0x2dc>
 8000abe:	464b      	mov	r3, r9
 8000ac0:	0258      	lsls	r0, r3, #9
 8000ac2:	0a43      	lsrs	r3, r0, #9
 8000ac4:	4699      	mov	r9, r3
 8000ac6:	464b      	mov	r3, r9
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d100      	bne.n	8000ace <__aeabi_dsub+0xba>
 8000acc:	e137      	b.n	8000d3e <__aeabi_dsub+0x32a>
 8000ace:	4648      	mov	r0, r9
 8000ad0:	f000 fbee 	bl	80012b0 <__clzsi2>
 8000ad4:	0001      	movs	r1, r0
 8000ad6:	3908      	subs	r1, #8
 8000ad8:	2320      	movs	r3, #32
 8000ada:	0022      	movs	r2, r4
 8000adc:	4648      	mov	r0, r9
 8000ade:	1a5b      	subs	r3, r3, r1
 8000ae0:	40da      	lsrs	r2, r3
 8000ae2:	4088      	lsls	r0, r1
 8000ae4:	408c      	lsls	r4, r1
 8000ae6:	4643      	mov	r3, r8
 8000ae8:	4310      	orrs	r0, r2
 8000aea:	4588      	cmp	r8, r1
 8000aec:	dd00      	ble.n	8000af0 <__aeabi_dsub+0xdc>
 8000aee:	e136      	b.n	8000d5e <__aeabi_dsub+0x34a>
 8000af0:	1ac9      	subs	r1, r1, r3
 8000af2:	1c4b      	adds	r3, r1, #1
 8000af4:	2b1f      	cmp	r3, #31
 8000af6:	dd00      	ble.n	8000afa <__aeabi_dsub+0xe6>
 8000af8:	e0ea      	b.n	8000cd0 <__aeabi_dsub+0x2bc>
 8000afa:	2220      	movs	r2, #32
 8000afc:	0026      	movs	r6, r4
 8000afe:	1ad2      	subs	r2, r2, r3
 8000b00:	0001      	movs	r1, r0
 8000b02:	4094      	lsls	r4, r2
 8000b04:	40de      	lsrs	r6, r3
 8000b06:	40d8      	lsrs	r0, r3
 8000b08:	2300      	movs	r3, #0
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	1e62      	subs	r2, r4, #1
 8000b0e:	4194      	sbcs	r4, r2
 8000b10:	4681      	mov	r9, r0
 8000b12:	4698      	mov	r8, r3
 8000b14:	4331      	orrs	r1, r6
 8000b16:	430c      	orrs	r4, r1
 8000b18:	0763      	lsls	r3, r4, #29
 8000b1a:	d009      	beq.n	8000b30 <__aeabi_dsub+0x11c>
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	4023      	ands	r3, r4
 8000b20:	2b04      	cmp	r3, #4
 8000b22:	d005      	beq.n	8000b30 <__aeabi_dsub+0x11c>
 8000b24:	1d23      	adds	r3, r4, #4
 8000b26:	42a3      	cmp	r3, r4
 8000b28:	41a4      	sbcs	r4, r4
 8000b2a:	4264      	negs	r4, r4
 8000b2c:	44a1      	add	r9, r4
 8000b2e:	001c      	movs	r4, r3
 8000b30:	464b      	mov	r3, r9
 8000b32:	021b      	lsls	r3, r3, #8
 8000b34:	d400      	bmi.n	8000b38 <__aeabi_dsub+0x124>
 8000b36:	e0de      	b.n	8000cf6 <__aeabi_dsub+0x2e2>
 8000b38:	4641      	mov	r1, r8
 8000b3a:	4b8c      	ldr	r3, [pc, #560]	; (8000d6c <__aeabi_dsub+0x358>)
 8000b3c:	3101      	adds	r1, #1
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	d100      	bne.n	8000b44 <__aeabi_dsub+0x130>
 8000b42:	e0e7      	b.n	8000d14 <__aeabi_dsub+0x300>
 8000b44:	464b      	mov	r3, r9
 8000b46:	488a      	ldr	r0, [pc, #552]	; (8000d70 <__aeabi_dsub+0x35c>)
 8000b48:	08e4      	lsrs	r4, r4, #3
 8000b4a:	4003      	ands	r3, r0
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	0549      	lsls	r1, r1, #21
 8000b50:	075b      	lsls	r3, r3, #29
 8000b52:	0240      	lsls	r0, r0, #9
 8000b54:	4323      	orrs	r3, r4
 8000b56:	0d4a      	lsrs	r2, r1, #21
 8000b58:	0b04      	lsrs	r4, r0, #12
 8000b5a:	0512      	lsls	r2, r2, #20
 8000b5c:	07ed      	lsls	r5, r5, #31
 8000b5e:	4322      	orrs	r2, r4
 8000b60:	432a      	orrs	r2, r5
 8000b62:	0018      	movs	r0, r3
 8000b64:	0011      	movs	r1, r2
 8000b66:	bcf0      	pop	{r4, r5, r6, r7}
 8000b68:	46bb      	mov	fp, r7
 8000b6a:	46b2      	mov	sl, r6
 8000b6c:	46a9      	mov	r9, r5
 8000b6e:	46a0      	mov	r8, r4
 8000b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b72:	4642      	mov	r2, r8
 8000b74:	1a12      	subs	r2, r2, r0
 8000b76:	2a00      	cmp	r2, #0
 8000b78:	dd52      	ble.n	8000c20 <__aeabi_dsub+0x20c>
 8000b7a:	2800      	cmp	r0, #0
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_dsub+0x16c>
 8000b7e:	e09c      	b.n	8000cba <__aeabi_dsub+0x2a6>
 8000b80:	45a0      	cmp	r8, r4
 8000b82:	d100      	bne.n	8000b86 <__aeabi_dsub+0x172>
 8000b84:	e0ca      	b.n	8000d1c <__aeabi_dsub+0x308>
 8000b86:	2080      	movs	r0, #128	; 0x80
 8000b88:	0400      	lsls	r0, r0, #16
 8000b8a:	4301      	orrs	r1, r0
 8000b8c:	2a38      	cmp	r2, #56	; 0x38
 8000b8e:	dd00      	ble.n	8000b92 <__aeabi_dsub+0x17e>
 8000b90:	e149      	b.n	8000e26 <__aeabi_dsub+0x412>
 8000b92:	2a1f      	cmp	r2, #31
 8000b94:	dc00      	bgt.n	8000b98 <__aeabi_dsub+0x184>
 8000b96:	e197      	b.n	8000ec8 <__aeabi_dsub+0x4b4>
 8000b98:	0010      	movs	r0, r2
 8000b9a:	000e      	movs	r6, r1
 8000b9c:	3820      	subs	r0, #32
 8000b9e:	40c6      	lsrs	r6, r0
 8000ba0:	2a20      	cmp	r2, #32
 8000ba2:	d004      	beq.n	8000bae <__aeabi_dsub+0x19a>
 8000ba4:	2040      	movs	r0, #64	; 0x40
 8000ba6:	1a82      	subs	r2, r0, r2
 8000ba8:	4091      	lsls	r1, r2
 8000baa:	430f      	orrs	r7, r1
 8000bac:	46b9      	mov	r9, r7
 8000bae:	464c      	mov	r4, r9
 8000bb0:	1e62      	subs	r2, r4, #1
 8000bb2:	4194      	sbcs	r4, r2
 8000bb4:	4334      	orrs	r4, r6
 8000bb6:	e13a      	b.n	8000e2e <__aeabi_dsub+0x41a>
 8000bb8:	000a      	movs	r2, r1
 8000bba:	433a      	orrs	r2, r7
 8000bbc:	d028      	beq.n	8000c10 <__aeabi_dsub+0x1fc>
 8000bbe:	46b3      	mov	fp, r6
 8000bc0:	42b5      	cmp	r5, r6
 8000bc2:	d02b      	beq.n	8000c1c <__aeabi_dsub+0x208>
 8000bc4:	4a6b      	ldr	r2, [pc, #428]	; (8000d74 <__aeabi_dsub+0x360>)
 8000bc6:	4442      	add	r2, r8
 8000bc8:	2a00      	cmp	r2, #0
 8000bca:	d05d      	beq.n	8000c88 <__aeabi_dsub+0x274>
 8000bcc:	4642      	mov	r2, r8
 8000bce:	4644      	mov	r4, r8
 8000bd0:	1a82      	subs	r2, r0, r2
 8000bd2:	2c00      	cmp	r4, #0
 8000bd4:	d000      	beq.n	8000bd8 <__aeabi_dsub+0x1c4>
 8000bd6:	e0f5      	b.n	8000dc4 <__aeabi_dsub+0x3b0>
 8000bd8:	4665      	mov	r5, ip
 8000bda:	431d      	orrs	r5, r3
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_dsub+0x1cc>
 8000bde:	e19c      	b.n	8000f1a <__aeabi_dsub+0x506>
 8000be0:	1e55      	subs	r5, r2, #1
 8000be2:	2a01      	cmp	r2, #1
 8000be4:	d100      	bne.n	8000be8 <__aeabi_dsub+0x1d4>
 8000be6:	e1fb      	b.n	8000fe0 <__aeabi_dsub+0x5cc>
 8000be8:	4c60      	ldr	r4, [pc, #384]	; (8000d6c <__aeabi_dsub+0x358>)
 8000bea:	42a2      	cmp	r2, r4
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_dsub+0x1dc>
 8000bee:	e1bd      	b.n	8000f6c <__aeabi_dsub+0x558>
 8000bf0:	002a      	movs	r2, r5
 8000bf2:	e0f0      	b.n	8000dd6 <__aeabi_dsub+0x3c2>
 8000bf4:	0008      	movs	r0, r1
 8000bf6:	4338      	orrs	r0, r7
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_dsub+0x1e8>
 8000bfa:	e0c3      	b.n	8000d84 <__aeabi_dsub+0x370>
 8000bfc:	1e50      	subs	r0, r2, #1
 8000bfe:	2a01      	cmp	r2, #1
 8000c00:	d100      	bne.n	8000c04 <__aeabi_dsub+0x1f0>
 8000c02:	e1a8      	b.n	8000f56 <__aeabi_dsub+0x542>
 8000c04:	4c59      	ldr	r4, [pc, #356]	; (8000d6c <__aeabi_dsub+0x358>)
 8000c06:	42a2      	cmp	r2, r4
 8000c08:	d100      	bne.n	8000c0c <__aeabi_dsub+0x1f8>
 8000c0a:	e087      	b.n	8000d1c <__aeabi_dsub+0x308>
 8000c0c:	0002      	movs	r2, r0
 8000c0e:	e736      	b.n	8000a7e <__aeabi_dsub+0x6a>
 8000c10:	2201      	movs	r2, #1
 8000c12:	4056      	eors	r6, r2
 8000c14:	46b3      	mov	fp, r6
 8000c16:	42b5      	cmp	r5, r6
 8000c18:	d000      	beq.n	8000c1c <__aeabi_dsub+0x208>
 8000c1a:	e721      	b.n	8000a60 <__aeabi_dsub+0x4c>
 8000c1c:	4a55      	ldr	r2, [pc, #340]	; (8000d74 <__aeabi_dsub+0x360>)
 8000c1e:	4442      	add	r2, r8
 8000c20:	2a00      	cmp	r2, #0
 8000c22:	d100      	bne.n	8000c26 <__aeabi_dsub+0x212>
 8000c24:	e0b5      	b.n	8000d92 <__aeabi_dsub+0x37e>
 8000c26:	4642      	mov	r2, r8
 8000c28:	4644      	mov	r4, r8
 8000c2a:	1a82      	subs	r2, r0, r2
 8000c2c:	2c00      	cmp	r4, #0
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_dsub+0x21e>
 8000c30:	e138      	b.n	8000ea4 <__aeabi_dsub+0x490>
 8000c32:	4e4e      	ldr	r6, [pc, #312]	; (8000d6c <__aeabi_dsub+0x358>)
 8000c34:	42b0      	cmp	r0, r6
 8000c36:	d100      	bne.n	8000c3a <__aeabi_dsub+0x226>
 8000c38:	e1de      	b.n	8000ff8 <__aeabi_dsub+0x5e4>
 8000c3a:	2680      	movs	r6, #128	; 0x80
 8000c3c:	4664      	mov	r4, ip
 8000c3e:	0436      	lsls	r6, r6, #16
 8000c40:	4334      	orrs	r4, r6
 8000c42:	46a4      	mov	ip, r4
 8000c44:	2a38      	cmp	r2, #56	; 0x38
 8000c46:	dd00      	ble.n	8000c4a <__aeabi_dsub+0x236>
 8000c48:	e196      	b.n	8000f78 <__aeabi_dsub+0x564>
 8000c4a:	2a1f      	cmp	r2, #31
 8000c4c:	dd00      	ble.n	8000c50 <__aeabi_dsub+0x23c>
 8000c4e:	e224      	b.n	800109a <__aeabi_dsub+0x686>
 8000c50:	2620      	movs	r6, #32
 8000c52:	1ab4      	subs	r4, r6, r2
 8000c54:	46a2      	mov	sl, r4
 8000c56:	4664      	mov	r4, ip
 8000c58:	4656      	mov	r6, sl
 8000c5a:	40b4      	lsls	r4, r6
 8000c5c:	46a1      	mov	r9, r4
 8000c5e:	001c      	movs	r4, r3
 8000c60:	464e      	mov	r6, r9
 8000c62:	40d4      	lsrs	r4, r2
 8000c64:	4326      	orrs	r6, r4
 8000c66:	0034      	movs	r4, r6
 8000c68:	4656      	mov	r6, sl
 8000c6a:	40b3      	lsls	r3, r6
 8000c6c:	1e5e      	subs	r6, r3, #1
 8000c6e:	41b3      	sbcs	r3, r6
 8000c70:	431c      	orrs	r4, r3
 8000c72:	4663      	mov	r3, ip
 8000c74:	40d3      	lsrs	r3, r2
 8000c76:	18c9      	adds	r1, r1, r3
 8000c78:	19e4      	adds	r4, r4, r7
 8000c7a:	42bc      	cmp	r4, r7
 8000c7c:	41bf      	sbcs	r7, r7
 8000c7e:	427f      	negs	r7, r7
 8000c80:	46b9      	mov	r9, r7
 8000c82:	4680      	mov	r8, r0
 8000c84:	4489      	add	r9, r1
 8000c86:	e0d8      	b.n	8000e3a <__aeabi_dsub+0x426>
 8000c88:	4640      	mov	r0, r8
 8000c8a:	4c3b      	ldr	r4, [pc, #236]	; (8000d78 <__aeabi_dsub+0x364>)
 8000c8c:	3001      	adds	r0, #1
 8000c8e:	4220      	tst	r0, r4
 8000c90:	d000      	beq.n	8000c94 <__aeabi_dsub+0x280>
 8000c92:	e0b4      	b.n	8000dfe <__aeabi_dsub+0x3ea>
 8000c94:	4640      	mov	r0, r8
 8000c96:	2800      	cmp	r0, #0
 8000c98:	d000      	beq.n	8000c9c <__aeabi_dsub+0x288>
 8000c9a:	e144      	b.n	8000f26 <__aeabi_dsub+0x512>
 8000c9c:	4660      	mov	r0, ip
 8000c9e:	4318      	orrs	r0, r3
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_dsub+0x290>
 8000ca2:	e190      	b.n	8000fc6 <__aeabi_dsub+0x5b2>
 8000ca4:	0008      	movs	r0, r1
 8000ca6:	4338      	orrs	r0, r7
 8000ca8:	d000      	beq.n	8000cac <__aeabi_dsub+0x298>
 8000caa:	e1aa      	b.n	8001002 <__aeabi_dsub+0x5ee>
 8000cac:	4661      	mov	r1, ip
 8000cae:	08db      	lsrs	r3, r3, #3
 8000cb0:	0749      	lsls	r1, r1, #29
 8000cb2:	430b      	orrs	r3, r1
 8000cb4:	4661      	mov	r1, ip
 8000cb6:	08cc      	lsrs	r4, r1, #3
 8000cb8:	e027      	b.n	8000d0a <__aeabi_dsub+0x2f6>
 8000cba:	0008      	movs	r0, r1
 8000cbc:	4338      	orrs	r0, r7
 8000cbe:	d061      	beq.n	8000d84 <__aeabi_dsub+0x370>
 8000cc0:	1e50      	subs	r0, r2, #1
 8000cc2:	2a01      	cmp	r2, #1
 8000cc4:	d100      	bne.n	8000cc8 <__aeabi_dsub+0x2b4>
 8000cc6:	e139      	b.n	8000f3c <__aeabi_dsub+0x528>
 8000cc8:	42a2      	cmp	r2, r4
 8000cca:	d027      	beq.n	8000d1c <__aeabi_dsub+0x308>
 8000ccc:	0002      	movs	r2, r0
 8000cce:	e75d      	b.n	8000b8c <__aeabi_dsub+0x178>
 8000cd0:	0002      	movs	r2, r0
 8000cd2:	391f      	subs	r1, #31
 8000cd4:	40ca      	lsrs	r2, r1
 8000cd6:	0011      	movs	r1, r2
 8000cd8:	2b20      	cmp	r3, #32
 8000cda:	d003      	beq.n	8000ce4 <__aeabi_dsub+0x2d0>
 8000cdc:	2240      	movs	r2, #64	; 0x40
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	4098      	lsls	r0, r3
 8000ce2:	4304      	orrs	r4, r0
 8000ce4:	1e63      	subs	r3, r4, #1
 8000ce6:	419c      	sbcs	r4, r3
 8000ce8:	2300      	movs	r3, #0
 8000cea:	4699      	mov	r9, r3
 8000cec:	4698      	mov	r8, r3
 8000cee:	430c      	orrs	r4, r1
 8000cf0:	0763      	lsls	r3, r4, #29
 8000cf2:	d000      	beq.n	8000cf6 <__aeabi_dsub+0x2e2>
 8000cf4:	e712      	b.n	8000b1c <__aeabi_dsub+0x108>
 8000cf6:	464b      	mov	r3, r9
 8000cf8:	464a      	mov	r2, r9
 8000cfa:	08e4      	lsrs	r4, r4, #3
 8000cfc:	075b      	lsls	r3, r3, #29
 8000cfe:	4323      	orrs	r3, r4
 8000d00:	08d4      	lsrs	r4, r2, #3
 8000d02:	4642      	mov	r2, r8
 8000d04:	4919      	ldr	r1, [pc, #100]	; (8000d6c <__aeabi_dsub+0x358>)
 8000d06:	428a      	cmp	r2, r1
 8000d08:	d00e      	beq.n	8000d28 <__aeabi_dsub+0x314>
 8000d0a:	0324      	lsls	r4, r4, #12
 8000d0c:	0552      	lsls	r2, r2, #21
 8000d0e:	0b24      	lsrs	r4, r4, #12
 8000d10:	0d52      	lsrs	r2, r2, #21
 8000d12:	e722      	b.n	8000b5a <__aeabi_dsub+0x146>
 8000d14:	000a      	movs	r2, r1
 8000d16:	2400      	movs	r4, #0
 8000d18:	2300      	movs	r3, #0
 8000d1a:	e71e      	b.n	8000b5a <__aeabi_dsub+0x146>
 8000d1c:	08db      	lsrs	r3, r3, #3
 8000d1e:	4662      	mov	r2, ip
 8000d20:	0752      	lsls	r2, r2, #29
 8000d22:	4313      	orrs	r3, r2
 8000d24:	4662      	mov	r2, ip
 8000d26:	08d4      	lsrs	r4, r2, #3
 8000d28:	001a      	movs	r2, r3
 8000d2a:	4322      	orrs	r2, r4
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_dsub+0x31c>
 8000d2e:	e1fc      	b.n	800112a <__aeabi_dsub+0x716>
 8000d30:	2280      	movs	r2, #128	; 0x80
 8000d32:	0312      	lsls	r2, r2, #12
 8000d34:	4314      	orrs	r4, r2
 8000d36:	0324      	lsls	r4, r4, #12
 8000d38:	4a0c      	ldr	r2, [pc, #48]	; (8000d6c <__aeabi_dsub+0x358>)
 8000d3a:	0b24      	lsrs	r4, r4, #12
 8000d3c:	e70d      	b.n	8000b5a <__aeabi_dsub+0x146>
 8000d3e:	0020      	movs	r0, r4
 8000d40:	f000 fab6 	bl	80012b0 <__clzsi2>
 8000d44:	0001      	movs	r1, r0
 8000d46:	3118      	adds	r1, #24
 8000d48:	291f      	cmp	r1, #31
 8000d4a:	dc00      	bgt.n	8000d4e <__aeabi_dsub+0x33a>
 8000d4c:	e6c4      	b.n	8000ad8 <__aeabi_dsub+0xc4>
 8000d4e:	3808      	subs	r0, #8
 8000d50:	4084      	lsls	r4, r0
 8000d52:	4643      	mov	r3, r8
 8000d54:	0020      	movs	r0, r4
 8000d56:	2400      	movs	r4, #0
 8000d58:	4588      	cmp	r8, r1
 8000d5a:	dc00      	bgt.n	8000d5e <__aeabi_dsub+0x34a>
 8000d5c:	e6c8      	b.n	8000af0 <__aeabi_dsub+0xdc>
 8000d5e:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <__aeabi_dsub+0x35c>)
 8000d60:	1a5b      	subs	r3, r3, r1
 8000d62:	4010      	ands	r0, r2
 8000d64:	4698      	mov	r8, r3
 8000d66:	4681      	mov	r9, r0
 8000d68:	e6d6      	b.n	8000b18 <__aeabi_dsub+0x104>
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	000007ff 	.word	0x000007ff
 8000d70:	ff7fffff 	.word	0xff7fffff
 8000d74:	fffff801 	.word	0xfffff801
 8000d78:	000007fe 	.word	0x000007fe
 8000d7c:	430f      	orrs	r7, r1
 8000d7e:	1e7a      	subs	r2, r7, #1
 8000d80:	4197      	sbcs	r7, r2
 8000d82:	e691      	b.n	8000aa8 <__aeabi_dsub+0x94>
 8000d84:	4661      	mov	r1, ip
 8000d86:	08db      	lsrs	r3, r3, #3
 8000d88:	0749      	lsls	r1, r1, #29
 8000d8a:	430b      	orrs	r3, r1
 8000d8c:	4661      	mov	r1, ip
 8000d8e:	08cc      	lsrs	r4, r1, #3
 8000d90:	e7b8      	b.n	8000d04 <__aeabi_dsub+0x2f0>
 8000d92:	4640      	mov	r0, r8
 8000d94:	4cd3      	ldr	r4, [pc, #844]	; (80010e4 <__aeabi_dsub+0x6d0>)
 8000d96:	3001      	adds	r0, #1
 8000d98:	4220      	tst	r0, r4
 8000d9a:	d000      	beq.n	8000d9e <__aeabi_dsub+0x38a>
 8000d9c:	e0a2      	b.n	8000ee4 <__aeabi_dsub+0x4d0>
 8000d9e:	4640      	mov	r0, r8
 8000da0:	2800      	cmp	r0, #0
 8000da2:	d000      	beq.n	8000da6 <__aeabi_dsub+0x392>
 8000da4:	e101      	b.n	8000faa <__aeabi_dsub+0x596>
 8000da6:	4660      	mov	r0, ip
 8000da8:	4318      	orrs	r0, r3
 8000daa:	d100      	bne.n	8000dae <__aeabi_dsub+0x39a>
 8000dac:	e15e      	b.n	800106c <__aeabi_dsub+0x658>
 8000dae:	0008      	movs	r0, r1
 8000db0:	4338      	orrs	r0, r7
 8000db2:	d000      	beq.n	8000db6 <__aeabi_dsub+0x3a2>
 8000db4:	e15f      	b.n	8001076 <__aeabi_dsub+0x662>
 8000db6:	4661      	mov	r1, ip
 8000db8:	08db      	lsrs	r3, r3, #3
 8000dba:	0749      	lsls	r1, r1, #29
 8000dbc:	430b      	orrs	r3, r1
 8000dbe:	4661      	mov	r1, ip
 8000dc0:	08cc      	lsrs	r4, r1, #3
 8000dc2:	e7a2      	b.n	8000d0a <__aeabi_dsub+0x2f6>
 8000dc4:	4dc8      	ldr	r5, [pc, #800]	; (80010e8 <__aeabi_dsub+0x6d4>)
 8000dc6:	42a8      	cmp	r0, r5
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_dsub+0x3b8>
 8000dca:	e0cf      	b.n	8000f6c <__aeabi_dsub+0x558>
 8000dcc:	2580      	movs	r5, #128	; 0x80
 8000dce:	4664      	mov	r4, ip
 8000dd0:	042d      	lsls	r5, r5, #16
 8000dd2:	432c      	orrs	r4, r5
 8000dd4:	46a4      	mov	ip, r4
 8000dd6:	2a38      	cmp	r2, #56	; 0x38
 8000dd8:	dc56      	bgt.n	8000e88 <__aeabi_dsub+0x474>
 8000dda:	2a1f      	cmp	r2, #31
 8000ddc:	dd00      	ble.n	8000de0 <__aeabi_dsub+0x3cc>
 8000dde:	e0d1      	b.n	8000f84 <__aeabi_dsub+0x570>
 8000de0:	2520      	movs	r5, #32
 8000de2:	001e      	movs	r6, r3
 8000de4:	1aad      	subs	r5, r5, r2
 8000de6:	4664      	mov	r4, ip
 8000de8:	40ab      	lsls	r3, r5
 8000dea:	40ac      	lsls	r4, r5
 8000dec:	40d6      	lsrs	r6, r2
 8000dee:	1e5d      	subs	r5, r3, #1
 8000df0:	41ab      	sbcs	r3, r5
 8000df2:	4334      	orrs	r4, r6
 8000df4:	4323      	orrs	r3, r4
 8000df6:	4664      	mov	r4, ip
 8000df8:	40d4      	lsrs	r4, r2
 8000dfa:	1b09      	subs	r1, r1, r4
 8000dfc:	e049      	b.n	8000e92 <__aeabi_dsub+0x47e>
 8000dfe:	4660      	mov	r0, ip
 8000e00:	1bdc      	subs	r4, r3, r7
 8000e02:	1a46      	subs	r6, r0, r1
 8000e04:	42a3      	cmp	r3, r4
 8000e06:	4180      	sbcs	r0, r0
 8000e08:	4240      	negs	r0, r0
 8000e0a:	4681      	mov	r9, r0
 8000e0c:	0030      	movs	r0, r6
 8000e0e:	464e      	mov	r6, r9
 8000e10:	1b80      	subs	r0, r0, r6
 8000e12:	4681      	mov	r9, r0
 8000e14:	0200      	lsls	r0, r0, #8
 8000e16:	d476      	bmi.n	8000f06 <__aeabi_dsub+0x4f2>
 8000e18:	464b      	mov	r3, r9
 8000e1a:	4323      	orrs	r3, r4
 8000e1c:	d000      	beq.n	8000e20 <__aeabi_dsub+0x40c>
 8000e1e:	e652      	b.n	8000ac6 <__aeabi_dsub+0xb2>
 8000e20:	2400      	movs	r4, #0
 8000e22:	2500      	movs	r5, #0
 8000e24:	e771      	b.n	8000d0a <__aeabi_dsub+0x2f6>
 8000e26:	4339      	orrs	r1, r7
 8000e28:	000c      	movs	r4, r1
 8000e2a:	1e62      	subs	r2, r4, #1
 8000e2c:	4194      	sbcs	r4, r2
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	429c      	cmp	r4, r3
 8000e32:	419b      	sbcs	r3, r3
 8000e34:	425b      	negs	r3, r3
 8000e36:	4463      	add	r3, ip
 8000e38:	4699      	mov	r9, r3
 8000e3a:	464b      	mov	r3, r9
 8000e3c:	021b      	lsls	r3, r3, #8
 8000e3e:	d400      	bmi.n	8000e42 <__aeabi_dsub+0x42e>
 8000e40:	e756      	b.n	8000cf0 <__aeabi_dsub+0x2dc>
 8000e42:	2301      	movs	r3, #1
 8000e44:	469c      	mov	ip, r3
 8000e46:	4ba8      	ldr	r3, [pc, #672]	; (80010e8 <__aeabi_dsub+0x6d4>)
 8000e48:	44e0      	add	r8, ip
 8000e4a:	4598      	cmp	r8, r3
 8000e4c:	d038      	beq.n	8000ec0 <__aeabi_dsub+0x4ac>
 8000e4e:	464b      	mov	r3, r9
 8000e50:	48a6      	ldr	r0, [pc, #664]	; (80010ec <__aeabi_dsub+0x6d8>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	4003      	ands	r3, r0
 8000e56:	0018      	movs	r0, r3
 8000e58:	0863      	lsrs	r3, r4, #1
 8000e5a:	4014      	ands	r4, r2
 8000e5c:	431c      	orrs	r4, r3
 8000e5e:	07c3      	lsls	r3, r0, #31
 8000e60:	431c      	orrs	r4, r3
 8000e62:	0843      	lsrs	r3, r0, #1
 8000e64:	4699      	mov	r9, r3
 8000e66:	e657      	b.n	8000b18 <__aeabi_dsub+0x104>
 8000e68:	0010      	movs	r0, r2
 8000e6a:	000e      	movs	r6, r1
 8000e6c:	3820      	subs	r0, #32
 8000e6e:	40c6      	lsrs	r6, r0
 8000e70:	2a20      	cmp	r2, #32
 8000e72:	d004      	beq.n	8000e7e <__aeabi_dsub+0x46a>
 8000e74:	2040      	movs	r0, #64	; 0x40
 8000e76:	1a82      	subs	r2, r0, r2
 8000e78:	4091      	lsls	r1, r2
 8000e7a:	430f      	orrs	r7, r1
 8000e7c:	46b9      	mov	r9, r7
 8000e7e:	464f      	mov	r7, r9
 8000e80:	1e7a      	subs	r2, r7, #1
 8000e82:	4197      	sbcs	r7, r2
 8000e84:	4337      	orrs	r7, r6
 8000e86:	e60f      	b.n	8000aa8 <__aeabi_dsub+0x94>
 8000e88:	4662      	mov	r2, ip
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	0013      	movs	r3, r2
 8000e8e:	1e5a      	subs	r2, r3, #1
 8000e90:	4193      	sbcs	r3, r2
 8000e92:	1afc      	subs	r4, r7, r3
 8000e94:	42a7      	cmp	r7, r4
 8000e96:	41bf      	sbcs	r7, r7
 8000e98:	427f      	negs	r7, r7
 8000e9a:	1bcb      	subs	r3, r1, r7
 8000e9c:	4699      	mov	r9, r3
 8000e9e:	465d      	mov	r5, fp
 8000ea0:	4680      	mov	r8, r0
 8000ea2:	e608      	b.n	8000ab6 <__aeabi_dsub+0xa2>
 8000ea4:	4666      	mov	r6, ip
 8000ea6:	431e      	orrs	r6, r3
 8000ea8:	d100      	bne.n	8000eac <__aeabi_dsub+0x498>
 8000eaa:	e0be      	b.n	800102a <__aeabi_dsub+0x616>
 8000eac:	1e56      	subs	r6, r2, #1
 8000eae:	2a01      	cmp	r2, #1
 8000eb0:	d100      	bne.n	8000eb4 <__aeabi_dsub+0x4a0>
 8000eb2:	e109      	b.n	80010c8 <__aeabi_dsub+0x6b4>
 8000eb4:	4c8c      	ldr	r4, [pc, #560]	; (80010e8 <__aeabi_dsub+0x6d4>)
 8000eb6:	42a2      	cmp	r2, r4
 8000eb8:	d100      	bne.n	8000ebc <__aeabi_dsub+0x4a8>
 8000eba:	e119      	b.n	80010f0 <__aeabi_dsub+0x6dc>
 8000ebc:	0032      	movs	r2, r6
 8000ebe:	e6c1      	b.n	8000c44 <__aeabi_dsub+0x230>
 8000ec0:	4642      	mov	r2, r8
 8000ec2:	2400      	movs	r4, #0
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	e648      	b.n	8000b5a <__aeabi_dsub+0x146>
 8000ec8:	2020      	movs	r0, #32
 8000eca:	000c      	movs	r4, r1
 8000ecc:	1a80      	subs	r0, r0, r2
 8000ece:	003e      	movs	r6, r7
 8000ed0:	4087      	lsls	r7, r0
 8000ed2:	4084      	lsls	r4, r0
 8000ed4:	40d6      	lsrs	r6, r2
 8000ed6:	1e78      	subs	r0, r7, #1
 8000ed8:	4187      	sbcs	r7, r0
 8000eda:	40d1      	lsrs	r1, r2
 8000edc:	4334      	orrs	r4, r6
 8000ede:	433c      	orrs	r4, r7
 8000ee0:	448c      	add	ip, r1
 8000ee2:	e7a4      	b.n	8000e2e <__aeabi_dsub+0x41a>
 8000ee4:	4a80      	ldr	r2, [pc, #512]	; (80010e8 <__aeabi_dsub+0x6d4>)
 8000ee6:	4290      	cmp	r0, r2
 8000ee8:	d100      	bne.n	8000eec <__aeabi_dsub+0x4d8>
 8000eea:	e0e9      	b.n	80010c0 <__aeabi_dsub+0x6ac>
 8000eec:	19df      	adds	r7, r3, r7
 8000eee:	429f      	cmp	r7, r3
 8000ef0:	419b      	sbcs	r3, r3
 8000ef2:	4461      	add	r1, ip
 8000ef4:	425b      	negs	r3, r3
 8000ef6:	18c9      	adds	r1, r1, r3
 8000ef8:	07cc      	lsls	r4, r1, #31
 8000efa:	087f      	lsrs	r7, r7, #1
 8000efc:	084b      	lsrs	r3, r1, #1
 8000efe:	4699      	mov	r9, r3
 8000f00:	4680      	mov	r8, r0
 8000f02:	433c      	orrs	r4, r7
 8000f04:	e6f4      	b.n	8000cf0 <__aeabi_dsub+0x2dc>
 8000f06:	1afc      	subs	r4, r7, r3
 8000f08:	42a7      	cmp	r7, r4
 8000f0a:	41bf      	sbcs	r7, r7
 8000f0c:	4663      	mov	r3, ip
 8000f0e:	427f      	negs	r7, r7
 8000f10:	1ac9      	subs	r1, r1, r3
 8000f12:	1bcb      	subs	r3, r1, r7
 8000f14:	4699      	mov	r9, r3
 8000f16:	465d      	mov	r5, fp
 8000f18:	e5d5      	b.n	8000ac6 <__aeabi_dsub+0xb2>
 8000f1a:	08ff      	lsrs	r7, r7, #3
 8000f1c:	074b      	lsls	r3, r1, #29
 8000f1e:	465d      	mov	r5, fp
 8000f20:	433b      	orrs	r3, r7
 8000f22:	08cc      	lsrs	r4, r1, #3
 8000f24:	e6ee      	b.n	8000d04 <__aeabi_dsub+0x2f0>
 8000f26:	4662      	mov	r2, ip
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	d000      	beq.n	8000f2e <__aeabi_dsub+0x51a>
 8000f2c:	e082      	b.n	8001034 <__aeabi_dsub+0x620>
 8000f2e:	000b      	movs	r3, r1
 8000f30:	433b      	orrs	r3, r7
 8000f32:	d11b      	bne.n	8000f6c <__aeabi_dsub+0x558>
 8000f34:	2480      	movs	r4, #128	; 0x80
 8000f36:	2500      	movs	r5, #0
 8000f38:	0324      	lsls	r4, r4, #12
 8000f3a:	e6f9      	b.n	8000d30 <__aeabi_dsub+0x31c>
 8000f3c:	19dc      	adds	r4, r3, r7
 8000f3e:	429c      	cmp	r4, r3
 8000f40:	419b      	sbcs	r3, r3
 8000f42:	4461      	add	r1, ip
 8000f44:	4689      	mov	r9, r1
 8000f46:	425b      	negs	r3, r3
 8000f48:	4499      	add	r9, r3
 8000f4a:	464b      	mov	r3, r9
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	d444      	bmi.n	8000fda <__aeabi_dsub+0x5c6>
 8000f50:	2301      	movs	r3, #1
 8000f52:	4698      	mov	r8, r3
 8000f54:	e6cc      	b.n	8000cf0 <__aeabi_dsub+0x2dc>
 8000f56:	1bdc      	subs	r4, r3, r7
 8000f58:	4662      	mov	r2, ip
 8000f5a:	42a3      	cmp	r3, r4
 8000f5c:	419b      	sbcs	r3, r3
 8000f5e:	1a51      	subs	r1, r2, r1
 8000f60:	425b      	negs	r3, r3
 8000f62:	1acb      	subs	r3, r1, r3
 8000f64:	4699      	mov	r9, r3
 8000f66:	2301      	movs	r3, #1
 8000f68:	4698      	mov	r8, r3
 8000f6a:	e5a4      	b.n	8000ab6 <__aeabi_dsub+0xa2>
 8000f6c:	08ff      	lsrs	r7, r7, #3
 8000f6e:	074b      	lsls	r3, r1, #29
 8000f70:	465d      	mov	r5, fp
 8000f72:	433b      	orrs	r3, r7
 8000f74:	08cc      	lsrs	r4, r1, #3
 8000f76:	e6d7      	b.n	8000d28 <__aeabi_dsub+0x314>
 8000f78:	4662      	mov	r2, ip
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	0014      	movs	r4, r2
 8000f7e:	1e63      	subs	r3, r4, #1
 8000f80:	419c      	sbcs	r4, r3
 8000f82:	e679      	b.n	8000c78 <__aeabi_dsub+0x264>
 8000f84:	0015      	movs	r5, r2
 8000f86:	4664      	mov	r4, ip
 8000f88:	3d20      	subs	r5, #32
 8000f8a:	40ec      	lsrs	r4, r5
 8000f8c:	46a0      	mov	r8, r4
 8000f8e:	2a20      	cmp	r2, #32
 8000f90:	d005      	beq.n	8000f9e <__aeabi_dsub+0x58a>
 8000f92:	2540      	movs	r5, #64	; 0x40
 8000f94:	4664      	mov	r4, ip
 8000f96:	1aaa      	subs	r2, r5, r2
 8000f98:	4094      	lsls	r4, r2
 8000f9a:	4323      	orrs	r3, r4
 8000f9c:	469a      	mov	sl, r3
 8000f9e:	4654      	mov	r4, sl
 8000fa0:	1e63      	subs	r3, r4, #1
 8000fa2:	419c      	sbcs	r4, r3
 8000fa4:	4643      	mov	r3, r8
 8000fa6:	4323      	orrs	r3, r4
 8000fa8:	e773      	b.n	8000e92 <__aeabi_dsub+0x47e>
 8000faa:	4662      	mov	r2, ip
 8000fac:	431a      	orrs	r2, r3
 8000fae:	d023      	beq.n	8000ff8 <__aeabi_dsub+0x5e4>
 8000fb0:	000a      	movs	r2, r1
 8000fb2:	433a      	orrs	r2, r7
 8000fb4:	d000      	beq.n	8000fb8 <__aeabi_dsub+0x5a4>
 8000fb6:	e0a0      	b.n	80010fa <__aeabi_dsub+0x6e6>
 8000fb8:	4662      	mov	r2, ip
 8000fba:	08db      	lsrs	r3, r3, #3
 8000fbc:	0752      	lsls	r2, r2, #29
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	4662      	mov	r2, ip
 8000fc2:	08d4      	lsrs	r4, r2, #3
 8000fc4:	e6b0      	b.n	8000d28 <__aeabi_dsub+0x314>
 8000fc6:	000b      	movs	r3, r1
 8000fc8:	433b      	orrs	r3, r7
 8000fca:	d100      	bne.n	8000fce <__aeabi_dsub+0x5ba>
 8000fcc:	e728      	b.n	8000e20 <__aeabi_dsub+0x40c>
 8000fce:	08ff      	lsrs	r7, r7, #3
 8000fd0:	074b      	lsls	r3, r1, #29
 8000fd2:	465d      	mov	r5, fp
 8000fd4:	433b      	orrs	r3, r7
 8000fd6:	08cc      	lsrs	r4, r1, #3
 8000fd8:	e697      	b.n	8000d0a <__aeabi_dsub+0x2f6>
 8000fda:	2302      	movs	r3, #2
 8000fdc:	4698      	mov	r8, r3
 8000fde:	e736      	b.n	8000e4e <__aeabi_dsub+0x43a>
 8000fe0:	1afc      	subs	r4, r7, r3
 8000fe2:	42a7      	cmp	r7, r4
 8000fe4:	41bf      	sbcs	r7, r7
 8000fe6:	4663      	mov	r3, ip
 8000fe8:	427f      	negs	r7, r7
 8000fea:	1ac9      	subs	r1, r1, r3
 8000fec:	1bcb      	subs	r3, r1, r7
 8000fee:	4699      	mov	r9, r3
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	465d      	mov	r5, fp
 8000ff4:	4698      	mov	r8, r3
 8000ff6:	e55e      	b.n	8000ab6 <__aeabi_dsub+0xa2>
 8000ff8:	074b      	lsls	r3, r1, #29
 8000ffa:	08ff      	lsrs	r7, r7, #3
 8000ffc:	433b      	orrs	r3, r7
 8000ffe:	08cc      	lsrs	r4, r1, #3
 8001000:	e692      	b.n	8000d28 <__aeabi_dsub+0x314>
 8001002:	1bdc      	subs	r4, r3, r7
 8001004:	4660      	mov	r0, ip
 8001006:	42a3      	cmp	r3, r4
 8001008:	41b6      	sbcs	r6, r6
 800100a:	1a40      	subs	r0, r0, r1
 800100c:	4276      	negs	r6, r6
 800100e:	1b80      	subs	r0, r0, r6
 8001010:	4681      	mov	r9, r0
 8001012:	0200      	lsls	r0, r0, #8
 8001014:	d560      	bpl.n	80010d8 <__aeabi_dsub+0x6c4>
 8001016:	1afc      	subs	r4, r7, r3
 8001018:	42a7      	cmp	r7, r4
 800101a:	41bf      	sbcs	r7, r7
 800101c:	4663      	mov	r3, ip
 800101e:	427f      	negs	r7, r7
 8001020:	1ac9      	subs	r1, r1, r3
 8001022:	1bcb      	subs	r3, r1, r7
 8001024:	4699      	mov	r9, r3
 8001026:	465d      	mov	r5, fp
 8001028:	e576      	b.n	8000b18 <__aeabi_dsub+0x104>
 800102a:	08ff      	lsrs	r7, r7, #3
 800102c:	074b      	lsls	r3, r1, #29
 800102e:	433b      	orrs	r3, r7
 8001030:	08cc      	lsrs	r4, r1, #3
 8001032:	e667      	b.n	8000d04 <__aeabi_dsub+0x2f0>
 8001034:	000a      	movs	r2, r1
 8001036:	08db      	lsrs	r3, r3, #3
 8001038:	433a      	orrs	r2, r7
 800103a:	d100      	bne.n	800103e <__aeabi_dsub+0x62a>
 800103c:	e66f      	b.n	8000d1e <__aeabi_dsub+0x30a>
 800103e:	4662      	mov	r2, ip
 8001040:	0752      	lsls	r2, r2, #29
 8001042:	4313      	orrs	r3, r2
 8001044:	4662      	mov	r2, ip
 8001046:	08d4      	lsrs	r4, r2, #3
 8001048:	2280      	movs	r2, #128	; 0x80
 800104a:	0312      	lsls	r2, r2, #12
 800104c:	4214      	tst	r4, r2
 800104e:	d007      	beq.n	8001060 <__aeabi_dsub+0x64c>
 8001050:	08c8      	lsrs	r0, r1, #3
 8001052:	4210      	tst	r0, r2
 8001054:	d104      	bne.n	8001060 <__aeabi_dsub+0x64c>
 8001056:	465d      	mov	r5, fp
 8001058:	0004      	movs	r4, r0
 800105a:	08fb      	lsrs	r3, r7, #3
 800105c:	0749      	lsls	r1, r1, #29
 800105e:	430b      	orrs	r3, r1
 8001060:	0f5a      	lsrs	r2, r3, #29
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	08db      	lsrs	r3, r3, #3
 8001066:	0752      	lsls	r2, r2, #29
 8001068:	4313      	orrs	r3, r2
 800106a:	e65d      	b.n	8000d28 <__aeabi_dsub+0x314>
 800106c:	074b      	lsls	r3, r1, #29
 800106e:	08ff      	lsrs	r7, r7, #3
 8001070:	433b      	orrs	r3, r7
 8001072:	08cc      	lsrs	r4, r1, #3
 8001074:	e649      	b.n	8000d0a <__aeabi_dsub+0x2f6>
 8001076:	19dc      	adds	r4, r3, r7
 8001078:	429c      	cmp	r4, r3
 800107a:	419b      	sbcs	r3, r3
 800107c:	4461      	add	r1, ip
 800107e:	4689      	mov	r9, r1
 8001080:	425b      	negs	r3, r3
 8001082:	4499      	add	r9, r3
 8001084:	464b      	mov	r3, r9
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	d400      	bmi.n	800108c <__aeabi_dsub+0x678>
 800108a:	e631      	b.n	8000cf0 <__aeabi_dsub+0x2dc>
 800108c:	464a      	mov	r2, r9
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <__aeabi_dsub+0x6d8>)
 8001090:	401a      	ands	r2, r3
 8001092:	2301      	movs	r3, #1
 8001094:	4691      	mov	r9, r2
 8001096:	4698      	mov	r8, r3
 8001098:	e62a      	b.n	8000cf0 <__aeabi_dsub+0x2dc>
 800109a:	0016      	movs	r6, r2
 800109c:	4664      	mov	r4, ip
 800109e:	3e20      	subs	r6, #32
 80010a0:	40f4      	lsrs	r4, r6
 80010a2:	46a0      	mov	r8, r4
 80010a4:	2a20      	cmp	r2, #32
 80010a6:	d005      	beq.n	80010b4 <__aeabi_dsub+0x6a0>
 80010a8:	2640      	movs	r6, #64	; 0x40
 80010aa:	4664      	mov	r4, ip
 80010ac:	1ab2      	subs	r2, r6, r2
 80010ae:	4094      	lsls	r4, r2
 80010b0:	4323      	orrs	r3, r4
 80010b2:	469a      	mov	sl, r3
 80010b4:	4654      	mov	r4, sl
 80010b6:	1e63      	subs	r3, r4, #1
 80010b8:	419c      	sbcs	r4, r3
 80010ba:	4643      	mov	r3, r8
 80010bc:	431c      	orrs	r4, r3
 80010be:	e5db      	b.n	8000c78 <__aeabi_dsub+0x264>
 80010c0:	0002      	movs	r2, r0
 80010c2:	2400      	movs	r4, #0
 80010c4:	2300      	movs	r3, #0
 80010c6:	e548      	b.n	8000b5a <__aeabi_dsub+0x146>
 80010c8:	19dc      	adds	r4, r3, r7
 80010ca:	42bc      	cmp	r4, r7
 80010cc:	41bf      	sbcs	r7, r7
 80010ce:	4461      	add	r1, ip
 80010d0:	4689      	mov	r9, r1
 80010d2:	427f      	negs	r7, r7
 80010d4:	44b9      	add	r9, r7
 80010d6:	e738      	b.n	8000f4a <__aeabi_dsub+0x536>
 80010d8:	464b      	mov	r3, r9
 80010da:	4323      	orrs	r3, r4
 80010dc:	d100      	bne.n	80010e0 <__aeabi_dsub+0x6cc>
 80010de:	e69f      	b.n	8000e20 <__aeabi_dsub+0x40c>
 80010e0:	e606      	b.n	8000cf0 <__aeabi_dsub+0x2dc>
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	000007fe 	.word	0x000007fe
 80010e8:	000007ff 	.word	0x000007ff
 80010ec:	ff7fffff 	.word	0xff7fffff
 80010f0:	08ff      	lsrs	r7, r7, #3
 80010f2:	074b      	lsls	r3, r1, #29
 80010f4:	433b      	orrs	r3, r7
 80010f6:	08cc      	lsrs	r4, r1, #3
 80010f8:	e616      	b.n	8000d28 <__aeabi_dsub+0x314>
 80010fa:	4662      	mov	r2, ip
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	0752      	lsls	r2, r2, #29
 8001100:	4313      	orrs	r3, r2
 8001102:	4662      	mov	r2, ip
 8001104:	08d4      	lsrs	r4, r2, #3
 8001106:	2280      	movs	r2, #128	; 0x80
 8001108:	0312      	lsls	r2, r2, #12
 800110a:	4214      	tst	r4, r2
 800110c:	d007      	beq.n	800111e <__aeabi_dsub+0x70a>
 800110e:	08c8      	lsrs	r0, r1, #3
 8001110:	4210      	tst	r0, r2
 8001112:	d104      	bne.n	800111e <__aeabi_dsub+0x70a>
 8001114:	465d      	mov	r5, fp
 8001116:	0004      	movs	r4, r0
 8001118:	08fb      	lsrs	r3, r7, #3
 800111a:	0749      	lsls	r1, r1, #29
 800111c:	430b      	orrs	r3, r1
 800111e:	0f5a      	lsrs	r2, r3, #29
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	0752      	lsls	r2, r2, #29
 8001124:	08db      	lsrs	r3, r3, #3
 8001126:	4313      	orrs	r3, r2
 8001128:	e5fe      	b.n	8000d28 <__aeabi_dsub+0x314>
 800112a:	2300      	movs	r3, #0
 800112c:	4a01      	ldr	r2, [pc, #4]	; (8001134 <__aeabi_dsub+0x720>)
 800112e:	001c      	movs	r4, r3
 8001130:	e513      	b.n	8000b5a <__aeabi_dsub+0x146>
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	000007ff 	.word	0x000007ff

08001138 <__aeabi_d2iz>:
 8001138:	000a      	movs	r2, r1
 800113a:	b530      	push	{r4, r5, lr}
 800113c:	4c13      	ldr	r4, [pc, #76]	; (800118c <__aeabi_d2iz+0x54>)
 800113e:	0053      	lsls	r3, r2, #1
 8001140:	0309      	lsls	r1, r1, #12
 8001142:	0005      	movs	r5, r0
 8001144:	0b09      	lsrs	r1, r1, #12
 8001146:	2000      	movs	r0, #0
 8001148:	0d5b      	lsrs	r3, r3, #21
 800114a:	0fd2      	lsrs	r2, r2, #31
 800114c:	42a3      	cmp	r3, r4
 800114e:	dd04      	ble.n	800115a <__aeabi_d2iz+0x22>
 8001150:	480f      	ldr	r0, [pc, #60]	; (8001190 <__aeabi_d2iz+0x58>)
 8001152:	4283      	cmp	r3, r0
 8001154:	dd02      	ble.n	800115c <__aeabi_d2iz+0x24>
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <__aeabi_d2iz+0x5c>)
 8001158:	18d0      	adds	r0, r2, r3
 800115a:	bd30      	pop	{r4, r5, pc}
 800115c:	2080      	movs	r0, #128	; 0x80
 800115e:	0340      	lsls	r0, r0, #13
 8001160:	4301      	orrs	r1, r0
 8001162:	480d      	ldr	r0, [pc, #52]	; (8001198 <__aeabi_d2iz+0x60>)
 8001164:	1ac0      	subs	r0, r0, r3
 8001166:	281f      	cmp	r0, #31
 8001168:	dd08      	ble.n	800117c <__aeabi_d2iz+0x44>
 800116a:	480c      	ldr	r0, [pc, #48]	; (800119c <__aeabi_d2iz+0x64>)
 800116c:	1ac3      	subs	r3, r0, r3
 800116e:	40d9      	lsrs	r1, r3
 8001170:	000b      	movs	r3, r1
 8001172:	4258      	negs	r0, r3
 8001174:	2a00      	cmp	r2, #0
 8001176:	d1f0      	bne.n	800115a <__aeabi_d2iz+0x22>
 8001178:	0018      	movs	r0, r3
 800117a:	e7ee      	b.n	800115a <__aeabi_d2iz+0x22>
 800117c:	4c08      	ldr	r4, [pc, #32]	; (80011a0 <__aeabi_d2iz+0x68>)
 800117e:	40c5      	lsrs	r5, r0
 8001180:	46a4      	mov	ip, r4
 8001182:	4463      	add	r3, ip
 8001184:	4099      	lsls	r1, r3
 8001186:	000b      	movs	r3, r1
 8001188:	432b      	orrs	r3, r5
 800118a:	e7f2      	b.n	8001172 <__aeabi_d2iz+0x3a>
 800118c:	000003fe 	.word	0x000003fe
 8001190:	0000041d 	.word	0x0000041d
 8001194:	7fffffff 	.word	0x7fffffff
 8001198:	00000433 	.word	0x00000433
 800119c:	00000413 	.word	0x00000413
 80011a0:	fffffbed 	.word	0xfffffbed

080011a4 <__aeabi_f2d>:
 80011a4:	b570      	push	{r4, r5, r6, lr}
 80011a6:	0043      	lsls	r3, r0, #1
 80011a8:	0246      	lsls	r6, r0, #9
 80011aa:	0fc4      	lsrs	r4, r0, #31
 80011ac:	20fe      	movs	r0, #254	; 0xfe
 80011ae:	0e1b      	lsrs	r3, r3, #24
 80011b0:	1c59      	adds	r1, r3, #1
 80011b2:	0a75      	lsrs	r5, r6, #9
 80011b4:	4208      	tst	r0, r1
 80011b6:	d00c      	beq.n	80011d2 <__aeabi_f2d+0x2e>
 80011b8:	22e0      	movs	r2, #224	; 0xe0
 80011ba:	0092      	lsls	r2, r2, #2
 80011bc:	4694      	mov	ip, r2
 80011be:	076d      	lsls	r5, r5, #29
 80011c0:	0b36      	lsrs	r6, r6, #12
 80011c2:	4463      	add	r3, ip
 80011c4:	051b      	lsls	r3, r3, #20
 80011c6:	4333      	orrs	r3, r6
 80011c8:	07e4      	lsls	r4, r4, #31
 80011ca:	4323      	orrs	r3, r4
 80011cc:	0028      	movs	r0, r5
 80011ce:	0019      	movs	r1, r3
 80011d0:	bd70      	pop	{r4, r5, r6, pc}
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d114      	bne.n	8001200 <__aeabi_f2d+0x5c>
 80011d6:	2d00      	cmp	r5, #0
 80011d8:	d01b      	beq.n	8001212 <__aeabi_f2d+0x6e>
 80011da:	0028      	movs	r0, r5
 80011dc:	f000 f868 	bl	80012b0 <__clzsi2>
 80011e0:	280a      	cmp	r0, #10
 80011e2:	dc1c      	bgt.n	800121e <__aeabi_f2d+0x7a>
 80011e4:	230b      	movs	r3, #11
 80011e6:	002e      	movs	r6, r5
 80011e8:	1a1b      	subs	r3, r3, r0
 80011ea:	40de      	lsrs	r6, r3
 80011ec:	0003      	movs	r3, r0
 80011ee:	3315      	adds	r3, #21
 80011f0:	409d      	lsls	r5, r3
 80011f2:	4a0e      	ldr	r2, [pc, #56]	; (800122c <__aeabi_f2d+0x88>)
 80011f4:	0336      	lsls	r6, r6, #12
 80011f6:	1a12      	subs	r2, r2, r0
 80011f8:	0552      	lsls	r2, r2, #21
 80011fa:	0b36      	lsrs	r6, r6, #12
 80011fc:	0d53      	lsrs	r3, r2, #21
 80011fe:	e7e1      	b.n	80011c4 <__aeabi_f2d+0x20>
 8001200:	2d00      	cmp	r5, #0
 8001202:	d009      	beq.n	8001218 <__aeabi_f2d+0x74>
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	0b36      	lsrs	r6, r6, #12
 8001208:	0312      	lsls	r2, r2, #12
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <__aeabi_f2d+0x8c>)
 800120c:	076d      	lsls	r5, r5, #29
 800120e:	4316      	orrs	r6, r2
 8001210:	e7d8      	b.n	80011c4 <__aeabi_f2d+0x20>
 8001212:	2300      	movs	r3, #0
 8001214:	2600      	movs	r6, #0
 8001216:	e7d5      	b.n	80011c4 <__aeabi_f2d+0x20>
 8001218:	2600      	movs	r6, #0
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <__aeabi_f2d+0x8c>)
 800121c:	e7d2      	b.n	80011c4 <__aeabi_f2d+0x20>
 800121e:	0003      	movs	r3, r0
 8001220:	3b0b      	subs	r3, #11
 8001222:	409d      	lsls	r5, r3
 8001224:	002e      	movs	r6, r5
 8001226:	2500      	movs	r5, #0
 8001228:	e7e3      	b.n	80011f2 <__aeabi_f2d+0x4e>
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	00000389 	.word	0x00000389
 8001230:	000007ff 	.word	0x000007ff

08001234 <__aeabi_cdrcmple>:
 8001234:	4684      	mov	ip, r0
 8001236:	0010      	movs	r0, r2
 8001238:	4662      	mov	r2, ip
 800123a:	468c      	mov	ip, r1
 800123c:	0019      	movs	r1, r3
 800123e:	4663      	mov	r3, ip
 8001240:	e000      	b.n	8001244 <__aeabi_cdcmpeq>
 8001242:	46c0      	nop			; (mov r8, r8)

08001244 <__aeabi_cdcmpeq>:
 8001244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001246:	f000 f8f9 	bl	800143c <__ledf2>
 800124a:	2800      	cmp	r0, #0
 800124c:	d401      	bmi.n	8001252 <__aeabi_cdcmpeq+0xe>
 800124e:	2100      	movs	r1, #0
 8001250:	42c8      	cmn	r0, r1
 8001252:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001254 <__aeabi_dcmpeq>:
 8001254:	b510      	push	{r4, lr}
 8001256:	f000 f849 	bl	80012ec <__eqdf2>
 800125a:	4240      	negs	r0, r0
 800125c:	3001      	adds	r0, #1
 800125e:	bd10      	pop	{r4, pc}

08001260 <__aeabi_dcmplt>:
 8001260:	b510      	push	{r4, lr}
 8001262:	f000 f8eb 	bl	800143c <__ledf2>
 8001266:	2800      	cmp	r0, #0
 8001268:	db01      	blt.n	800126e <__aeabi_dcmplt+0xe>
 800126a:	2000      	movs	r0, #0
 800126c:	bd10      	pop	{r4, pc}
 800126e:	2001      	movs	r0, #1
 8001270:	bd10      	pop	{r4, pc}
 8001272:	46c0      	nop			; (mov r8, r8)

08001274 <__aeabi_dcmple>:
 8001274:	b510      	push	{r4, lr}
 8001276:	f000 f8e1 	bl	800143c <__ledf2>
 800127a:	2800      	cmp	r0, #0
 800127c:	dd01      	ble.n	8001282 <__aeabi_dcmple+0xe>
 800127e:	2000      	movs	r0, #0
 8001280:	bd10      	pop	{r4, pc}
 8001282:	2001      	movs	r0, #1
 8001284:	bd10      	pop	{r4, pc}
 8001286:	46c0      	nop			; (mov r8, r8)

08001288 <__aeabi_dcmpgt>:
 8001288:	b510      	push	{r4, lr}
 800128a:	f000 f871 	bl	8001370 <__gedf2>
 800128e:	2800      	cmp	r0, #0
 8001290:	dc01      	bgt.n	8001296 <__aeabi_dcmpgt+0xe>
 8001292:	2000      	movs	r0, #0
 8001294:	bd10      	pop	{r4, pc}
 8001296:	2001      	movs	r0, #1
 8001298:	bd10      	pop	{r4, pc}
 800129a:	46c0      	nop			; (mov r8, r8)

0800129c <__aeabi_dcmpge>:
 800129c:	b510      	push	{r4, lr}
 800129e:	f000 f867 	bl	8001370 <__gedf2>
 80012a2:	2800      	cmp	r0, #0
 80012a4:	da01      	bge.n	80012aa <__aeabi_dcmpge+0xe>
 80012a6:	2000      	movs	r0, #0
 80012a8:	bd10      	pop	{r4, pc}
 80012aa:	2001      	movs	r0, #1
 80012ac:	bd10      	pop	{r4, pc}
 80012ae:	46c0      	nop			; (mov r8, r8)

080012b0 <__clzsi2>:
 80012b0:	211c      	movs	r1, #28
 80012b2:	2301      	movs	r3, #1
 80012b4:	041b      	lsls	r3, r3, #16
 80012b6:	4298      	cmp	r0, r3
 80012b8:	d301      	bcc.n	80012be <__clzsi2+0xe>
 80012ba:	0c00      	lsrs	r0, r0, #16
 80012bc:	3910      	subs	r1, #16
 80012be:	0a1b      	lsrs	r3, r3, #8
 80012c0:	4298      	cmp	r0, r3
 80012c2:	d301      	bcc.n	80012c8 <__clzsi2+0x18>
 80012c4:	0a00      	lsrs	r0, r0, #8
 80012c6:	3908      	subs	r1, #8
 80012c8:	091b      	lsrs	r3, r3, #4
 80012ca:	4298      	cmp	r0, r3
 80012cc:	d301      	bcc.n	80012d2 <__clzsi2+0x22>
 80012ce:	0900      	lsrs	r0, r0, #4
 80012d0:	3904      	subs	r1, #4
 80012d2:	a202      	add	r2, pc, #8	; (adr r2, 80012dc <__clzsi2+0x2c>)
 80012d4:	5c10      	ldrb	r0, [r2, r0]
 80012d6:	1840      	adds	r0, r0, r1
 80012d8:	4770      	bx	lr
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	02020304 	.word	0x02020304
 80012e0:	01010101 	.word	0x01010101
	...

080012ec <__eqdf2>:
 80012ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ee:	464e      	mov	r6, r9
 80012f0:	4645      	mov	r5, r8
 80012f2:	46de      	mov	lr, fp
 80012f4:	4657      	mov	r7, sl
 80012f6:	4690      	mov	r8, r2
 80012f8:	b5e0      	push	{r5, r6, r7, lr}
 80012fa:	0017      	movs	r7, r2
 80012fc:	031a      	lsls	r2, r3, #12
 80012fe:	0b12      	lsrs	r2, r2, #12
 8001300:	0005      	movs	r5, r0
 8001302:	4684      	mov	ip, r0
 8001304:	4819      	ldr	r0, [pc, #100]	; (800136c <__eqdf2+0x80>)
 8001306:	030e      	lsls	r6, r1, #12
 8001308:	004c      	lsls	r4, r1, #1
 800130a:	4691      	mov	r9, r2
 800130c:	005a      	lsls	r2, r3, #1
 800130e:	0fdb      	lsrs	r3, r3, #31
 8001310:	469b      	mov	fp, r3
 8001312:	0b36      	lsrs	r6, r6, #12
 8001314:	0d64      	lsrs	r4, r4, #21
 8001316:	0fc9      	lsrs	r1, r1, #31
 8001318:	0d52      	lsrs	r2, r2, #21
 800131a:	4284      	cmp	r4, r0
 800131c:	d019      	beq.n	8001352 <__eqdf2+0x66>
 800131e:	4282      	cmp	r2, r0
 8001320:	d010      	beq.n	8001344 <__eqdf2+0x58>
 8001322:	2001      	movs	r0, #1
 8001324:	4294      	cmp	r4, r2
 8001326:	d10e      	bne.n	8001346 <__eqdf2+0x5a>
 8001328:	454e      	cmp	r6, r9
 800132a:	d10c      	bne.n	8001346 <__eqdf2+0x5a>
 800132c:	2001      	movs	r0, #1
 800132e:	45c4      	cmp	ip, r8
 8001330:	d109      	bne.n	8001346 <__eqdf2+0x5a>
 8001332:	4559      	cmp	r1, fp
 8001334:	d017      	beq.n	8001366 <__eqdf2+0x7a>
 8001336:	2c00      	cmp	r4, #0
 8001338:	d105      	bne.n	8001346 <__eqdf2+0x5a>
 800133a:	0030      	movs	r0, r6
 800133c:	4328      	orrs	r0, r5
 800133e:	1e43      	subs	r3, r0, #1
 8001340:	4198      	sbcs	r0, r3
 8001342:	e000      	b.n	8001346 <__eqdf2+0x5a>
 8001344:	2001      	movs	r0, #1
 8001346:	bcf0      	pop	{r4, r5, r6, r7}
 8001348:	46bb      	mov	fp, r7
 800134a:	46b2      	mov	sl, r6
 800134c:	46a9      	mov	r9, r5
 800134e:	46a0      	mov	r8, r4
 8001350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001352:	0033      	movs	r3, r6
 8001354:	2001      	movs	r0, #1
 8001356:	432b      	orrs	r3, r5
 8001358:	d1f5      	bne.n	8001346 <__eqdf2+0x5a>
 800135a:	42a2      	cmp	r2, r4
 800135c:	d1f3      	bne.n	8001346 <__eqdf2+0x5a>
 800135e:	464b      	mov	r3, r9
 8001360:	433b      	orrs	r3, r7
 8001362:	d1f0      	bne.n	8001346 <__eqdf2+0x5a>
 8001364:	e7e2      	b.n	800132c <__eqdf2+0x40>
 8001366:	2000      	movs	r0, #0
 8001368:	e7ed      	b.n	8001346 <__eqdf2+0x5a>
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	000007ff 	.word	0x000007ff

08001370 <__gedf2>:
 8001370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001372:	4647      	mov	r7, r8
 8001374:	46ce      	mov	lr, r9
 8001376:	0004      	movs	r4, r0
 8001378:	0018      	movs	r0, r3
 800137a:	0016      	movs	r6, r2
 800137c:	031b      	lsls	r3, r3, #12
 800137e:	0b1b      	lsrs	r3, r3, #12
 8001380:	4d2d      	ldr	r5, [pc, #180]	; (8001438 <__gedf2+0xc8>)
 8001382:	004a      	lsls	r2, r1, #1
 8001384:	4699      	mov	r9, r3
 8001386:	b580      	push	{r7, lr}
 8001388:	0043      	lsls	r3, r0, #1
 800138a:	030f      	lsls	r7, r1, #12
 800138c:	46a4      	mov	ip, r4
 800138e:	46b0      	mov	r8, r6
 8001390:	0b3f      	lsrs	r7, r7, #12
 8001392:	0d52      	lsrs	r2, r2, #21
 8001394:	0fc9      	lsrs	r1, r1, #31
 8001396:	0d5b      	lsrs	r3, r3, #21
 8001398:	0fc0      	lsrs	r0, r0, #31
 800139a:	42aa      	cmp	r2, r5
 800139c:	d021      	beq.n	80013e2 <__gedf2+0x72>
 800139e:	42ab      	cmp	r3, r5
 80013a0:	d013      	beq.n	80013ca <__gedf2+0x5a>
 80013a2:	2a00      	cmp	r2, #0
 80013a4:	d122      	bne.n	80013ec <__gedf2+0x7c>
 80013a6:	433c      	orrs	r4, r7
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d102      	bne.n	80013b2 <__gedf2+0x42>
 80013ac:	464d      	mov	r5, r9
 80013ae:	432e      	orrs	r6, r5
 80013b0:	d022      	beq.n	80013f8 <__gedf2+0x88>
 80013b2:	2c00      	cmp	r4, #0
 80013b4:	d010      	beq.n	80013d8 <__gedf2+0x68>
 80013b6:	4281      	cmp	r1, r0
 80013b8:	d022      	beq.n	8001400 <__gedf2+0x90>
 80013ba:	2002      	movs	r0, #2
 80013bc:	3901      	subs	r1, #1
 80013be:	4008      	ands	r0, r1
 80013c0:	3801      	subs	r0, #1
 80013c2:	bcc0      	pop	{r6, r7}
 80013c4:	46b9      	mov	r9, r7
 80013c6:	46b0      	mov	r8, r6
 80013c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ca:	464d      	mov	r5, r9
 80013cc:	432e      	orrs	r6, r5
 80013ce:	d129      	bne.n	8001424 <__gedf2+0xb4>
 80013d0:	2a00      	cmp	r2, #0
 80013d2:	d1f0      	bne.n	80013b6 <__gedf2+0x46>
 80013d4:	433c      	orrs	r4, r7
 80013d6:	d1ee      	bne.n	80013b6 <__gedf2+0x46>
 80013d8:	2800      	cmp	r0, #0
 80013da:	d1f2      	bne.n	80013c2 <__gedf2+0x52>
 80013dc:	2001      	movs	r0, #1
 80013de:	4240      	negs	r0, r0
 80013e0:	e7ef      	b.n	80013c2 <__gedf2+0x52>
 80013e2:	003d      	movs	r5, r7
 80013e4:	4325      	orrs	r5, r4
 80013e6:	d11d      	bne.n	8001424 <__gedf2+0xb4>
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d0ee      	beq.n	80013ca <__gedf2+0x5a>
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1e2      	bne.n	80013b6 <__gedf2+0x46>
 80013f0:	464c      	mov	r4, r9
 80013f2:	4326      	orrs	r6, r4
 80013f4:	d1df      	bne.n	80013b6 <__gedf2+0x46>
 80013f6:	e7e0      	b.n	80013ba <__gedf2+0x4a>
 80013f8:	2000      	movs	r0, #0
 80013fa:	2c00      	cmp	r4, #0
 80013fc:	d0e1      	beq.n	80013c2 <__gedf2+0x52>
 80013fe:	e7dc      	b.n	80013ba <__gedf2+0x4a>
 8001400:	429a      	cmp	r2, r3
 8001402:	dc0a      	bgt.n	800141a <__gedf2+0xaa>
 8001404:	dbe8      	blt.n	80013d8 <__gedf2+0x68>
 8001406:	454f      	cmp	r7, r9
 8001408:	d8d7      	bhi.n	80013ba <__gedf2+0x4a>
 800140a:	d00e      	beq.n	800142a <__gedf2+0xba>
 800140c:	2000      	movs	r0, #0
 800140e:	454f      	cmp	r7, r9
 8001410:	d2d7      	bcs.n	80013c2 <__gedf2+0x52>
 8001412:	2900      	cmp	r1, #0
 8001414:	d0e2      	beq.n	80013dc <__gedf2+0x6c>
 8001416:	0008      	movs	r0, r1
 8001418:	e7d3      	b.n	80013c2 <__gedf2+0x52>
 800141a:	4243      	negs	r3, r0
 800141c:	4158      	adcs	r0, r3
 800141e:	0040      	lsls	r0, r0, #1
 8001420:	3801      	subs	r0, #1
 8001422:	e7ce      	b.n	80013c2 <__gedf2+0x52>
 8001424:	2002      	movs	r0, #2
 8001426:	4240      	negs	r0, r0
 8001428:	e7cb      	b.n	80013c2 <__gedf2+0x52>
 800142a:	45c4      	cmp	ip, r8
 800142c:	d8c5      	bhi.n	80013ba <__gedf2+0x4a>
 800142e:	2000      	movs	r0, #0
 8001430:	45c4      	cmp	ip, r8
 8001432:	d2c6      	bcs.n	80013c2 <__gedf2+0x52>
 8001434:	e7ed      	b.n	8001412 <__gedf2+0xa2>
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	000007ff 	.word	0x000007ff

0800143c <__ledf2>:
 800143c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143e:	4647      	mov	r7, r8
 8001440:	46ce      	mov	lr, r9
 8001442:	0004      	movs	r4, r0
 8001444:	0018      	movs	r0, r3
 8001446:	0016      	movs	r6, r2
 8001448:	031b      	lsls	r3, r3, #12
 800144a:	0b1b      	lsrs	r3, r3, #12
 800144c:	4d2c      	ldr	r5, [pc, #176]	; (8001500 <__ledf2+0xc4>)
 800144e:	004a      	lsls	r2, r1, #1
 8001450:	4699      	mov	r9, r3
 8001452:	b580      	push	{r7, lr}
 8001454:	0043      	lsls	r3, r0, #1
 8001456:	030f      	lsls	r7, r1, #12
 8001458:	46a4      	mov	ip, r4
 800145a:	46b0      	mov	r8, r6
 800145c:	0b3f      	lsrs	r7, r7, #12
 800145e:	0d52      	lsrs	r2, r2, #21
 8001460:	0fc9      	lsrs	r1, r1, #31
 8001462:	0d5b      	lsrs	r3, r3, #21
 8001464:	0fc0      	lsrs	r0, r0, #31
 8001466:	42aa      	cmp	r2, r5
 8001468:	d00d      	beq.n	8001486 <__ledf2+0x4a>
 800146a:	42ab      	cmp	r3, r5
 800146c:	d010      	beq.n	8001490 <__ledf2+0x54>
 800146e:	2a00      	cmp	r2, #0
 8001470:	d127      	bne.n	80014c2 <__ledf2+0x86>
 8001472:	433c      	orrs	r4, r7
 8001474:	2b00      	cmp	r3, #0
 8001476:	d111      	bne.n	800149c <__ledf2+0x60>
 8001478:	464d      	mov	r5, r9
 800147a:	432e      	orrs	r6, r5
 800147c:	d10e      	bne.n	800149c <__ledf2+0x60>
 800147e:	2000      	movs	r0, #0
 8001480:	2c00      	cmp	r4, #0
 8001482:	d015      	beq.n	80014b0 <__ledf2+0x74>
 8001484:	e00e      	b.n	80014a4 <__ledf2+0x68>
 8001486:	003d      	movs	r5, r7
 8001488:	4325      	orrs	r5, r4
 800148a:	d110      	bne.n	80014ae <__ledf2+0x72>
 800148c:	4293      	cmp	r3, r2
 800148e:	d118      	bne.n	80014c2 <__ledf2+0x86>
 8001490:	464d      	mov	r5, r9
 8001492:	432e      	orrs	r6, r5
 8001494:	d10b      	bne.n	80014ae <__ledf2+0x72>
 8001496:	2a00      	cmp	r2, #0
 8001498:	d102      	bne.n	80014a0 <__ledf2+0x64>
 800149a:	433c      	orrs	r4, r7
 800149c:	2c00      	cmp	r4, #0
 800149e:	d00b      	beq.n	80014b8 <__ledf2+0x7c>
 80014a0:	4281      	cmp	r1, r0
 80014a2:	d014      	beq.n	80014ce <__ledf2+0x92>
 80014a4:	2002      	movs	r0, #2
 80014a6:	3901      	subs	r1, #1
 80014a8:	4008      	ands	r0, r1
 80014aa:	3801      	subs	r0, #1
 80014ac:	e000      	b.n	80014b0 <__ledf2+0x74>
 80014ae:	2002      	movs	r0, #2
 80014b0:	bcc0      	pop	{r6, r7}
 80014b2:	46b9      	mov	r9, r7
 80014b4:	46b0      	mov	r8, r6
 80014b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b8:	2800      	cmp	r0, #0
 80014ba:	d1f9      	bne.n	80014b0 <__ledf2+0x74>
 80014bc:	2001      	movs	r0, #1
 80014be:	4240      	negs	r0, r0
 80014c0:	e7f6      	b.n	80014b0 <__ledf2+0x74>
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1ec      	bne.n	80014a0 <__ledf2+0x64>
 80014c6:	464c      	mov	r4, r9
 80014c8:	4326      	orrs	r6, r4
 80014ca:	d1e9      	bne.n	80014a0 <__ledf2+0x64>
 80014cc:	e7ea      	b.n	80014a4 <__ledf2+0x68>
 80014ce:	429a      	cmp	r2, r3
 80014d0:	dd04      	ble.n	80014dc <__ledf2+0xa0>
 80014d2:	4243      	negs	r3, r0
 80014d4:	4158      	adcs	r0, r3
 80014d6:	0040      	lsls	r0, r0, #1
 80014d8:	3801      	subs	r0, #1
 80014da:	e7e9      	b.n	80014b0 <__ledf2+0x74>
 80014dc:	429a      	cmp	r2, r3
 80014de:	dbeb      	blt.n	80014b8 <__ledf2+0x7c>
 80014e0:	454f      	cmp	r7, r9
 80014e2:	d8df      	bhi.n	80014a4 <__ledf2+0x68>
 80014e4:	d006      	beq.n	80014f4 <__ledf2+0xb8>
 80014e6:	2000      	movs	r0, #0
 80014e8:	454f      	cmp	r7, r9
 80014ea:	d2e1      	bcs.n	80014b0 <__ledf2+0x74>
 80014ec:	2900      	cmp	r1, #0
 80014ee:	d0e5      	beq.n	80014bc <__ledf2+0x80>
 80014f0:	0008      	movs	r0, r1
 80014f2:	e7dd      	b.n	80014b0 <__ledf2+0x74>
 80014f4:	45c4      	cmp	ip, r8
 80014f6:	d8d5      	bhi.n	80014a4 <__ledf2+0x68>
 80014f8:	2000      	movs	r0, #0
 80014fa:	45c4      	cmp	ip, r8
 80014fc:	d2d8      	bcs.n	80014b0 <__ledf2+0x74>
 80014fe:	e7f5      	b.n	80014ec <__ledf2+0xb0>
 8001500:	000007ff 	.word	0x000007ff

08001504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_GPIO_Init+0x40>)
 800150c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <MX_GPIO_Init+0x40>)
 8001510:	2101      	movs	r1, #1
 8001512:	430a      	orrs	r2, r1
 8001514:	635a      	str	r2, [r3, #52]	; 0x34
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <MX_GPIO_Init+0x40>)
 8001518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800151a:	2201      	movs	r2, #1
 800151c:	4013      	ands	r3, r2
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <MX_GPIO_Init+0x40>)
 8001524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <MX_GPIO_Init+0x40>)
 8001528:	2104      	movs	r1, #4
 800152a:	430a      	orrs	r2, r1
 800152c:	635a      	str	r2, [r3, #52]	; 0x34
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <MX_GPIO_Init+0x40>)
 8001530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001532:	2204      	movs	r2, #4
 8001534:	4013      	ands	r3, r2
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	683b      	ldr	r3, [r7, #0]

}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	46bd      	mov	sp, r7
 800153e:	b002      	add	sp, #8
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	40021000 	.word	0x40021000

08001548 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <__io_putchar+0x20>)
 8001552:	1d39      	adds	r1, r7, #4
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <__io_putchar+0x24>)
 8001556:	2201      	movs	r2, #1
 8001558:	f002 fa5e 	bl	8003a18 <HAL_UART_Transmit>
	return ch;
 800155c:	687b      	ldr	r3, [r7, #4]
}
 800155e:	0018      	movs	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	b002      	add	sp, #8
 8001564:	bd80      	pop	{r7, pc}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	0000ffff 	.word	0x0000ffff
 800156c:	200000e8 	.word	0x200000e8

08001570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001574:	f000 fdae 	bl	80020d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001578:	f000 f84a 	bl	8001610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800157c:	f7ff ffc2 	bl	8001504 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001580:	f000 fa3e 	bl	8001a00 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001584:	f000 fa8a 	bl	8001a9c <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8001588:	f000 f96c 	bl	8001864 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
	xl320.serial.transmit = uart_half_duplex_transmit;
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <main+0x8c>)
 800158e:	4a1c      	ldr	r2, [pc, #112]	; (8001600 <main+0x90>)
 8001590:	605a      	str	r2, [r3, #4]
	xl320.serial.receive  = uart_half_duplex_receive;
 8001592:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <main+0x8c>)
 8001594:	4a1b      	ldr	r2, [pc, #108]	; (8001604 <main+0x94>)
 8001596:	609a      	str	r2, [r3, #8]

	xl320_init(&xl320, 1, BR_1M);
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <main+0x8c>)
 800159a:	2203      	movs	r2, #3
 800159c:	2101      	movs	r1, #1
 800159e:	0018      	movs	r0, r3
 80015a0:	f000 fb74 	bl	8001c8c <xl320_init>
	xl320_setSpeed(&xl320, 20);
 80015a4:	4a18      	ldr	r2, [pc, #96]	; (8001608 <main+0x98>)
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <main+0x8c>)
 80015a8:	1c11      	adds	r1, r2, #0
 80015aa:	0018      	movs	r0, r3
 80015ac:	f000 fcfe 	bl	8001fac <xl320_setSpeed>
	xl320_torqueEnable(&xl320);
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <main+0x8c>)
 80015b2:	0018      	movs	r0, r3
 80015b4:	f000 fd4c 	bl	8002050 <xl320_torqueEnable>
	HAL_Delay(250);
 80015b8:	20fa      	movs	r0, #250	; 0xfa
 80015ba:	f000 fe11 	bl	80021e0 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		xl320_setGoalPosition(&xl320, 75);
 80015be:	4a13      	ldr	r2, [pc, #76]	; (800160c <main+0x9c>)
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <main+0x8c>)
 80015c2:	1c11      	adds	r1, r2, #0
 80015c4:	0018      	movs	r0, r3
 80015c6:	f000 fcb9 	bl	8001f3c <xl320_setGoalPosition>
		xl320_executeAction(&xl320);
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <main+0x8c>)
 80015cc:	0018      	movs	r0, r3
 80015ce:	f000 fd2f 	bl	8002030 <xl320_executeAction>
		HAL_Delay(2000);
 80015d2:	23fa      	movs	r3, #250	; 0xfa
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	0018      	movs	r0, r3
 80015d8:	f000 fe02 	bl	80021e0 <HAL_Delay>
		xl320_setGoalPosition(&xl320, 0);
 80015dc:	2200      	movs	r2, #0
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <main+0x8c>)
 80015e0:	1c11      	adds	r1, r2, #0
 80015e2:	0018      	movs	r0, r3
 80015e4:	f000 fcaa 	bl	8001f3c <xl320_setGoalPosition>
		xl320_executeAction(&xl320);
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <main+0x8c>)
 80015ea:	0018      	movs	r0, r3
 80015ec:	f000 fd20 	bl	8002030 <xl320_executeAction>
		HAL_Delay(2000);
 80015f0:	23fa      	movs	r3, #250	; 0xfa
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	0018      	movs	r0, r3
 80015f6:	f000 fdf3 	bl	80021e0 <HAL_Delay>
		xl320_setGoalPosition(&xl320, 75);
 80015fa:	e7e0      	b.n	80015be <main+0x4e>
 80015fc:	2000008c 	.word	0x2000008c
 8001600:	08001991 	.word	0x08001991
 8001604:	080019c9 	.word	0x080019c9
 8001608:	41a00000 	.word	0x41a00000
 800160c:	42960000 	.word	0x42960000

08001610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b093      	sub	sp, #76	; 0x4c
 8001614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001616:	2414      	movs	r4, #20
 8001618:	193b      	adds	r3, r7, r4
 800161a:	0018      	movs	r0, r3
 800161c:	2334      	movs	r3, #52	; 0x34
 800161e:	001a      	movs	r2, r3
 8001620:	2100      	movs	r1, #0
 8001622:	f003 f8ea 	bl	80047fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	0018      	movs	r0, r3
 800162a:	2310      	movs	r3, #16
 800162c:	001a      	movs	r2, r3
 800162e:	2100      	movs	r1, #0
 8001630:	f003 f8e3 	bl	80047fa <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	0018      	movs	r0, r3
 800163a:	f001 f80d 	bl	8002658 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800163e:	193b      	adds	r3, r7, r4
 8001640:	2202      	movs	r2, #2
 8001642:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001644:	193b      	adds	r3, r7, r4
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	0052      	lsls	r2, r2, #1
 800164a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800164c:	193b      	adds	r3, r7, r4
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001652:	193b      	adds	r3, r7, r4
 8001654:	2240      	movs	r2, #64	; 0x40
 8001656:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001658:	193b      	adds	r3, r7, r4
 800165a:	2200      	movs	r2, #0
 800165c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800165e:	193b      	adds	r3, r7, r4
 8001660:	0018      	movs	r0, r3
 8001662:	f001 f845 	bl	80026f0 <HAL_RCC_OscConfig>
 8001666:	1e03      	subs	r3, r0, #0
 8001668:	d001      	beq.n	800166e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800166a:	f000 f819 	bl	80016a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2207      	movs	r2, #7
 8001672:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2200      	movs	r2, #0
 8001678:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	2100      	movs	r1, #0
 800168a:	0018      	movs	r0, r3
 800168c:	f001 fb40 	bl	8002d10 <HAL_RCC_ClockConfig>
 8001690:	1e03      	subs	r3, r0, #0
 8001692:	d001      	beq.n	8001698 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001694:	f000 f804 	bl	80016a0 <Error_Handler>
  }
}
 8001698:	46c0      	nop			; (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	b013      	add	sp, #76	; 0x4c
 800169e:	bd90      	pop	{r4, r7, pc}

080016a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a4:	b672      	cpsid	i
}
 80016a6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016a8:	e7fe      	b.n	80016a8 <Error_Handler+0x8>
	...

080016ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <HAL_MspInit+0x44>)
 80016b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <HAL_MspInit+0x44>)
 80016b8:	2101      	movs	r1, #1
 80016ba:	430a      	orrs	r2, r1
 80016bc:	641a      	str	r2, [r3, #64]	; 0x40
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <HAL_MspInit+0x44>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	2201      	movs	r2, #1
 80016c4:	4013      	ands	r3, r2
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_MspInit+0x44>)
 80016cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <HAL_MspInit+0x44>)
 80016d0:	2180      	movs	r1, #128	; 0x80
 80016d2:	0549      	lsls	r1, r1, #21
 80016d4:	430a      	orrs	r2, r1
 80016d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_MspInit+0x44>)
 80016da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016dc:	2380      	movs	r3, #128	; 0x80
 80016de:	055b      	lsls	r3, r3, #21
 80016e0:	4013      	ands	r3, r2
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b002      	add	sp, #8
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	40021000 	.word	0x40021000

080016f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <NMI_Handler+0x4>

080016fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <HardFault_Handler+0x4>

08001700 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001704:	46c0      	nop			; (mov r8, r8)
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001718:	f000 fd46 	bl	80021a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800171c:	46c0      	nop			; (mov r8, r8)
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	e00a      	b.n	800174a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001734:	e000      	b.n	8001738 <_read+0x16>
 8001736:	bf00      	nop
 8001738:	0001      	movs	r1, r0
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	60ba      	str	r2, [r7, #8]
 8001740:	b2ca      	uxtb	r2, r1
 8001742:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3301      	adds	r3, #1
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	429a      	cmp	r2, r3
 8001750:	dbf0      	blt.n	8001734 <_read+0x12>
	}

return len;
 8001752:	687b      	ldr	r3, [r7, #4]
}
 8001754:	0018      	movs	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	b006      	add	sp, #24
 800175a:	bd80      	pop	{r7, pc}

0800175c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	e009      	b.n	8001782 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	60ba      	str	r2, [r7, #8]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	0018      	movs	r0, r3
 8001778:	f7ff fee6 	bl	8001548 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	3301      	adds	r3, #1
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	429a      	cmp	r2, r3
 8001788:	dbf1      	blt.n	800176e <_write+0x12>
	}
	return len;
 800178a:	687b      	ldr	r3, [r7, #4]
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b006      	add	sp, #24
 8001792:	bd80      	pop	{r7, pc}

08001794 <_close>:

int _close(int file)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	return -1;
 800179c:	2301      	movs	r3, #1
 800179e:	425b      	negs	r3, r3
}
 80017a0:	0018      	movs	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b002      	add	sp, #8
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2280      	movs	r2, #128	; 0x80
 80017b6:	0192      	lsls	r2, r2, #6
 80017b8:	605a      	str	r2, [r3, #4]
	return 0;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	0018      	movs	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	b002      	add	sp, #8
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <_isatty>:

int _isatty(int file)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	return 1;
 80017cc:	2301      	movs	r3, #1
}
 80017ce:	0018      	movs	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b002      	add	sp, #8
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b084      	sub	sp, #16
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
	return 0;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	0018      	movs	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b004      	add	sp, #16
 80017ea:	bd80      	pop	{r7, pc}

080017ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f4:	4a14      	ldr	r2, [pc, #80]	; (8001848 <_sbrk+0x5c>)
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <_sbrk+0x60>)
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <_sbrk+0x64>)
 800180a:	4a12      	ldr	r2, [pc, #72]	; (8001854 <_sbrk+0x68>)
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	18d3      	adds	r3, r2, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	429a      	cmp	r2, r3
 800181a:	d207      	bcs.n	800182c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800181c:	f002 ffa6 	bl	800476c <__errno>
 8001820:	0003      	movs	r3, r0
 8001822:	220c      	movs	r2, #12
 8001824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001826:	2301      	movs	r3, #1
 8001828:	425b      	negs	r3, r3
 800182a:	e009      	b.n	8001840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	18d2      	adds	r2, r2, r3
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <_sbrk+0x64>)
 800183c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800183e:	68fb      	ldr	r3, [r7, #12]
}
 8001840:	0018      	movs	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	b006      	add	sp, #24
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20009000 	.word	0x20009000
 800184c:	00000400 	.word	0x00000400
 8001850:	20000098 	.word	0x20000098
 8001854:	20000228 	.word	0x20000228

08001858 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800185c:	46c0      	nop			; (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800186a:	003b      	movs	r3, r7
 800186c:	0018      	movs	r0, r3
 800186e:	2310      	movs	r3, #16
 8001870:	001a      	movs	r2, r3
 8001872:	2100      	movs	r1, #0
 8001874:	f002 ffc1 	bl	80047fa <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <MX_TIM14_Init+0x8c>)
 800187a:	4a1e      	ldr	r2, [pc, #120]	; (80018f4 <MX_TIM14_Init+0x90>)
 800187c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800187e:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <MX_TIM14_Init+0x8c>)
 8001880:	2200      	movs	r2, #0
 8001882:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001884:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <MX_TIM14_Init+0x8c>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800188a:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <MX_TIM14_Init+0x8c>)
 800188c:	4a1a      	ldr	r2, [pc, #104]	; (80018f8 <MX_TIM14_Init+0x94>)
 800188e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001890:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <MX_TIM14_Init+0x8c>)
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <MX_TIM14_Init+0x8c>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <MX_TIM14_Init+0x8c>)
 800189e:	0018      	movs	r0, r3
 80018a0:	f001 fd14 	bl	80032cc <HAL_TIM_Base_Init>
 80018a4:	1e03      	subs	r3, r0, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 80018a8:	f7ff fefa 	bl	80016a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 80018ac:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <MX_TIM14_Init+0x8c>)
 80018ae:	0018      	movs	r0, r3
 80018b0:	f001 fd64 	bl	800337c <HAL_TIM_IC_Init>
 80018b4:	1e03      	subs	r3, r0, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 80018b8:	f7ff fef2 	bl	80016a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018bc:	003b      	movs	r3, r7
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018c2:	003b      	movs	r3, r7
 80018c4:	2201      	movs	r2, #1
 80018c6:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018c8:	003b      	movs	r3, r7
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 80018ce:	003b      	movs	r3, r7
 80018d0:	2200      	movs	r2, #0
 80018d2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80018d4:	0039      	movs	r1, r7
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <MX_TIM14_Init+0x8c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	0018      	movs	r0, r3
 80018dc:	f001 fdae 	bl	800343c <HAL_TIM_IC_ConfigChannel>
 80018e0:	1e03      	subs	r3, r0, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80018e4:	f7ff fedc 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80018e8:	46c0      	nop			; (mov r8, r8)
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b004      	add	sp, #16
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	2000009c 	.word	0x2000009c
 80018f4:	40002000 	.word	0x40002000
 80018f8:	0000ffff 	.word	0x0000ffff

080018fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b08b      	sub	sp, #44	; 0x2c
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	2414      	movs	r4, #20
 8001906:	193b      	adds	r3, r7, r4
 8001908:	0018      	movs	r0, r3
 800190a:	2314      	movs	r3, #20
 800190c:	001a      	movs	r2, r3
 800190e:	2100      	movs	r1, #0
 8001910:	f002 ff73 	bl	80047fa <memset>
  if(tim_baseHandle->Instance==TIM14)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a1b      	ldr	r2, [pc, #108]	; (8001988 <HAL_TIM_Base_MspInit+0x8c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d130      	bne.n	8001980 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800191e:	4b1b      	ldr	r3, [pc, #108]	; (800198c <HAL_TIM_Base_MspInit+0x90>)
 8001920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001922:	4b1a      	ldr	r3, [pc, #104]	; (800198c <HAL_TIM_Base_MspInit+0x90>)
 8001924:	2180      	movs	r1, #128	; 0x80
 8001926:	0209      	lsls	r1, r1, #8
 8001928:	430a      	orrs	r2, r1
 800192a:	641a      	str	r2, [r3, #64]	; 0x40
 800192c:	4b17      	ldr	r3, [pc, #92]	; (800198c <HAL_TIM_Base_MspInit+0x90>)
 800192e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	021b      	lsls	r3, r3, #8
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	4b14      	ldr	r3, [pc, #80]	; (800198c <HAL_TIM_Base_MspInit+0x90>)
 800193c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <HAL_TIM_Base_MspInit+0x90>)
 8001940:	2101      	movs	r1, #1
 8001942:	430a      	orrs	r2, r1
 8001944:	635a      	str	r2, [r3, #52]	; 0x34
 8001946:	4b11      	ldr	r3, [pc, #68]	; (800198c <HAL_TIM_Base_MspInit+0x90>)
 8001948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800194a:	2201      	movs	r2, #1
 800194c:	4013      	ands	r3, r2
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
    /**TIM14 GPIO Configuration
    PA4     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001952:	0021      	movs	r1, r4
 8001954:	187b      	adds	r3, r7, r1
 8001956:	2210      	movs	r2, #16
 8001958:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	187b      	adds	r3, r7, r1
 800195c:	2202      	movs	r2, #2
 800195e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	187b      	adds	r3, r7, r1
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	187b      	adds	r3, r7, r1
 8001968:	2200      	movs	r2, #0
 800196a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 800196c:	187b      	adds	r3, r7, r1
 800196e:	2204      	movs	r2, #4
 8001970:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001972:	187a      	adds	r2, r7, r1
 8001974:	23a0      	movs	r3, #160	; 0xa0
 8001976:	05db      	lsls	r3, r3, #23
 8001978:	0011      	movs	r1, r2
 800197a:	0018      	movs	r0, r3
 800197c:	f000 fd08 	bl	8002390 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8001980:	46c0      	nop			; (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	b00b      	add	sp, #44	; 0x2c
 8001986:	bd90      	pop	{r4, r7, pc}
 8001988:	40002000 	.word	0x40002000
 800198c:	40021000 	.word	0x40021000

08001990 <uart_half_duplex_transmit>:
 *  Created on: Oct 27, 2022
 *      Author: lucas
 */
#include "uart_half_duplex_driver.h"

int uart_half_duplex_transmit(uint8_t *pData, uint16_t size, uint32_t timeout){
 8001990:	b5b0      	push	{r4, r5, r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	607a      	str	r2, [r7, #4]
 800199a:	250a      	movs	r5, #10
 800199c:	197b      	adds	r3, r7, r5
 800199e:	1c0a      	adds	r2, r1, #0
 80019a0:	801a      	strh	r2, [r3, #0]
	HAL_HalfDuplex_EnableTransmitter(&USART_PORT);
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <uart_half_duplex_transmit+0x34>)
 80019a4:	0018      	movs	r0, r3
 80019a6:	f002 f9b5 	bl	8003d14 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&USART_PORT, pData, size, timeout);
 80019aa:	687c      	ldr	r4, [r7, #4]
 80019ac:	197b      	adds	r3, r7, r5
 80019ae:	881a      	ldrh	r2, [r3, #0]
 80019b0:	68f9      	ldr	r1, [r7, #12]
 80019b2:	4804      	ldr	r0, [pc, #16]	; (80019c4 <uart_half_duplex_transmit+0x34>)
 80019b4:	0023      	movs	r3, r4
 80019b6:	f002 f82f 	bl	8003a18 <HAL_UART_Transmit>

	return 0;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	0018      	movs	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	b004      	add	sp, #16
 80019c2:	bdb0      	pop	{r4, r5, r7, pc}
 80019c4:	2000017c 	.word	0x2000017c

080019c8 <uart_half_duplex_receive>:

int uart_half_duplex_receive(uint8_t *pData, uint16_t size, uint32_t timeout) {
 80019c8:	b5b0      	push	{r4, r5, r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	607a      	str	r2, [r7, #4]
 80019d2:	250a      	movs	r5, #10
 80019d4:	197b      	adds	r3, r7, r5
 80019d6:	1c0a      	adds	r2, r1, #0
 80019d8:	801a      	strh	r2, [r3, #0]
	HAL_HalfDuplex_EnableReceiver(&USART_PORT);
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <uart_half_duplex_receive+0x34>)
 80019dc:	0018      	movs	r0, r3
 80019de:	f002 f9eb 	bl	8003db8 <HAL_HalfDuplex_EnableReceiver>
	HAL_UART_Receive(&USART_PORT, pData, size, timeout);
 80019e2:	687c      	ldr	r4, [r7, #4]
 80019e4:	197b      	adds	r3, r7, r5
 80019e6:	881a      	ldrh	r2, [r3, #0]
 80019e8:	68f9      	ldr	r1, [r7, #12]
 80019ea:	4804      	ldr	r0, [pc, #16]	; (80019fc <uart_half_duplex_receive+0x34>)
 80019ec:	0023      	movs	r3, r4
 80019ee:	f002 f8af 	bl	8003b50 <HAL_UART_Receive>

	return 0;
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b004      	add	sp, #16
 80019fa:	bdb0      	pop	{r4, r5, r7, pc}
 80019fc:	2000017c 	.word	0x2000017c

08001a00 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a04:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <MX_USART1_UART_Init+0x94>)
 8001a06:	4a24      	ldr	r2, [pc, #144]	; (8001a98 <MX_USART1_UART_Init+0x98>)
 8001a08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a0a:	4b22      	ldr	r3, [pc, #136]	; (8001a94 <MX_USART1_UART_Init+0x94>)
 8001a0c:	22e1      	movs	r2, #225	; 0xe1
 8001a0e:	0252      	lsls	r2, r2, #9
 8001a10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a12:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <MX_USART1_UART_Init+0x94>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a18:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <MX_USART1_UART_Init+0x94>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a1e:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <MX_USART1_UART_Init+0x94>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a24:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <MX_USART1_UART_Init+0x94>)
 8001a26:	220c      	movs	r2, #12
 8001a28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <MX_USART1_UART_Init+0x94>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <MX_USART1_UART_Init+0x94>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a36:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <MX_USART1_UART_Init+0x94>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a3c:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <MX_USART1_UART_Init+0x94>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a42:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <MX_USART1_UART_Init+0x94>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <MX_USART1_UART_Init+0x94>)
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f001 ff30 	bl	80038b0 <HAL_UART_Init>
 8001a50:	1e03      	subs	r3, r0, #0
 8001a52:	d001      	beq.n	8001a58 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a54:	f7ff fe24 	bl	80016a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a58:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <MX_USART1_UART_Init+0x94>)
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f002 fda5 	bl	80045ac <HAL_UARTEx_SetTxFifoThreshold>
 8001a62:	1e03      	subs	r3, r0, #0
 8001a64:	d001      	beq.n	8001a6a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a66:	f7ff fe1b 	bl	80016a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <MX_USART1_UART_Init+0x94>)
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f002 fddc 	bl	800462c <HAL_UARTEx_SetRxFifoThreshold>
 8001a74:	1e03      	subs	r3, r0, #0
 8001a76:	d001      	beq.n	8001a7c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a78:	f7ff fe12 	bl	80016a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <MX_USART1_UART_Init+0x94>)
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f002 fd5a 	bl	8004538 <HAL_UARTEx_DisableFifoMode>
 8001a84:	1e03      	subs	r3, r0, #0
 8001a86:	d001      	beq.n	8001a8c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a88:	f7ff fe0a 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a8c:	46c0      	nop			; (mov r8, r8)
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	200000e8 	.word	0x200000e8
 8001a98:	40013800 	.word	0x40013800

08001a9c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001aa0:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <MX_USART2_UART_Init+0x90>)
 8001aa2:	4a23      	ldr	r2, [pc, #140]	; (8001b30 <MX_USART2_UART_Init+0x94>)
 8001aa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8001aa6:	4b21      	ldr	r3, [pc, #132]	; (8001b2c <MX_USART2_UART_Init+0x90>)
 8001aa8:	4a22      	ldr	r2, [pc, #136]	; (8001b34 <MX_USART2_UART_Init+0x98>)
 8001aaa:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aac:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <MX_USART2_UART_Init+0x90>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <MX_USART2_UART_Init+0x90>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ab8:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <MX_USART2_UART_Init+0x90>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001abe:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <MX_USART2_UART_Init+0x90>)
 8001ac0:	220c      	movs	r2, #12
 8001ac2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac4:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <MX_USART2_UART_Init+0x90>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aca:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <MX_USART2_UART_Init+0x90>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ad0:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <MX_USART2_UART_Init+0x90>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <MX_USART2_UART_Init+0x90>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001adc:	4b13      	ldr	r3, [pc, #76]	; (8001b2c <MX_USART2_UART_Init+0x90>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <MX_USART2_UART_Init+0x90>)
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f001 ff39 	bl	800395c <HAL_HalfDuplex_Init>
 8001aea:	1e03      	subs	r3, r0, #0
 8001aec:	d001      	beq.n	8001af2 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8001aee:	f7ff fdd7 	bl	80016a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <MX_USART2_UART_Init+0x90>)
 8001af4:	2100      	movs	r1, #0
 8001af6:	0018      	movs	r0, r3
 8001af8:	f002 fd58 	bl	80045ac <HAL_UARTEx_SetTxFifoThreshold>
 8001afc:	1e03      	subs	r3, r0, #0
 8001afe:	d001      	beq.n	8001b04 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8001b00:	f7ff fdce 	bl	80016a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <MX_USART2_UART_Init+0x90>)
 8001b06:	2100      	movs	r1, #0
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f002 fd8f 	bl	800462c <HAL_UARTEx_SetRxFifoThreshold>
 8001b0e:	1e03      	subs	r3, r0, #0
 8001b10:	d001      	beq.n	8001b16 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8001b12:	f7ff fdc5 	bl	80016a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001b16:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <MX_USART2_UART_Init+0x90>)
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f002 fd0d 	bl	8004538 <HAL_UARTEx_DisableFifoMode>
 8001b1e:	1e03      	subs	r3, r0, #0
 8001b20:	d001      	beq.n	8001b26 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8001b22:	f7ff fdbd 	bl	80016a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	2000017c 	.word	0x2000017c
 8001b30:	40004400 	.word	0x40004400
 8001b34:	000f4240 	.word	0x000f4240

08001b38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b093      	sub	sp, #76	; 0x4c
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	2334      	movs	r3, #52	; 0x34
 8001b42:	18fb      	adds	r3, r7, r3
 8001b44:	0018      	movs	r0, r3
 8001b46:	2314      	movs	r3, #20
 8001b48:	001a      	movs	r2, r3
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	f002 fe55 	bl	80047fa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b50:	2418      	movs	r4, #24
 8001b52:	193b      	adds	r3, r7, r4
 8001b54:	0018      	movs	r0, r3
 8001b56:	231c      	movs	r3, #28
 8001b58:	001a      	movs	r2, r3
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	f002 fe4d 	bl	80047fa <memset>
  if(uartHandle->Instance==USART1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a45      	ldr	r2, [pc, #276]	; (8001c7c <HAL_UART_MspInit+0x144>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d13e      	bne.n	8001be8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b6a:	193b      	adds	r3, r7, r4
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001b70:	193b      	adds	r3, r7, r4
 8001b72:	2200      	movs	r2, #0
 8001b74:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b76:	193b      	adds	r3, r7, r4
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f001 fa73 	bl	8003064 <HAL_RCCEx_PeriphCLKConfig>
 8001b7e:	1e03      	subs	r3, r0, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b82:	f7ff fd8d 	bl	80016a0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b86:	4b3e      	ldr	r3, [pc, #248]	; (8001c80 <HAL_UART_MspInit+0x148>)
 8001b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b8a:	4b3d      	ldr	r3, [pc, #244]	; (8001c80 <HAL_UART_MspInit+0x148>)
 8001b8c:	2180      	movs	r1, #128	; 0x80
 8001b8e:	01c9      	lsls	r1, r1, #7
 8001b90:	430a      	orrs	r2, r1
 8001b92:	641a      	str	r2, [r3, #64]	; 0x40
 8001b94:	4b3a      	ldr	r3, [pc, #232]	; (8001c80 <HAL_UART_MspInit+0x148>)
 8001b96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	01db      	lsls	r3, r3, #7
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba2:	4b37      	ldr	r3, [pc, #220]	; (8001c80 <HAL_UART_MspInit+0x148>)
 8001ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ba6:	4b36      	ldr	r3, [pc, #216]	; (8001c80 <HAL_UART_MspInit+0x148>)
 8001ba8:	2104      	movs	r1, #4
 8001baa:	430a      	orrs	r2, r1
 8001bac:	635a      	str	r2, [r3, #52]	; 0x34
 8001bae:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <HAL_UART_MspInit+0x148>)
 8001bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001bba:	2134      	movs	r1, #52	; 0x34
 8001bbc:	187b      	adds	r3, r7, r1
 8001bbe:	2230      	movs	r2, #48	; 0x30
 8001bc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	187b      	adds	r3, r7, r1
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	187b      	adds	r3, r7, r1
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	187b      	adds	r3, r7, r1
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001bd4:	187b      	adds	r3, r7, r1
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bda:	187b      	adds	r3, r7, r1
 8001bdc:	4a29      	ldr	r2, [pc, #164]	; (8001c84 <HAL_UART_MspInit+0x14c>)
 8001bde:	0019      	movs	r1, r3
 8001be0:	0010      	movs	r0, r2
 8001be2:	f000 fbd5 	bl	8002390 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001be6:	e044      	b.n	8001c72 <HAL_UART_MspInit+0x13a>
  else if(uartHandle->Instance==USART2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a26      	ldr	r2, [pc, #152]	; (8001c88 <HAL_UART_MspInit+0x150>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d13f      	bne.n	8001c72 <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bf2:	2118      	movs	r1, #24
 8001bf4:	187b      	adds	r3, r7, r1
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bfa:	187b      	adds	r3, r7, r1
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c00:	187b      	adds	r3, r7, r1
 8001c02:	0018      	movs	r0, r3
 8001c04:	f001 fa2e 	bl	8003064 <HAL_RCCEx_PeriphCLKConfig>
 8001c08:	1e03      	subs	r3, r0, #0
 8001c0a:	d001      	beq.n	8001c10 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001c0c:	f7ff fd48 	bl	80016a0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <HAL_UART_MspInit+0x148>)
 8001c12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c14:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <HAL_UART_MspInit+0x148>)
 8001c16:	2180      	movs	r1, #128	; 0x80
 8001c18:	0289      	lsls	r1, r1, #10
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c1e:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <HAL_UART_MspInit+0x148>)
 8001c20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	029b      	lsls	r3, r3, #10
 8001c26:	4013      	ands	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2c:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <HAL_UART_MspInit+0x148>)
 8001c2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <HAL_UART_MspInit+0x148>)
 8001c32:	2101      	movs	r1, #1
 8001c34:	430a      	orrs	r2, r1
 8001c36:	635a      	str	r2, [r3, #52]	; 0x34
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <HAL_UART_MspInit+0x148>)
 8001c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	4013      	ands	r3, r2
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c44:	2134      	movs	r1, #52	; 0x34
 8001c46:	187b      	adds	r3, r7, r1
 8001c48:	2204      	movs	r2, #4
 8001c4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c4c:	187b      	adds	r3, r7, r1
 8001c4e:	2212      	movs	r2, #18
 8001c50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c52:	187b      	adds	r3, r7, r1
 8001c54:	2201      	movs	r2, #1
 8001c56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001c5e:	187b      	adds	r3, r7, r1
 8001c60:	2201      	movs	r2, #1
 8001c62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c64:	187a      	adds	r2, r7, r1
 8001c66:	23a0      	movs	r3, #160	; 0xa0
 8001c68:	05db      	lsls	r3, r3, #23
 8001c6a:	0011      	movs	r1, r2
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f000 fb8f 	bl	8002390 <HAL_GPIO_Init>
}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b013      	add	sp, #76	; 0x4c
 8001c78:	bd90      	pop	{r4, r7, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	40013800 	.word	0x40013800
 8001c80:	40021000 	.word	0x40021000
 8001c84:	50000800 	.word	0x50000800
 8001c88:	40004400 	.word	0x40004400

08001c8c <xl320_init>:
 *	@author Lucas Vallery
 *
 */
#include "xl320_driver.h"

int xl320_init(XL320_t* xl320, uint8_t id, XL320_BaudRate_t br){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	0008      	movs	r0, r1
 8001c96:	0011      	movs	r1, r2
 8001c98:	1cfb      	adds	r3, r7, #3
 8001c9a:	1c02      	adds	r2, r0, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
 8001c9e:	1cbb      	adds	r3, r7, #2
 8001ca0:	1c0a      	adds	r2, r1, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
	xl320->id 	= id;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	1cfa      	adds	r2, r7, #3
 8001ca8:	7812      	ldrb	r2, [r2, #0]
 8001caa:	701a      	strb	r2, [r3, #0]
	xl320->br	= br;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	1cba      	adds	r2, r7, #2
 8001cb0:	7812      	ldrb	r2, [r2, #0]
 8001cb2:	705a      	strb	r2, [r3, #1]

	return 0;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b002      	add	sp, #8
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <xl320_addHeader2Buff>:

void xl320_addHeader2Buff(uint8_t* buff){
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
	buff[0] = 0xFF;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	22ff      	movs	r2, #255	; 0xff
 8001cca:	701a      	strb	r2, [r3, #0]
	buff[1] = 0xFF;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	22ff      	movs	r2, #255	; 0xff
 8001cd2:	701a      	strb	r2, [r3, #0]
	buff[2] = 0xFD;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	22fd      	movs	r2, #253	; 0xfd
 8001cda:	701a      	strb	r2, [r3, #0]
	buff[3] = 0x00;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3303      	adds	r3, #3
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b002      	add	sp, #8
 8001cea:	bd80      	pop	{r7, pc}

08001cec <xl320_updateCrc>:

unsigned short xl320_updateCrc(unsigned short crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size) {
 8001cec:	b5b0      	push	{r4, r5, r7, lr}
 8001cee:	4c33      	ldr	r4, [pc, #204]	; (8001dbc <xl320_updateCrc+0xd0>)
 8001cf0:	44a5      	add	sp, r4
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6039      	str	r1, [r7, #0]
 8001cf6:	0011      	movs	r1, r2
 8001cf8:	4b31      	ldr	r3, [pc, #196]	; (8001dc0 <xl320_updateCrc+0xd4>)
 8001cfa:	2484      	movs	r4, #132	; 0x84
 8001cfc:	00a4      	lsls	r4, r4, #2
 8001cfe:	191b      	adds	r3, r3, r4
 8001d00:	19db      	adds	r3, r3, r7
 8001d02:	1c02      	adds	r2, r0, #0
 8001d04:	801a      	strh	r2, [r3, #0]
 8001d06:	4b2f      	ldr	r3, [pc, #188]	; (8001dc4 <xl320_updateCrc+0xd8>)
 8001d08:	0020      	movs	r0, r4
 8001d0a:	181b      	adds	r3, r3, r0
 8001d0c:	19db      	adds	r3, r3, r7
 8001d0e:	1c0a      	adds	r2, r1, #0
 8001d10:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] = {
 8001d12:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <xl320_updateCrc+0xdc>)
 8001d14:	181b      	adds	r3, r3, r0
 8001d16:	19da      	adds	r2, r3, r7
 8001d18:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <xl320_updateCrc+0xe0>)
 8001d1a:	0010      	movs	r0, r2
 8001d1c:	0019      	movs	r1, r3
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	001a      	movs	r2, r3
 8001d24:	f002 fd60 	bl	80047e8 <memcpy>
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};

	for(j = 0; j < data_blk_size; j++) {
 8001d28:	4b29      	ldr	r3, [pc, #164]	; (8001dd0 <xl320_updateCrc+0xe4>)
 8001d2a:	18fb      	adds	r3, r7, r3
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	801a      	strh	r2, [r3, #0]
 8001d30:	e02f      	b.n	8001d92 <xl320_updateCrc+0xa6>
		i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8001d32:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <xl320_updateCrc+0xd4>)
 8001d34:	2084      	movs	r0, #132	; 0x84
 8001d36:	0080      	lsls	r0, r0, #2
 8001d38:	181b      	adds	r3, r3, r0
 8001d3a:	19db      	adds	r3, r3, r7
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	0a1b      	lsrs	r3, r3, #8
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	4c23      	ldr	r4, [pc, #140]	; (8001dd0 <xl320_updateCrc+0xe4>)
 8001d44:	193b      	adds	r3, r7, r4
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	6839      	ldr	r1, [r7, #0]
 8001d4a:	18cb      	adds	r3, r1, r3
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	4053      	eors	r3, r2
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	2583      	movs	r5, #131	; 0x83
 8001d56:	00ad      	lsls	r5, r5, #2
 8001d58:	197b      	adds	r3, r7, r5
 8001d5a:	21ff      	movs	r1, #255	; 0xff
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	801a      	strh	r2, [r3, #0]
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8001d60:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <xl320_updateCrc+0xd4>)
 8001d62:	181b      	adds	r3, r3, r0
 8001d64:	19db      	adds	r3, r3, r7
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	021b      	lsls	r3, r3, #8
 8001d6a:	b21a      	sxth	r2, r3
 8001d6c:	197b      	adds	r3, r7, r5
 8001d6e:	8819      	ldrh	r1, [r3, #0]
 8001d70:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <xl320_updateCrc+0xdc>)
 8001d72:	181b      	adds	r3, r3, r0
 8001d74:	19db      	adds	r3, r3, r7
 8001d76:	0049      	lsls	r1, r1, #1
 8001d78:	5acb      	ldrh	r3, [r1, r3]
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	4053      	eors	r3, r2
 8001d7e:	b21a      	sxth	r2, r3
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <xl320_updateCrc+0xd4>)
 8001d82:	181b      	adds	r3, r3, r0
 8001d84:	19db      	adds	r3, r3, r7
 8001d86:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++) {
 8001d88:	193b      	adds	r3, r7, r4
 8001d8a:	881a      	ldrh	r2, [r3, #0]
 8001d8c:	193b      	adds	r3, r7, r4
 8001d8e:	3201      	adds	r2, #1
 8001d90:	801a      	strh	r2, [r3, #0]
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <xl320_updateCrc+0xe4>)
 8001d94:	18fa      	adds	r2, r7, r3
 8001d96:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <xl320_updateCrc+0xd8>)
 8001d98:	2184      	movs	r1, #132	; 0x84
 8001d9a:	0089      	lsls	r1, r1, #2
 8001d9c:	185b      	adds	r3, r3, r1
 8001d9e:	19db      	adds	r3, r3, r7
 8001da0:	8812      	ldrh	r2, [r2, #0]
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d3c4      	bcc.n	8001d32 <xl320_updateCrc+0x46>
	}

	return crc_accum;
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <xl320_updateCrc+0xd4>)
 8001daa:	185b      	adds	r3, r3, r1
 8001dac:	19db      	adds	r3, r3, r7
 8001dae:	881b      	ldrh	r3, [r3, #0]
}
 8001db0:	0018      	movs	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	2384      	movs	r3, #132	; 0x84
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	449d      	add	sp, r3
 8001dba:	bdb0      	pop	{r4, r5, r7, pc}
 8001dbc:	fffffdf0 	.word	0xfffffdf0
 8001dc0:	fffffdf6 	.word	0xfffffdf6
 8001dc4:	fffffdf4 	.word	0xfffffdf4
 8001dc8:	fffffdfc 	.word	0xfffffdfc
 8001dcc:	080052b8 	.word	0x080052b8
 8001dd0:	0000020e 	.word	0x0000020e

08001dd4 <xl320_copyParams2Buff>:

void xl320_copyParams2Buff(uint8_t buffStartIndex, uint8_t* buff, uint16_t nbParams, uint8_t* params){
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	0011      	movs	r1, r2
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	230f      	movs	r3, #15
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	1c02      	adds	r2, r0, #0
 8001de6:	701a      	strb	r2, [r3, #0]
 8001de8:	230c      	movs	r3, #12
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	1c0a      	adds	r2, r1, #0
 8001dee:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < nbParams; i++){
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	e00f      	b.n	8001e16 <xl320_copyParams2Buff+0x42>
		buff[i + buffStartIndex] = params[i];
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	18d2      	adds	r2, r2, r3
 8001dfc:	230f      	movs	r3, #15
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	7819      	ldrb	r1, [r3, #0]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	18cb      	adds	r3, r1, r3
 8001e06:	0019      	movs	r1, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	185b      	adds	r3, r3, r1
 8001e0c:	7812      	ldrb	r2, [r2, #0]
 8001e0e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < nbParams; i++){
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	3301      	adds	r3, #1
 8001e14:	617b      	str	r3, [r7, #20]
 8001e16:	230c      	movs	r3, #12
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	881b      	ldrh	r3, [r3, #0]
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	dbe9      	blt.n	8001df6 <xl320_copyParams2Buff+0x22>
	}
}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	46c0      	nop			; (mov r8, r8)
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b006      	add	sp, #24
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <xl320_sendCommand>:

int xl320_sendCommand(XL320_t* xl320, XL320_Instruction_t inst, uint16_t nbParams, uint8_t* params){
 8001e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	0008      	movs	r0, r1
 8001e36:	0011      	movs	r1, r2
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	230b      	movs	r3, #11
 8001e3c:	18fb      	adds	r3, r7, r3
 8001e3e:	1c02      	adds	r2, r0, #0
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	2008      	movs	r0, #8
 8001e44:	183b      	adds	r3, r7, r0
 8001e46:	1c0a      	adds	r2, r1, #0
 8001e48:	801a      	strh	r2, [r3, #0]
	uint8_t* txBuff = NULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
	txBuff = (uint8_t*) malloc((MIN_FRAME_SIZE + nbParams)*sizeof(uint8_t));
 8001e4e:	183b      	adds	r3, r7, r0
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	330a      	adds	r3, #10
 8001e54:	0018      	movs	r0, r3
 8001e56:	f002 fcb3 	bl	80047c0 <malloc>
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	617b      	str	r3, [r7, #20]

	if(txBuff == NULL){
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d106      	bne.n	8001e72 <xl320_sendCommand+0x46>
		DEBUG_PRINTF("XL320 ERROT : Malloc failed\r\n");
 8001e64:	4b34      	ldr	r3, [pc, #208]	; (8001f38 <xl320_sendCommand+0x10c>)
 8001e66:	0018      	movs	r0, r3
 8001e68:	f002 fe24 	bl	8004ab4 <puts>
		return -1;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	425b      	negs	r3, r3
 8001e70:	e05d      	b.n	8001f2e <xl320_sendCommand+0x102>
	}

	uint16_t length = nbParams + 3;
 8001e72:	2512      	movs	r5, #18
 8001e74:	197b      	adds	r3, r7, r5
 8001e76:	2408      	movs	r4, #8
 8001e78:	193a      	adds	r2, r7, r4
 8001e7a:	8812      	ldrh	r2, [r2, #0]
 8001e7c:	3203      	adds	r2, #3
 8001e7e:	801a      	strh	r2, [r3, #0]

	xl320_addHeader2Buff(txBuff);
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	0018      	movs	r0, r3
 8001e84:	f7ff ff1b 	bl	8001cbe <xl320_addHeader2Buff>
	txBuff[4] = xl320->id;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	7812      	ldrb	r2, [r2, #0]
 8001e90:	701a      	strb	r2, [r3, #0]
	txBuff[5] = (uint8_t) (length & 0xFF);
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	3305      	adds	r3, #5
 8001e96:	197a      	adds	r2, r7, r5
 8001e98:	8812      	ldrh	r2, [r2, #0]
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	701a      	strb	r2, [r3, #0]
	txBuff[6] = (uint8_t) (length >> 8);
 8001e9e:	197b      	adds	r3, r7, r5
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	3306      	adds	r3, #6
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]
	txBuff[7] = inst;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	3307      	adds	r3, #7
 8001eb2:	220b      	movs	r2, #11
 8001eb4:	18ba      	adds	r2, r7, r2
 8001eb6:	7812      	ldrb	r2, [r2, #0]
 8001eb8:	701a      	strb	r2, [r3, #0]
	xl320_copyParams2Buff(8, txBuff, nbParams, params);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	193b      	adds	r3, r7, r4
 8001ebe:	881a      	ldrh	r2, [r3, #0]
 8001ec0:	6979      	ldr	r1, [r7, #20]
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	2008      	movs	r0, #8
 8001ec6:	f7ff ff85 	bl	8001dd4 <xl320_copyParams2Buff>

	uint16_t crc = xl320_updateCrc(0, txBuff, MIN_FRAME_SIZE + nbParams - CRC_FIELD_SIZE);
 8001eca:	0025      	movs	r5, r4
 8001ecc:	193b      	adds	r3, r7, r4
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	3308      	adds	r3, #8
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	2610      	movs	r6, #16
 8001ed6:	19bc      	adds	r4, r7, r6
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	0019      	movs	r1, r3
 8001edc:	2000      	movs	r0, #0
 8001ede:	f7ff ff05 	bl	8001cec <xl320_updateCrc>
 8001ee2:	0003      	movs	r3, r0
 8001ee4:	8023      	strh	r3, [r4, #0]

	txBuff[(MIN_FRAME_SIZE + nbParams) - 2] = (uint8_t) (crc & 0xFF);
 8001ee6:	002c      	movs	r4, r5
 8001ee8:	193b      	adds	r3, r7, r4
 8001eea:	881b      	ldrh	r3, [r3, #0]
 8001eec:	3308      	adds	r3, #8
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	18d3      	adds	r3, r2, r3
 8001ef2:	19ba      	adds	r2, r7, r6
 8001ef4:	8812      	ldrh	r2, [r2, #0]
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	701a      	strb	r2, [r3, #0]
	txBuff[(MIN_FRAME_SIZE + nbParams) - 1] = (uint8_t) (crc >> 8);
 8001efa:	19bb      	adds	r3, r7, r6
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	0a1b      	lsrs	r3, r3, #8
 8001f00:	b299      	uxth	r1, r3
 8001f02:	193b      	adds	r3, r7, r4
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	3309      	adds	r3, #9
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	18d3      	adds	r3, r2, r3
 8001f0c:	b2ca      	uxtb	r2, r1
 8001f0e:	701a      	strb	r2, [r3, #0]

	xl320->serial.transmit(txBuff, (MIN_FRAME_SIZE + nbParams)*sizeof(uint8_t), 0x1F4);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	193a      	adds	r2, r7, r4
 8001f16:	8812      	ldrh	r2, [r2, #0]
 8001f18:	320a      	adds	r2, #10
 8001f1a:	b291      	uxth	r1, r2
 8001f1c:	22fa      	movs	r2, #250	; 0xfa
 8001f1e:	0052      	lsls	r2, r2, #1
 8001f20:	6978      	ldr	r0, [r7, #20]
 8001f22:	4798      	blx	r3

	free(txBuff);
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	0018      	movs	r0, r3
 8001f28:	f002 fc54 	bl	80047d4 <free>
	return 0;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	0018      	movs	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b007      	add	sp, #28
 8001f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	080054b8 	.word	0x080054b8

08001f3c <xl320_setGoalPosition>:
	xl320_sendCommand(xl320, WRITE, 3, (uint8_t*) &params);

	return 0;
}

int xl320_setGoalPosition(XL320_t* xl320, float goalPositionInDeg){
 8001f3c:	b5b0      	push	{r4, r5, r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
	uint16_t position = (uint16_t)(goalPositionInDeg/BIT_RESOLUTION_IN_DEG);
 8001f46:	6838      	ldr	r0, [r7, #0]
 8001f48:	f7ff f92c 	bl	80011a4 <__aeabi_f2d>
 8001f4c:	4a15      	ldr	r2, [pc, #84]	; (8001fa4 <xl320_setGoalPosition+0x68>)
 8001f4e:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <xl320_setGoalPosition+0x6c>)
 8001f50:	f7fe fa6a 	bl	8000428 <__aeabi_ddiv>
 8001f54:	0002      	movs	r2, r0
 8001f56:	000b      	movs	r3, r1
 8001f58:	250e      	movs	r5, #14
 8001f5a:	197c      	adds	r4, r7, r5
 8001f5c:	0010      	movs	r0, r2
 8001f5e:	0019      	movs	r1, r3
 8001f60:	f7fe fa44 	bl	80003ec <__aeabi_d2uiz>
 8001f64:	0003      	movs	r3, r0
 8001f66:	8023      	strh	r3, [r4, #0]
	uint8_t params[4] = {POSITION, 0, (uint8_t)(position & 0xFF) , (uint8_t)(position >> 8)};
 8001f68:	2108      	movs	r1, #8
 8001f6a:	187b      	adds	r3, r7, r1
 8001f6c:	221e      	movs	r2, #30
 8001f6e:	701a      	strb	r2, [r3, #0]
 8001f70:	187b      	adds	r3, r7, r1
 8001f72:	2200      	movs	r2, #0
 8001f74:	705a      	strb	r2, [r3, #1]
 8001f76:	197b      	adds	r3, r7, r5
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	187b      	adds	r3, r7, r1
 8001f7e:	709a      	strb	r2, [r3, #2]
 8001f80:	197b      	adds	r3, r7, r5
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	0a1b      	lsrs	r3, r3, #8
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	187b      	adds	r3, r7, r1
 8001f8c:	70da      	strb	r2, [r3, #3]

	xl320_sendCommand(xl320, WRITE, 4, (uint8_t*) &params);
 8001f8e:	187b      	adds	r3, r7, r1
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	2204      	movs	r2, #4
 8001f94:	2103      	movs	r1, #3
 8001f96:	f7ff ff49 	bl	8001e2c <xl320_sendCommand>

	return 0;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	b004      	add	sp, #16
 8001fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8001fa4:	28f5c28f 	.word	0x28f5c28f
 8001fa8:	3fd28f5c 	.word	0x3fd28f5c

08001fac <xl320_setSpeed>:

int xl320_setSpeed(XL320_t* xl320, float rpm){
 8001fac:	b5b0      	push	{r4, r5, r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
	uint16_t speedValue = (uint16_t)(rpm/RESOLUTION_SPEED);
 8001fb6:	6838      	ldr	r0, [r7, #0]
 8001fb8:	f7ff f8f4 	bl	80011a4 <__aeabi_f2d>
 8001fbc:	4a1a      	ldr	r2, [pc, #104]	; (8002028 <xl320_setSpeed+0x7c>)
 8001fbe:	4b1b      	ldr	r3, [pc, #108]	; (800202c <xl320_setSpeed+0x80>)
 8001fc0:	f7fe fa32 	bl	8000428 <__aeabi_ddiv>
 8001fc4:	0002      	movs	r2, r0
 8001fc6:	000b      	movs	r3, r1
 8001fc8:	250e      	movs	r5, #14
 8001fca:	197c      	adds	r4, r7, r5
 8001fcc:	0010      	movs	r0, r2
 8001fce:	0019      	movs	r1, r3
 8001fd0:	f7fe fa0c 	bl	80003ec <__aeabi_d2uiz>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	8023      	strh	r3, [r4, #0]
	uint8_t highByte = (uint8_t)((speedValue >> 8) & 0xFF);
 8001fd8:	0029      	movs	r1, r5
 8001fda:	187b      	adds	r3, r7, r1
 8001fdc:	881b      	ldrh	r3, [r3, #0]
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	200d      	movs	r0, #13
 8001fe4:	183b      	adds	r3, r7, r0
 8001fe6:	701a      	strb	r2, [r3, #0]
	uint8_t lowByte = (uint8_t)(speedValue & 0xFF);
 8001fe8:	240c      	movs	r4, #12
 8001fea:	193b      	adds	r3, r7, r4
 8001fec:	187a      	adds	r2, r7, r1
 8001fee:	8812      	ldrh	r2, [r2, #0]
 8001ff0:	701a      	strb	r2, [r3, #0]

	uint8_t params[4] = {SPEED, 0, lowByte, highByte};
 8001ff2:	2108      	movs	r1, #8
 8001ff4:	187b      	adds	r3, r7, r1
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	701a      	strb	r2, [r3, #0]
 8001ffa:	187b      	adds	r3, r7, r1
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	705a      	strb	r2, [r3, #1]
 8002000:	187b      	adds	r3, r7, r1
 8002002:	193a      	adds	r2, r7, r4
 8002004:	7812      	ldrb	r2, [r2, #0]
 8002006:	709a      	strb	r2, [r3, #2]
 8002008:	187b      	adds	r3, r7, r1
 800200a:	183a      	adds	r2, r7, r0
 800200c:	7812      	ldrb	r2, [r2, #0]
 800200e:	70da      	strb	r2, [r3, #3]
	xl320_sendCommand(xl320, WRITE, 4, (uint8_t*) &params);
 8002010:	187b      	adds	r3, r7, r1
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	2204      	movs	r2, #4
 8002016:	2103      	movs	r1, #3
 8002018:	f7ff ff08 	bl	8001e2c <xl320_sendCommand>

	return 0;
 800201c:	2300      	movs	r3, #0
}
 800201e:	0018      	movs	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	b004      	add	sp, #16
 8002024:	bdb0      	pop	{r4, r5, r7, pc}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	f9db22d1 	.word	0xf9db22d1
 800202c:	3fbc6a7e 	.word	0x3fbc6a7e

08002030 <xl320_executeAction>:

int xl320_executeAction(XL320_t* xl320){
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
	xl320_sendCommand(xl320, ACTION, 0, NULL);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	2300      	movs	r3, #0
 800203c:	2200      	movs	r2, #0
 800203e:	2105      	movs	r1, #5
 8002040:	f7ff fef4 	bl	8001e2c <xl320_sendCommand>

	return 0;
 8002044:	2300      	movs	r3, #0
}
 8002046:	0018      	movs	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	b002      	add	sp, #8
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <xl320_torqueEnable>:

int xl320_torqueEnable(XL320_t* xl320){
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	uint8_t params[3] = {TORQUE_EN, 0, ENABLE};
 8002058:	200c      	movs	r0, #12
 800205a:	183b      	adds	r3, r7, r0
 800205c:	4a07      	ldr	r2, [pc, #28]	; (800207c <xl320_torqueEnable+0x2c>)
 800205e:	8811      	ldrh	r1, [r2, #0]
 8002060:	8019      	strh	r1, [r3, #0]
 8002062:	7892      	ldrb	r2, [r2, #2]
 8002064:	709a      	strb	r2, [r3, #2]

	xl320_sendCommand(xl320, WRITE, 3, (uint8_t*) &params);
 8002066:	183b      	adds	r3, r7, r0
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	2203      	movs	r2, #3
 800206c:	2103      	movs	r1, #3
 800206e:	f7ff fedd 	bl	8001e2c <xl320_sendCommand>

	return 0;
 8002072:	2300      	movs	r3, #0
}
 8002074:	0018      	movs	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	b004      	add	sp, #16
 800207a:	bd80      	pop	{r7, pc}
 800207c:	08005868 	.word	0x08005868

08002080 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002080:	480d      	ldr	r0, [pc, #52]	; (80020b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002082:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002084:	f7ff fbe8 	bl	8001858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002088:	480c      	ldr	r0, [pc, #48]	; (80020bc <LoopForever+0x6>)
  ldr r1, =_edata
 800208a:	490d      	ldr	r1, [pc, #52]	; (80020c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800208c:	4a0d      	ldr	r2, [pc, #52]	; (80020c4 <LoopForever+0xe>)
  movs r3, #0
 800208e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002090:	e002      	b.n	8002098 <LoopCopyDataInit>

08002092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002096:	3304      	adds	r3, #4

08002098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800209a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800209c:	d3f9      	bcc.n	8002092 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020a0:	4c0a      	ldr	r4, [pc, #40]	; (80020cc <LoopForever+0x16>)
  movs r3, #0
 80020a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a4:	e001      	b.n	80020aa <LoopFillZerobss>

080020a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a8:	3204      	adds	r2, #4

080020aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020ac:	d3fb      	bcc.n	80020a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020ae:	f002 fb63 	bl	8004778 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80020b2:	f7ff fa5d 	bl	8001570 <main>

080020b6 <LoopForever>:

LoopForever:
  b LoopForever
 80020b6:	e7fe      	b.n	80020b6 <LoopForever>
  ldr   r0, =_estack
 80020b8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80020bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80020c4:	080059a0 	.word	0x080059a0
  ldr r2, =_sbss
 80020c8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80020cc:	20000224 	.word	0x20000224

080020d0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020d0:	e7fe      	b.n	80020d0 <ADC1_IRQHandler>
	...

080020d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020da:	1dfb      	adds	r3, r7, #7
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <HAL_Init+0x3c>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <HAL_Init+0x3c>)
 80020e6:	2180      	movs	r1, #128	; 0x80
 80020e8:	0049      	lsls	r1, r1, #1
 80020ea:	430a      	orrs	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020ee:	2003      	movs	r0, #3
 80020f0:	f000 f810 	bl	8002114 <HAL_InitTick>
 80020f4:	1e03      	subs	r3, r0, #0
 80020f6:	d003      	beq.n	8002100 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80020f8:	1dfb      	adds	r3, r7, #7
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
 80020fe:	e001      	b.n	8002104 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002100:	f7ff fad4 	bl	80016ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002104:	1dfb      	adds	r3, r7, #7
 8002106:	781b      	ldrb	r3, [r3, #0]
}
 8002108:	0018      	movs	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	b002      	add	sp, #8
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40022000 	.word	0x40022000

08002114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002114:	b590      	push	{r4, r7, lr}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800211c:	230f      	movs	r3, #15
 800211e:	18fb      	adds	r3, r7, r3
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002124:	4b1d      	ldr	r3, [pc, #116]	; (800219c <HAL_InitTick+0x88>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d02b      	beq.n	8002184 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800212c:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <HAL_InitTick+0x8c>)
 800212e:	681c      	ldr	r4, [r3, #0]
 8002130:	4b1a      	ldr	r3, [pc, #104]	; (800219c <HAL_InitTick+0x88>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	0019      	movs	r1, r3
 8002136:	23fa      	movs	r3, #250	; 0xfa
 8002138:	0098      	lsls	r0, r3, #2
 800213a:	f7fd ffe1 	bl	8000100 <__udivsi3>
 800213e:	0003      	movs	r3, r0
 8002140:	0019      	movs	r1, r3
 8002142:	0020      	movs	r0, r4
 8002144:	f7fd ffdc 	bl	8000100 <__udivsi3>
 8002148:	0003      	movs	r3, r0
 800214a:	0018      	movs	r0, r3
 800214c:	f000 f913 	bl	8002376 <HAL_SYSTICK_Config>
 8002150:	1e03      	subs	r3, r0, #0
 8002152:	d112      	bne.n	800217a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b03      	cmp	r3, #3
 8002158:	d80a      	bhi.n	8002170 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	2301      	movs	r3, #1
 800215e:	425b      	negs	r3, r3
 8002160:	2200      	movs	r2, #0
 8002162:	0018      	movs	r0, r3
 8002164:	f000 f8f2 	bl	800234c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002168:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <HAL_InitTick+0x90>)
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	e00d      	b.n	800218c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002170:	230f      	movs	r3, #15
 8002172:	18fb      	adds	r3, r7, r3
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
 8002178:	e008      	b.n	800218c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800217a:	230f      	movs	r3, #15
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]
 8002182:	e003      	b.n	800218c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002184:	230f      	movs	r3, #15
 8002186:	18fb      	adds	r3, r7, r3
 8002188:	2201      	movs	r2, #1
 800218a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800218c:	230f      	movs	r3, #15
 800218e:	18fb      	adds	r3, r7, r3
 8002190:	781b      	ldrb	r3, [r3, #0]
}
 8002192:	0018      	movs	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	b005      	add	sp, #20
 8002198:	bd90      	pop	{r4, r7, pc}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	20000008 	.word	0x20000008
 80021a0:	20000000 	.word	0x20000000
 80021a4:	20000004 	.word	0x20000004

080021a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021ac:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <HAL_IncTick+0x1c>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	001a      	movs	r2, r3
 80021b2:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <HAL_IncTick+0x20>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	18d2      	adds	r2, r2, r3
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <HAL_IncTick+0x20>)
 80021ba:	601a      	str	r2, [r3, #0]
}
 80021bc:	46c0      	nop			; (mov r8, r8)
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	20000008 	.word	0x20000008
 80021c8:	20000210 	.word	0x20000210

080021cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  return uwTick;
 80021d0:	4b02      	ldr	r3, [pc, #8]	; (80021dc <HAL_GetTick+0x10>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	0018      	movs	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	20000210 	.word	0x20000210

080021e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e8:	f7ff fff0 	bl	80021cc <HAL_GetTick>
 80021ec:	0003      	movs	r3, r0
 80021ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3301      	adds	r3, #1
 80021f8:	d005      	beq.n	8002206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <HAL_Delay+0x44>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	001a      	movs	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	189b      	adds	r3, r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	f7ff ffe0 	bl	80021cc <HAL_GetTick>
 800220c:	0002      	movs	r2, r0
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	429a      	cmp	r2, r3
 8002216:	d8f7      	bhi.n	8002208 <HAL_Delay+0x28>
  {
  }
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	46bd      	mov	sp, r7
 800221e:	b004      	add	sp, #16
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	20000008 	.word	0x20000008

08002228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002228:	b590      	push	{r4, r7, lr}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	0002      	movs	r2, r0
 8002230:	6039      	str	r1, [r7, #0]
 8002232:	1dfb      	adds	r3, r7, #7
 8002234:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002236:	1dfb      	adds	r3, r7, #7
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b7f      	cmp	r3, #127	; 0x7f
 800223c:	d828      	bhi.n	8002290 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800223e:	4a2f      	ldr	r2, [pc, #188]	; (80022fc <__NVIC_SetPriority+0xd4>)
 8002240:	1dfb      	adds	r3, r7, #7
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	b25b      	sxtb	r3, r3
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	33c0      	adds	r3, #192	; 0xc0
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	589b      	ldr	r3, [r3, r2]
 800224e:	1dfa      	adds	r2, r7, #7
 8002250:	7812      	ldrb	r2, [r2, #0]
 8002252:	0011      	movs	r1, r2
 8002254:	2203      	movs	r2, #3
 8002256:	400a      	ands	r2, r1
 8002258:	00d2      	lsls	r2, r2, #3
 800225a:	21ff      	movs	r1, #255	; 0xff
 800225c:	4091      	lsls	r1, r2
 800225e:	000a      	movs	r2, r1
 8002260:	43d2      	mvns	r2, r2
 8002262:	401a      	ands	r2, r3
 8002264:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	019b      	lsls	r3, r3, #6
 800226a:	22ff      	movs	r2, #255	; 0xff
 800226c:	401a      	ands	r2, r3
 800226e:	1dfb      	adds	r3, r7, #7
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	0018      	movs	r0, r3
 8002274:	2303      	movs	r3, #3
 8002276:	4003      	ands	r3, r0
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800227c:	481f      	ldr	r0, [pc, #124]	; (80022fc <__NVIC_SetPriority+0xd4>)
 800227e:	1dfb      	adds	r3, r7, #7
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	b25b      	sxtb	r3, r3
 8002284:	089b      	lsrs	r3, r3, #2
 8002286:	430a      	orrs	r2, r1
 8002288:	33c0      	adds	r3, #192	; 0xc0
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800228e:	e031      	b.n	80022f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002290:	4a1b      	ldr	r2, [pc, #108]	; (8002300 <__NVIC_SetPriority+0xd8>)
 8002292:	1dfb      	adds	r3, r7, #7
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	0019      	movs	r1, r3
 8002298:	230f      	movs	r3, #15
 800229a:	400b      	ands	r3, r1
 800229c:	3b08      	subs	r3, #8
 800229e:	089b      	lsrs	r3, r3, #2
 80022a0:	3306      	adds	r3, #6
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	18d3      	adds	r3, r2, r3
 80022a6:	3304      	adds	r3, #4
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	1dfa      	adds	r2, r7, #7
 80022ac:	7812      	ldrb	r2, [r2, #0]
 80022ae:	0011      	movs	r1, r2
 80022b0:	2203      	movs	r2, #3
 80022b2:	400a      	ands	r2, r1
 80022b4:	00d2      	lsls	r2, r2, #3
 80022b6:	21ff      	movs	r1, #255	; 0xff
 80022b8:	4091      	lsls	r1, r2
 80022ba:	000a      	movs	r2, r1
 80022bc:	43d2      	mvns	r2, r2
 80022be:	401a      	ands	r2, r3
 80022c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	019b      	lsls	r3, r3, #6
 80022c6:	22ff      	movs	r2, #255	; 0xff
 80022c8:	401a      	ands	r2, r3
 80022ca:	1dfb      	adds	r3, r7, #7
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	0018      	movs	r0, r3
 80022d0:	2303      	movs	r3, #3
 80022d2:	4003      	ands	r3, r0
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022d8:	4809      	ldr	r0, [pc, #36]	; (8002300 <__NVIC_SetPriority+0xd8>)
 80022da:	1dfb      	adds	r3, r7, #7
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	001c      	movs	r4, r3
 80022e0:	230f      	movs	r3, #15
 80022e2:	4023      	ands	r3, r4
 80022e4:	3b08      	subs	r3, #8
 80022e6:	089b      	lsrs	r3, r3, #2
 80022e8:	430a      	orrs	r2, r1
 80022ea:	3306      	adds	r3, #6
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	18c3      	adds	r3, r0, r3
 80022f0:	3304      	adds	r3, #4
 80022f2:	601a      	str	r2, [r3, #0]
}
 80022f4:	46c0      	nop			; (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	b003      	add	sp, #12
 80022fa:	bd90      	pop	{r4, r7, pc}
 80022fc:	e000e100 	.word	0xe000e100
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	1e5a      	subs	r2, r3, #1
 8002310:	2380      	movs	r3, #128	; 0x80
 8002312:	045b      	lsls	r3, r3, #17
 8002314:	429a      	cmp	r2, r3
 8002316:	d301      	bcc.n	800231c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002318:	2301      	movs	r3, #1
 800231a:	e010      	b.n	800233e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800231c:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <SysTick_Config+0x44>)
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	3a01      	subs	r2, #1
 8002322:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002324:	2301      	movs	r3, #1
 8002326:	425b      	negs	r3, r3
 8002328:	2103      	movs	r1, #3
 800232a:	0018      	movs	r0, r3
 800232c:	f7ff ff7c 	bl	8002228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <SysTick_Config+0x44>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002336:	4b04      	ldr	r3, [pc, #16]	; (8002348 <SysTick_Config+0x44>)
 8002338:	2207      	movs	r2, #7
 800233a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800233c:	2300      	movs	r3, #0
}
 800233e:	0018      	movs	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	b002      	add	sp, #8
 8002344:	bd80      	pop	{r7, pc}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	e000e010 	.word	0xe000e010

0800234c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
 8002356:	210f      	movs	r1, #15
 8002358:	187b      	adds	r3, r7, r1
 800235a:	1c02      	adds	r2, r0, #0
 800235c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	187b      	adds	r3, r7, r1
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	b25b      	sxtb	r3, r3
 8002366:	0011      	movs	r1, r2
 8002368:	0018      	movs	r0, r3
 800236a:	f7ff ff5d 	bl	8002228 <__NVIC_SetPriority>
}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	46bd      	mov	sp, r7
 8002372:	b004      	add	sp, #16
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	0018      	movs	r0, r3
 8002382:	f7ff ffbf 	bl	8002304 <SysTick_Config>
 8002386:	0003      	movs	r3, r0
}
 8002388:	0018      	movs	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	b002      	add	sp, #8
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800239e:	e147      	b.n	8002630 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2101      	movs	r1, #1
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4091      	lsls	r1, r2
 80023aa:	000a      	movs	r2, r1
 80023ac:	4013      	ands	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d100      	bne.n	80023b8 <HAL_GPIO_Init+0x28>
 80023b6:	e138      	b.n	800262a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2203      	movs	r2, #3
 80023be:	4013      	ands	r3, r2
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d005      	beq.n	80023d0 <HAL_GPIO_Init+0x40>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2203      	movs	r2, #3
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d130      	bne.n	8002432 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	2203      	movs	r2, #3
 80023dc:	409a      	lsls	r2, r3
 80023de:	0013      	movs	r3, r2
 80023e0:	43da      	mvns	r2, r3
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4013      	ands	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	409a      	lsls	r2, r3
 80023f2:	0013      	movs	r3, r2
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002406:	2201      	movs	r2, #1
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	409a      	lsls	r2, r3
 800240c:	0013      	movs	r3, r2
 800240e:	43da      	mvns	r2, r3
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	091b      	lsrs	r3, r3, #4
 800241c:	2201      	movs	r2, #1
 800241e:	401a      	ands	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	409a      	lsls	r2, r3
 8002424:	0013      	movs	r3, r2
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2203      	movs	r2, #3
 8002438:	4013      	ands	r3, r2
 800243a:	2b03      	cmp	r3, #3
 800243c:	d017      	beq.n	800246e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	2203      	movs	r2, #3
 800244a:	409a      	lsls	r2, r3
 800244c:	0013      	movs	r3, r2
 800244e:	43da      	mvns	r2, r3
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4013      	ands	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	409a      	lsls	r2, r3
 8002460:	0013      	movs	r3, r2
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2203      	movs	r2, #3
 8002474:	4013      	ands	r3, r2
 8002476:	2b02      	cmp	r3, #2
 8002478:	d123      	bne.n	80024c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	08da      	lsrs	r2, r3, #3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3208      	adds	r2, #8
 8002482:	0092      	lsls	r2, r2, #2
 8002484:	58d3      	ldr	r3, [r2, r3]
 8002486:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	2207      	movs	r2, #7
 800248c:	4013      	ands	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	220f      	movs	r2, #15
 8002492:	409a      	lsls	r2, r3
 8002494:	0013      	movs	r3, r2
 8002496:	43da      	mvns	r2, r3
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4013      	ands	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	691a      	ldr	r2, [r3, #16]
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2107      	movs	r1, #7
 80024a6:	400b      	ands	r3, r1
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	409a      	lsls	r2, r3
 80024ac:	0013      	movs	r3, r2
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	08da      	lsrs	r2, r3, #3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3208      	adds	r2, #8
 80024bc:	0092      	lsls	r2, r2, #2
 80024be:	6939      	ldr	r1, [r7, #16]
 80024c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	2203      	movs	r2, #3
 80024ce:	409a      	lsls	r2, r3
 80024d0:	0013      	movs	r3, r2
 80024d2:	43da      	mvns	r2, r3
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4013      	ands	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2203      	movs	r2, #3
 80024e0:	401a      	ands	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	409a      	lsls	r2, r3
 80024e8:	0013      	movs	r3, r2
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	23c0      	movs	r3, #192	; 0xc0
 80024fc:	029b      	lsls	r3, r3, #10
 80024fe:	4013      	ands	r3, r2
 8002500:	d100      	bne.n	8002504 <HAL_GPIO_Init+0x174>
 8002502:	e092      	b.n	800262a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002504:	4a50      	ldr	r2, [pc, #320]	; (8002648 <HAL_GPIO_Init+0x2b8>)
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	089b      	lsrs	r3, r3, #2
 800250a:	3318      	adds	r3, #24
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	589b      	ldr	r3, [r3, r2]
 8002510:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2203      	movs	r2, #3
 8002516:	4013      	ands	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	220f      	movs	r2, #15
 800251c:	409a      	lsls	r2, r3
 800251e:	0013      	movs	r3, r2
 8002520:	43da      	mvns	r2, r3
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4013      	ands	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	23a0      	movs	r3, #160	; 0xa0
 800252c:	05db      	lsls	r3, r3, #23
 800252e:	429a      	cmp	r2, r3
 8002530:	d013      	beq.n	800255a <HAL_GPIO_Init+0x1ca>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a45      	ldr	r2, [pc, #276]	; (800264c <HAL_GPIO_Init+0x2bc>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00d      	beq.n	8002556 <HAL_GPIO_Init+0x1c6>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a44      	ldr	r2, [pc, #272]	; (8002650 <HAL_GPIO_Init+0x2c0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d007      	beq.n	8002552 <HAL_GPIO_Init+0x1c2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a43      	ldr	r2, [pc, #268]	; (8002654 <HAL_GPIO_Init+0x2c4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d101      	bne.n	800254e <HAL_GPIO_Init+0x1be>
 800254a:	2303      	movs	r3, #3
 800254c:	e006      	b.n	800255c <HAL_GPIO_Init+0x1cc>
 800254e:	2305      	movs	r3, #5
 8002550:	e004      	b.n	800255c <HAL_GPIO_Init+0x1cc>
 8002552:	2302      	movs	r3, #2
 8002554:	e002      	b.n	800255c <HAL_GPIO_Init+0x1cc>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <HAL_GPIO_Init+0x1cc>
 800255a:	2300      	movs	r3, #0
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	2103      	movs	r1, #3
 8002560:	400a      	ands	r2, r1
 8002562:	00d2      	lsls	r2, r2, #3
 8002564:	4093      	lsls	r3, r2
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800256c:	4936      	ldr	r1, [pc, #216]	; (8002648 <HAL_GPIO_Init+0x2b8>)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	089b      	lsrs	r3, r3, #2
 8002572:	3318      	adds	r3, #24
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800257a:	4b33      	ldr	r3, [pc, #204]	; (8002648 <HAL_GPIO_Init+0x2b8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	43da      	mvns	r2, r3
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	2380      	movs	r3, #128	; 0x80
 8002590:	035b      	lsls	r3, r3, #13
 8002592:	4013      	ands	r3, r2
 8002594:	d003      	beq.n	800259e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800259e:	4b2a      	ldr	r3, [pc, #168]	; (8002648 <HAL_GPIO_Init+0x2b8>)
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80025a4:	4b28      	ldr	r3, [pc, #160]	; (8002648 <HAL_GPIO_Init+0x2b8>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	43da      	mvns	r2, r3
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	039b      	lsls	r3, r3, #14
 80025bc:	4013      	ands	r3, r2
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025c8:	4b1f      	ldr	r3, [pc, #124]	; (8002648 <HAL_GPIO_Init+0x2b8>)
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025ce:	4a1e      	ldr	r2, [pc, #120]	; (8002648 <HAL_GPIO_Init+0x2b8>)
 80025d0:	2384      	movs	r3, #132	; 0x84
 80025d2:	58d3      	ldr	r3, [r2, r3]
 80025d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	43da      	mvns	r2, r3
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	2380      	movs	r3, #128	; 0x80
 80025e6:	029b      	lsls	r3, r3, #10
 80025e8:	4013      	ands	r3, r2
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025f4:	4914      	ldr	r1, [pc, #80]	; (8002648 <HAL_GPIO_Init+0x2b8>)
 80025f6:	2284      	movs	r2, #132	; 0x84
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80025fc:	4a12      	ldr	r2, [pc, #72]	; (8002648 <HAL_GPIO_Init+0x2b8>)
 80025fe:	2380      	movs	r3, #128	; 0x80
 8002600:	58d3      	ldr	r3, [r2, r3]
 8002602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	43da      	mvns	r2, r3
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4013      	ands	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	2380      	movs	r3, #128	; 0x80
 8002614:	025b      	lsls	r3, r3, #9
 8002616:	4013      	ands	r3, r2
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002622:	4909      	ldr	r1, [pc, #36]	; (8002648 <HAL_GPIO_Init+0x2b8>)
 8002624:	2280      	movs	r2, #128	; 0x80
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	3301      	adds	r3, #1
 800262e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	40da      	lsrs	r2, r3
 8002638:	1e13      	subs	r3, r2, #0
 800263a:	d000      	beq.n	800263e <HAL_GPIO_Init+0x2ae>
 800263c:	e6b0      	b.n	80023a0 <HAL_GPIO_Init+0x10>
  }
}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	46c0      	nop			; (mov r8, r8)
 8002642:	46bd      	mov	sp, r7
 8002644:	b006      	add	sp, #24
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021800 	.word	0x40021800
 800264c:	50000400 	.word	0x50000400
 8002650:	50000800 	.word	0x50000800
 8002654:	50000c00 	.word	0x50000c00

08002658 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a19      	ldr	r2, [pc, #100]	; (80026cc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002666:	4013      	ands	r3, r2
 8002668:	0019      	movs	r1, r3
 800266a:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	430a      	orrs	r2, r1
 8002670:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	429a      	cmp	r2, r3
 800267a:	d11f      	bne.n	80026bc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800267c:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	0013      	movs	r3, r2
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	189b      	adds	r3, r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4912      	ldr	r1, [pc, #72]	; (80026d4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800268a:	0018      	movs	r0, r3
 800268c:	f7fd fd38 	bl	8000100 <__udivsi3>
 8002690:	0003      	movs	r3, r0
 8002692:	3301      	adds	r3, #1
 8002694:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002696:	e008      	b.n	80026aa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	3b01      	subs	r3, #1
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	e001      	b.n	80026aa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e009      	b.n	80026be <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026aa:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80026ac:	695a      	ldr	r2, [r3, #20]
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	401a      	ands	r2, r3
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d0ed      	beq.n	8002698 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	0018      	movs	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b004      	add	sp, #16
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	40007000 	.word	0x40007000
 80026cc:	fffff9ff 	.word	0xfffff9ff
 80026d0:	20000000 	.word	0x20000000
 80026d4:	000f4240 	.word	0x000f4240

080026d8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80026dc:	4b03      	ldr	r3, [pc, #12]	; (80026ec <LL_RCC_GetAPB1Prescaler+0x14>)
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	23e0      	movs	r3, #224	; 0xe0
 80026e2:	01db      	lsls	r3, r3, #7
 80026e4:	4013      	ands	r3, r2
}
 80026e6:	0018      	movs	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40021000 	.word	0x40021000

080026f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e2f3      	b.n	8002cea <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2201      	movs	r2, #1
 8002708:	4013      	ands	r3, r2
 800270a:	d100      	bne.n	800270e <HAL_RCC_OscConfig+0x1e>
 800270c:	e07c      	b.n	8002808 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800270e:	4bc3      	ldr	r3, [pc, #780]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2238      	movs	r2, #56	; 0x38
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002718:	4bc0      	ldr	r3, [pc, #768]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2203      	movs	r2, #3
 800271e:	4013      	ands	r3, r2
 8002720:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	2b10      	cmp	r3, #16
 8002726:	d102      	bne.n	800272e <HAL_RCC_OscConfig+0x3e>
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	2b03      	cmp	r3, #3
 800272c:	d002      	beq.n	8002734 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	2b08      	cmp	r3, #8
 8002732:	d10b      	bne.n	800274c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002734:	4bb9      	ldr	r3, [pc, #740]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	029b      	lsls	r3, r3, #10
 800273c:	4013      	ands	r3, r2
 800273e:	d062      	beq.n	8002806 <HAL_RCC_OscConfig+0x116>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d15e      	bne.n	8002806 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e2ce      	b.n	8002cea <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	2380      	movs	r3, #128	; 0x80
 8002752:	025b      	lsls	r3, r3, #9
 8002754:	429a      	cmp	r2, r3
 8002756:	d107      	bne.n	8002768 <HAL_RCC_OscConfig+0x78>
 8002758:	4bb0      	ldr	r3, [pc, #704]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4baf      	ldr	r3, [pc, #700]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 800275e:	2180      	movs	r1, #128	; 0x80
 8002760:	0249      	lsls	r1, r1, #9
 8002762:	430a      	orrs	r2, r1
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	e020      	b.n	80027aa <HAL_RCC_OscConfig+0xba>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	23a0      	movs	r3, #160	; 0xa0
 800276e:	02db      	lsls	r3, r3, #11
 8002770:	429a      	cmp	r2, r3
 8002772:	d10e      	bne.n	8002792 <HAL_RCC_OscConfig+0xa2>
 8002774:	4ba9      	ldr	r3, [pc, #676]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4ba8      	ldr	r3, [pc, #672]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 800277a:	2180      	movs	r1, #128	; 0x80
 800277c:	02c9      	lsls	r1, r1, #11
 800277e:	430a      	orrs	r2, r1
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	4ba6      	ldr	r3, [pc, #664]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	4ba5      	ldr	r3, [pc, #660]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 8002788:	2180      	movs	r1, #128	; 0x80
 800278a:	0249      	lsls	r1, r1, #9
 800278c:	430a      	orrs	r2, r1
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	e00b      	b.n	80027aa <HAL_RCC_OscConfig+0xba>
 8002792:	4ba2      	ldr	r3, [pc, #648]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	4ba1      	ldr	r3, [pc, #644]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 8002798:	49a1      	ldr	r1, [pc, #644]	; (8002a20 <HAL_RCC_OscConfig+0x330>)
 800279a:	400a      	ands	r2, r1
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	4b9f      	ldr	r3, [pc, #636]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4b9e      	ldr	r3, [pc, #632]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 80027a4:	499f      	ldr	r1, [pc, #636]	; (8002a24 <HAL_RCC_OscConfig+0x334>)
 80027a6:	400a      	ands	r2, r1
 80027a8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d014      	beq.n	80027dc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b2:	f7ff fd0b 	bl	80021cc <HAL_GetTick>
 80027b6:	0003      	movs	r3, r0
 80027b8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027bc:	f7ff fd06 	bl	80021cc <HAL_GetTick>
 80027c0:	0002      	movs	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b64      	cmp	r3, #100	; 0x64
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e28d      	b.n	8002cea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ce:	4b93      	ldr	r3, [pc, #588]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	029b      	lsls	r3, r3, #10
 80027d6:	4013      	ands	r3, r2
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0xcc>
 80027da:	e015      	b.n	8002808 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7ff fcf6 	bl	80021cc <HAL_GetTick>
 80027e0:	0003      	movs	r3, r0
 80027e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e6:	f7ff fcf1 	bl	80021cc <HAL_GetTick>
 80027ea:	0002      	movs	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b64      	cmp	r3, #100	; 0x64
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e278      	b.n	8002cea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027f8:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	029b      	lsls	r3, r3, #10
 8002800:	4013      	ands	r3, r2
 8002802:	d1f0      	bne.n	80027e6 <HAL_RCC_OscConfig+0xf6>
 8002804:	e000      	b.n	8002808 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002806:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2202      	movs	r2, #2
 800280e:	4013      	ands	r3, r2
 8002810:	d100      	bne.n	8002814 <HAL_RCC_OscConfig+0x124>
 8002812:	e099      	b.n	8002948 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002814:	4b81      	ldr	r3, [pc, #516]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2238      	movs	r2, #56	; 0x38
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800281e:	4b7f      	ldr	r3, [pc, #508]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	2203      	movs	r2, #3
 8002824:	4013      	ands	r3, r2
 8002826:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2b10      	cmp	r3, #16
 800282c:	d102      	bne.n	8002834 <HAL_RCC_OscConfig+0x144>
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d002      	beq.n	800283a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d135      	bne.n	80028a6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800283a:	4b78      	ldr	r3, [pc, #480]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	2380      	movs	r3, #128	; 0x80
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	4013      	ands	r3, r2
 8002844:	d005      	beq.n	8002852 <HAL_RCC_OscConfig+0x162>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e24b      	b.n	8002cea <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002852:	4b72      	ldr	r3, [pc, #456]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4a74      	ldr	r2, [pc, #464]	; (8002a28 <HAL_RCC_OscConfig+0x338>)
 8002858:	4013      	ands	r3, r2
 800285a:	0019      	movs	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	021a      	lsls	r2, r3, #8
 8002862:	4b6e      	ldr	r3, [pc, #440]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 8002864:	430a      	orrs	r2, r1
 8002866:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d112      	bne.n	8002894 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800286e:	4b6b      	ldr	r3, [pc, #428]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a6e      	ldr	r2, [pc, #440]	; (8002a2c <HAL_RCC_OscConfig+0x33c>)
 8002874:	4013      	ands	r3, r2
 8002876:	0019      	movs	r1, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	4b67      	ldr	r3, [pc, #412]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 800287e:	430a      	orrs	r2, r1
 8002880:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002882:	4b66      	ldr	r3, [pc, #408]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	0adb      	lsrs	r3, r3, #11
 8002888:	2207      	movs	r2, #7
 800288a:	4013      	ands	r3, r2
 800288c:	4a68      	ldr	r2, [pc, #416]	; (8002a30 <HAL_RCC_OscConfig+0x340>)
 800288e:	40da      	lsrs	r2, r3
 8002890:	4b68      	ldr	r3, [pc, #416]	; (8002a34 <HAL_RCC_OscConfig+0x344>)
 8002892:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002894:	4b68      	ldr	r3, [pc, #416]	; (8002a38 <HAL_RCC_OscConfig+0x348>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	0018      	movs	r0, r3
 800289a:	f7ff fc3b 	bl	8002114 <HAL_InitTick>
 800289e:	1e03      	subs	r3, r0, #0
 80028a0:	d051      	beq.n	8002946 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e221      	b.n	8002cea <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d030      	beq.n	8002910 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80028ae:	4b5b      	ldr	r3, [pc, #364]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a5e      	ldr	r2, [pc, #376]	; (8002a2c <HAL_RCC_OscConfig+0x33c>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	0019      	movs	r1, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	4b57      	ldr	r3, [pc, #348]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 80028be:	430a      	orrs	r2, r1
 80028c0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80028c2:	4b56      	ldr	r3, [pc, #344]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	4b55      	ldr	r3, [pc, #340]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 80028c8:	2180      	movs	r1, #128	; 0x80
 80028ca:	0049      	lsls	r1, r1, #1
 80028cc:	430a      	orrs	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d0:	f7ff fc7c 	bl	80021cc <HAL_GetTick>
 80028d4:	0003      	movs	r3, r0
 80028d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028da:	f7ff fc77 	bl	80021cc <HAL_GetTick>
 80028de:	0002      	movs	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e1fe      	b.n	8002cea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028ec:	4b4b      	ldr	r3, [pc, #300]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4013      	ands	r3, r2
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f8:	4b48      	ldr	r3, [pc, #288]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4a4a      	ldr	r2, [pc, #296]	; (8002a28 <HAL_RCC_OscConfig+0x338>)
 80028fe:	4013      	ands	r3, r2
 8002900:	0019      	movs	r1, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	021a      	lsls	r2, r3, #8
 8002908:	4b44      	ldr	r3, [pc, #272]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 800290a:	430a      	orrs	r2, r1
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	e01b      	b.n	8002948 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002910:	4b42      	ldr	r3, [pc, #264]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4b41      	ldr	r3, [pc, #260]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 8002916:	4949      	ldr	r1, [pc, #292]	; (8002a3c <HAL_RCC_OscConfig+0x34c>)
 8002918:	400a      	ands	r2, r1
 800291a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7ff fc56 	bl	80021cc <HAL_GetTick>
 8002920:	0003      	movs	r3, r0
 8002922:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002926:	f7ff fc51 	bl	80021cc <HAL_GetTick>
 800292a:	0002      	movs	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e1d8      	b.n	8002cea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002938:	4b38      	ldr	r3, [pc, #224]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4013      	ands	r3, r2
 8002942:	d1f0      	bne.n	8002926 <HAL_RCC_OscConfig+0x236>
 8002944:	e000      	b.n	8002948 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002946:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2208      	movs	r2, #8
 800294e:	4013      	ands	r3, r2
 8002950:	d047      	beq.n	80029e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002952:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2238      	movs	r2, #56	; 0x38
 8002958:	4013      	ands	r3, r2
 800295a:	2b18      	cmp	r3, #24
 800295c:	d10a      	bne.n	8002974 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800295e:	4b2f      	ldr	r3, [pc, #188]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 8002960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002962:	2202      	movs	r2, #2
 8002964:	4013      	ands	r3, r2
 8002966:	d03c      	beq.n	80029e2 <HAL_RCC_OscConfig+0x2f2>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d138      	bne.n	80029e2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e1ba      	b.n	8002cea <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d019      	beq.n	80029b0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800297c:	4b27      	ldr	r3, [pc, #156]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 800297e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002980:	4b26      	ldr	r3, [pc, #152]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 8002982:	2101      	movs	r1, #1
 8002984:	430a      	orrs	r2, r1
 8002986:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7ff fc20 	bl	80021cc <HAL_GetTick>
 800298c:	0003      	movs	r3, r0
 800298e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002992:	f7ff fc1b 	bl	80021cc <HAL_GetTick>
 8002996:	0002      	movs	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e1a2      	b.n	8002cea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029a4:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 80029a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a8:	2202      	movs	r2, #2
 80029aa:	4013      	ands	r3, r2
 80029ac:	d0f1      	beq.n	8002992 <HAL_RCC_OscConfig+0x2a2>
 80029ae:	e018      	b.n	80029e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80029b0:	4b1a      	ldr	r3, [pc, #104]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 80029b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029b4:	4b19      	ldr	r3, [pc, #100]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 80029b6:	2101      	movs	r1, #1
 80029b8:	438a      	bics	r2, r1
 80029ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029bc:	f7ff fc06 	bl	80021cc <HAL_GetTick>
 80029c0:	0003      	movs	r3, r0
 80029c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c6:	f7ff fc01 	bl	80021cc <HAL_GetTick>
 80029ca:	0002      	movs	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e188      	b.n	8002cea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029d8:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 80029da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029dc:	2202      	movs	r2, #2
 80029de:	4013      	ands	r3, r2
 80029e0:	d1f1      	bne.n	80029c6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2204      	movs	r2, #4
 80029e8:	4013      	ands	r3, r2
 80029ea:	d100      	bne.n	80029ee <HAL_RCC_OscConfig+0x2fe>
 80029ec:	e0c6      	b.n	8002b7c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ee:	231f      	movs	r3, #31
 80029f0:	18fb      	adds	r3, r7, r3
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2238      	movs	r2, #56	; 0x38
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	d11e      	bne.n	8002a40 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_RCC_OscConfig+0x32c>)
 8002a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a06:	2202      	movs	r2, #2
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d100      	bne.n	8002a0e <HAL_RCC_OscConfig+0x31e>
 8002a0c:	e0b6      	b.n	8002b7c <HAL_RCC_OscConfig+0x48c>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d000      	beq.n	8002a18 <HAL_RCC_OscConfig+0x328>
 8002a16:	e0b1      	b.n	8002b7c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e166      	b.n	8002cea <HAL_RCC_OscConfig+0x5fa>
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	fffeffff 	.word	0xfffeffff
 8002a24:	fffbffff 	.word	0xfffbffff
 8002a28:	ffff80ff 	.word	0xffff80ff
 8002a2c:	ffffc7ff 	.word	0xffffc7ff
 8002a30:	00f42400 	.word	0x00f42400
 8002a34:	20000000 	.word	0x20000000
 8002a38:	20000004 	.word	0x20000004
 8002a3c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a40:	4bac      	ldr	r3, [pc, #688]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002a42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	055b      	lsls	r3, r3, #21
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d101      	bne.n	8002a50 <HAL_RCC_OscConfig+0x360>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <HAL_RCC_OscConfig+0x362>
 8002a50:	2300      	movs	r3, #0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d011      	beq.n	8002a7a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002a56:	4ba7      	ldr	r3, [pc, #668]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002a58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a5a:	4ba6      	ldr	r3, [pc, #664]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002a5c:	2180      	movs	r1, #128	; 0x80
 8002a5e:	0549      	lsls	r1, r1, #21
 8002a60:	430a      	orrs	r2, r1
 8002a62:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a64:	4ba3      	ldr	r3, [pc, #652]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a68:	2380      	movs	r3, #128	; 0x80
 8002a6a:	055b      	lsls	r3, r3, #21
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002a72:	231f      	movs	r3, #31
 8002a74:	18fb      	adds	r3, r7, r3
 8002a76:	2201      	movs	r2, #1
 8002a78:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a7a:	4b9f      	ldr	r3, [pc, #636]	; (8002cf8 <HAL_RCC_OscConfig+0x608>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	2380      	movs	r3, #128	; 0x80
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4013      	ands	r3, r2
 8002a84:	d11a      	bne.n	8002abc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a86:	4b9c      	ldr	r3, [pc, #624]	; (8002cf8 <HAL_RCC_OscConfig+0x608>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	4b9b      	ldr	r3, [pc, #620]	; (8002cf8 <HAL_RCC_OscConfig+0x608>)
 8002a8c:	2180      	movs	r1, #128	; 0x80
 8002a8e:	0049      	lsls	r1, r1, #1
 8002a90:	430a      	orrs	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002a94:	f7ff fb9a 	bl	80021cc <HAL_GetTick>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9e:	f7ff fb95 	bl	80021cc <HAL_GetTick>
 8002aa2:	0002      	movs	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e11c      	b.n	8002cea <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab0:	4b91      	ldr	r3, [pc, #580]	; (8002cf8 <HAL_RCC_OscConfig+0x608>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d0f0      	beq.n	8002a9e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d106      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x3e2>
 8002ac4:	4b8b      	ldr	r3, [pc, #556]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002ac6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ac8:	4b8a      	ldr	r3, [pc, #552]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002aca:	2101      	movs	r1, #1
 8002acc:	430a      	orrs	r2, r1
 8002ace:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ad0:	e01c      	b.n	8002b0c <HAL_RCC_OscConfig+0x41c>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b05      	cmp	r3, #5
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCC_OscConfig+0x404>
 8002ada:	4b86      	ldr	r3, [pc, #536]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002adc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ade:	4b85      	ldr	r3, [pc, #532]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002ae0:	2104      	movs	r1, #4
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ae6:	4b83      	ldr	r3, [pc, #524]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002ae8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002aea:	4b82      	ldr	r3, [pc, #520]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002aec:	2101      	movs	r1, #1
 8002aee:	430a      	orrs	r2, r1
 8002af0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002af2:	e00b      	b.n	8002b0c <HAL_RCC_OscConfig+0x41c>
 8002af4:	4b7f      	ldr	r3, [pc, #508]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002af6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002af8:	4b7e      	ldr	r3, [pc, #504]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002afa:	2101      	movs	r1, #1
 8002afc:	438a      	bics	r2, r1
 8002afe:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b00:	4b7c      	ldr	r3, [pc, #496]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002b02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b04:	4b7b      	ldr	r3, [pc, #492]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002b06:	2104      	movs	r1, #4
 8002b08:	438a      	bics	r2, r1
 8002b0a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d014      	beq.n	8002b3e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7ff fb5a 	bl	80021cc <HAL_GetTick>
 8002b18:	0003      	movs	r3, r0
 8002b1a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b1c:	e009      	b.n	8002b32 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b1e:	f7ff fb55 	bl	80021cc <HAL_GetTick>
 8002b22:	0002      	movs	r2, r0
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	4a74      	ldr	r2, [pc, #464]	; (8002cfc <HAL_RCC_OscConfig+0x60c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e0db      	b.n	8002cea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b32:	4b70      	ldr	r3, [pc, #448]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b36:	2202      	movs	r2, #2
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d0f0      	beq.n	8002b1e <HAL_RCC_OscConfig+0x42e>
 8002b3c:	e013      	b.n	8002b66 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3e:	f7ff fb45 	bl	80021cc <HAL_GetTick>
 8002b42:	0003      	movs	r3, r0
 8002b44:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b46:	e009      	b.n	8002b5c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b48:	f7ff fb40 	bl	80021cc <HAL_GetTick>
 8002b4c:	0002      	movs	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	4a6a      	ldr	r2, [pc, #424]	; (8002cfc <HAL_RCC_OscConfig+0x60c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e0c6      	b.n	8002cea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b5c:	4b65      	ldr	r3, [pc, #404]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b60:	2202      	movs	r2, #2
 8002b62:	4013      	ands	r3, r2
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002b66:	231f      	movs	r3, #31
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d105      	bne.n	8002b7c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002b70:	4b60      	ldr	r3, [pc, #384]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002b72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b74:	4b5f      	ldr	r3, [pc, #380]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002b76:	4962      	ldr	r1, [pc, #392]	; (8002d00 <HAL_RCC_OscConfig+0x610>)
 8002b78:	400a      	ands	r2, r1
 8002b7a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d100      	bne.n	8002b86 <HAL_RCC_OscConfig+0x496>
 8002b84:	e0b0      	b.n	8002ce8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b86:	4b5b      	ldr	r3, [pc, #364]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2238      	movs	r2, #56	; 0x38
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b10      	cmp	r3, #16
 8002b90:	d100      	bne.n	8002b94 <HAL_RCC_OscConfig+0x4a4>
 8002b92:	e078      	b.n	8002c86 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d153      	bne.n	8002c44 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9c:	4b55      	ldr	r3, [pc, #340]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b54      	ldr	r3, [pc, #336]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002ba2:	4958      	ldr	r1, [pc, #352]	; (8002d04 <HAL_RCC_OscConfig+0x614>)
 8002ba4:	400a      	ands	r2, r1
 8002ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba8:	f7ff fb10 	bl	80021cc <HAL_GetTick>
 8002bac:	0003      	movs	r3, r0
 8002bae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb2:	f7ff fb0b 	bl	80021cc <HAL_GetTick>
 8002bb6:	0002      	movs	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e092      	b.n	8002cea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc4:	4b4b      	ldr	r3, [pc, #300]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	049b      	lsls	r3, r3, #18
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d1f0      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bd0:	4b48      	ldr	r3, [pc, #288]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4a4c      	ldr	r2, [pc, #304]	; (8002d08 <HAL_RCC_OscConfig+0x618>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	0019      	movs	r1, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1a      	ldr	r2, [r3, #32]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be8:	021b      	lsls	r3, r3, #8
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	4b3e      	ldr	r3, [pc, #248]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bfe:	4b3d      	ldr	r3, [pc, #244]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	4b3c      	ldr	r3, [pc, #240]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002c04:	2180      	movs	r1, #128	; 0x80
 8002c06:	0449      	lsls	r1, r1, #17
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002c0c:	4b39      	ldr	r3, [pc, #228]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	4b38      	ldr	r3, [pc, #224]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002c12:	2180      	movs	r1, #128	; 0x80
 8002c14:	0549      	lsls	r1, r1, #21
 8002c16:	430a      	orrs	r2, r1
 8002c18:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1a:	f7ff fad7 	bl	80021cc <HAL_GetTick>
 8002c1e:	0003      	movs	r3, r0
 8002c20:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c22:	e008      	b.n	8002c36 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c24:	f7ff fad2 	bl	80021cc <HAL_GetTick>
 8002c28:	0002      	movs	r2, r0
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e059      	b.n	8002cea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c36:	4b2f      	ldr	r3, [pc, #188]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	2380      	movs	r3, #128	; 0x80
 8002c3c:	049b      	lsls	r3, r3, #18
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0x534>
 8002c42:	e051      	b.n	8002ce8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c44:	4b2b      	ldr	r3, [pc, #172]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	4b2a      	ldr	r3, [pc, #168]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002c4a:	492e      	ldr	r1, [pc, #184]	; (8002d04 <HAL_RCC_OscConfig+0x614>)
 8002c4c:	400a      	ands	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7ff fabc 	bl	80021cc <HAL_GetTick>
 8002c54:	0003      	movs	r3, r0
 8002c56:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5a:	f7ff fab7 	bl	80021cc <HAL_GetTick>
 8002c5e:	0002      	movs	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e03e      	b.n	8002cea <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c6c:	4b21      	ldr	r3, [pc, #132]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	049b      	lsls	r3, r3, #18
 8002c74:	4013      	ands	r3, r2
 8002c76:	d1f0      	bne.n	8002c5a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002c78:	4b1e      	ldr	r3, [pc, #120]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002c7a:	68da      	ldr	r2, [r3, #12]
 8002c7c:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002c7e:	4923      	ldr	r1, [pc, #140]	; (8002d0c <HAL_RCC_OscConfig+0x61c>)
 8002c80:	400a      	ands	r2, r1
 8002c82:	60da      	str	r2, [r3, #12]
 8002c84:	e030      	b.n	8002ce8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e02b      	b.n	8002cea <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002c92:	4b18      	ldr	r3, [pc, #96]	; (8002cf4 <HAL_RCC_OscConfig+0x604>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	401a      	ands	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d11e      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2270      	movs	r2, #112	; 0x70
 8002caa:	401a      	ands	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d117      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	23fe      	movs	r3, #254	; 0xfe
 8002cb8:	01db      	lsls	r3, r3, #7
 8002cba:	401a      	ands	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d10e      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	23f8      	movs	r3, #248	; 0xf8
 8002cca:	039b      	lsls	r3, r3, #14
 8002ccc:	401a      	ands	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d106      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	0f5b      	lsrs	r3, r3, #29
 8002cda:	075a      	lsls	r2, r3, #29
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	0018      	movs	r0, r3
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b008      	add	sp, #32
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40007000 	.word	0x40007000
 8002cfc:	00001388 	.word	0x00001388
 8002d00:	efffffff 	.word	0xefffffff
 8002d04:	feffffff 	.word	0xfeffffff
 8002d08:	1fc1808c 	.word	0x1fc1808c
 8002d0c:	effefffc 	.word	0xeffefffc

08002d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0e9      	b.n	8002ef8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d24:	4b76      	ldr	r3, [pc, #472]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2207      	movs	r2, #7
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d91e      	bls.n	8002d70 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b73      	ldr	r3, [pc, #460]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2207      	movs	r2, #7
 8002d38:	4393      	bics	r3, r2
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	4b70      	ldr	r3, [pc, #448]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d44:	f7ff fa42 	bl	80021cc <HAL_GetTick>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d4c:	e009      	b.n	8002d62 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d4e:	f7ff fa3d 	bl	80021cc <HAL_GetTick>
 8002d52:	0002      	movs	r2, r0
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	4a6a      	ldr	r2, [pc, #424]	; (8002f04 <HAL_RCC_ClockConfig+0x1f4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e0ca      	b.n	8002ef8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d62:	4b67      	ldr	r3, [pc, #412]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2207      	movs	r2, #7
 8002d68:	4013      	ands	r3, r2
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d1ee      	bne.n	8002d4e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2202      	movs	r2, #2
 8002d76:	4013      	ands	r3, r2
 8002d78:	d015      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2204      	movs	r2, #4
 8002d80:	4013      	ands	r3, r2
 8002d82:	d006      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d84:	4b60      	ldr	r3, [pc, #384]	; (8002f08 <HAL_RCC_ClockConfig+0x1f8>)
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	4b5f      	ldr	r3, [pc, #380]	; (8002f08 <HAL_RCC_ClockConfig+0x1f8>)
 8002d8a:	21e0      	movs	r1, #224	; 0xe0
 8002d8c:	01c9      	lsls	r1, r1, #7
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d92:	4b5d      	ldr	r3, [pc, #372]	; (8002f08 <HAL_RCC_ClockConfig+0x1f8>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	4a5d      	ldr	r2, [pc, #372]	; (8002f0c <HAL_RCC_ClockConfig+0x1fc>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	0019      	movs	r1, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	4b59      	ldr	r3, [pc, #356]	; (8002f08 <HAL_RCC_ClockConfig+0x1f8>)
 8002da2:	430a      	orrs	r2, r1
 8002da4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2201      	movs	r2, #1
 8002dac:	4013      	ands	r3, r2
 8002dae:	d057      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d107      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002db8:	4b53      	ldr	r3, [pc, #332]	; (8002f08 <HAL_RCC_ClockConfig+0x1f8>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	2380      	movs	r3, #128	; 0x80
 8002dbe:	029b      	lsls	r3, r3, #10
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d12b      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e097      	b.n	8002ef8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d107      	bne.n	8002de0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd0:	4b4d      	ldr	r3, [pc, #308]	; (8002f08 <HAL_RCC_ClockConfig+0x1f8>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	2380      	movs	r3, #128	; 0x80
 8002dd6:	049b      	lsls	r3, r3, #18
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d11f      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e08b      	b.n	8002ef8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d107      	bne.n	8002df8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002de8:	4b47      	ldr	r3, [pc, #284]	; (8002f08 <HAL_RCC_ClockConfig+0x1f8>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4013      	ands	r3, r2
 8002df2:	d113      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e07f      	b.n	8002ef8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d106      	bne.n	8002e0e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e00:	4b41      	ldr	r3, [pc, #260]	; (8002f08 <HAL_RCC_ClockConfig+0x1f8>)
 8002e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e04:	2202      	movs	r2, #2
 8002e06:	4013      	ands	r3, r2
 8002e08:	d108      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e074      	b.n	8002ef8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e0e:	4b3e      	ldr	r3, [pc, #248]	; (8002f08 <HAL_RCC_ClockConfig+0x1f8>)
 8002e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e12:	2202      	movs	r2, #2
 8002e14:	4013      	ands	r3, r2
 8002e16:	d101      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e06d      	b.n	8002ef8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e1c:	4b3a      	ldr	r3, [pc, #232]	; (8002f08 <HAL_RCC_ClockConfig+0x1f8>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2207      	movs	r2, #7
 8002e22:	4393      	bics	r3, r2
 8002e24:	0019      	movs	r1, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	4b37      	ldr	r3, [pc, #220]	; (8002f08 <HAL_RCC_ClockConfig+0x1f8>)
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e30:	f7ff f9cc 	bl	80021cc <HAL_GetTick>
 8002e34:	0003      	movs	r3, r0
 8002e36:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e38:	e009      	b.n	8002e4e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e3a:	f7ff f9c7 	bl	80021cc <HAL_GetTick>
 8002e3e:	0002      	movs	r2, r0
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	4a2f      	ldr	r2, [pc, #188]	; (8002f04 <HAL_RCC_ClockConfig+0x1f4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e054      	b.n	8002ef8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4e:	4b2e      	ldr	r3, [pc, #184]	; (8002f08 <HAL_RCC_ClockConfig+0x1f8>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2238      	movs	r2, #56	; 0x38
 8002e54:	401a      	ands	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d1ec      	bne.n	8002e3a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e60:	4b27      	ldr	r3, [pc, #156]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2207      	movs	r2, #7
 8002e66:	4013      	ands	r3, r2
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d21e      	bcs.n	8002eac <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6e:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2207      	movs	r2, #7
 8002e74:	4393      	bics	r3, r2
 8002e76:	0019      	movs	r1, r3
 8002e78:	4b21      	ldr	r3, [pc, #132]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e80:	f7ff f9a4 	bl	80021cc <HAL_GetTick>
 8002e84:	0003      	movs	r3, r0
 8002e86:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e88:	e009      	b.n	8002e9e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e8a:	f7ff f99f 	bl	80021cc <HAL_GetTick>
 8002e8e:	0002      	movs	r2, r0
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	4a1b      	ldr	r2, [pc, #108]	; (8002f04 <HAL_RCC_ClockConfig+0x1f4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e02c      	b.n	8002ef8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e9e:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2207      	movs	r2, #7
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d1ee      	bne.n	8002e8a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	d009      	beq.n	8002eca <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb6:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <HAL_RCC_ClockConfig+0x1f8>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	4a15      	ldr	r2, [pc, #84]	; (8002f10 <HAL_RCC_ClockConfig+0x200>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	0019      	movs	r1, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <HAL_RCC_ClockConfig+0x1f8>)
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002eca:	f000 f829 	bl	8002f20 <HAL_RCC_GetSysClockFreq>
 8002ece:	0001      	movs	r1, r0
 8002ed0:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <HAL_RCC_ClockConfig+0x1f8>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	0a1b      	lsrs	r3, r3, #8
 8002ed6:	220f      	movs	r2, #15
 8002ed8:	401a      	ands	r2, r3
 8002eda:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <HAL_RCC_ClockConfig+0x204>)
 8002edc:	0092      	lsls	r2, r2, #2
 8002ede:	58d3      	ldr	r3, [r2, r3]
 8002ee0:	221f      	movs	r2, #31
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	000a      	movs	r2, r1
 8002ee6:	40da      	lsrs	r2, r3
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <HAL_RCC_ClockConfig+0x208>)
 8002eea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002eec:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_RCC_ClockConfig+0x20c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f7ff f90f 	bl	8002114 <HAL_InitTick>
 8002ef6:	0003      	movs	r3, r0
}
 8002ef8:	0018      	movs	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b004      	add	sp, #16
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40022000 	.word	0x40022000
 8002f04:	00001388 	.word	0x00001388
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	fffff0ff 	.word	0xfffff0ff
 8002f10:	ffff8fff 	.word	0xffff8fff
 8002f14:	080058ac 	.word	0x080058ac
 8002f18:	20000000 	.word	0x20000000
 8002f1c:	20000004 	.word	0x20000004

08002f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f26:	4b3c      	ldr	r3, [pc, #240]	; (8003018 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	2238      	movs	r2, #56	; 0x38
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d10f      	bne.n	8002f50 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002f30:	4b39      	ldr	r3, [pc, #228]	; (8003018 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	0adb      	lsrs	r3, r3, #11
 8002f36:	2207      	movs	r2, #7
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	409a      	lsls	r2, r3
 8002f3e:	0013      	movs	r3, r2
 8002f40:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002f42:	6839      	ldr	r1, [r7, #0]
 8002f44:	4835      	ldr	r0, [pc, #212]	; (800301c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f46:	f7fd f8db 	bl	8000100 <__udivsi3>
 8002f4a:	0003      	movs	r3, r0
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	e05d      	b.n	800300c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f50:	4b31      	ldr	r3, [pc, #196]	; (8003018 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2238      	movs	r2, #56	; 0x38
 8002f56:	4013      	ands	r3, r2
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d102      	bne.n	8002f62 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f5c:	4b30      	ldr	r3, [pc, #192]	; (8003020 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	e054      	b.n	800300c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f62:	4b2d      	ldr	r3, [pc, #180]	; (8003018 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2238      	movs	r2, #56	; 0x38
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2b10      	cmp	r3, #16
 8002f6c:	d138      	bne.n	8002fe0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f6e:	4b2a      	ldr	r3, [pc, #168]	; (8003018 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	2203      	movs	r2, #3
 8002f74:	4013      	ands	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f78:	4b27      	ldr	r3, [pc, #156]	; (8003018 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	091b      	lsrs	r3, r3, #4
 8002f7e:	2207      	movs	r2, #7
 8002f80:	4013      	ands	r3, r2
 8002f82:	3301      	adds	r3, #1
 8002f84:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d10d      	bne.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	4824      	ldr	r0, [pc, #144]	; (8003020 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f90:	f7fd f8b6 	bl	8000100 <__udivsi3>
 8002f94:	0003      	movs	r3, r0
 8002f96:	0019      	movs	r1, r3
 8002f98:	4b1f      	ldr	r3, [pc, #124]	; (8003018 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	0a1b      	lsrs	r3, r3, #8
 8002f9e:	227f      	movs	r2, #127	; 0x7f
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	434b      	muls	r3, r1
 8002fa4:	617b      	str	r3, [r7, #20]
        break;
 8002fa6:	e00d      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	481c      	ldr	r0, [pc, #112]	; (800301c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002fac:	f7fd f8a8 	bl	8000100 <__udivsi3>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	0019      	movs	r1, r3
 8002fb4:	4b18      	ldr	r3, [pc, #96]	; (8003018 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	0a1b      	lsrs	r3, r3, #8
 8002fba:	227f      	movs	r2, #127	; 0x7f
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	434b      	muls	r3, r1
 8002fc0:	617b      	str	r3, [r7, #20]
        break;
 8002fc2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002fc4:	4b14      	ldr	r3, [pc, #80]	; (8003018 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	0f5b      	lsrs	r3, r3, #29
 8002fca:	2207      	movs	r2, #7
 8002fcc:	4013      	ands	r3, r2
 8002fce:	3301      	adds	r3, #1
 8002fd0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	6978      	ldr	r0, [r7, #20]
 8002fd6:	f7fd f893 	bl	8000100 <__udivsi3>
 8002fda:	0003      	movs	r3, r0
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	e015      	b.n	800300c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002fe0:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2238      	movs	r2, #56	; 0x38
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d103      	bne.n	8002ff4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002fec:	2380      	movs	r3, #128	; 0x80
 8002fee:	021b      	lsls	r3, r3, #8
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	e00b      	b.n	800300c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ff4:	4b08      	ldr	r3, [pc, #32]	; (8003018 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2238      	movs	r2, #56	; 0x38
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	2b18      	cmp	r3, #24
 8002ffe:	d103      	bne.n	8003008 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003000:	23fa      	movs	r3, #250	; 0xfa
 8003002:	01db      	lsls	r3, r3, #7
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	e001      	b.n	800300c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800300c:	693b      	ldr	r3, [r7, #16]
}
 800300e:	0018      	movs	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	b006      	add	sp, #24
 8003014:	bd80      	pop	{r7, pc}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	40021000 	.word	0x40021000
 800301c:	00f42400 	.word	0x00f42400
 8003020:	007a1200 	.word	0x007a1200

08003024 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003028:	4b02      	ldr	r3, [pc, #8]	; (8003034 <HAL_RCC_GetHCLKFreq+0x10>)
 800302a:	681b      	ldr	r3, [r3, #0]
}
 800302c:	0018      	movs	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	20000000 	.word	0x20000000

08003038 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003038:	b5b0      	push	{r4, r5, r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800303c:	f7ff fff2 	bl	8003024 <HAL_RCC_GetHCLKFreq>
 8003040:	0004      	movs	r4, r0
 8003042:	f7ff fb49 	bl	80026d8 <LL_RCC_GetAPB1Prescaler>
 8003046:	0003      	movs	r3, r0
 8003048:	0b1a      	lsrs	r2, r3, #12
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <HAL_RCC_GetPCLK1Freq+0x28>)
 800304c:	0092      	lsls	r2, r2, #2
 800304e:	58d3      	ldr	r3, [r2, r3]
 8003050:	221f      	movs	r2, #31
 8003052:	4013      	ands	r3, r2
 8003054:	40dc      	lsrs	r4, r3
 8003056:	0023      	movs	r3, r4
}
 8003058:	0018      	movs	r0, r3
 800305a:	46bd      	mov	sp, r7
 800305c:	bdb0      	pop	{r4, r5, r7, pc}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	080058ec 	.word	0x080058ec

08003064 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800306c:	2313      	movs	r3, #19
 800306e:	18fb      	adds	r3, r7, r3
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003074:	2312      	movs	r3, #18
 8003076:	18fb      	adds	r3, r7, r3
 8003078:	2200      	movs	r2, #0
 800307a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	2380      	movs	r3, #128	; 0x80
 8003082:	029b      	lsls	r3, r3, #10
 8003084:	4013      	ands	r3, r2
 8003086:	d100      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003088:	e0a3      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308a:	2011      	movs	r0, #17
 800308c:	183b      	adds	r3, r7, r0
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003092:	4b86      	ldr	r3, [pc, #536]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003094:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003096:	2380      	movs	r3, #128	; 0x80
 8003098:	055b      	lsls	r3, r3, #21
 800309a:	4013      	ands	r3, r2
 800309c:	d110      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309e:	4b83      	ldr	r3, [pc, #524]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030a2:	4b82      	ldr	r3, [pc, #520]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030a4:	2180      	movs	r1, #128	; 0x80
 80030a6:	0549      	lsls	r1, r1, #21
 80030a8:	430a      	orrs	r2, r1
 80030aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80030ac:	4b7f      	ldr	r3, [pc, #508]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030b0:	2380      	movs	r3, #128	; 0x80
 80030b2:	055b      	lsls	r3, r3, #21
 80030b4:	4013      	ands	r3, r2
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ba:	183b      	adds	r3, r7, r0
 80030bc:	2201      	movs	r2, #1
 80030be:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030c0:	4b7b      	ldr	r3, [pc, #492]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b7a      	ldr	r3, [pc, #488]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80030c6:	2180      	movs	r1, #128	; 0x80
 80030c8:	0049      	lsls	r1, r1, #1
 80030ca:	430a      	orrs	r2, r1
 80030cc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030ce:	f7ff f87d 	bl	80021cc <HAL_GetTick>
 80030d2:	0003      	movs	r3, r0
 80030d4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030d6:	e00b      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d8:	f7ff f878 	bl	80021cc <HAL_GetTick>
 80030dc:	0002      	movs	r2, r0
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d904      	bls.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80030e6:	2313      	movs	r3, #19
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	2203      	movs	r2, #3
 80030ec:	701a      	strb	r2, [r3, #0]
        break;
 80030ee:	e005      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030f0:	4b6f      	ldr	r3, [pc, #444]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	2380      	movs	r3, #128	; 0x80
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4013      	ands	r3, r2
 80030fa:	d0ed      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80030fc:	2313      	movs	r3, #19
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d154      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003106:	4b69      	ldr	r3, [pc, #420]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003108:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800310a:	23c0      	movs	r3, #192	; 0xc0
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4013      	ands	r3, r2
 8003110:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d019      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	429a      	cmp	r2, r3
 8003120:	d014      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003122:	4b62      	ldr	r3, [pc, #392]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003126:	4a63      	ldr	r2, [pc, #396]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003128:	4013      	ands	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800312c:	4b5f      	ldr	r3, [pc, #380]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800312e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003130:	4b5e      	ldr	r3, [pc, #376]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003132:	2180      	movs	r1, #128	; 0x80
 8003134:	0249      	lsls	r1, r1, #9
 8003136:	430a      	orrs	r2, r1
 8003138:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800313a:	4b5c      	ldr	r3, [pc, #368]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800313c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800313e:	4b5b      	ldr	r3, [pc, #364]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003140:	495d      	ldr	r1, [pc, #372]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003142:	400a      	ands	r2, r1
 8003144:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003146:	4b59      	ldr	r3, [pc, #356]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2201      	movs	r2, #1
 8003150:	4013      	ands	r3, r2
 8003152:	d016      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003154:	f7ff f83a 	bl	80021cc <HAL_GetTick>
 8003158:	0003      	movs	r3, r0
 800315a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800315c:	e00c      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800315e:	f7ff f835 	bl	80021cc <HAL_GetTick>
 8003162:	0002      	movs	r2, r0
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	4a54      	ldr	r2, [pc, #336]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d904      	bls.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800316e:	2313      	movs	r3, #19
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	2203      	movs	r2, #3
 8003174:	701a      	strb	r2, [r3, #0]
            break;
 8003176:	e004      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003178:	4b4c      	ldr	r3, [pc, #304]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800317a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317c:	2202      	movs	r2, #2
 800317e:	4013      	ands	r3, r2
 8003180:	d0ed      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003182:	2313      	movs	r3, #19
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10a      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800318c:	4b47      	ldr	r3, [pc, #284]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800318e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003190:	4a48      	ldr	r2, [pc, #288]	; (80032b4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003192:	4013      	ands	r3, r2
 8003194:	0019      	movs	r1, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699a      	ldr	r2, [r3, #24]
 800319a:	4b44      	ldr	r3, [pc, #272]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800319c:	430a      	orrs	r2, r1
 800319e:	65da      	str	r2, [r3, #92]	; 0x5c
 80031a0:	e00c      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031a2:	2312      	movs	r3, #18
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	2213      	movs	r2, #19
 80031a8:	18ba      	adds	r2, r7, r2
 80031aa:	7812      	ldrb	r2, [r2, #0]
 80031ac:	701a      	strb	r2, [r3, #0]
 80031ae:	e005      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b0:	2312      	movs	r3, #18
 80031b2:	18fb      	adds	r3, r7, r3
 80031b4:	2213      	movs	r2, #19
 80031b6:	18ba      	adds	r2, r7, r2
 80031b8:	7812      	ldrb	r2, [r2, #0]
 80031ba:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031bc:	2311      	movs	r3, #17
 80031be:	18fb      	adds	r3, r7, r3
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d105      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c6:	4b39      	ldr	r3, [pc, #228]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031ca:	4b38      	ldr	r3, [pc, #224]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031cc:	493c      	ldr	r1, [pc, #240]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80031ce:	400a      	ands	r2, r1
 80031d0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2201      	movs	r2, #1
 80031d8:	4013      	ands	r3, r2
 80031da:	d009      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031dc:	4b33      	ldr	r3, [pc, #204]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e0:	2203      	movs	r2, #3
 80031e2:	4393      	bics	r3, r2
 80031e4:	0019      	movs	r1, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	4b30      	ldr	r3, [pc, #192]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031ec:	430a      	orrs	r2, r1
 80031ee:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2202      	movs	r2, #2
 80031f6:	4013      	ands	r3, r2
 80031f8:	d009      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031fa:	4b2c      	ldr	r3, [pc, #176]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fe:	220c      	movs	r2, #12
 8003200:	4393      	bics	r3, r2
 8003202:	0019      	movs	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	4b28      	ldr	r3, [pc, #160]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800320a:	430a      	orrs	r2, r1
 800320c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2220      	movs	r2, #32
 8003214:	4013      	ands	r3, r2
 8003216:	d009      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003218:	4b24      	ldr	r3, [pc, #144]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	4a29      	ldr	r2, [pc, #164]	; (80032c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321e:	4013      	ands	r3, r2
 8003220:	0019      	movs	r1, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	4b21      	ldr	r3, [pc, #132]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003228:	430a      	orrs	r2, r1
 800322a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	2380      	movs	r3, #128	; 0x80
 8003232:	01db      	lsls	r3, r3, #7
 8003234:	4013      	ands	r3, r2
 8003236:	d015      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003238:	4b1c      	ldr	r3, [pc, #112]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800323a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	0899      	lsrs	r1, r3, #2
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	695a      	ldr	r2, [r3, #20]
 8003244:	4b19      	ldr	r3, [pc, #100]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003246:	430a      	orrs	r2, r1
 8003248:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695a      	ldr	r2, [r3, #20]
 800324e:	2380      	movs	r3, #128	; 0x80
 8003250:	05db      	lsls	r3, r3, #23
 8003252:	429a      	cmp	r2, r3
 8003254:	d106      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003256:	4b15      	ldr	r3, [pc, #84]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	4b14      	ldr	r3, [pc, #80]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800325c:	2180      	movs	r1, #128	; 0x80
 800325e:	0249      	lsls	r1, r1, #9
 8003260:	430a      	orrs	r2, r1
 8003262:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	2380      	movs	r3, #128	; 0x80
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	4013      	ands	r3, r2
 800326e:	d016      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003270:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003274:	4a14      	ldr	r2, [pc, #80]	; (80032c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003276:	4013      	ands	r3, r2
 8003278:	0019      	movs	r1, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003280:	430a      	orrs	r2, r1
 8003282:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	01db      	lsls	r3, r3, #7
 800328c:	429a      	cmp	r2, r3
 800328e:	d106      	bne.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003290:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003296:	2180      	movs	r1, #128	; 0x80
 8003298:	0249      	lsls	r1, r1, #9
 800329a:	430a      	orrs	r2, r1
 800329c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800329e:	2312      	movs	r3, #18
 80032a0:	18fb      	adds	r3, r7, r3
 80032a2:	781b      	ldrb	r3, [r3, #0]
}
 80032a4:	0018      	movs	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	b006      	add	sp, #24
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40007000 	.word	0x40007000
 80032b4:	fffffcff 	.word	0xfffffcff
 80032b8:	fffeffff 	.word	0xfffeffff
 80032bc:	00001388 	.word	0x00001388
 80032c0:	efffffff 	.word	0xefffffff
 80032c4:	ffffcfff 	.word	0xffffcfff
 80032c8:	ffff3fff 	.word	0xffff3fff

080032cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e04a      	b.n	8003374 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	223d      	movs	r2, #61	; 0x3d
 80032e2:	5c9b      	ldrb	r3, [r3, r2]
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d107      	bne.n	80032fa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	223c      	movs	r2, #60	; 0x3c
 80032ee:	2100      	movs	r1, #0
 80032f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7fe fb01 	bl	80018fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	223d      	movs	r2, #61	; 0x3d
 80032fe:	2102      	movs	r1, #2
 8003300:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3304      	adds	r3, #4
 800330a:	0019      	movs	r1, r3
 800330c:	0010      	movs	r0, r2
 800330e:	f000 f939 	bl	8003584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2248      	movs	r2, #72	; 0x48
 8003316:	2101      	movs	r1, #1
 8003318:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	223e      	movs	r2, #62	; 0x3e
 800331e:	2101      	movs	r1, #1
 8003320:	5499      	strb	r1, [r3, r2]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	223f      	movs	r2, #63	; 0x3f
 8003326:	2101      	movs	r1, #1
 8003328:	5499      	strb	r1, [r3, r2]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2240      	movs	r2, #64	; 0x40
 800332e:	2101      	movs	r1, #1
 8003330:	5499      	strb	r1, [r3, r2]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2241      	movs	r2, #65	; 0x41
 8003336:	2101      	movs	r1, #1
 8003338:	5499      	strb	r1, [r3, r2]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2242      	movs	r2, #66	; 0x42
 800333e:	2101      	movs	r1, #1
 8003340:	5499      	strb	r1, [r3, r2]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2243      	movs	r2, #67	; 0x43
 8003346:	2101      	movs	r1, #1
 8003348:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2244      	movs	r2, #68	; 0x44
 800334e:	2101      	movs	r1, #1
 8003350:	5499      	strb	r1, [r3, r2]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2245      	movs	r2, #69	; 0x45
 8003356:	2101      	movs	r1, #1
 8003358:	5499      	strb	r1, [r3, r2]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2246      	movs	r2, #70	; 0x46
 800335e:	2101      	movs	r1, #1
 8003360:	5499      	strb	r1, [r3, r2]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2247      	movs	r2, #71	; 0x47
 8003366:	2101      	movs	r1, #1
 8003368:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	223d      	movs	r2, #61	; 0x3d
 800336e:	2101      	movs	r1, #1
 8003370:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	0018      	movs	r0, r3
 8003376:	46bd      	mov	sp, r7
 8003378:	b002      	add	sp, #8
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e04a      	b.n	8003424 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	223d      	movs	r2, #61	; 0x3d
 8003392:	5c9b      	ldrb	r3, [r3, r2]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d107      	bne.n	80033aa <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	223c      	movs	r2, #60	; 0x3c
 800339e:	2100      	movs	r1, #0
 80033a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	0018      	movs	r0, r3
 80033a6:	f000 f841 	bl	800342c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	223d      	movs	r2, #61	; 0x3d
 80033ae:	2102      	movs	r1, #2
 80033b0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3304      	adds	r3, #4
 80033ba:	0019      	movs	r1, r3
 80033bc:	0010      	movs	r0, r2
 80033be:	f000 f8e1 	bl	8003584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2248      	movs	r2, #72	; 0x48
 80033c6:	2101      	movs	r1, #1
 80033c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	223e      	movs	r2, #62	; 0x3e
 80033ce:	2101      	movs	r1, #1
 80033d0:	5499      	strb	r1, [r3, r2]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	223f      	movs	r2, #63	; 0x3f
 80033d6:	2101      	movs	r1, #1
 80033d8:	5499      	strb	r1, [r3, r2]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2240      	movs	r2, #64	; 0x40
 80033de:	2101      	movs	r1, #1
 80033e0:	5499      	strb	r1, [r3, r2]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2241      	movs	r2, #65	; 0x41
 80033e6:	2101      	movs	r1, #1
 80033e8:	5499      	strb	r1, [r3, r2]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2242      	movs	r2, #66	; 0x42
 80033ee:	2101      	movs	r1, #1
 80033f0:	5499      	strb	r1, [r3, r2]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2243      	movs	r2, #67	; 0x43
 80033f6:	2101      	movs	r1, #1
 80033f8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2244      	movs	r2, #68	; 0x44
 80033fe:	2101      	movs	r1, #1
 8003400:	5499      	strb	r1, [r3, r2]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2245      	movs	r2, #69	; 0x45
 8003406:	2101      	movs	r1, #1
 8003408:	5499      	strb	r1, [r3, r2]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2246      	movs	r2, #70	; 0x46
 800340e:	2101      	movs	r1, #1
 8003410:	5499      	strb	r1, [r3, r2]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2247      	movs	r2, #71	; 0x47
 8003416:	2101      	movs	r1, #1
 8003418:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	223d      	movs	r2, #61	; 0x3d
 800341e:	2101      	movs	r1, #1
 8003420:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	0018      	movs	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	b002      	add	sp, #8
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003434:	46c0      	nop			; (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	b002      	add	sp, #8
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003448:	2317      	movs	r3, #23
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	223c      	movs	r2, #60	; 0x3c
 8003454:	5c9b      	ldrb	r3, [r3, r2]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_TIM_IC_ConfigChannel+0x22>
 800345a:	2302      	movs	r3, #2
 800345c:	e08c      	b.n	8003578 <HAL_TIM_IC_ConfigChannel+0x13c>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	223c      	movs	r2, #60	; 0x3c
 8003462:	2101      	movs	r1, #1
 8003464:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d11b      	bne.n	80034a4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	6819      	ldr	r1, [r3, #0]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f000 f8f8 	bl	8003670 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699a      	ldr	r2, [r3, #24]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	210c      	movs	r1, #12
 800348c:	438a      	bics	r2, r1
 800348e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6999      	ldr	r1, [r3, #24]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	619a      	str	r2, [r3, #24]
 80034a2:	e062      	b.n	800356a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d11c      	bne.n	80034e4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	6819      	ldr	r1, [r3, #0]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f000 f931 	bl	8003720 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699a      	ldr	r2, [r3, #24]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	492d      	ldr	r1, [pc, #180]	; (8003580 <HAL_TIM_IC_ConfigChannel+0x144>)
 80034ca:	400a      	ands	r2, r1
 80034cc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6999      	ldr	r1, [r3, #24]
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	021a      	lsls	r2, r3, #8
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	619a      	str	r2, [r3, #24]
 80034e2:	e042      	b.n	800356a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d11b      	bne.n	8003522 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	6819      	ldr	r1, [r3, #0]
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f000 f953 	bl	80037a4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	210c      	movs	r1, #12
 800350a:	438a      	bics	r2, r1
 800350c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69d9      	ldr	r1, [r3, #28]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	61da      	str	r2, [r3, #28]
 8003520:	e023      	b.n	800356a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b0c      	cmp	r3, #12
 8003526:	d11c      	bne.n	8003562 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6818      	ldr	r0, [r3, #0]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	6819      	ldr	r1, [r3, #0]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f000 f974 	bl	8003824 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	69da      	ldr	r2, [r3, #28]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	490e      	ldr	r1, [pc, #56]	; (8003580 <HAL_TIM_IC_ConfigChannel+0x144>)
 8003548:	400a      	ands	r2, r1
 800354a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	69d9      	ldr	r1, [r3, #28]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	021a      	lsls	r2, r3, #8
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	61da      	str	r2, [r3, #28]
 8003560:	e003      	b.n	800356a <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8003562:	2317      	movs	r3, #23
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	2201      	movs	r2, #1
 8003568:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	223c      	movs	r2, #60	; 0x3c
 800356e:	2100      	movs	r1, #0
 8003570:	5499      	strb	r1, [r3, r2]

  return status;
 8003572:	2317      	movs	r3, #23
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	781b      	ldrb	r3, [r3, #0]
}
 8003578:	0018      	movs	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	b006      	add	sp, #24
 800357e:	bd80      	pop	{r7, pc}
 8003580:	fffff3ff 	.word	0xfffff3ff

08003584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a2f      	ldr	r2, [pc, #188]	; (8003654 <TIM_Base_SetConfig+0xd0>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d003      	beq.n	80035a4 <TIM_Base_SetConfig+0x20>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a2e      	ldr	r2, [pc, #184]	; (8003658 <TIM_Base_SetConfig+0xd4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d108      	bne.n	80035b6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2270      	movs	r2, #112	; 0x70
 80035a8:	4393      	bics	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a26      	ldr	r2, [pc, #152]	; (8003654 <TIM_Base_SetConfig+0xd0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d013      	beq.n	80035e6 <TIM_Base_SetConfig+0x62>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a25      	ldr	r2, [pc, #148]	; (8003658 <TIM_Base_SetConfig+0xd4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00f      	beq.n	80035e6 <TIM_Base_SetConfig+0x62>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a24      	ldr	r2, [pc, #144]	; (800365c <TIM_Base_SetConfig+0xd8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00b      	beq.n	80035e6 <TIM_Base_SetConfig+0x62>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a23      	ldr	r2, [pc, #140]	; (8003660 <TIM_Base_SetConfig+0xdc>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d007      	beq.n	80035e6 <TIM_Base_SetConfig+0x62>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a22      	ldr	r2, [pc, #136]	; (8003664 <TIM_Base_SetConfig+0xe0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d003      	beq.n	80035e6 <TIM_Base_SetConfig+0x62>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a21      	ldr	r2, [pc, #132]	; (8003668 <TIM_Base_SetConfig+0xe4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d108      	bne.n	80035f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	4a20      	ldr	r2, [pc, #128]	; (800366c <TIM_Base_SetConfig+0xe8>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2280      	movs	r2, #128	; 0x80
 80035fc:	4393      	bics	r3, r2
 80035fe:	001a      	movs	r2, r3
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a0c      	ldr	r2, [pc, #48]	; (8003654 <TIM_Base_SetConfig+0xd0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d00b      	beq.n	800363e <TIM_Base_SetConfig+0xba>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a0d      	ldr	r2, [pc, #52]	; (8003660 <TIM_Base_SetConfig+0xdc>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d007      	beq.n	800363e <TIM_Base_SetConfig+0xba>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a0c      	ldr	r2, [pc, #48]	; (8003664 <TIM_Base_SetConfig+0xe0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d003      	beq.n	800363e <TIM_Base_SetConfig+0xba>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a0b      	ldr	r2, [pc, #44]	; (8003668 <TIM_Base_SetConfig+0xe4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d103      	bne.n	8003646 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	691a      	ldr	r2, [r3, #16]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	615a      	str	r2, [r3, #20]
}
 800364c:	46c0      	nop			; (mov r8, r8)
 800364e:	46bd      	mov	sp, r7
 8003650:	b004      	add	sp, #16
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40012c00 	.word	0x40012c00
 8003658:	40000400 	.word	0x40000400
 800365c:	40002000 	.word	0x40002000
 8003660:	40014000 	.word	0x40014000
 8003664:	40014400 	.word	0x40014400
 8003668:	40014800 	.word	0x40014800
 800366c:	fffffcff 	.word	0xfffffcff

08003670 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	2201      	movs	r2, #1
 8003684:	4393      	bics	r3, r2
 8003686:	001a      	movs	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4a1e      	ldr	r2, [pc, #120]	; (8003714 <TIM_TI1_SetConfig+0xa4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d007      	beq.n	80036b0 <TIM_TI1_SetConfig+0x40>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4a1d      	ldr	r2, [pc, #116]	; (8003718 <TIM_TI1_SetConfig+0xa8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d003      	beq.n	80036b0 <TIM_TI1_SetConfig+0x40>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4a1c      	ldr	r2, [pc, #112]	; (800371c <TIM_TI1_SetConfig+0xac>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d101      	bne.n	80036b4 <TIM_TI1_SetConfig+0x44>
 80036b0:	2301      	movs	r3, #1
 80036b2:	e000      	b.n	80036b6 <TIM_TI1_SetConfig+0x46>
 80036b4:	2300      	movs	r3, #0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d008      	beq.n	80036cc <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2203      	movs	r2, #3
 80036be:	4393      	bics	r3, r2
 80036c0:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	e003      	b.n	80036d4 <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	2201      	movs	r2, #1
 80036d0:	4313      	orrs	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	22f0      	movs	r2, #240	; 0xf0
 80036d8:	4393      	bics	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	22ff      	movs	r2, #255	; 0xff
 80036e2:	4013      	ands	r3, r2
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	220a      	movs	r2, #10
 80036ee:	4393      	bics	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	220a      	movs	r2, #10
 80036f6:	4013      	ands	r3, r2
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	621a      	str	r2, [r3, #32]
}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	46bd      	mov	sp, r7
 800370e:	b006      	add	sp, #24
 8003710:	bd80      	pop	{r7, pc}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	40012c00 	.word	0x40012c00
 8003718:	40000400 	.word	0x40000400
 800371c:	40014000 	.word	0x40014000

08003720 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	2210      	movs	r2, #16
 8003734:	4393      	bics	r3, r2
 8003736:	001a      	movs	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	4a14      	ldr	r2, [pc, #80]	; (800379c <TIM_TI2_SetConfig+0x7c>)
 800374c:	4013      	ands	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	021b      	lsls	r3, r3, #8
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	4313      	orrs	r3, r2
 8003758:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	4a10      	ldr	r2, [pc, #64]	; (80037a0 <TIM_TI2_SetConfig+0x80>)
 800375e:	4013      	ands	r3, r2
 8003760:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	031b      	lsls	r3, r3, #12
 8003766:	041b      	lsls	r3, r3, #16
 8003768:	0c1b      	lsrs	r3, r3, #16
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	22a0      	movs	r2, #160	; 0xa0
 8003774:	4393      	bics	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	22a0      	movs	r2, #160	; 0xa0
 800377e:	4013      	ands	r3, r2
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	621a      	str	r2, [r3, #32]
}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b006      	add	sp, #24
 8003798:	bd80      	pop	{r7, pc}
 800379a:	46c0      	nop			; (mov r8, r8)
 800379c:	fffffcff 	.word	0xfffffcff
 80037a0:	ffff0fff 	.word	0xffff0fff

080037a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
 80037b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	4a19      	ldr	r2, [pc, #100]	; (800381c <TIM_TI3_SetConfig+0x78>)
 80037b8:	401a      	ands	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2203      	movs	r2, #3
 80037ce:	4393      	bics	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	22f0      	movs	r2, #240	; 0xf0
 80037de:	4393      	bics	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	22ff      	movs	r2, #255	; 0xff
 80037e8:	4013      	ands	r3, r2
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4a0b      	ldr	r2, [pc, #44]	; (8003820 <TIM_TI3_SetConfig+0x7c>)
 80037f4:	4013      	ands	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	021a      	lsls	r2, r3, #8
 80037fc:	23a0      	movs	r3, #160	; 0xa0
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	4013      	ands	r3, r2
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	621a      	str	r2, [r3, #32]
}
 8003814:	46c0      	nop			; (mov r8, r8)
 8003816:	46bd      	mov	sp, r7
 8003818:	b006      	add	sp, #24
 800381a:	bd80      	pop	{r7, pc}
 800381c:	fffffeff 	.word	0xfffffeff
 8003820:	fffff5ff 	.word	0xfffff5ff

08003824 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	4a1a      	ldr	r2, [pc, #104]	; (80038a0 <TIM_TI4_SetConfig+0x7c>)
 8003838:	401a      	ands	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	4a15      	ldr	r2, [pc, #84]	; (80038a4 <TIM_TI4_SetConfig+0x80>)
 800384e:	4013      	ands	r3, r2
 8003850:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	021b      	lsls	r3, r3, #8
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	4a12      	ldr	r2, [pc, #72]	; (80038a8 <TIM_TI4_SetConfig+0x84>)
 8003860:	4013      	ands	r3, r2
 8003862:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	031b      	lsls	r3, r3, #12
 8003868:	041b      	lsls	r3, r3, #16
 800386a:	0c1b      	lsrs	r3, r3, #16
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	4313      	orrs	r3, r2
 8003870:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	4a0d      	ldr	r2, [pc, #52]	; (80038ac <TIM_TI4_SetConfig+0x88>)
 8003876:	4013      	ands	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	031a      	lsls	r2, r3, #12
 800387e:	23a0      	movs	r3, #160	; 0xa0
 8003880:	021b      	lsls	r3, r3, #8
 8003882:	4013      	ands	r3, r2
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	621a      	str	r2, [r3, #32]
}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	46bd      	mov	sp, r7
 800389a:	b006      	add	sp, #24
 800389c:	bd80      	pop	{r7, pc}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	ffffefff 	.word	0xffffefff
 80038a4:	fffffcff 	.word	0xfffffcff
 80038a8:	ffff0fff 	.word	0xffff0fff
 80038ac:	ffff5fff 	.word	0xffff5fff

080038b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e046      	b.n	8003950 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2288      	movs	r2, #136	; 0x88
 80038c6:	589b      	ldr	r3, [r3, r2]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d107      	bne.n	80038dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2284      	movs	r2, #132	; 0x84
 80038d0:	2100      	movs	r1, #0
 80038d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	0018      	movs	r0, r3
 80038d8:	f7fe f92e 	bl	8001b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2288      	movs	r2, #136	; 0x88
 80038e0:	2124      	movs	r1, #36	; 0x24
 80038e2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2101      	movs	r1, #1
 80038f0:	438a      	bics	r2, r1
 80038f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	0018      	movs	r0, r3
 80038f8:	f000 fab0 	bl	8003e5c <UART_SetConfig>
 80038fc:	0003      	movs	r3, r0
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e024      	b.n	8003950 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	0018      	movs	r0, r3
 8003912:	f000 fc47 	bl	80041a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	490d      	ldr	r1, [pc, #52]	; (8003958 <HAL_UART_Init+0xa8>)
 8003922:	400a      	ands	r2, r1
 8003924:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	212a      	movs	r1, #42	; 0x2a
 8003932:	438a      	bics	r2, r1
 8003934:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2101      	movs	r1, #1
 8003942:	430a      	orrs	r2, r1
 8003944:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	0018      	movs	r0, r3
 800394a:	f000 fcdf 	bl	800430c <UART_CheckIdleState>
 800394e:	0003      	movs	r3, r0
}
 8003950:	0018      	movs	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	b002      	add	sp, #8
 8003956:	bd80      	pop	{r7, pc}
 8003958:	ffffb7ff 	.word	0xffffb7ff

0800395c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e04e      	b.n	8003a0c <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2288      	movs	r2, #136	; 0x88
 8003972:	589b      	ldr	r3, [r3, r2]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d107      	bne.n	8003988 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2284      	movs	r2, #132	; 0x84
 800397c:	2100      	movs	r1, #0
 800397e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	0018      	movs	r0, r3
 8003984:	f7fe f8d8 	bl	8001b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2288      	movs	r2, #136	; 0x88
 800398c:	2124      	movs	r1, #36	; 0x24
 800398e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2101      	movs	r1, #1
 800399c:	438a      	bics	r2, r1
 800399e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	0018      	movs	r0, r3
 80039a4:	f000 fa5a 	bl	8003e5c <UART_SetConfig>
 80039a8:	0003      	movs	r3, r0
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_HalfDuplex_Init+0x56>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e02c      	b.n	8003a0c <HAL_HalfDuplex_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_HalfDuplex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	0018      	movs	r0, r3
 80039be:	f000 fbf1 	bl	80041a4 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4911      	ldr	r1, [pc, #68]	; (8003a14 <HAL_HalfDuplex_Init+0xb8>)
 80039ce:	400a      	ands	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2122      	movs	r1, #34	; 0x22
 80039de:	438a      	bics	r2, r1
 80039e0:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2108      	movs	r1, #8
 80039ee:	430a      	orrs	r2, r1
 80039f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2101      	movs	r1, #1
 80039fe:	430a      	orrs	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	0018      	movs	r0, r3
 8003a06:	f000 fc81 	bl	800430c <UART_CheckIdleState>
 8003a0a:	0003      	movs	r3, r0
}
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	b002      	add	sp, #8
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	ffffb7ff 	.word	0xffffb7ff

08003a18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08a      	sub	sp, #40	; 0x28
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	1dbb      	adds	r3, r7, #6
 8003a26:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2288      	movs	r2, #136	; 0x88
 8003a2c:	589b      	ldr	r3, [r3, r2]
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	d000      	beq.n	8003a34 <HAL_UART_Transmit+0x1c>
 8003a32:	e088      	b.n	8003b46 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_UART_Transmit+0x2a>
 8003a3a:	1dbb      	adds	r3, r7, #6
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e080      	b.n	8003b48 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	2380      	movs	r3, #128	; 0x80
 8003a4c:	015b      	lsls	r3, r3, #5
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d109      	bne.n	8003a66 <HAL_UART_Transmit+0x4e>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d105      	bne.n	8003a66 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d001      	beq.n	8003a66 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e070      	b.n	8003b48 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2290      	movs	r2, #144	; 0x90
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2288      	movs	r2, #136	; 0x88
 8003a72:	2121      	movs	r1, #33	; 0x21
 8003a74:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a76:	f7fe fba9 	bl	80021cc <HAL_GetTick>
 8003a7a:	0003      	movs	r3, r0
 8003a7c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1dba      	adds	r2, r7, #6
 8003a82:	2154      	movs	r1, #84	; 0x54
 8003a84:	8812      	ldrh	r2, [r2, #0]
 8003a86:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	1dba      	adds	r2, r7, #6
 8003a8c:	2156      	movs	r1, #86	; 0x56
 8003a8e:	8812      	ldrh	r2, [r2, #0]
 8003a90:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	2380      	movs	r3, #128	; 0x80
 8003a98:	015b      	lsls	r3, r3, #5
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d108      	bne.n	8003ab0 <HAL_UART_Transmit+0x98>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d104      	bne.n	8003ab0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	61bb      	str	r3, [r7, #24]
 8003aae:	e003      	b.n	8003ab8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ab8:	e02c      	b.n	8003b14 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	0013      	movs	r3, r2
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2180      	movs	r1, #128	; 0x80
 8003ac8:	f000 fc6e 	bl	80043a8 <UART_WaitOnFlagUntilTimeout>
 8003acc:	1e03      	subs	r3, r0, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e039      	b.n	8003b48 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10b      	bne.n	8003af2 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	001a      	movs	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	05d2      	lsls	r2, r2, #23
 8003ae6:	0dd2      	lsrs	r2, r2, #23
 8003ae8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	3302      	adds	r3, #2
 8003aee:	61bb      	str	r3, [r7, #24]
 8003af0:	e007      	b.n	8003b02 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	781a      	ldrb	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	3301      	adds	r3, #1
 8003b00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2256      	movs	r2, #86	; 0x56
 8003b06:	5a9b      	ldrh	r3, [r3, r2]
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b299      	uxth	r1, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2256      	movs	r2, #86	; 0x56
 8003b12:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2256      	movs	r2, #86	; 0x56
 8003b18:	5a9b      	ldrh	r3, [r3, r2]
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1cc      	bne.n	8003aba <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	0013      	movs	r3, r2
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	2140      	movs	r1, #64	; 0x40
 8003b2e:	f000 fc3b 	bl	80043a8 <UART_WaitOnFlagUntilTimeout>
 8003b32:	1e03      	subs	r3, r0, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e006      	b.n	8003b48 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2288      	movs	r2, #136	; 0x88
 8003b3e:	2120      	movs	r1, #32
 8003b40:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	e000      	b.n	8003b48 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003b46:	2302      	movs	r3, #2
  }
}
 8003b48:	0018      	movs	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b008      	add	sp, #32
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08a      	sub	sp, #40	; 0x28
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	1dbb      	adds	r3, r7, #6
 8003b5e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	228c      	movs	r2, #140	; 0x8c
 8003b64:	589b      	ldr	r3, [r3, r2]
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d000      	beq.n	8003b6c <HAL_UART_Receive+0x1c>
 8003b6a:	e0cc      	b.n	8003d06 <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_UART_Receive+0x2a>
 8003b72:	1dbb      	adds	r3, r7, #6
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e0c4      	b.n	8003d08 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	689a      	ldr	r2, [r3, #8]
 8003b82:	2380      	movs	r3, #128	; 0x80
 8003b84:	015b      	lsls	r3, r3, #5
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d109      	bne.n	8003b9e <HAL_UART_Receive+0x4e>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d105      	bne.n	8003b9e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2201      	movs	r2, #1
 8003b96:	4013      	ands	r3, r2
 8003b98:	d001      	beq.n	8003b9e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e0b4      	b.n	8003d08 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2290      	movs	r2, #144	; 0x90
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	228c      	movs	r2, #140	; 0x8c
 8003baa:	2122      	movs	r1, #34	; 0x22
 8003bac:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bb4:	f7fe fb0a 	bl	80021cc <HAL_GetTick>
 8003bb8:	0003      	movs	r3, r0
 8003bba:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	1dba      	adds	r2, r7, #6
 8003bc0:	215c      	movs	r1, #92	; 0x5c
 8003bc2:	8812      	ldrh	r2, [r2, #0]
 8003bc4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	1dba      	adds	r2, r7, #6
 8003bca:	215e      	movs	r1, #94	; 0x5e
 8003bcc:	8812      	ldrh	r2, [r2, #0]
 8003bce:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	2380      	movs	r3, #128	; 0x80
 8003bd6:	015b      	lsls	r3, r3, #5
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d10d      	bne.n	8003bf8 <HAL_UART_Receive+0xa8>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d104      	bne.n	8003bee <HAL_UART_Receive+0x9e>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2260      	movs	r2, #96	; 0x60
 8003be8:	4949      	ldr	r1, [pc, #292]	; (8003d10 <HAL_UART_Receive+0x1c0>)
 8003bea:	5299      	strh	r1, [r3, r2]
 8003bec:	e02e      	b.n	8003c4c <HAL_UART_Receive+0xfc>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2260      	movs	r2, #96	; 0x60
 8003bf2:	21ff      	movs	r1, #255	; 0xff
 8003bf4:	5299      	strh	r1, [r3, r2]
 8003bf6:	e029      	b.n	8003c4c <HAL_UART_Receive+0xfc>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10d      	bne.n	8003c1c <HAL_UART_Receive+0xcc>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d104      	bne.n	8003c12 <HAL_UART_Receive+0xc2>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2260      	movs	r2, #96	; 0x60
 8003c0c:	21ff      	movs	r1, #255	; 0xff
 8003c0e:	5299      	strh	r1, [r3, r2]
 8003c10:	e01c      	b.n	8003c4c <HAL_UART_Receive+0xfc>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2260      	movs	r2, #96	; 0x60
 8003c16:	217f      	movs	r1, #127	; 0x7f
 8003c18:	5299      	strh	r1, [r3, r2]
 8003c1a:	e017      	b.n	8003c4c <HAL_UART_Receive+0xfc>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	2380      	movs	r3, #128	; 0x80
 8003c22:	055b      	lsls	r3, r3, #21
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d10d      	bne.n	8003c44 <HAL_UART_Receive+0xf4>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d104      	bne.n	8003c3a <HAL_UART_Receive+0xea>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2260      	movs	r2, #96	; 0x60
 8003c34:	217f      	movs	r1, #127	; 0x7f
 8003c36:	5299      	strh	r1, [r3, r2]
 8003c38:	e008      	b.n	8003c4c <HAL_UART_Receive+0xfc>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2260      	movs	r2, #96	; 0x60
 8003c3e:	213f      	movs	r1, #63	; 0x3f
 8003c40:	5299      	strh	r1, [r3, r2]
 8003c42:	e003      	b.n	8003c4c <HAL_UART_Receive+0xfc>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2260      	movs	r2, #96	; 0x60
 8003c48:	2100      	movs	r1, #0
 8003c4a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003c4c:	2312      	movs	r3, #18
 8003c4e:	18fb      	adds	r3, r7, r3
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	2160      	movs	r1, #96	; 0x60
 8003c54:	5a52      	ldrh	r2, [r2, r1]
 8003c56:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	689a      	ldr	r2, [r3, #8]
 8003c5c:	2380      	movs	r3, #128	; 0x80
 8003c5e:	015b      	lsls	r3, r3, #5
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d108      	bne.n	8003c76 <HAL_UART_Receive+0x126>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d104      	bne.n	8003c76 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	61bb      	str	r3, [r7, #24]
 8003c74:	e003      	b.n	8003c7e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003c7e:	e036      	b.n	8003cee <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	0013      	movs	r3, r2
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2120      	movs	r1, #32
 8003c8e:	f000 fb8b 	bl	80043a8 <UART_WaitOnFlagUntilTimeout>
 8003c92:	1e03      	subs	r3, r0, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e036      	b.n	8003d08 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10e      	bne.n	8003cbe <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	2212      	movs	r2, #18
 8003caa:	18ba      	adds	r2, r7, r2
 8003cac:	8812      	ldrh	r2, [r2, #0]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	3302      	adds	r3, #2
 8003cba:	61bb      	str	r3, [r7, #24]
 8003cbc:	e00e      	b.n	8003cdc <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2212      	movs	r2, #18
 8003cc8:	18ba      	adds	r2, r7, r2
 8003cca:	8812      	ldrh	r2, [r2, #0]
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	4013      	ands	r3, r2
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	225e      	movs	r2, #94	; 0x5e
 8003ce0:	5a9b      	ldrh	r3, [r3, r2]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	b299      	uxth	r1, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	225e      	movs	r2, #94	; 0x5e
 8003cec:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	225e      	movs	r2, #94	; 0x5e
 8003cf2:	5a9b      	ldrh	r3, [r3, r2]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1c2      	bne.n	8003c80 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	228c      	movs	r2, #140	; 0x8c
 8003cfe:	2120      	movs	r1, #32
 8003d00:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	e000      	b.n	8003d08 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8003d06:	2302      	movs	r3, #2
  }
}
 8003d08:	0018      	movs	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b008      	add	sp, #32
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	000001ff 	.word	0x000001ff

08003d14 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08a      	sub	sp, #40	; 0x28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2284      	movs	r2, #132	; 0x84
 8003d20:	5c9b      	ldrb	r3, [r3, r2]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_HalfDuplex_EnableTransmitter+0x16>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e042      	b.n	8003db0 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2284      	movs	r2, #132	; 0x84
 8003d2e:	2101      	movs	r1, #1
 8003d30:	5499      	strb	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_BUSY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2288      	movs	r2, #136	; 0x88
 8003d36:	2124      	movs	r1, #36	; 0x24
 8003d38:	5099      	str	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d3e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d40:	68bb      	ldr	r3, [r7, #8]

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24
 8003d44:	2301      	movs	r3, #1
 8003d46:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f383 8810 	msr	PRIMASK, r3
}
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	210c      	movs	r1, #12
 8003d5c:	438a      	bics	r2, r1
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	f383 8810 	msr	PRIMASK, r3
}
 8003d6a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d70:	617b      	str	r3, [r7, #20]
  return(result);
 8003d72:	697b      	ldr	r3, [r7, #20]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8003d74:	623b      	str	r3, [r7, #32]
 8003d76:	2301      	movs	r3, #1
 8003d78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	f383 8810 	msr	PRIMASK, r3
}
 8003d80:	46c0      	nop			; (mov r8, r8)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2108      	movs	r1, #8
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	f383 8810 	msr	PRIMASK, r3
}
 8003d9c:	46c0      	nop			; (mov r8, r8)

  huart->gState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2288      	movs	r2, #136	; 0x88
 8003da2:	2120      	movs	r1, #32
 8003da4:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2284      	movs	r2, #132	; 0x84
 8003daa:	2100      	movs	r1, #0
 8003dac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	0018      	movs	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b00a      	add	sp, #40	; 0x28
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b08a      	sub	sp, #40	; 0x28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2284      	movs	r2, #132	; 0x84
 8003dc4:	5c9b      	ldrb	r3, [r3, r2]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_HalfDuplex_EnableReceiver+0x16>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e042      	b.n	8003e54 <HAL_HalfDuplex_EnableReceiver+0x9c>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2284      	movs	r2, #132	; 0x84
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	5499      	strb	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_BUSY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2288      	movs	r2, #136	; 0x88
 8003dda:	2124      	movs	r1, #36	; 0x24
 8003ddc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dde:	f3ef 8310 	mrs	r3, PRIMASK
 8003de2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003de4:	68bb      	ldr	r3, [r7, #8]

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24
 8003de8:	2301      	movs	r3, #1
 8003dea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f383 8810 	msr	PRIMASK, r3
}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	210c      	movs	r1, #12
 8003e00:	438a      	bics	r2, r1
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f383 8810 	msr	PRIMASK, r3
}
 8003e0e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e10:	f3ef 8310 	mrs	r3, PRIMASK
 8003e14:	617b      	str	r3, [r7, #20]
  return(result);
 8003e16:	697b      	ldr	r3, [r7, #20]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8003e18:	623b      	str	r3, [r7, #32]
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	f383 8810 	msr	PRIMASK, r3
}
 8003e24:	46c0      	nop			; (mov r8, r8)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2104      	movs	r1, #4
 8003e32:	430a      	orrs	r2, r1
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	6a3b      	ldr	r3, [r7, #32]
 8003e38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f383 8810 	msr	PRIMASK, r3
}
 8003e40:	46c0      	nop			; (mov r8, r8)

  huart->gState = HAL_UART_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2288      	movs	r2, #136	; 0x88
 8003e46:	2120      	movs	r1, #32
 8003e48:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2284      	movs	r2, #132	; 0x84
 8003e4e:	2100      	movs	r1, #0
 8003e50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	0018      	movs	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b00a      	add	sp, #40	; 0x28
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e64:	231a      	movs	r3, #26
 8003e66:	18fb      	adds	r3, r7, r3
 8003e68:	2200      	movs	r2, #0
 8003e6a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4abc      	ldr	r2, [pc, #752]	; (800417c <UART_SetConfig+0x320>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	0019      	movs	r1, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69fa      	ldr	r2, [r7, #28]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	4ab7      	ldr	r2, [pc, #732]	; (8004180 <UART_SetConfig+0x324>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	0019      	movs	r1, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	69fa      	ldr	r2, [r7, #28]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	4aae      	ldr	r2, [pc, #696]	; (8004184 <UART_SetConfig+0x328>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	0019      	movs	r1, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69fa      	ldr	r2, [r7, #28]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	220f      	movs	r2, #15
 8003ee0:	4393      	bics	r3, r2
 8003ee2:	0019      	movs	r1, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4aa4      	ldr	r2, [pc, #656]	; (8004188 <UART_SetConfig+0x32c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d127      	bne.n	8003f4a <UART_SetConfig+0xee>
 8003efa:	4ba4      	ldr	r3, [pc, #656]	; (800418c <UART_SetConfig+0x330>)
 8003efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efe:	2203      	movs	r2, #3
 8003f00:	4013      	ands	r3, r2
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d017      	beq.n	8003f36 <UART_SetConfig+0xda>
 8003f06:	d81b      	bhi.n	8003f40 <UART_SetConfig+0xe4>
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d00a      	beq.n	8003f22 <UART_SetConfig+0xc6>
 8003f0c:	d818      	bhi.n	8003f40 <UART_SetConfig+0xe4>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <UART_SetConfig+0xbc>
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d00a      	beq.n	8003f2c <UART_SetConfig+0xd0>
 8003f16:	e013      	b.n	8003f40 <UART_SetConfig+0xe4>
 8003f18:	231b      	movs	r3, #27
 8003f1a:	18fb      	adds	r3, r7, r3
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	701a      	strb	r2, [r3, #0]
 8003f20:	e058      	b.n	8003fd4 <UART_SetConfig+0x178>
 8003f22:	231b      	movs	r3, #27
 8003f24:	18fb      	adds	r3, r7, r3
 8003f26:	2202      	movs	r2, #2
 8003f28:	701a      	strb	r2, [r3, #0]
 8003f2a:	e053      	b.n	8003fd4 <UART_SetConfig+0x178>
 8003f2c:	231b      	movs	r3, #27
 8003f2e:	18fb      	adds	r3, r7, r3
 8003f30:	2204      	movs	r2, #4
 8003f32:	701a      	strb	r2, [r3, #0]
 8003f34:	e04e      	b.n	8003fd4 <UART_SetConfig+0x178>
 8003f36:	231b      	movs	r3, #27
 8003f38:	18fb      	adds	r3, r7, r3
 8003f3a:	2208      	movs	r2, #8
 8003f3c:	701a      	strb	r2, [r3, #0]
 8003f3e:	e049      	b.n	8003fd4 <UART_SetConfig+0x178>
 8003f40:	231b      	movs	r3, #27
 8003f42:	18fb      	adds	r3, r7, r3
 8003f44:	2210      	movs	r2, #16
 8003f46:	701a      	strb	r2, [r3, #0]
 8003f48:	e044      	b.n	8003fd4 <UART_SetConfig+0x178>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a90      	ldr	r2, [pc, #576]	; (8004190 <UART_SetConfig+0x334>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d127      	bne.n	8003fa4 <UART_SetConfig+0x148>
 8003f54:	4b8d      	ldr	r3, [pc, #564]	; (800418c <UART_SetConfig+0x330>)
 8003f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f58:	220c      	movs	r2, #12
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b0c      	cmp	r3, #12
 8003f5e:	d017      	beq.n	8003f90 <UART_SetConfig+0x134>
 8003f60:	d81b      	bhi.n	8003f9a <UART_SetConfig+0x13e>
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d00a      	beq.n	8003f7c <UART_SetConfig+0x120>
 8003f66:	d818      	bhi.n	8003f9a <UART_SetConfig+0x13e>
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <UART_SetConfig+0x116>
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d00a      	beq.n	8003f86 <UART_SetConfig+0x12a>
 8003f70:	e013      	b.n	8003f9a <UART_SetConfig+0x13e>
 8003f72:	231b      	movs	r3, #27
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	2200      	movs	r2, #0
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	e02b      	b.n	8003fd4 <UART_SetConfig+0x178>
 8003f7c:	231b      	movs	r3, #27
 8003f7e:	18fb      	adds	r3, r7, r3
 8003f80:	2202      	movs	r2, #2
 8003f82:	701a      	strb	r2, [r3, #0]
 8003f84:	e026      	b.n	8003fd4 <UART_SetConfig+0x178>
 8003f86:	231b      	movs	r3, #27
 8003f88:	18fb      	adds	r3, r7, r3
 8003f8a:	2204      	movs	r2, #4
 8003f8c:	701a      	strb	r2, [r3, #0]
 8003f8e:	e021      	b.n	8003fd4 <UART_SetConfig+0x178>
 8003f90:	231b      	movs	r3, #27
 8003f92:	18fb      	adds	r3, r7, r3
 8003f94:	2208      	movs	r2, #8
 8003f96:	701a      	strb	r2, [r3, #0]
 8003f98:	e01c      	b.n	8003fd4 <UART_SetConfig+0x178>
 8003f9a:	231b      	movs	r3, #27
 8003f9c:	18fb      	adds	r3, r7, r3
 8003f9e:	2210      	movs	r2, #16
 8003fa0:	701a      	strb	r2, [r3, #0]
 8003fa2:	e017      	b.n	8003fd4 <UART_SetConfig+0x178>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a7a      	ldr	r2, [pc, #488]	; (8004194 <UART_SetConfig+0x338>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d104      	bne.n	8003fb8 <UART_SetConfig+0x15c>
 8003fae:	231b      	movs	r3, #27
 8003fb0:	18fb      	adds	r3, r7, r3
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	e00d      	b.n	8003fd4 <UART_SetConfig+0x178>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a76      	ldr	r2, [pc, #472]	; (8004198 <UART_SetConfig+0x33c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d104      	bne.n	8003fcc <UART_SetConfig+0x170>
 8003fc2:	231b      	movs	r3, #27
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	701a      	strb	r2, [r3, #0]
 8003fca:	e003      	b.n	8003fd4 <UART_SetConfig+0x178>
 8003fcc:	231b      	movs	r3, #27
 8003fce:	18fb      	adds	r3, r7, r3
 8003fd0:	2210      	movs	r2, #16
 8003fd2:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	2380      	movs	r3, #128	; 0x80
 8003fda:	021b      	lsls	r3, r3, #8
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d000      	beq.n	8003fe2 <UART_SetConfig+0x186>
 8003fe0:	e065      	b.n	80040ae <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8003fe2:	231b      	movs	r3, #27
 8003fe4:	18fb      	adds	r3, r7, r3
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d015      	beq.n	8004018 <UART_SetConfig+0x1bc>
 8003fec:	dc18      	bgt.n	8004020 <UART_SetConfig+0x1c4>
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d00d      	beq.n	800400e <UART_SetConfig+0x1b2>
 8003ff2:	dc15      	bgt.n	8004020 <UART_SetConfig+0x1c4>
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <UART_SetConfig+0x1a2>
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d005      	beq.n	8004008 <UART_SetConfig+0x1ac>
 8003ffc:	e010      	b.n	8004020 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ffe:	f7ff f81b 	bl	8003038 <HAL_RCC_GetPCLK1Freq>
 8004002:	0003      	movs	r3, r0
 8004004:	617b      	str	r3, [r7, #20]
        break;
 8004006:	e012      	b.n	800402e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004008:	4b64      	ldr	r3, [pc, #400]	; (800419c <UART_SetConfig+0x340>)
 800400a:	617b      	str	r3, [r7, #20]
        break;
 800400c:	e00f      	b.n	800402e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800400e:	f7fe ff87 	bl	8002f20 <HAL_RCC_GetSysClockFreq>
 8004012:	0003      	movs	r3, r0
 8004014:	617b      	str	r3, [r7, #20]
        break;
 8004016:	e00a      	b.n	800402e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004018:	2380      	movs	r3, #128	; 0x80
 800401a:	021b      	lsls	r3, r3, #8
 800401c:	617b      	str	r3, [r7, #20]
        break;
 800401e:	e006      	b.n	800402e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004024:	231a      	movs	r3, #26
 8004026:	18fb      	adds	r3, r7, r3
 8004028:	2201      	movs	r2, #1
 800402a:	701a      	strb	r2, [r3, #0]
        break;
 800402c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d100      	bne.n	8004036 <UART_SetConfig+0x1da>
 8004034:	e08d      	b.n	8004152 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800403a:	4b59      	ldr	r3, [pc, #356]	; (80041a0 <UART_SetConfig+0x344>)
 800403c:	0052      	lsls	r2, r2, #1
 800403e:	5ad3      	ldrh	r3, [r2, r3]
 8004040:	0019      	movs	r1, r3
 8004042:	6978      	ldr	r0, [r7, #20]
 8004044:	f7fc f85c 	bl	8000100 <__udivsi3>
 8004048:	0003      	movs	r3, r0
 800404a:	005a      	lsls	r2, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	085b      	lsrs	r3, r3, #1
 8004052:	18d2      	adds	r2, r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	0019      	movs	r1, r3
 800405a:	0010      	movs	r0, r2
 800405c:	f7fc f850 	bl	8000100 <__udivsi3>
 8004060:	0003      	movs	r3, r0
 8004062:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	2b0f      	cmp	r3, #15
 8004068:	d91c      	bls.n	80040a4 <UART_SetConfig+0x248>
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	2380      	movs	r3, #128	; 0x80
 800406e:	025b      	lsls	r3, r3, #9
 8004070:	429a      	cmp	r2, r3
 8004072:	d217      	bcs.n	80040a4 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	b29a      	uxth	r2, r3
 8004078:	200e      	movs	r0, #14
 800407a:	183b      	adds	r3, r7, r0
 800407c:	210f      	movs	r1, #15
 800407e:	438a      	bics	r2, r1
 8004080:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	085b      	lsrs	r3, r3, #1
 8004086:	b29b      	uxth	r3, r3
 8004088:	2207      	movs	r2, #7
 800408a:	4013      	ands	r3, r2
 800408c:	b299      	uxth	r1, r3
 800408e:	183b      	adds	r3, r7, r0
 8004090:	183a      	adds	r2, r7, r0
 8004092:	8812      	ldrh	r2, [r2, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	183a      	adds	r2, r7, r0
 800409e:	8812      	ldrh	r2, [r2, #0]
 80040a0:	60da      	str	r2, [r3, #12]
 80040a2:	e056      	b.n	8004152 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80040a4:	231a      	movs	r3, #26
 80040a6:	18fb      	adds	r3, r7, r3
 80040a8:	2201      	movs	r2, #1
 80040aa:	701a      	strb	r2, [r3, #0]
 80040ac:	e051      	b.n	8004152 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040ae:	231b      	movs	r3, #27
 80040b0:	18fb      	adds	r3, r7, r3
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d015      	beq.n	80040e4 <UART_SetConfig+0x288>
 80040b8:	dc18      	bgt.n	80040ec <UART_SetConfig+0x290>
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d00d      	beq.n	80040da <UART_SetConfig+0x27e>
 80040be:	dc15      	bgt.n	80040ec <UART_SetConfig+0x290>
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d002      	beq.n	80040ca <UART_SetConfig+0x26e>
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d005      	beq.n	80040d4 <UART_SetConfig+0x278>
 80040c8:	e010      	b.n	80040ec <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040ca:	f7fe ffb5 	bl	8003038 <HAL_RCC_GetPCLK1Freq>
 80040ce:	0003      	movs	r3, r0
 80040d0:	617b      	str	r3, [r7, #20]
        break;
 80040d2:	e012      	b.n	80040fa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040d4:	4b31      	ldr	r3, [pc, #196]	; (800419c <UART_SetConfig+0x340>)
 80040d6:	617b      	str	r3, [r7, #20]
        break;
 80040d8:	e00f      	b.n	80040fa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040da:	f7fe ff21 	bl	8002f20 <HAL_RCC_GetSysClockFreq>
 80040de:	0003      	movs	r3, r0
 80040e0:	617b      	str	r3, [r7, #20]
        break;
 80040e2:	e00a      	b.n	80040fa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040e4:	2380      	movs	r3, #128	; 0x80
 80040e6:	021b      	lsls	r3, r3, #8
 80040e8:	617b      	str	r3, [r7, #20]
        break;
 80040ea:	e006      	b.n	80040fa <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80040f0:	231a      	movs	r3, #26
 80040f2:	18fb      	adds	r3, r7, r3
 80040f4:	2201      	movs	r2, #1
 80040f6:	701a      	strb	r2, [r3, #0]
        break;
 80040f8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d028      	beq.n	8004152 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004104:	4b26      	ldr	r3, [pc, #152]	; (80041a0 <UART_SetConfig+0x344>)
 8004106:	0052      	lsls	r2, r2, #1
 8004108:	5ad3      	ldrh	r3, [r2, r3]
 800410a:	0019      	movs	r1, r3
 800410c:	6978      	ldr	r0, [r7, #20]
 800410e:	f7fb fff7 	bl	8000100 <__udivsi3>
 8004112:	0003      	movs	r3, r0
 8004114:	001a      	movs	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	085b      	lsrs	r3, r3, #1
 800411c:	18d2      	adds	r2, r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	0019      	movs	r1, r3
 8004124:	0010      	movs	r0, r2
 8004126:	f7fb ffeb 	bl	8000100 <__udivsi3>
 800412a:	0003      	movs	r3, r0
 800412c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	2b0f      	cmp	r3, #15
 8004132:	d90a      	bls.n	800414a <UART_SetConfig+0x2ee>
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	2380      	movs	r3, #128	; 0x80
 8004138:	025b      	lsls	r3, r3, #9
 800413a:	429a      	cmp	r2, r3
 800413c:	d205      	bcs.n	800414a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	b29a      	uxth	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60da      	str	r2, [r3, #12]
 8004148:	e003      	b.n	8004152 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800414a:	231a      	movs	r3, #26
 800414c:	18fb      	adds	r3, r7, r3
 800414e:	2201      	movs	r2, #1
 8004150:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	226a      	movs	r2, #106	; 0x6a
 8004156:	2101      	movs	r1, #1
 8004158:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2268      	movs	r2, #104	; 0x68
 800415e:	2101      	movs	r1, #1
 8004160:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800416e:	231a      	movs	r3, #26
 8004170:	18fb      	adds	r3, r7, r3
 8004172:	781b      	ldrb	r3, [r3, #0]
}
 8004174:	0018      	movs	r0, r3
 8004176:	46bd      	mov	sp, r7
 8004178:	b008      	add	sp, #32
 800417a:	bd80      	pop	{r7, pc}
 800417c:	cfff69f3 	.word	0xcfff69f3
 8004180:	ffffcfff 	.word	0xffffcfff
 8004184:	11fff4ff 	.word	0x11fff4ff
 8004188:	40013800 	.word	0x40013800
 800418c:	40021000 	.word	0x40021000
 8004190:	40004400 	.word	0x40004400
 8004194:	40004800 	.word	0x40004800
 8004198:	40004c00 	.word	0x40004c00
 800419c:	00f42400 	.word	0x00f42400
 80041a0:	0800590c 	.word	0x0800590c

080041a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b0:	2201      	movs	r2, #1
 80041b2:	4013      	ands	r3, r2
 80041b4:	d00b      	beq.n	80041ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	4a4a      	ldr	r2, [pc, #296]	; (80042e8 <UART_AdvFeatureConfig+0x144>)
 80041be:	4013      	ands	r3, r2
 80041c0:	0019      	movs	r1, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d2:	2202      	movs	r2, #2
 80041d4:	4013      	ands	r3, r2
 80041d6:	d00b      	beq.n	80041f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4a43      	ldr	r2, [pc, #268]	; (80042ec <UART_AdvFeatureConfig+0x148>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	0019      	movs	r1, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f4:	2204      	movs	r2, #4
 80041f6:	4013      	ands	r3, r2
 80041f8:	d00b      	beq.n	8004212 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	4a3b      	ldr	r2, [pc, #236]	; (80042f0 <UART_AdvFeatureConfig+0x14c>)
 8004202:	4013      	ands	r3, r2
 8004204:	0019      	movs	r1, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004216:	2208      	movs	r2, #8
 8004218:	4013      	ands	r3, r2
 800421a:	d00b      	beq.n	8004234 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	4a34      	ldr	r2, [pc, #208]	; (80042f4 <UART_AdvFeatureConfig+0x150>)
 8004224:	4013      	ands	r3, r2
 8004226:	0019      	movs	r1, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004238:	2210      	movs	r2, #16
 800423a:	4013      	ands	r3, r2
 800423c:	d00b      	beq.n	8004256 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	4a2c      	ldr	r2, [pc, #176]	; (80042f8 <UART_AdvFeatureConfig+0x154>)
 8004246:	4013      	ands	r3, r2
 8004248:	0019      	movs	r1, r3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425a:	2220      	movs	r2, #32
 800425c:	4013      	ands	r3, r2
 800425e:	d00b      	beq.n	8004278 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	4a25      	ldr	r2, [pc, #148]	; (80042fc <UART_AdvFeatureConfig+0x158>)
 8004268:	4013      	ands	r3, r2
 800426a:	0019      	movs	r1, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	2240      	movs	r2, #64	; 0x40
 800427e:	4013      	ands	r3, r2
 8004280:	d01d      	beq.n	80042be <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	4a1d      	ldr	r2, [pc, #116]	; (8004300 <UART_AdvFeatureConfig+0x15c>)
 800428a:	4013      	ands	r3, r2
 800428c:	0019      	movs	r1, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800429e:	2380      	movs	r3, #128	; 0x80
 80042a0:	035b      	lsls	r3, r3, #13
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d10b      	bne.n	80042be <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	4a15      	ldr	r2, [pc, #84]	; (8004304 <UART_AdvFeatureConfig+0x160>)
 80042ae:	4013      	ands	r3, r2
 80042b0:	0019      	movs	r1, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	430a      	orrs	r2, r1
 80042bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c2:	2280      	movs	r2, #128	; 0x80
 80042c4:	4013      	ands	r3, r2
 80042c6:	d00b      	beq.n	80042e0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	4a0e      	ldr	r2, [pc, #56]	; (8004308 <UART_AdvFeatureConfig+0x164>)
 80042d0:	4013      	ands	r3, r2
 80042d2:	0019      	movs	r1, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	430a      	orrs	r2, r1
 80042de:	605a      	str	r2, [r3, #4]
  }
}
 80042e0:	46c0      	nop			; (mov r8, r8)
 80042e2:	46bd      	mov	sp, r7
 80042e4:	b002      	add	sp, #8
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	fffdffff 	.word	0xfffdffff
 80042ec:	fffeffff 	.word	0xfffeffff
 80042f0:	fffbffff 	.word	0xfffbffff
 80042f4:	ffff7fff 	.word	0xffff7fff
 80042f8:	ffffefff 	.word	0xffffefff
 80042fc:	ffffdfff 	.word	0xffffdfff
 8004300:	ffefffff 	.word	0xffefffff
 8004304:	ff9fffff 	.word	0xff9fffff
 8004308:	fff7ffff 	.word	0xfff7ffff

0800430c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af02      	add	r7, sp, #8
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2290      	movs	r2, #144	; 0x90
 8004318:	2100      	movs	r1, #0
 800431a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800431c:	f7fd ff56 	bl	80021cc <HAL_GetTick>
 8004320:	0003      	movs	r3, r0
 8004322:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2208      	movs	r2, #8
 800432c:	4013      	ands	r3, r2
 800432e:	2b08      	cmp	r3, #8
 8004330:	d10c      	bne.n	800434c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2280      	movs	r2, #128	; 0x80
 8004336:	0391      	lsls	r1, r2, #14
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	4a1a      	ldr	r2, [pc, #104]	; (80043a4 <UART_CheckIdleState+0x98>)
 800433c:	9200      	str	r2, [sp, #0]
 800433e:	2200      	movs	r2, #0
 8004340:	f000 f832 	bl	80043a8 <UART_WaitOnFlagUntilTimeout>
 8004344:	1e03      	subs	r3, r0, #0
 8004346:	d001      	beq.n	800434c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e026      	b.n	800439a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2204      	movs	r2, #4
 8004354:	4013      	ands	r3, r2
 8004356:	2b04      	cmp	r3, #4
 8004358:	d10c      	bne.n	8004374 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2280      	movs	r2, #128	; 0x80
 800435e:	03d1      	lsls	r1, r2, #15
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	4a10      	ldr	r2, [pc, #64]	; (80043a4 <UART_CheckIdleState+0x98>)
 8004364:	9200      	str	r2, [sp, #0]
 8004366:	2200      	movs	r2, #0
 8004368:	f000 f81e 	bl	80043a8 <UART_WaitOnFlagUntilTimeout>
 800436c:	1e03      	subs	r3, r0, #0
 800436e:	d001      	beq.n	8004374 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e012      	b.n	800439a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2288      	movs	r2, #136	; 0x88
 8004378:	2120      	movs	r1, #32
 800437a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	228c      	movs	r2, #140	; 0x8c
 8004380:	2120      	movs	r1, #32
 8004382:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2284      	movs	r2, #132	; 0x84
 8004394:	2100      	movs	r1, #0
 8004396:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	0018      	movs	r0, r3
 800439c:	46bd      	mov	sp, r7
 800439e:	b004      	add	sp, #16
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	01ffffff 	.word	0x01ffffff

080043a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b094      	sub	sp, #80	; 0x50
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	1dfb      	adds	r3, r7, #7
 80043b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043b8:	e0a7      	b.n	800450a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043bc:	3301      	adds	r3, #1
 80043be:	d100      	bne.n	80043c2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80043c0:	e0a3      	b.n	800450a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c2:	f7fd ff03 	bl	80021cc <HAL_GetTick>
 80043c6:	0002      	movs	r2, r0
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d302      	bcc.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80043d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d13f      	bne.n	8004458 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d8:	f3ef 8310 	mrs	r3, PRIMASK
 80043dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80043e0:	647b      	str	r3, [r7, #68]	; 0x44
 80043e2:	2301      	movs	r3, #1
 80043e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e8:	f383 8810 	msr	PRIMASK, r3
}
 80043ec:	46c0      	nop			; (mov r8, r8)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	494e      	ldr	r1, [pc, #312]	; (8004534 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80043fa:	400a      	ands	r2, r1
 80043fc:	601a      	str	r2, [r3, #0]
 80043fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004400:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	f383 8810 	msr	PRIMASK, r3
}
 8004408:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800440a:	f3ef 8310 	mrs	r3, PRIMASK
 800440e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004412:	643b      	str	r3, [r7, #64]	; 0x40
 8004414:	2301      	movs	r3, #1
 8004416:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441a:	f383 8810 	msr	PRIMASK, r3
}
 800441e:	46c0      	nop			; (mov r8, r8)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2101      	movs	r1, #1
 800442c:	438a      	bics	r2, r1
 800442e:	609a      	str	r2, [r3, #8]
 8004430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004432:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004436:	f383 8810 	msr	PRIMASK, r3
}
 800443a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2288      	movs	r2, #136	; 0x88
 8004440:	2120      	movs	r1, #32
 8004442:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	228c      	movs	r2, #140	; 0x8c
 8004448:	2120      	movs	r1, #32
 800444a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2284      	movs	r2, #132	; 0x84
 8004450:	2100      	movs	r1, #0
 8004452:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e069      	b.n	800452c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2204      	movs	r2, #4
 8004460:	4013      	ands	r3, r2
 8004462:	d052      	beq.n	800450a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	69da      	ldr	r2, [r3, #28]
 800446a:	2380      	movs	r3, #128	; 0x80
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	401a      	ands	r2, r3
 8004470:	2380      	movs	r3, #128	; 0x80
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	429a      	cmp	r2, r3
 8004476:	d148      	bne.n	800450a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2280      	movs	r2, #128	; 0x80
 800447e:	0112      	lsls	r2, r2, #4
 8004480:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004482:	f3ef 8310 	mrs	r3, PRIMASK
 8004486:	613b      	str	r3, [r7, #16]
  return(result);
 8004488:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800448a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800448c:	2301      	movs	r3, #1
 800448e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f383 8810 	msr	PRIMASK, r3
}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4924      	ldr	r1, [pc, #144]	; (8004534 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80044a4:	400a      	ands	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	f383 8810 	msr	PRIMASK, r3
}
 80044b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044b4:	f3ef 8310 	mrs	r3, PRIMASK
 80044b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80044ba:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80044be:	2301      	movs	r3, #1
 80044c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	f383 8810 	msr	PRIMASK, r3
}
 80044c8:	46c0      	nop			; (mov r8, r8)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2101      	movs	r1, #1
 80044d6:	438a      	bics	r2, r1
 80044d8:	609a      	str	r2, [r3, #8]
 80044da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044dc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	f383 8810 	msr	PRIMASK, r3
}
 80044e4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2288      	movs	r2, #136	; 0x88
 80044ea:	2120      	movs	r1, #32
 80044ec:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	228c      	movs	r2, #140	; 0x8c
 80044f2:	2120      	movs	r1, #32
 80044f4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2290      	movs	r2, #144	; 0x90
 80044fa:	2120      	movs	r1, #32
 80044fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2284      	movs	r2, #132	; 0x84
 8004502:	2100      	movs	r1, #0
 8004504:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e010      	b.n	800452c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	4013      	ands	r3, r2
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	425a      	negs	r2, r3
 800451a:	4153      	adcs	r3, r2
 800451c:	b2db      	uxtb	r3, r3
 800451e:	001a      	movs	r2, r3
 8004520:	1dfb      	adds	r3, r7, #7
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d100      	bne.n	800452a <UART_WaitOnFlagUntilTimeout+0x182>
 8004528:	e747      	b.n	80043ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	0018      	movs	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	b014      	add	sp, #80	; 0x50
 8004532:	bd80      	pop	{r7, pc}
 8004534:	fffffe5f 	.word	0xfffffe5f

08004538 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2284      	movs	r2, #132	; 0x84
 8004544:	5c9b      	ldrb	r3, [r3, r2]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_UARTEx_DisableFifoMode+0x16>
 800454a:	2302      	movs	r3, #2
 800454c:	e027      	b.n	800459e <HAL_UARTEx_DisableFifoMode+0x66>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2284      	movs	r2, #132	; 0x84
 8004552:	2101      	movs	r1, #1
 8004554:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2288      	movs	r2, #136	; 0x88
 800455a:	2124      	movs	r1, #36	; 0x24
 800455c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2101      	movs	r1, #1
 8004572:	438a      	bics	r2, r1
 8004574:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4a0b      	ldr	r2, [pc, #44]	; (80045a8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800457a:	4013      	ands	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2288      	movs	r2, #136	; 0x88
 8004590:	2120      	movs	r1, #32
 8004592:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2284      	movs	r2, #132	; 0x84
 8004598:	2100      	movs	r1, #0
 800459a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	0018      	movs	r0, r3
 80045a0:	46bd      	mov	sp, r7
 80045a2:	b004      	add	sp, #16
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	dfffffff 	.word	0xdfffffff

080045ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2284      	movs	r2, #132	; 0x84
 80045ba:	5c9b      	ldrb	r3, [r3, r2]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e02e      	b.n	8004622 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2284      	movs	r2, #132	; 0x84
 80045c8:	2101      	movs	r1, #1
 80045ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2288      	movs	r2, #136	; 0x88
 80045d0:	2124      	movs	r1, #36	; 0x24
 80045d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2101      	movs	r1, #1
 80045e8:	438a      	bics	r2, r1
 80045ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	08d9      	lsrs	r1, r3, #3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	0018      	movs	r0, r3
 8004604:	f000 f854 	bl	80046b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2288      	movs	r2, #136	; 0x88
 8004614:	2120      	movs	r1, #32
 8004616:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2284      	movs	r2, #132	; 0x84
 800461c:	2100      	movs	r1, #0
 800461e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	0018      	movs	r0, r3
 8004624:	46bd      	mov	sp, r7
 8004626:	b004      	add	sp, #16
 8004628:	bd80      	pop	{r7, pc}
	...

0800462c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2284      	movs	r2, #132	; 0x84
 800463a:	5c9b      	ldrb	r3, [r3, r2]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004640:	2302      	movs	r3, #2
 8004642:	e02f      	b.n	80046a4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2284      	movs	r2, #132	; 0x84
 8004648:	2101      	movs	r1, #1
 800464a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2288      	movs	r2, #136	; 0x88
 8004650:	2124      	movs	r1, #36	; 0x24
 8004652:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2101      	movs	r1, #1
 8004668:	438a      	bics	r2, r1
 800466a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	4a0e      	ldr	r2, [pc, #56]	; (80046ac <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004674:	4013      	ands	r3, r2
 8004676:	0019      	movs	r1, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	0018      	movs	r0, r3
 8004686:	f000 f813 	bl	80046b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2288      	movs	r2, #136	; 0x88
 8004696:	2120      	movs	r1, #32
 8004698:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2284      	movs	r2, #132	; 0x84
 800469e:	2100      	movs	r1, #0
 80046a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	0018      	movs	r0, r3
 80046a6:	46bd      	mov	sp, r7
 80046a8:	b004      	add	sp, #16
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	f1ffffff 	.word	0xf1ffffff

080046b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80046b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d108      	bne.n	80046d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	226a      	movs	r2, #106	; 0x6a
 80046c4:	2101      	movs	r1, #1
 80046c6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2268      	movs	r2, #104	; 0x68
 80046cc:	2101      	movs	r1, #1
 80046ce:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80046d0:	e043      	b.n	800475a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80046d2:	260f      	movs	r6, #15
 80046d4:	19bb      	adds	r3, r7, r6
 80046d6:	2208      	movs	r2, #8
 80046d8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80046da:	200e      	movs	r0, #14
 80046dc:	183b      	adds	r3, r7, r0
 80046de:	2208      	movs	r2, #8
 80046e0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	0e5b      	lsrs	r3, r3, #25
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	240d      	movs	r4, #13
 80046ee:	193b      	adds	r3, r7, r4
 80046f0:	2107      	movs	r1, #7
 80046f2:	400a      	ands	r2, r1
 80046f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	0f5b      	lsrs	r3, r3, #29
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	250c      	movs	r5, #12
 8004702:	197b      	adds	r3, r7, r5
 8004704:	2107      	movs	r1, #7
 8004706:	400a      	ands	r2, r1
 8004708:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800470a:	183b      	adds	r3, r7, r0
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	197a      	adds	r2, r7, r5
 8004710:	7812      	ldrb	r2, [r2, #0]
 8004712:	4914      	ldr	r1, [pc, #80]	; (8004764 <UARTEx_SetNbDataToProcess+0xb4>)
 8004714:	5c8a      	ldrb	r2, [r1, r2]
 8004716:	435a      	muls	r2, r3
 8004718:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800471a:	197b      	adds	r3, r7, r5
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	4a12      	ldr	r2, [pc, #72]	; (8004768 <UARTEx_SetNbDataToProcess+0xb8>)
 8004720:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004722:	0019      	movs	r1, r3
 8004724:	f7fb fd76 	bl	8000214 <__divsi3>
 8004728:	0003      	movs	r3, r0
 800472a:	b299      	uxth	r1, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	226a      	movs	r2, #106	; 0x6a
 8004730:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004732:	19bb      	adds	r3, r7, r6
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	193a      	adds	r2, r7, r4
 8004738:	7812      	ldrb	r2, [r2, #0]
 800473a:	490a      	ldr	r1, [pc, #40]	; (8004764 <UARTEx_SetNbDataToProcess+0xb4>)
 800473c:	5c8a      	ldrb	r2, [r1, r2]
 800473e:	435a      	muls	r2, r3
 8004740:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004742:	193b      	adds	r3, r7, r4
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	4a08      	ldr	r2, [pc, #32]	; (8004768 <UARTEx_SetNbDataToProcess+0xb8>)
 8004748:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800474a:	0019      	movs	r1, r3
 800474c:	f7fb fd62 	bl	8000214 <__divsi3>
 8004750:	0003      	movs	r3, r0
 8004752:	b299      	uxth	r1, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2268      	movs	r2, #104	; 0x68
 8004758:	5299      	strh	r1, [r3, r2]
}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	46bd      	mov	sp, r7
 800475e:	b005      	add	sp, #20
 8004760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	08005924 	.word	0x08005924
 8004768:	0800592c 	.word	0x0800592c

0800476c <__errno>:
 800476c:	4b01      	ldr	r3, [pc, #4]	; (8004774 <__errno+0x8>)
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	4770      	bx	lr
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	2000000c 	.word	0x2000000c

08004778 <__libc_init_array>:
 8004778:	b570      	push	{r4, r5, r6, lr}
 800477a:	2600      	movs	r6, #0
 800477c:	4d0c      	ldr	r5, [pc, #48]	; (80047b0 <__libc_init_array+0x38>)
 800477e:	4c0d      	ldr	r4, [pc, #52]	; (80047b4 <__libc_init_array+0x3c>)
 8004780:	1b64      	subs	r4, r4, r5
 8004782:	10a4      	asrs	r4, r4, #2
 8004784:	42a6      	cmp	r6, r4
 8004786:	d109      	bne.n	800479c <__libc_init_array+0x24>
 8004788:	2600      	movs	r6, #0
 800478a:	f000 fd89 	bl	80052a0 <_init>
 800478e:	4d0a      	ldr	r5, [pc, #40]	; (80047b8 <__libc_init_array+0x40>)
 8004790:	4c0a      	ldr	r4, [pc, #40]	; (80047bc <__libc_init_array+0x44>)
 8004792:	1b64      	subs	r4, r4, r5
 8004794:	10a4      	asrs	r4, r4, #2
 8004796:	42a6      	cmp	r6, r4
 8004798:	d105      	bne.n	80047a6 <__libc_init_array+0x2e>
 800479a:	bd70      	pop	{r4, r5, r6, pc}
 800479c:	00b3      	lsls	r3, r6, #2
 800479e:	58eb      	ldr	r3, [r5, r3]
 80047a0:	4798      	blx	r3
 80047a2:	3601      	adds	r6, #1
 80047a4:	e7ee      	b.n	8004784 <__libc_init_array+0xc>
 80047a6:	00b3      	lsls	r3, r6, #2
 80047a8:	58eb      	ldr	r3, [r5, r3]
 80047aa:	4798      	blx	r3
 80047ac:	3601      	adds	r6, #1
 80047ae:	e7f2      	b.n	8004796 <__libc_init_array+0x1e>
 80047b0:	08005998 	.word	0x08005998
 80047b4:	08005998 	.word	0x08005998
 80047b8:	08005998 	.word	0x08005998
 80047bc:	0800599c 	.word	0x0800599c

080047c0 <malloc>:
 80047c0:	b510      	push	{r4, lr}
 80047c2:	4b03      	ldr	r3, [pc, #12]	; (80047d0 <malloc+0x10>)
 80047c4:	0001      	movs	r1, r0
 80047c6:	6818      	ldr	r0, [r3, #0]
 80047c8:	f000 f88c 	bl	80048e4 <_malloc_r>
 80047cc:	bd10      	pop	{r4, pc}
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	2000000c 	.word	0x2000000c

080047d4 <free>:
 80047d4:	b510      	push	{r4, lr}
 80047d6:	4b03      	ldr	r3, [pc, #12]	; (80047e4 <free+0x10>)
 80047d8:	0001      	movs	r1, r0
 80047da:	6818      	ldr	r0, [r3, #0]
 80047dc:	f000 f816 	bl	800480c <_free_r>
 80047e0:	bd10      	pop	{r4, pc}
 80047e2:	46c0      	nop			; (mov r8, r8)
 80047e4:	2000000c 	.word	0x2000000c

080047e8 <memcpy>:
 80047e8:	2300      	movs	r3, #0
 80047ea:	b510      	push	{r4, lr}
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d100      	bne.n	80047f2 <memcpy+0xa>
 80047f0:	bd10      	pop	{r4, pc}
 80047f2:	5ccc      	ldrb	r4, [r1, r3]
 80047f4:	54c4      	strb	r4, [r0, r3]
 80047f6:	3301      	adds	r3, #1
 80047f8:	e7f8      	b.n	80047ec <memcpy+0x4>

080047fa <memset>:
 80047fa:	0003      	movs	r3, r0
 80047fc:	1882      	adds	r2, r0, r2
 80047fe:	4293      	cmp	r3, r2
 8004800:	d100      	bne.n	8004804 <memset+0xa>
 8004802:	4770      	bx	lr
 8004804:	7019      	strb	r1, [r3, #0]
 8004806:	3301      	adds	r3, #1
 8004808:	e7f9      	b.n	80047fe <memset+0x4>
	...

0800480c <_free_r>:
 800480c:	b570      	push	{r4, r5, r6, lr}
 800480e:	0005      	movs	r5, r0
 8004810:	2900      	cmp	r1, #0
 8004812:	d010      	beq.n	8004836 <_free_r+0x2a>
 8004814:	1f0c      	subs	r4, r1, #4
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	da00      	bge.n	800481e <_free_r+0x12>
 800481c:	18e4      	adds	r4, r4, r3
 800481e:	0028      	movs	r0, r5
 8004820:	f000 fc70 	bl	8005104 <__malloc_lock>
 8004824:	4a1d      	ldr	r2, [pc, #116]	; (800489c <_free_r+0x90>)
 8004826:	6813      	ldr	r3, [r2, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d105      	bne.n	8004838 <_free_r+0x2c>
 800482c:	6063      	str	r3, [r4, #4]
 800482e:	6014      	str	r4, [r2, #0]
 8004830:	0028      	movs	r0, r5
 8004832:	f000 fc6f 	bl	8005114 <__malloc_unlock>
 8004836:	bd70      	pop	{r4, r5, r6, pc}
 8004838:	42a3      	cmp	r3, r4
 800483a:	d908      	bls.n	800484e <_free_r+0x42>
 800483c:	6821      	ldr	r1, [r4, #0]
 800483e:	1860      	adds	r0, r4, r1
 8004840:	4283      	cmp	r3, r0
 8004842:	d1f3      	bne.n	800482c <_free_r+0x20>
 8004844:	6818      	ldr	r0, [r3, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	1841      	adds	r1, r0, r1
 800484a:	6021      	str	r1, [r4, #0]
 800484c:	e7ee      	b.n	800482c <_free_r+0x20>
 800484e:	001a      	movs	r2, r3
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <_free_r+0x4e>
 8004856:	42a3      	cmp	r3, r4
 8004858:	d9f9      	bls.n	800484e <_free_r+0x42>
 800485a:	6811      	ldr	r1, [r2, #0]
 800485c:	1850      	adds	r0, r2, r1
 800485e:	42a0      	cmp	r0, r4
 8004860:	d10b      	bne.n	800487a <_free_r+0x6e>
 8004862:	6820      	ldr	r0, [r4, #0]
 8004864:	1809      	adds	r1, r1, r0
 8004866:	1850      	adds	r0, r2, r1
 8004868:	6011      	str	r1, [r2, #0]
 800486a:	4283      	cmp	r3, r0
 800486c:	d1e0      	bne.n	8004830 <_free_r+0x24>
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	1841      	adds	r1, r0, r1
 8004874:	6011      	str	r1, [r2, #0]
 8004876:	6053      	str	r3, [r2, #4]
 8004878:	e7da      	b.n	8004830 <_free_r+0x24>
 800487a:	42a0      	cmp	r0, r4
 800487c:	d902      	bls.n	8004884 <_free_r+0x78>
 800487e:	230c      	movs	r3, #12
 8004880:	602b      	str	r3, [r5, #0]
 8004882:	e7d5      	b.n	8004830 <_free_r+0x24>
 8004884:	6821      	ldr	r1, [r4, #0]
 8004886:	1860      	adds	r0, r4, r1
 8004888:	4283      	cmp	r3, r0
 800488a:	d103      	bne.n	8004894 <_free_r+0x88>
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	1841      	adds	r1, r0, r1
 8004892:	6021      	str	r1, [r4, #0]
 8004894:	6063      	str	r3, [r4, #4]
 8004896:	6054      	str	r4, [r2, #4]
 8004898:	e7ca      	b.n	8004830 <_free_r+0x24>
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	20000214 	.word	0x20000214

080048a0 <sbrk_aligned>:
 80048a0:	b570      	push	{r4, r5, r6, lr}
 80048a2:	4e0f      	ldr	r6, [pc, #60]	; (80048e0 <sbrk_aligned+0x40>)
 80048a4:	000d      	movs	r5, r1
 80048a6:	6831      	ldr	r1, [r6, #0]
 80048a8:	0004      	movs	r4, r0
 80048aa:	2900      	cmp	r1, #0
 80048ac:	d102      	bne.n	80048b4 <sbrk_aligned+0x14>
 80048ae:	f000 f90b 	bl	8004ac8 <_sbrk_r>
 80048b2:	6030      	str	r0, [r6, #0]
 80048b4:	0029      	movs	r1, r5
 80048b6:	0020      	movs	r0, r4
 80048b8:	f000 f906 	bl	8004ac8 <_sbrk_r>
 80048bc:	1c43      	adds	r3, r0, #1
 80048be:	d00a      	beq.n	80048d6 <sbrk_aligned+0x36>
 80048c0:	2303      	movs	r3, #3
 80048c2:	1cc5      	adds	r5, r0, #3
 80048c4:	439d      	bics	r5, r3
 80048c6:	42a8      	cmp	r0, r5
 80048c8:	d007      	beq.n	80048da <sbrk_aligned+0x3a>
 80048ca:	1a29      	subs	r1, r5, r0
 80048cc:	0020      	movs	r0, r4
 80048ce:	f000 f8fb 	bl	8004ac8 <_sbrk_r>
 80048d2:	1c43      	adds	r3, r0, #1
 80048d4:	d101      	bne.n	80048da <sbrk_aligned+0x3a>
 80048d6:	2501      	movs	r5, #1
 80048d8:	426d      	negs	r5, r5
 80048da:	0028      	movs	r0, r5
 80048dc:	bd70      	pop	{r4, r5, r6, pc}
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	20000218 	.word	0x20000218

080048e4 <_malloc_r>:
 80048e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048e6:	2203      	movs	r2, #3
 80048e8:	1ccb      	adds	r3, r1, #3
 80048ea:	4393      	bics	r3, r2
 80048ec:	3308      	adds	r3, #8
 80048ee:	0006      	movs	r6, r0
 80048f0:	001f      	movs	r7, r3
 80048f2:	2b0c      	cmp	r3, #12
 80048f4:	d232      	bcs.n	800495c <_malloc_r+0x78>
 80048f6:	270c      	movs	r7, #12
 80048f8:	42b9      	cmp	r1, r7
 80048fa:	d831      	bhi.n	8004960 <_malloc_r+0x7c>
 80048fc:	0030      	movs	r0, r6
 80048fe:	f000 fc01 	bl	8005104 <__malloc_lock>
 8004902:	4d32      	ldr	r5, [pc, #200]	; (80049cc <_malloc_r+0xe8>)
 8004904:	682b      	ldr	r3, [r5, #0]
 8004906:	001c      	movs	r4, r3
 8004908:	2c00      	cmp	r4, #0
 800490a:	d12e      	bne.n	800496a <_malloc_r+0x86>
 800490c:	0039      	movs	r1, r7
 800490e:	0030      	movs	r0, r6
 8004910:	f7ff ffc6 	bl	80048a0 <sbrk_aligned>
 8004914:	0004      	movs	r4, r0
 8004916:	1c43      	adds	r3, r0, #1
 8004918:	d11e      	bne.n	8004958 <_malloc_r+0x74>
 800491a:	682c      	ldr	r4, [r5, #0]
 800491c:	0025      	movs	r5, r4
 800491e:	2d00      	cmp	r5, #0
 8004920:	d14a      	bne.n	80049b8 <_malloc_r+0xd4>
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	0029      	movs	r1, r5
 8004926:	18e3      	adds	r3, r4, r3
 8004928:	0030      	movs	r0, r6
 800492a:	9301      	str	r3, [sp, #4]
 800492c:	f000 f8cc 	bl	8004ac8 <_sbrk_r>
 8004930:	9b01      	ldr	r3, [sp, #4]
 8004932:	4283      	cmp	r3, r0
 8004934:	d143      	bne.n	80049be <_malloc_r+0xda>
 8004936:	6823      	ldr	r3, [r4, #0]
 8004938:	3703      	adds	r7, #3
 800493a:	1aff      	subs	r7, r7, r3
 800493c:	2303      	movs	r3, #3
 800493e:	439f      	bics	r7, r3
 8004940:	3708      	adds	r7, #8
 8004942:	2f0c      	cmp	r7, #12
 8004944:	d200      	bcs.n	8004948 <_malloc_r+0x64>
 8004946:	270c      	movs	r7, #12
 8004948:	0039      	movs	r1, r7
 800494a:	0030      	movs	r0, r6
 800494c:	f7ff ffa8 	bl	80048a0 <sbrk_aligned>
 8004950:	1c43      	adds	r3, r0, #1
 8004952:	d034      	beq.n	80049be <_malloc_r+0xda>
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	19df      	adds	r7, r3, r7
 8004958:	6027      	str	r7, [r4, #0]
 800495a:	e013      	b.n	8004984 <_malloc_r+0xa0>
 800495c:	2b00      	cmp	r3, #0
 800495e:	dacb      	bge.n	80048f8 <_malloc_r+0x14>
 8004960:	230c      	movs	r3, #12
 8004962:	2500      	movs	r5, #0
 8004964:	6033      	str	r3, [r6, #0]
 8004966:	0028      	movs	r0, r5
 8004968:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800496a:	6822      	ldr	r2, [r4, #0]
 800496c:	1bd1      	subs	r1, r2, r7
 800496e:	d420      	bmi.n	80049b2 <_malloc_r+0xce>
 8004970:	290b      	cmp	r1, #11
 8004972:	d917      	bls.n	80049a4 <_malloc_r+0xc0>
 8004974:	19e2      	adds	r2, r4, r7
 8004976:	6027      	str	r7, [r4, #0]
 8004978:	42a3      	cmp	r3, r4
 800497a:	d111      	bne.n	80049a0 <_malloc_r+0xbc>
 800497c:	602a      	str	r2, [r5, #0]
 800497e:	6863      	ldr	r3, [r4, #4]
 8004980:	6011      	str	r1, [r2, #0]
 8004982:	6053      	str	r3, [r2, #4]
 8004984:	0030      	movs	r0, r6
 8004986:	0025      	movs	r5, r4
 8004988:	f000 fbc4 	bl	8005114 <__malloc_unlock>
 800498c:	2207      	movs	r2, #7
 800498e:	350b      	adds	r5, #11
 8004990:	1d23      	adds	r3, r4, #4
 8004992:	4395      	bics	r5, r2
 8004994:	1aea      	subs	r2, r5, r3
 8004996:	429d      	cmp	r5, r3
 8004998:	d0e5      	beq.n	8004966 <_malloc_r+0x82>
 800499a:	1b5b      	subs	r3, r3, r5
 800499c:	50a3      	str	r3, [r4, r2]
 800499e:	e7e2      	b.n	8004966 <_malloc_r+0x82>
 80049a0:	605a      	str	r2, [r3, #4]
 80049a2:	e7ec      	b.n	800497e <_malloc_r+0x9a>
 80049a4:	6862      	ldr	r2, [r4, #4]
 80049a6:	42a3      	cmp	r3, r4
 80049a8:	d101      	bne.n	80049ae <_malloc_r+0xca>
 80049aa:	602a      	str	r2, [r5, #0]
 80049ac:	e7ea      	b.n	8004984 <_malloc_r+0xa0>
 80049ae:	605a      	str	r2, [r3, #4]
 80049b0:	e7e8      	b.n	8004984 <_malloc_r+0xa0>
 80049b2:	0023      	movs	r3, r4
 80049b4:	6864      	ldr	r4, [r4, #4]
 80049b6:	e7a7      	b.n	8004908 <_malloc_r+0x24>
 80049b8:	002c      	movs	r4, r5
 80049ba:	686d      	ldr	r5, [r5, #4]
 80049bc:	e7af      	b.n	800491e <_malloc_r+0x3a>
 80049be:	230c      	movs	r3, #12
 80049c0:	0030      	movs	r0, r6
 80049c2:	6033      	str	r3, [r6, #0]
 80049c4:	f000 fba6 	bl	8005114 <__malloc_unlock>
 80049c8:	e7cd      	b.n	8004966 <_malloc_r+0x82>
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	20000214 	.word	0x20000214

080049d0 <_puts_r>:
 80049d0:	b570      	push	{r4, r5, r6, lr}
 80049d2:	0005      	movs	r5, r0
 80049d4:	000e      	movs	r6, r1
 80049d6:	2800      	cmp	r0, #0
 80049d8:	d004      	beq.n	80049e4 <_puts_r+0x14>
 80049da:	6983      	ldr	r3, [r0, #24]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <_puts_r+0x14>
 80049e0:	f000 fa80 	bl	8004ee4 <__sinit>
 80049e4:	69ab      	ldr	r3, [r5, #24]
 80049e6:	68ac      	ldr	r4, [r5, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d102      	bne.n	80049f2 <_puts_r+0x22>
 80049ec:	0028      	movs	r0, r5
 80049ee:	f000 fa79 	bl	8004ee4 <__sinit>
 80049f2:	4b2d      	ldr	r3, [pc, #180]	; (8004aa8 <_puts_r+0xd8>)
 80049f4:	429c      	cmp	r4, r3
 80049f6:	d122      	bne.n	8004a3e <_puts_r+0x6e>
 80049f8:	686c      	ldr	r4, [r5, #4]
 80049fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049fc:	07db      	lsls	r3, r3, #31
 80049fe:	d405      	bmi.n	8004a0c <_puts_r+0x3c>
 8004a00:	89a3      	ldrh	r3, [r4, #12]
 8004a02:	059b      	lsls	r3, r3, #22
 8004a04:	d402      	bmi.n	8004a0c <_puts_r+0x3c>
 8004a06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a08:	f000 fb0d 	bl	8005026 <__retarget_lock_acquire_recursive>
 8004a0c:	89a3      	ldrh	r3, [r4, #12]
 8004a0e:	071b      	lsls	r3, r3, #28
 8004a10:	d502      	bpl.n	8004a18 <_puts_r+0x48>
 8004a12:	6923      	ldr	r3, [r4, #16]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d129      	bne.n	8004a6c <_puts_r+0x9c>
 8004a18:	0021      	movs	r1, r4
 8004a1a:	0028      	movs	r0, r5
 8004a1c:	f000 f8bc 	bl	8004b98 <__swsetup_r>
 8004a20:	2800      	cmp	r0, #0
 8004a22:	d023      	beq.n	8004a6c <_puts_r+0x9c>
 8004a24:	2501      	movs	r5, #1
 8004a26:	426d      	negs	r5, r5
 8004a28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a2a:	07db      	lsls	r3, r3, #31
 8004a2c:	d405      	bmi.n	8004a3a <_puts_r+0x6a>
 8004a2e:	89a3      	ldrh	r3, [r4, #12]
 8004a30:	059b      	lsls	r3, r3, #22
 8004a32:	d402      	bmi.n	8004a3a <_puts_r+0x6a>
 8004a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a36:	f000 faf7 	bl	8005028 <__retarget_lock_release_recursive>
 8004a3a:	0028      	movs	r0, r5
 8004a3c:	bd70      	pop	{r4, r5, r6, pc}
 8004a3e:	4b1b      	ldr	r3, [pc, #108]	; (8004aac <_puts_r+0xdc>)
 8004a40:	429c      	cmp	r4, r3
 8004a42:	d101      	bne.n	8004a48 <_puts_r+0x78>
 8004a44:	68ac      	ldr	r4, [r5, #8]
 8004a46:	e7d8      	b.n	80049fa <_puts_r+0x2a>
 8004a48:	4b19      	ldr	r3, [pc, #100]	; (8004ab0 <_puts_r+0xe0>)
 8004a4a:	429c      	cmp	r4, r3
 8004a4c:	d1d5      	bne.n	80049fa <_puts_r+0x2a>
 8004a4e:	68ec      	ldr	r4, [r5, #12]
 8004a50:	e7d3      	b.n	80049fa <_puts_r+0x2a>
 8004a52:	3601      	adds	r6, #1
 8004a54:	60a3      	str	r3, [r4, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	da04      	bge.n	8004a64 <_puts_r+0x94>
 8004a5a:	69a2      	ldr	r2, [r4, #24]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	dc16      	bgt.n	8004a8e <_puts_r+0xbe>
 8004a60:	290a      	cmp	r1, #10
 8004a62:	d014      	beq.n	8004a8e <_puts_r+0xbe>
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	6022      	str	r2, [r4, #0]
 8004a6a:	7019      	strb	r1, [r3, #0]
 8004a6c:	68a3      	ldr	r3, [r4, #8]
 8004a6e:	7831      	ldrb	r1, [r6, #0]
 8004a70:	3b01      	subs	r3, #1
 8004a72:	2900      	cmp	r1, #0
 8004a74:	d1ed      	bne.n	8004a52 <_puts_r+0x82>
 8004a76:	60a3      	str	r3, [r4, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	da0f      	bge.n	8004a9c <_puts_r+0xcc>
 8004a7c:	0028      	movs	r0, r5
 8004a7e:	0022      	movs	r2, r4
 8004a80:	310a      	adds	r1, #10
 8004a82:	f000 f833 	bl	8004aec <__swbuf_r>
 8004a86:	250a      	movs	r5, #10
 8004a88:	1c43      	adds	r3, r0, #1
 8004a8a:	d1cd      	bne.n	8004a28 <_puts_r+0x58>
 8004a8c:	e7ca      	b.n	8004a24 <_puts_r+0x54>
 8004a8e:	0022      	movs	r2, r4
 8004a90:	0028      	movs	r0, r5
 8004a92:	f000 f82b 	bl	8004aec <__swbuf_r>
 8004a96:	1c43      	adds	r3, r0, #1
 8004a98:	d1e8      	bne.n	8004a6c <_puts_r+0x9c>
 8004a9a:	e7c3      	b.n	8004a24 <_puts_r+0x54>
 8004a9c:	250a      	movs	r5, #10
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	6022      	str	r2, [r4, #0]
 8004aa4:	701d      	strb	r5, [r3, #0]
 8004aa6:	e7bf      	b.n	8004a28 <_puts_r+0x58>
 8004aa8:	08005958 	.word	0x08005958
 8004aac:	08005978 	.word	0x08005978
 8004ab0:	08005938 	.word	0x08005938

08004ab4 <puts>:
 8004ab4:	b510      	push	{r4, lr}
 8004ab6:	4b03      	ldr	r3, [pc, #12]	; (8004ac4 <puts+0x10>)
 8004ab8:	0001      	movs	r1, r0
 8004aba:	6818      	ldr	r0, [r3, #0]
 8004abc:	f7ff ff88 	bl	80049d0 <_puts_r>
 8004ac0:	bd10      	pop	{r4, pc}
 8004ac2:	46c0      	nop			; (mov r8, r8)
 8004ac4:	2000000c 	.word	0x2000000c

08004ac8 <_sbrk_r>:
 8004ac8:	2300      	movs	r3, #0
 8004aca:	b570      	push	{r4, r5, r6, lr}
 8004acc:	4d06      	ldr	r5, [pc, #24]	; (8004ae8 <_sbrk_r+0x20>)
 8004ace:	0004      	movs	r4, r0
 8004ad0:	0008      	movs	r0, r1
 8004ad2:	602b      	str	r3, [r5, #0]
 8004ad4:	f7fc fe8a 	bl	80017ec <_sbrk>
 8004ad8:	1c43      	adds	r3, r0, #1
 8004ada:	d103      	bne.n	8004ae4 <_sbrk_r+0x1c>
 8004adc:	682b      	ldr	r3, [r5, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d000      	beq.n	8004ae4 <_sbrk_r+0x1c>
 8004ae2:	6023      	str	r3, [r4, #0]
 8004ae4:	bd70      	pop	{r4, r5, r6, pc}
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	20000220 	.word	0x20000220

08004aec <__swbuf_r>:
 8004aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aee:	0005      	movs	r5, r0
 8004af0:	000e      	movs	r6, r1
 8004af2:	0014      	movs	r4, r2
 8004af4:	2800      	cmp	r0, #0
 8004af6:	d004      	beq.n	8004b02 <__swbuf_r+0x16>
 8004af8:	6983      	ldr	r3, [r0, #24]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <__swbuf_r+0x16>
 8004afe:	f000 f9f1 	bl	8004ee4 <__sinit>
 8004b02:	4b22      	ldr	r3, [pc, #136]	; (8004b8c <__swbuf_r+0xa0>)
 8004b04:	429c      	cmp	r4, r3
 8004b06:	d12e      	bne.n	8004b66 <__swbuf_r+0x7a>
 8004b08:	686c      	ldr	r4, [r5, #4]
 8004b0a:	69a3      	ldr	r3, [r4, #24]
 8004b0c:	60a3      	str	r3, [r4, #8]
 8004b0e:	89a3      	ldrh	r3, [r4, #12]
 8004b10:	071b      	lsls	r3, r3, #28
 8004b12:	d532      	bpl.n	8004b7a <__swbuf_r+0x8e>
 8004b14:	6923      	ldr	r3, [r4, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d02f      	beq.n	8004b7a <__swbuf_r+0x8e>
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	6922      	ldr	r2, [r4, #16]
 8004b1e:	b2f7      	uxtb	r7, r6
 8004b20:	1a98      	subs	r0, r3, r2
 8004b22:	6963      	ldr	r3, [r4, #20]
 8004b24:	b2f6      	uxtb	r6, r6
 8004b26:	4283      	cmp	r3, r0
 8004b28:	dc05      	bgt.n	8004b36 <__swbuf_r+0x4a>
 8004b2a:	0021      	movs	r1, r4
 8004b2c:	0028      	movs	r0, r5
 8004b2e:	f000 f937 	bl	8004da0 <_fflush_r>
 8004b32:	2800      	cmp	r0, #0
 8004b34:	d127      	bne.n	8004b86 <__swbuf_r+0x9a>
 8004b36:	68a3      	ldr	r3, [r4, #8]
 8004b38:	3001      	adds	r0, #1
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	60a3      	str	r3, [r4, #8]
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	6022      	str	r2, [r4, #0]
 8004b44:	701f      	strb	r7, [r3, #0]
 8004b46:	6963      	ldr	r3, [r4, #20]
 8004b48:	4283      	cmp	r3, r0
 8004b4a:	d004      	beq.n	8004b56 <__swbuf_r+0x6a>
 8004b4c:	89a3      	ldrh	r3, [r4, #12]
 8004b4e:	07db      	lsls	r3, r3, #31
 8004b50:	d507      	bpl.n	8004b62 <__swbuf_r+0x76>
 8004b52:	2e0a      	cmp	r6, #10
 8004b54:	d105      	bne.n	8004b62 <__swbuf_r+0x76>
 8004b56:	0021      	movs	r1, r4
 8004b58:	0028      	movs	r0, r5
 8004b5a:	f000 f921 	bl	8004da0 <_fflush_r>
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d111      	bne.n	8004b86 <__swbuf_r+0x9a>
 8004b62:	0030      	movs	r0, r6
 8004b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b66:	4b0a      	ldr	r3, [pc, #40]	; (8004b90 <__swbuf_r+0xa4>)
 8004b68:	429c      	cmp	r4, r3
 8004b6a:	d101      	bne.n	8004b70 <__swbuf_r+0x84>
 8004b6c:	68ac      	ldr	r4, [r5, #8]
 8004b6e:	e7cc      	b.n	8004b0a <__swbuf_r+0x1e>
 8004b70:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <__swbuf_r+0xa8>)
 8004b72:	429c      	cmp	r4, r3
 8004b74:	d1c9      	bne.n	8004b0a <__swbuf_r+0x1e>
 8004b76:	68ec      	ldr	r4, [r5, #12]
 8004b78:	e7c7      	b.n	8004b0a <__swbuf_r+0x1e>
 8004b7a:	0021      	movs	r1, r4
 8004b7c:	0028      	movs	r0, r5
 8004b7e:	f000 f80b 	bl	8004b98 <__swsetup_r>
 8004b82:	2800      	cmp	r0, #0
 8004b84:	d0c9      	beq.n	8004b1a <__swbuf_r+0x2e>
 8004b86:	2601      	movs	r6, #1
 8004b88:	4276      	negs	r6, r6
 8004b8a:	e7ea      	b.n	8004b62 <__swbuf_r+0x76>
 8004b8c:	08005958 	.word	0x08005958
 8004b90:	08005978 	.word	0x08005978
 8004b94:	08005938 	.word	0x08005938

08004b98 <__swsetup_r>:
 8004b98:	4b37      	ldr	r3, [pc, #220]	; (8004c78 <__swsetup_r+0xe0>)
 8004b9a:	b570      	push	{r4, r5, r6, lr}
 8004b9c:	681d      	ldr	r5, [r3, #0]
 8004b9e:	0006      	movs	r6, r0
 8004ba0:	000c      	movs	r4, r1
 8004ba2:	2d00      	cmp	r5, #0
 8004ba4:	d005      	beq.n	8004bb2 <__swsetup_r+0x1a>
 8004ba6:	69ab      	ldr	r3, [r5, #24]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d102      	bne.n	8004bb2 <__swsetup_r+0x1a>
 8004bac:	0028      	movs	r0, r5
 8004bae:	f000 f999 	bl	8004ee4 <__sinit>
 8004bb2:	4b32      	ldr	r3, [pc, #200]	; (8004c7c <__swsetup_r+0xe4>)
 8004bb4:	429c      	cmp	r4, r3
 8004bb6:	d10f      	bne.n	8004bd8 <__swsetup_r+0x40>
 8004bb8:	686c      	ldr	r4, [r5, #4]
 8004bba:	230c      	movs	r3, #12
 8004bbc:	5ee2      	ldrsh	r2, [r4, r3]
 8004bbe:	b293      	uxth	r3, r2
 8004bc0:	0711      	lsls	r1, r2, #28
 8004bc2:	d42d      	bmi.n	8004c20 <__swsetup_r+0x88>
 8004bc4:	06d9      	lsls	r1, r3, #27
 8004bc6:	d411      	bmi.n	8004bec <__swsetup_r+0x54>
 8004bc8:	2309      	movs	r3, #9
 8004bca:	2001      	movs	r0, #1
 8004bcc:	6033      	str	r3, [r6, #0]
 8004bce:	3337      	adds	r3, #55	; 0x37
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	81a3      	strh	r3, [r4, #12]
 8004bd4:	4240      	negs	r0, r0
 8004bd6:	bd70      	pop	{r4, r5, r6, pc}
 8004bd8:	4b29      	ldr	r3, [pc, #164]	; (8004c80 <__swsetup_r+0xe8>)
 8004bda:	429c      	cmp	r4, r3
 8004bdc:	d101      	bne.n	8004be2 <__swsetup_r+0x4a>
 8004bde:	68ac      	ldr	r4, [r5, #8]
 8004be0:	e7eb      	b.n	8004bba <__swsetup_r+0x22>
 8004be2:	4b28      	ldr	r3, [pc, #160]	; (8004c84 <__swsetup_r+0xec>)
 8004be4:	429c      	cmp	r4, r3
 8004be6:	d1e8      	bne.n	8004bba <__swsetup_r+0x22>
 8004be8:	68ec      	ldr	r4, [r5, #12]
 8004bea:	e7e6      	b.n	8004bba <__swsetup_r+0x22>
 8004bec:	075b      	lsls	r3, r3, #29
 8004bee:	d513      	bpl.n	8004c18 <__swsetup_r+0x80>
 8004bf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bf2:	2900      	cmp	r1, #0
 8004bf4:	d008      	beq.n	8004c08 <__swsetup_r+0x70>
 8004bf6:	0023      	movs	r3, r4
 8004bf8:	3344      	adds	r3, #68	; 0x44
 8004bfa:	4299      	cmp	r1, r3
 8004bfc:	d002      	beq.n	8004c04 <__swsetup_r+0x6c>
 8004bfe:	0030      	movs	r0, r6
 8004c00:	f7ff fe04 	bl	800480c <_free_r>
 8004c04:	2300      	movs	r3, #0
 8004c06:	6363      	str	r3, [r4, #52]	; 0x34
 8004c08:	2224      	movs	r2, #36	; 0x24
 8004c0a:	89a3      	ldrh	r3, [r4, #12]
 8004c0c:	4393      	bics	r3, r2
 8004c0e:	81a3      	strh	r3, [r4, #12]
 8004c10:	2300      	movs	r3, #0
 8004c12:	6063      	str	r3, [r4, #4]
 8004c14:	6923      	ldr	r3, [r4, #16]
 8004c16:	6023      	str	r3, [r4, #0]
 8004c18:	2308      	movs	r3, #8
 8004c1a:	89a2      	ldrh	r2, [r4, #12]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	81a3      	strh	r3, [r4, #12]
 8004c20:	6923      	ldr	r3, [r4, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10b      	bne.n	8004c3e <__swsetup_r+0xa6>
 8004c26:	21a0      	movs	r1, #160	; 0xa0
 8004c28:	2280      	movs	r2, #128	; 0x80
 8004c2a:	89a3      	ldrh	r3, [r4, #12]
 8004c2c:	0089      	lsls	r1, r1, #2
 8004c2e:	0092      	lsls	r2, r2, #2
 8004c30:	400b      	ands	r3, r1
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d003      	beq.n	8004c3e <__swsetup_r+0xa6>
 8004c36:	0021      	movs	r1, r4
 8004c38:	0030      	movs	r0, r6
 8004c3a:	f000 fa1f 	bl	800507c <__smakebuf_r>
 8004c3e:	220c      	movs	r2, #12
 8004c40:	5ea3      	ldrsh	r3, [r4, r2]
 8004c42:	2001      	movs	r0, #1
 8004c44:	001a      	movs	r2, r3
 8004c46:	b299      	uxth	r1, r3
 8004c48:	4002      	ands	r2, r0
 8004c4a:	4203      	tst	r3, r0
 8004c4c:	d00f      	beq.n	8004c6e <__swsetup_r+0xd6>
 8004c4e:	2200      	movs	r2, #0
 8004c50:	60a2      	str	r2, [r4, #8]
 8004c52:	6962      	ldr	r2, [r4, #20]
 8004c54:	4252      	negs	r2, r2
 8004c56:	61a2      	str	r2, [r4, #24]
 8004c58:	2000      	movs	r0, #0
 8004c5a:	6922      	ldr	r2, [r4, #16]
 8004c5c:	4282      	cmp	r2, r0
 8004c5e:	d1ba      	bne.n	8004bd6 <__swsetup_r+0x3e>
 8004c60:	060a      	lsls	r2, r1, #24
 8004c62:	d5b8      	bpl.n	8004bd6 <__swsetup_r+0x3e>
 8004c64:	2240      	movs	r2, #64	; 0x40
 8004c66:	4313      	orrs	r3, r2
 8004c68:	81a3      	strh	r3, [r4, #12]
 8004c6a:	3801      	subs	r0, #1
 8004c6c:	e7b3      	b.n	8004bd6 <__swsetup_r+0x3e>
 8004c6e:	0788      	lsls	r0, r1, #30
 8004c70:	d400      	bmi.n	8004c74 <__swsetup_r+0xdc>
 8004c72:	6962      	ldr	r2, [r4, #20]
 8004c74:	60a2      	str	r2, [r4, #8]
 8004c76:	e7ef      	b.n	8004c58 <__swsetup_r+0xc0>
 8004c78:	2000000c 	.word	0x2000000c
 8004c7c:	08005958 	.word	0x08005958
 8004c80:	08005978 	.word	0x08005978
 8004c84:	08005938 	.word	0x08005938

08004c88 <__sflush_r>:
 8004c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c8a:	898b      	ldrh	r3, [r1, #12]
 8004c8c:	0005      	movs	r5, r0
 8004c8e:	000c      	movs	r4, r1
 8004c90:	071a      	lsls	r2, r3, #28
 8004c92:	d45f      	bmi.n	8004d54 <__sflush_r+0xcc>
 8004c94:	684a      	ldr	r2, [r1, #4]
 8004c96:	2a00      	cmp	r2, #0
 8004c98:	dc04      	bgt.n	8004ca4 <__sflush_r+0x1c>
 8004c9a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004c9c:	2a00      	cmp	r2, #0
 8004c9e:	dc01      	bgt.n	8004ca4 <__sflush_r+0x1c>
 8004ca0:	2000      	movs	r0, #0
 8004ca2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ca4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004ca6:	2f00      	cmp	r7, #0
 8004ca8:	d0fa      	beq.n	8004ca0 <__sflush_r+0x18>
 8004caa:	2200      	movs	r2, #0
 8004cac:	2180      	movs	r1, #128	; 0x80
 8004cae:	682e      	ldr	r6, [r5, #0]
 8004cb0:	602a      	str	r2, [r5, #0]
 8004cb2:	001a      	movs	r2, r3
 8004cb4:	0149      	lsls	r1, r1, #5
 8004cb6:	400a      	ands	r2, r1
 8004cb8:	420b      	tst	r3, r1
 8004cba:	d034      	beq.n	8004d26 <__sflush_r+0x9e>
 8004cbc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cbe:	89a3      	ldrh	r3, [r4, #12]
 8004cc0:	075b      	lsls	r3, r3, #29
 8004cc2:	d506      	bpl.n	8004cd2 <__sflush_r+0x4a>
 8004cc4:	6863      	ldr	r3, [r4, #4]
 8004cc6:	1ac0      	subs	r0, r0, r3
 8004cc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <__sflush_r+0x4a>
 8004cce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cd0:	1ac0      	subs	r0, r0, r3
 8004cd2:	0002      	movs	r2, r0
 8004cd4:	6a21      	ldr	r1, [r4, #32]
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	0028      	movs	r0, r5
 8004cda:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004cdc:	47b8      	blx	r7
 8004cde:	89a1      	ldrh	r1, [r4, #12]
 8004ce0:	1c43      	adds	r3, r0, #1
 8004ce2:	d106      	bne.n	8004cf2 <__sflush_r+0x6a>
 8004ce4:	682b      	ldr	r3, [r5, #0]
 8004ce6:	2b1d      	cmp	r3, #29
 8004ce8:	d831      	bhi.n	8004d4e <__sflush_r+0xc6>
 8004cea:	4a2c      	ldr	r2, [pc, #176]	; (8004d9c <__sflush_r+0x114>)
 8004cec:	40da      	lsrs	r2, r3
 8004cee:	07d3      	lsls	r3, r2, #31
 8004cf0:	d52d      	bpl.n	8004d4e <__sflush_r+0xc6>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	6063      	str	r3, [r4, #4]
 8004cf6:	6923      	ldr	r3, [r4, #16]
 8004cf8:	6023      	str	r3, [r4, #0]
 8004cfa:	04cb      	lsls	r3, r1, #19
 8004cfc:	d505      	bpl.n	8004d0a <__sflush_r+0x82>
 8004cfe:	1c43      	adds	r3, r0, #1
 8004d00:	d102      	bne.n	8004d08 <__sflush_r+0x80>
 8004d02:	682b      	ldr	r3, [r5, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d100      	bne.n	8004d0a <__sflush_r+0x82>
 8004d08:	6560      	str	r0, [r4, #84]	; 0x54
 8004d0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d0c:	602e      	str	r6, [r5, #0]
 8004d0e:	2900      	cmp	r1, #0
 8004d10:	d0c6      	beq.n	8004ca0 <__sflush_r+0x18>
 8004d12:	0023      	movs	r3, r4
 8004d14:	3344      	adds	r3, #68	; 0x44
 8004d16:	4299      	cmp	r1, r3
 8004d18:	d002      	beq.n	8004d20 <__sflush_r+0x98>
 8004d1a:	0028      	movs	r0, r5
 8004d1c:	f7ff fd76 	bl	800480c <_free_r>
 8004d20:	2000      	movs	r0, #0
 8004d22:	6360      	str	r0, [r4, #52]	; 0x34
 8004d24:	e7bd      	b.n	8004ca2 <__sflush_r+0x1a>
 8004d26:	2301      	movs	r3, #1
 8004d28:	0028      	movs	r0, r5
 8004d2a:	6a21      	ldr	r1, [r4, #32]
 8004d2c:	47b8      	blx	r7
 8004d2e:	1c43      	adds	r3, r0, #1
 8004d30:	d1c5      	bne.n	8004cbe <__sflush_r+0x36>
 8004d32:	682b      	ldr	r3, [r5, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0c2      	beq.n	8004cbe <__sflush_r+0x36>
 8004d38:	2b1d      	cmp	r3, #29
 8004d3a:	d001      	beq.n	8004d40 <__sflush_r+0xb8>
 8004d3c:	2b16      	cmp	r3, #22
 8004d3e:	d101      	bne.n	8004d44 <__sflush_r+0xbc>
 8004d40:	602e      	str	r6, [r5, #0]
 8004d42:	e7ad      	b.n	8004ca0 <__sflush_r+0x18>
 8004d44:	2340      	movs	r3, #64	; 0x40
 8004d46:	89a2      	ldrh	r2, [r4, #12]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	81a3      	strh	r3, [r4, #12]
 8004d4c:	e7a9      	b.n	8004ca2 <__sflush_r+0x1a>
 8004d4e:	2340      	movs	r3, #64	; 0x40
 8004d50:	430b      	orrs	r3, r1
 8004d52:	e7fa      	b.n	8004d4a <__sflush_r+0xc2>
 8004d54:	690f      	ldr	r7, [r1, #16]
 8004d56:	2f00      	cmp	r7, #0
 8004d58:	d0a2      	beq.n	8004ca0 <__sflush_r+0x18>
 8004d5a:	680a      	ldr	r2, [r1, #0]
 8004d5c:	600f      	str	r7, [r1, #0]
 8004d5e:	1bd2      	subs	r2, r2, r7
 8004d60:	9201      	str	r2, [sp, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	079b      	lsls	r3, r3, #30
 8004d66:	d100      	bne.n	8004d6a <__sflush_r+0xe2>
 8004d68:	694a      	ldr	r2, [r1, #20]
 8004d6a:	60a2      	str	r2, [r4, #8]
 8004d6c:	9b01      	ldr	r3, [sp, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	dc00      	bgt.n	8004d74 <__sflush_r+0xec>
 8004d72:	e795      	b.n	8004ca0 <__sflush_r+0x18>
 8004d74:	003a      	movs	r2, r7
 8004d76:	0028      	movs	r0, r5
 8004d78:	9b01      	ldr	r3, [sp, #4]
 8004d7a:	6a21      	ldr	r1, [r4, #32]
 8004d7c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d7e:	47b0      	blx	r6
 8004d80:	2800      	cmp	r0, #0
 8004d82:	dc06      	bgt.n	8004d92 <__sflush_r+0x10a>
 8004d84:	2340      	movs	r3, #64	; 0x40
 8004d86:	2001      	movs	r0, #1
 8004d88:	89a2      	ldrh	r2, [r4, #12]
 8004d8a:	4240      	negs	r0, r0
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	81a3      	strh	r3, [r4, #12]
 8004d90:	e787      	b.n	8004ca2 <__sflush_r+0x1a>
 8004d92:	9b01      	ldr	r3, [sp, #4]
 8004d94:	183f      	adds	r7, r7, r0
 8004d96:	1a1b      	subs	r3, r3, r0
 8004d98:	9301      	str	r3, [sp, #4]
 8004d9a:	e7e7      	b.n	8004d6c <__sflush_r+0xe4>
 8004d9c:	20400001 	.word	0x20400001

08004da0 <_fflush_r>:
 8004da0:	690b      	ldr	r3, [r1, #16]
 8004da2:	b570      	push	{r4, r5, r6, lr}
 8004da4:	0005      	movs	r5, r0
 8004da6:	000c      	movs	r4, r1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d102      	bne.n	8004db2 <_fflush_r+0x12>
 8004dac:	2500      	movs	r5, #0
 8004dae:	0028      	movs	r0, r5
 8004db0:	bd70      	pop	{r4, r5, r6, pc}
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d004      	beq.n	8004dc0 <_fflush_r+0x20>
 8004db6:	6983      	ldr	r3, [r0, #24]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <_fflush_r+0x20>
 8004dbc:	f000 f892 	bl	8004ee4 <__sinit>
 8004dc0:	4b14      	ldr	r3, [pc, #80]	; (8004e14 <_fflush_r+0x74>)
 8004dc2:	429c      	cmp	r4, r3
 8004dc4:	d11b      	bne.n	8004dfe <_fflush_r+0x5e>
 8004dc6:	686c      	ldr	r4, [r5, #4]
 8004dc8:	220c      	movs	r2, #12
 8004dca:	5ea3      	ldrsh	r3, [r4, r2]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0ed      	beq.n	8004dac <_fflush_r+0xc>
 8004dd0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004dd2:	07d2      	lsls	r2, r2, #31
 8004dd4:	d404      	bmi.n	8004de0 <_fflush_r+0x40>
 8004dd6:	059b      	lsls	r3, r3, #22
 8004dd8:	d402      	bmi.n	8004de0 <_fflush_r+0x40>
 8004dda:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ddc:	f000 f923 	bl	8005026 <__retarget_lock_acquire_recursive>
 8004de0:	0028      	movs	r0, r5
 8004de2:	0021      	movs	r1, r4
 8004de4:	f7ff ff50 	bl	8004c88 <__sflush_r>
 8004de8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dea:	0005      	movs	r5, r0
 8004dec:	07db      	lsls	r3, r3, #31
 8004dee:	d4de      	bmi.n	8004dae <_fflush_r+0xe>
 8004df0:	89a3      	ldrh	r3, [r4, #12]
 8004df2:	059b      	lsls	r3, r3, #22
 8004df4:	d4db      	bmi.n	8004dae <_fflush_r+0xe>
 8004df6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004df8:	f000 f916 	bl	8005028 <__retarget_lock_release_recursive>
 8004dfc:	e7d7      	b.n	8004dae <_fflush_r+0xe>
 8004dfe:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <_fflush_r+0x78>)
 8004e00:	429c      	cmp	r4, r3
 8004e02:	d101      	bne.n	8004e08 <_fflush_r+0x68>
 8004e04:	68ac      	ldr	r4, [r5, #8]
 8004e06:	e7df      	b.n	8004dc8 <_fflush_r+0x28>
 8004e08:	4b04      	ldr	r3, [pc, #16]	; (8004e1c <_fflush_r+0x7c>)
 8004e0a:	429c      	cmp	r4, r3
 8004e0c:	d1dc      	bne.n	8004dc8 <_fflush_r+0x28>
 8004e0e:	68ec      	ldr	r4, [r5, #12]
 8004e10:	e7da      	b.n	8004dc8 <_fflush_r+0x28>
 8004e12:	46c0      	nop			; (mov r8, r8)
 8004e14:	08005958 	.word	0x08005958
 8004e18:	08005978 	.word	0x08005978
 8004e1c:	08005938 	.word	0x08005938

08004e20 <std>:
 8004e20:	2300      	movs	r3, #0
 8004e22:	b510      	push	{r4, lr}
 8004e24:	0004      	movs	r4, r0
 8004e26:	6003      	str	r3, [r0, #0]
 8004e28:	6043      	str	r3, [r0, #4]
 8004e2a:	6083      	str	r3, [r0, #8]
 8004e2c:	8181      	strh	r1, [r0, #12]
 8004e2e:	6643      	str	r3, [r0, #100]	; 0x64
 8004e30:	0019      	movs	r1, r3
 8004e32:	81c2      	strh	r2, [r0, #14]
 8004e34:	6103      	str	r3, [r0, #16]
 8004e36:	6143      	str	r3, [r0, #20]
 8004e38:	6183      	str	r3, [r0, #24]
 8004e3a:	2208      	movs	r2, #8
 8004e3c:	305c      	adds	r0, #92	; 0x5c
 8004e3e:	f7ff fcdc 	bl	80047fa <memset>
 8004e42:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <std+0x38>)
 8004e44:	6224      	str	r4, [r4, #32]
 8004e46:	6263      	str	r3, [r4, #36]	; 0x24
 8004e48:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <std+0x3c>)
 8004e4a:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e4c:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <std+0x40>)
 8004e4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e50:	4b04      	ldr	r3, [pc, #16]	; (8004e64 <std+0x44>)
 8004e52:	6323      	str	r3, [r4, #48]	; 0x30
 8004e54:	bd10      	pop	{r4, pc}
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	08005125 	.word	0x08005125
 8004e5c:	0800514d 	.word	0x0800514d
 8004e60:	08005185 	.word	0x08005185
 8004e64:	080051b1 	.word	0x080051b1

08004e68 <_cleanup_r>:
 8004e68:	b510      	push	{r4, lr}
 8004e6a:	4902      	ldr	r1, [pc, #8]	; (8004e74 <_cleanup_r+0xc>)
 8004e6c:	f000 f8ba 	bl	8004fe4 <_fwalk_reent>
 8004e70:	bd10      	pop	{r4, pc}
 8004e72:	46c0      	nop			; (mov r8, r8)
 8004e74:	08004da1 	.word	0x08004da1

08004e78 <__sfmoreglue>:
 8004e78:	b570      	push	{r4, r5, r6, lr}
 8004e7a:	2568      	movs	r5, #104	; 0x68
 8004e7c:	1e4a      	subs	r2, r1, #1
 8004e7e:	4355      	muls	r5, r2
 8004e80:	000e      	movs	r6, r1
 8004e82:	0029      	movs	r1, r5
 8004e84:	3174      	adds	r1, #116	; 0x74
 8004e86:	f7ff fd2d 	bl	80048e4 <_malloc_r>
 8004e8a:	1e04      	subs	r4, r0, #0
 8004e8c:	d008      	beq.n	8004ea0 <__sfmoreglue+0x28>
 8004e8e:	2100      	movs	r1, #0
 8004e90:	002a      	movs	r2, r5
 8004e92:	6001      	str	r1, [r0, #0]
 8004e94:	6046      	str	r6, [r0, #4]
 8004e96:	300c      	adds	r0, #12
 8004e98:	60a0      	str	r0, [r4, #8]
 8004e9a:	3268      	adds	r2, #104	; 0x68
 8004e9c:	f7ff fcad 	bl	80047fa <memset>
 8004ea0:	0020      	movs	r0, r4
 8004ea2:	bd70      	pop	{r4, r5, r6, pc}

08004ea4 <__sfp_lock_acquire>:
 8004ea4:	b510      	push	{r4, lr}
 8004ea6:	4802      	ldr	r0, [pc, #8]	; (8004eb0 <__sfp_lock_acquire+0xc>)
 8004ea8:	f000 f8bd 	bl	8005026 <__retarget_lock_acquire_recursive>
 8004eac:	bd10      	pop	{r4, pc}
 8004eae:	46c0      	nop			; (mov r8, r8)
 8004eb0:	2000021d 	.word	0x2000021d

08004eb4 <__sfp_lock_release>:
 8004eb4:	b510      	push	{r4, lr}
 8004eb6:	4802      	ldr	r0, [pc, #8]	; (8004ec0 <__sfp_lock_release+0xc>)
 8004eb8:	f000 f8b6 	bl	8005028 <__retarget_lock_release_recursive>
 8004ebc:	bd10      	pop	{r4, pc}
 8004ebe:	46c0      	nop			; (mov r8, r8)
 8004ec0:	2000021d 	.word	0x2000021d

08004ec4 <__sinit_lock_acquire>:
 8004ec4:	b510      	push	{r4, lr}
 8004ec6:	4802      	ldr	r0, [pc, #8]	; (8004ed0 <__sinit_lock_acquire+0xc>)
 8004ec8:	f000 f8ad 	bl	8005026 <__retarget_lock_acquire_recursive>
 8004ecc:	bd10      	pop	{r4, pc}
 8004ece:	46c0      	nop			; (mov r8, r8)
 8004ed0:	2000021e 	.word	0x2000021e

08004ed4 <__sinit_lock_release>:
 8004ed4:	b510      	push	{r4, lr}
 8004ed6:	4802      	ldr	r0, [pc, #8]	; (8004ee0 <__sinit_lock_release+0xc>)
 8004ed8:	f000 f8a6 	bl	8005028 <__retarget_lock_release_recursive>
 8004edc:	bd10      	pop	{r4, pc}
 8004ede:	46c0      	nop			; (mov r8, r8)
 8004ee0:	2000021e 	.word	0x2000021e

08004ee4 <__sinit>:
 8004ee4:	b513      	push	{r0, r1, r4, lr}
 8004ee6:	0004      	movs	r4, r0
 8004ee8:	f7ff ffec 	bl	8004ec4 <__sinit_lock_acquire>
 8004eec:	69a3      	ldr	r3, [r4, #24]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <__sinit+0x14>
 8004ef2:	f7ff ffef 	bl	8004ed4 <__sinit_lock_release>
 8004ef6:	bd13      	pop	{r0, r1, r4, pc}
 8004ef8:	64a3      	str	r3, [r4, #72]	; 0x48
 8004efa:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004efc:	6523      	str	r3, [r4, #80]	; 0x50
 8004efe:	4b13      	ldr	r3, [pc, #76]	; (8004f4c <__sinit+0x68>)
 8004f00:	4a13      	ldr	r2, [pc, #76]	; (8004f50 <__sinit+0x6c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f06:	9301      	str	r3, [sp, #4]
 8004f08:	42a3      	cmp	r3, r4
 8004f0a:	d101      	bne.n	8004f10 <__sinit+0x2c>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	61a3      	str	r3, [r4, #24]
 8004f10:	0020      	movs	r0, r4
 8004f12:	f000 f81f 	bl	8004f54 <__sfp>
 8004f16:	6060      	str	r0, [r4, #4]
 8004f18:	0020      	movs	r0, r4
 8004f1a:	f000 f81b 	bl	8004f54 <__sfp>
 8004f1e:	60a0      	str	r0, [r4, #8]
 8004f20:	0020      	movs	r0, r4
 8004f22:	f000 f817 	bl	8004f54 <__sfp>
 8004f26:	2200      	movs	r2, #0
 8004f28:	2104      	movs	r1, #4
 8004f2a:	60e0      	str	r0, [r4, #12]
 8004f2c:	6860      	ldr	r0, [r4, #4]
 8004f2e:	f7ff ff77 	bl	8004e20 <std>
 8004f32:	2201      	movs	r2, #1
 8004f34:	2109      	movs	r1, #9
 8004f36:	68a0      	ldr	r0, [r4, #8]
 8004f38:	f7ff ff72 	bl	8004e20 <std>
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	2112      	movs	r1, #18
 8004f40:	68e0      	ldr	r0, [r4, #12]
 8004f42:	f7ff ff6d 	bl	8004e20 <std>
 8004f46:	2301      	movs	r3, #1
 8004f48:	61a3      	str	r3, [r4, #24]
 8004f4a:	e7d2      	b.n	8004ef2 <__sinit+0xe>
 8004f4c:	08005934 	.word	0x08005934
 8004f50:	08004e69 	.word	0x08004e69

08004f54 <__sfp>:
 8004f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f56:	0007      	movs	r7, r0
 8004f58:	f7ff ffa4 	bl	8004ea4 <__sfp_lock_acquire>
 8004f5c:	4b1f      	ldr	r3, [pc, #124]	; (8004fdc <__sfp+0x88>)
 8004f5e:	681e      	ldr	r6, [r3, #0]
 8004f60:	69b3      	ldr	r3, [r6, #24]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d102      	bne.n	8004f6c <__sfp+0x18>
 8004f66:	0030      	movs	r0, r6
 8004f68:	f7ff ffbc 	bl	8004ee4 <__sinit>
 8004f6c:	3648      	adds	r6, #72	; 0x48
 8004f6e:	68b4      	ldr	r4, [r6, #8]
 8004f70:	6873      	ldr	r3, [r6, #4]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	d504      	bpl.n	8004f80 <__sfp+0x2c>
 8004f76:	6833      	ldr	r3, [r6, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d022      	beq.n	8004fc2 <__sfp+0x6e>
 8004f7c:	6836      	ldr	r6, [r6, #0]
 8004f7e:	e7f6      	b.n	8004f6e <__sfp+0x1a>
 8004f80:	220c      	movs	r2, #12
 8004f82:	5ea5      	ldrsh	r5, [r4, r2]
 8004f84:	2d00      	cmp	r5, #0
 8004f86:	d11a      	bne.n	8004fbe <__sfp+0x6a>
 8004f88:	0020      	movs	r0, r4
 8004f8a:	4b15      	ldr	r3, [pc, #84]	; (8004fe0 <__sfp+0x8c>)
 8004f8c:	3058      	adds	r0, #88	; 0x58
 8004f8e:	60e3      	str	r3, [r4, #12]
 8004f90:	6665      	str	r5, [r4, #100]	; 0x64
 8004f92:	f000 f847 	bl	8005024 <__retarget_lock_init_recursive>
 8004f96:	f7ff ff8d 	bl	8004eb4 <__sfp_lock_release>
 8004f9a:	0020      	movs	r0, r4
 8004f9c:	2208      	movs	r2, #8
 8004f9e:	0029      	movs	r1, r5
 8004fa0:	6025      	str	r5, [r4, #0]
 8004fa2:	60a5      	str	r5, [r4, #8]
 8004fa4:	6065      	str	r5, [r4, #4]
 8004fa6:	6125      	str	r5, [r4, #16]
 8004fa8:	6165      	str	r5, [r4, #20]
 8004faa:	61a5      	str	r5, [r4, #24]
 8004fac:	305c      	adds	r0, #92	; 0x5c
 8004fae:	f7ff fc24 	bl	80047fa <memset>
 8004fb2:	6365      	str	r5, [r4, #52]	; 0x34
 8004fb4:	63a5      	str	r5, [r4, #56]	; 0x38
 8004fb6:	64a5      	str	r5, [r4, #72]	; 0x48
 8004fb8:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004fba:	0020      	movs	r0, r4
 8004fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fbe:	3468      	adds	r4, #104	; 0x68
 8004fc0:	e7d7      	b.n	8004f72 <__sfp+0x1e>
 8004fc2:	2104      	movs	r1, #4
 8004fc4:	0038      	movs	r0, r7
 8004fc6:	f7ff ff57 	bl	8004e78 <__sfmoreglue>
 8004fca:	1e04      	subs	r4, r0, #0
 8004fcc:	6030      	str	r0, [r6, #0]
 8004fce:	d1d5      	bne.n	8004f7c <__sfp+0x28>
 8004fd0:	f7ff ff70 	bl	8004eb4 <__sfp_lock_release>
 8004fd4:	230c      	movs	r3, #12
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	e7ef      	b.n	8004fba <__sfp+0x66>
 8004fda:	46c0      	nop			; (mov r8, r8)
 8004fdc:	08005934 	.word	0x08005934
 8004fe0:	ffff0001 	.word	0xffff0001

08004fe4 <_fwalk_reent>:
 8004fe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fe6:	0004      	movs	r4, r0
 8004fe8:	0006      	movs	r6, r0
 8004fea:	2700      	movs	r7, #0
 8004fec:	9101      	str	r1, [sp, #4]
 8004fee:	3448      	adds	r4, #72	; 0x48
 8004ff0:	6863      	ldr	r3, [r4, #4]
 8004ff2:	68a5      	ldr	r5, [r4, #8]
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	9b00      	ldr	r3, [sp, #0]
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	d504      	bpl.n	8005008 <_fwalk_reent+0x24>
 8004ffe:	6824      	ldr	r4, [r4, #0]
 8005000:	2c00      	cmp	r4, #0
 8005002:	d1f5      	bne.n	8004ff0 <_fwalk_reent+0xc>
 8005004:	0038      	movs	r0, r7
 8005006:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005008:	89ab      	ldrh	r3, [r5, #12]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d908      	bls.n	8005020 <_fwalk_reent+0x3c>
 800500e:	220e      	movs	r2, #14
 8005010:	5eab      	ldrsh	r3, [r5, r2]
 8005012:	3301      	adds	r3, #1
 8005014:	d004      	beq.n	8005020 <_fwalk_reent+0x3c>
 8005016:	0029      	movs	r1, r5
 8005018:	0030      	movs	r0, r6
 800501a:	9b01      	ldr	r3, [sp, #4]
 800501c:	4798      	blx	r3
 800501e:	4307      	orrs	r7, r0
 8005020:	3568      	adds	r5, #104	; 0x68
 8005022:	e7e8      	b.n	8004ff6 <_fwalk_reent+0x12>

08005024 <__retarget_lock_init_recursive>:
 8005024:	4770      	bx	lr

08005026 <__retarget_lock_acquire_recursive>:
 8005026:	4770      	bx	lr

08005028 <__retarget_lock_release_recursive>:
 8005028:	4770      	bx	lr
	...

0800502c <__swhatbuf_r>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	000e      	movs	r6, r1
 8005030:	001d      	movs	r5, r3
 8005032:	230e      	movs	r3, #14
 8005034:	5ec9      	ldrsh	r1, [r1, r3]
 8005036:	0014      	movs	r4, r2
 8005038:	b096      	sub	sp, #88	; 0x58
 800503a:	2900      	cmp	r1, #0
 800503c:	da08      	bge.n	8005050 <__swhatbuf_r+0x24>
 800503e:	220c      	movs	r2, #12
 8005040:	5eb3      	ldrsh	r3, [r6, r2]
 8005042:	2200      	movs	r2, #0
 8005044:	602a      	str	r2, [r5, #0]
 8005046:	061b      	lsls	r3, r3, #24
 8005048:	d411      	bmi.n	800506e <__swhatbuf_r+0x42>
 800504a:	2380      	movs	r3, #128	; 0x80
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	e00f      	b.n	8005070 <__swhatbuf_r+0x44>
 8005050:	466a      	mov	r2, sp
 8005052:	f000 f8d9 	bl	8005208 <_fstat_r>
 8005056:	2800      	cmp	r0, #0
 8005058:	dbf1      	blt.n	800503e <__swhatbuf_r+0x12>
 800505a:	23f0      	movs	r3, #240	; 0xf0
 800505c:	9901      	ldr	r1, [sp, #4]
 800505e:	021b      	lsls	r3, r3, #8
 8005060:	4019      	ands	r1, r3
 8005062:	4b05      	ldr	r3, [pc, #20]	; (8005078 <__swhatbuf_r+0x4c>)
 8005064:	18c9      	adds	r1, r1, r3
 8005066:	424b      	negs	r3, r1
 8005068:	4159      	adcs	r1, r3
 800506a:	6029      	str	r1, [r5, #0]
 800506c:	e7ed      	b.n	800504a <__swhatbuf_r+0x1e>
 800506e:	2340      	movs	r3, #64	; 0x40
 8005070:	2000      	movs	r0, #0
 8005072:	6023      	str	r3, [r4, #0]
 8005074:	b016      	add	sp, #88	; 0x58
 8005076:	bd70      	pop	{r4, r5, r6, pc}
 8005078:	ffffe000 	.word	0xffffe000

0800507c <__smakebuf_r>:
 800507c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800507e:	2602      	movs	r6, #2
 8005080:	898b      	ldrh	r3, [r1, #12]
 8005082:	0005      	movs	r5, r0
 8005084:	000c      	movs	r4, r1
 8005086:	4233      	tst	r3, r6
 8005088:	d006      	beq.n	8005098 <__smakebuf_r+0x1c>
 800508a:	0023      	movs	r3, r4
 800508c:	3347      	adds	r3, #71	; 0x47
 800508e:	6023      	str	r3, [r4, #0]
 8005090:	6123      	str	r3, [r4, #16]
 8005092:	2301      	movs	r3, #1
 8005094:	6163      	str	r3, [r4, #20]
 8005096:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005098:	466a      	mov	r2, sp
 800509a:	ab01      	add	r3, sp, #4
 800509c:	f7ff ffc6 	bl	800502c <__swhatbuf_r>
 80050a0:	9900      	ldr	r1, [sp, #0]
 80050a2:	0007      	movs	r7, r0
 80050a4:	0028      	movs	r0, r5
 80050a6:	f7ff fc1d 	bl	80048e4 <_malloc_r>
 80050aa:	2800      	cmp	r0, #0
 80050ac:	d108      	bne.n	80050c0 <__smakebuf_r+0x44>
 80050ae:	220c      	movs	r2, #12
 80050b0:	5ea3      	ldrsh	r3, [r4, r2]
 80050b2:	059a      	lsls	r2, r3, #22
 80050b4:	d4ef      	bmi.n	8005096 <__smakebuf_r+0x1a>
 80050b6:	2203      	movs	r2, #3
 80050b8:	4393      	bics	r3, r2
 80050ba:	431e      	orrs	r6, r3
 80050bc:	81a6      	strh	r6, [r4, #12]
 80050be:	e7e4      	b.n	800508a <__smakebuf_r+0xe>
 80050c0:	4b0f      	ldr	r3, [pc, #60]	; (8005100 <__smakebuf_r+0x84>)
 80050c2:	62ab      	str	r3, [r5, #40]	; 0x28
 80050c4:	2380      	movs	r3, #128	; 0x80
 80050c6:	89a2      	ldrh	r2, [r4, #12]
 80050c8:	6020      	str	r0, [r4, #0]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	81a3      	strh	r3, [r4, #12]
 80050ce:	9b00      	ldr	r3, [sp, #0]
 80050d0:	6120      	str	r0, [r4, #16]
 80050d2:	6163      	str	r3, [r4, #20]
 80050d4:	9b01      	ldr	r3, [sp, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00d      	beq.n	80050f6 <__smakebuf_r+0x7a>
 80050da:	0028      	movs	r0, r5
 80050dc:	230e      	movs	r3, #14
 80050de:	5ee1      	ldrsh	r1, [r4, r3]
 80050e0:	f000 f8a4 	bl	800522c <_isatty_r>
 80050e4:	2800      	cmp	r0, #0
 80050e6:	d006      	beq.n	80050f6 <__smakebuf_r+0x7a>
 80050e8:	2203      	movs	r2, #3
 80050ea:	89a3      	ldrh	r3, [r4, #12]
 80050ec:	4393      	bics	r3, r2
 80050ee:	001a      	movs	r2, r3
 80050f0:	2301      	movs	r3, #1
 80050f2:	4313      	orrs	r3, r2
 80050f4:	81a3      	strh	r3, [r4, #12]
 80050f6:	89a0      	ldrh	r0, [r4, #12]
 80050f8:	4307      	orrs	r7, r0
 80050fa:	81a7      	strh	r7, [r4, #12]
 80050fc:	e7cb      	b.n	8005096 <__smakebuf_r+0x1a>
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	08004e69 	.word	0x08004e69

08005104 <__malloc_lock>:
 8005104:	b510      	push	{r4, lr}
 8005106:	4802      	ldr	r0, [pc, #8]	; (8005110 <__malloc_lock+0xc>)
 8005108:	f7ff ff8d 	bl	8005026 <__retarget_lock_acquire_recursive>
 800510c:	bd10      	pop	{r4, pc}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	2000021c 	.word	0x2000021c

08005114 <__malloc_unlock>:
 8005114:	b510      	push	{r4, lr}
 8005116:	4802      	ldr	r0, [pc, #8]	; (8005120 <__malloc_unlock+0xc>)
 8005118:	f7ff ff86 	bl	8005028 <__retarget_lock_release_recursive>
 800511c:	bd10      	pop	{r4, pc}
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	2000021c 	.word	0x2000021c

08005124 <__sread>:
 8005124:	b570      	push	{r4, r5, r6, lr}
 8005126:	000c      	movs	r4, r1
 8005128:	250e      	movs	r5, #14
 800512a:	5f49      	ldrsh	r1, [r1, r5]
 800512c:	f000 f8a4 	bl	8005278 <_read_r>
 8005130:	2800      	cmp	r0, #0
 8005132:	db03      	blt.n	800513c <__sread+0x18>
 8005134:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005136:	181b      	adds	r3, r3, r0
 8005138:	6563      	str	r3, [r4, #84]	; 0x54
 800513a:	bd70      	pop	{r4, r5, r6, pc}
 800513c:	89a3      	ldrh	r3, [r4, #12]
 800513e:	4a02      	ldr	r2, [pc, #8]	; (8005148 <__sread+0x24>)
 8005140:	4013      	ands	r3, r2
 8005142:	81a3      	strh	r3, [r4, #12]
 8005144:	e7f9      	b.n	800513a <__sread+0x16>
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	ffffefff 	.word	0xffffefff

0800514c <__swrite>:
 800514c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514e:	001f      	movs	r7, r3
 8005150:	898b      	ldrh	r3, [r1, #12]
 8005152:	0005      	movs	r5, r0
 8005154:	000c      	movs	r4, r1
 8005156:	0016      	movs	r6, r2
 8005158:	05db      	lsls	r3, r3, #23
 800515a:	d505      	bpl.n	8005168 <__swrite+0x1c>
 800515c:	230e      	movs	r3, #14
 800515e:	5ec9      	ldrsh	r1, [r1, r3]
 8005160:	2200      	movs	r2, #0
 8005162:	2302      	movs	r3, #2
 8005164:	f000 f874 	bl	8005250 <_lseek_r>
 8005168:	89a3      	ldrh	r3, [r4, #12]
 800516a:	4a05      	ldr	r2, [pc, #20]	; (8005180 <__swrite+0x34>)
 800516c:	0028      	movs	r0, r5
 800516e:	4013      	ands	r3, r2
 8005170:	81a3      	strh	r3, [r4, #12]
 8005172:	0032      	movs	r2, r6
 8005174:	230e      	movs	r3, #14
 8005176:	5ee1      	ldrsh	r1, [r4, r3]
 8005178:	003b      	movs	r3, r7
 800517a:	f000 f81f 	bl	80051bc <_write_r>
 800517e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005180:	ffffefff 	.word	0xffffefff

08005184 <__sseek>:
 8005184:	b570      	push	{r4, r5, r6, lr}
 8005186:	000c      	movs	r4, r1
 8005188:	250e      	movs	r5, #14
 800518a:	5f49      	ldrsh	r1, [r1, r5]
 800518c:	f000 f860 	bl	8005250 <_lseek_r>
 8005190:	89a3      	ldrh	r3, [r4, #12]
 8005192:	1c42      	adds	r2, r0, #1
 8005194:	d103      	bne.n	800519e <__sseek+0x1a>
 8005196:	4a05      	ldr	r2, [pc, #20]	; (80051ac <__sseek+0x28>)
 8005198:	4013      	ands	r3, r2
 800519a:	81a3      	strh	r3, [r4, #12]
 800519c:	bd70      	pop	{r4, r5, r6, pc}
 800519e:	2280      	movs	r2, #128	; 0x80
 80051a0:	0152      	lsls	r2, r2, #5
 80051a2:	4313      	orrs	r3, r2
 80051a4:	81a3      	strh	r3, [r4, #12]
 80051a6:	6560      	str	r0, [r4, #84]	; 0x54
 80051a8:	e7f8      	b.n	800519c <__sseek+0x18>
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	ffffefff 	.word	0xffffefff

080051b0 <__sclose>:
 80051b0:	b510      	push	{r4, lr}
 80051b2:	230e      	movs	r3, #14
 80051b4:	5ec9      	ldrsh	r1, [r1, r3]
 80051b6:	f000 f815 	bl	80051e4 <_close_r>
 80051ba:	bd10      	pop	{r4, pc}

080051bc <_write_r>:
 80051bc:	b570      	push	{r4, r5, r6, lr}
 80051be:	0004      	movs	r4, r0
 80051c0:	0008      	movs	r0, r1
 80051c2:	0011      	movs	r1, r2
 80051c4:	001a      	movs	r2, r3
 80051c6:	2300      	movs	r3, #0
 80051c8:	4d05      	ldr	r5, [pc, #20]	; (80051e0 <_write_r+0x24>)
 80051ca:	602b      	str	r3, [r5, #0]
 80051cc:	f7fc fac6 	bl	800175c <_write>
 80051d0:	1c43      	adds	r3, r0, #1
 80051d2:	d103      	bne.n	80051dc <_write_r+0x20>
 80051d4:	682b      	ldr	r3, [r5, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d000      	beq.n	80051dc <_write_r+0x20>
 80051da:	6023      	str	r3, [r4, #0]
 80051dc:	bd70      	pop	{r4, r5, r6, pc}
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	20000220 	.word	0x20000220

080051e4 <_close_r>:
 80051e4:	2300      	movs	r3, #0
 80051e6:	b570      	push	{r4, r5, r6, lr}
 80051e8:	4d06      	ldr	r5, [pc, #24]	; (8005204 <_close_r+0x20>)
 80051ea:	0004      	movs	r4, r0
 80051ec:	0008      	movs	r0, r1
 80051ee:	602b      	str	r3, [r5, #0]
 80051f0:	f7fc fad0 	bl	8001794 <_close>
 80051f4:	1c43      	adds	r3, r0, #1
 80051f6:	d103      	bne.n	8005200 <_close_r+0x1c>
 80051f8:	682b      	ldr	r3, [r5, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d000      	beq.n	8005200 <_close_r+0x1c>
 80051fe:	6023      	str	r3, [r4, #0]
 8005200:	bd70      	pop	{r4, r5, r6, pc}
 8005202:	46c0      	nop			; (mov r8, r8)
 8005204:	20000220 	.word	0x20000220

08005208 <_fstat_r>:
 8005208:	2300      	movs	r3, #0
 800520a:	b570      	push	{r4, r5, r6, lr}
 800520c:	4d06      	ldr	r5, [pc, #24]	; (8005228 <_fstat_r+0x20>)
 800520e:	0004      	movs	r4, r0
 8005210:	0008      	movs	r0, r1
 8005212:	0011      	movs	r1, r2
 8005214:	602b      	str	r3, [r5, #0]
 8005216:	f7fc fac7 	bl	80017a8 <_fstat>
 800521a:	1c43      	adds	r3, r0, #1
 800521c:	d103      	bne.n	8005226 <_fstat_r+0x1e>
 800521e:	682b      	ldr	r3, [r5, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d000      	beq.n	8005226 <_fstat_r+0x1e>
 8005224:	6023      	str	r3, [r4, #0]
 8005226:	bd70      	pop	{r4, r5, r6, pc}
 8005228:	20000220 	.word	0x20000220

0800522c <_isatty_r>:
 800522c:	2300      	movs	r3, #0
 800522e:	b570      	push	{r4, r5, r6, lr}
 8005230:	4d06      	ldr	r5, [pc, #24]	; (800524c <_isatty_r+0x20>)
 8005232:	0004      	movs	r4, r0
 8005234:	0008      	movs	r0, r1
 8005236:	602b      	str	r3, [r5, #0]
 8005238:	f7fc fac4 	bl	80017c4 <_isatty>
 800523c:	1c43      	adds	r3, r0, #1
 800523e:	d103      	bne.n	8005248 <_isatty_r+0x1c>
 8005240:	682b      	ldr	r3, [r5, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d000      	beq.n	8005248 <_isatty_r+0x1c>
 8005246:	6023      	str	r3, [r4, #0]
 8005248:	bd70      	pop	{r4, r5, r6, pc}
 800524a:	46c0      	nop			; (mov r8, r8)
 800524c:	20000220 	.word	0x20000220

08005250 <_lseek_r>:
 8005250:	b570      	push	{r4, r5, r6, lr}
 8005252:	0004      	movs	r4, r0
 8005254:	0008      	movs	r0, r1
 8005256:	0011      	movs	r1, r2
 8005258:	001a      	movs	r2, r3
 800525a:	2300      	movs	r3, #0
 800525c:	4d05      	ldr	r5, [pc, #20]	; (8005274 <_lseek_r+0x24>)
 800525e:	602b      	str	r3, [r5, #0]
 8005260:	f7fc fab9 	bl	80017d6 <_lseek>
 8005264:	1c43      	adds	r3, r0, #1
 8005266:	d103      	bne.n	8005270 <_lseek_r+0x20>
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d000      	beq.n	8005270 <_lseek_r+0x20>
 800526e:	6023      	str	r3, [r4, #0]
 8005270:	bd70      	pop	{r4, r5, r6, pc}
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	20000220 	.word	0x20000220

08005278 <_read_r>:
 8005278:	b570      	push	{r4, r5, r6, lr}
 800527a:	0004      	movs	r4, r0
 800527c:	0008      	movs	r0, r1
 800527e:	0011      	movs	r1, r2
 8005280:	001a      	movs	r2, r3
 8005282:	2300      	movs	r3, #0
 8005284:	4d05      	ldr	r5, [pc, #20]	; (800529c <_read_r+0x24>)
 8005286:	602b      	str	r3, [r5, #0]
 8005288:	f7fc fa4b 	bl	8001722 <_read>
 800528c:	1c43      	adds	r3, r0, #1
 800528e:	d103      	bne.n	8005298 <_read_r+0x20>
 8005290:	682b      	ldr	r3, [r5, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d000      	beq.n	8005298 <_read_r+0x20>
 8005296:	6023      	str	r3, [r4, #0]
 8005298:	bd70      	pop	{r4, r5, r6, pc}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	20000220 	.word	0x20000220

080052a0 <_init>:
 80052a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052a6:	bc08      	pop	{r3}
 80052a8:	469e      	mov	lr, r3
 80052aa:	4770      	bx	lr

080052ac <_fini>:
 80052ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ae:	46c0      	nop			; (mov r8, r8)
 80052b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b2:	bc08      	pop	{r3}
 80052b4:	469e      	mov	lr, r3
 80052b6:	4770      	bx	lr
