
robot_biere.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008714  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008bc  080087d4  080087d4  000187d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009090  08009090  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009090  08009090  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009090  08009090  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009090  08009090  00019090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009094  08009094  00019094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012c4  20000074  0800910c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001338  0800910c  00021338  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ae0  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000384f  00000000  00000000  00036b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  0003a3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001350  00000000  00000000  0003b8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dce  00000000  00000000  0003cc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001938b  00000000  00000000  000559d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097c2f  00000000  00000000  0006ed61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106990  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055b4  00000000  00000000  001069e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080087bc 	.word	0x080087bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	080087bc 	.word	0x080087bc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__clear_cache>:
 8000418:	4770      	bx	lr
 800041a:	46c0      	nop			; (mov r8, r8)

0800041c <__aeabi_d2uiz>:
 800041c:	b570      	push	{r4, r5, r6, lr}
 800041e:	2200      	movs	r2, #0
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <__aeabi_d2uiz+0x38>)
 8000422:	0004      	movs	r4, r0
 8000424:	000d      	movs	r5, r1
 8000426:	f000 ff51 	bl	80012cc <__aeabi_dcmpge>
 800042a:	2800      	cmp	r0, #0
 800042c:	d104      	bne.n	8000438 <__aeabi_d2uiz+0x1c>
 800042e:	0020      	movs	r0, r4
 8000430:	0029      	movs	r1, r5
 8000432:	f000 fe99 	bl	8001168 <__aeabi_d2iz>
 8000436:	bd70      	pop	{r4, r5, r6, pc}
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <__aeabi_d2uiz+0x38>)
 800043a:	2200      	movs	r2, #0
 800043c:	0020      	movs	r0, r4
 800043e:	0029      	movs	r1, r5
 8000440:	f000 fb00 	bl	8000a44 <__aeabi_dsub>
 8000444:	f000 fe90 	bl	8001168 <__aeabi_d2iz>
 8000448:	2380      	movs	r3, #128	; 0x80
 800044a:	061b      	lsls	r3, r3, #24
 800044c:	469c      	mov	ip, r3
 800044e:	4460      	add	r0, ip
 8000450:	e7f1      	b.n	8000436 <__aeabi_d2uiz+0x1a>
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	41e00000 	.word	0x41e00000

08000458 <__aeabi_ddiv>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	4657      	mov	r7, sl
 800045c:	464e      	mov	r6, r9
 800045e:	4645      	mov	r5, r8
 8000460:	46de      	mov	lr, fp
 8000462:	b5e0      	push	{r5, r6, r7, lr}
 8000464:	4681      	mov	r9, r0
 8000466:	0005      	movs	r5, r0
 8000468:	030c      	lsls	r4, r1, #12
 800046a:	0048      	lsls	r0, r1, #1
 800046c:	4692      	mov	sl, r2
 800046e:	001f      	movs	r7, r3
 8000470:	b085      	sub	sp, #20
 8000472:	0b24      	lsrs	r4, r4, #12
 8000474:	0d40      	lsrs	r0, r0, #21
 8000476:	0fce      	lsrs	r6, r1, #31
 8000478:	2800      	cmp	r0, #0
 800047a:	d100      	bne.n	800047e <__aeabi_ddiv+0x26>
 800047c:	e156      	b.n	800072c <__aeabi_ddiv+0x2d4>
 800047e:	4bd4      	ldr	r3, [pc, #848]	; (80007d0 <__aeabi_ddiv+0x378>)
 8000480:	4298      	cmp	r0, r3
 8000482:	d100      	bne.n	8000486 <__aeabi_ddiv+0x2e>
 8000484:	e172      	b.n	800076c <__aeabi_ddiv+0x314>
 8000486:	0f6b      	lsrs	r3, r5, #29
 8000488:	00e4      	lsls	r4, r4, #3
 800048a:	431c      	orrs	r4, r3
 800048c:	2380      	movs	r3, #128	; 0x80
 800048e:	041b      	lsls	r3, r3, #16
 8000490:	4323      	orrs	r3, r4
 8000492:	4698      	mov	r8, r3
 8000494:	4bcf      	ldr	r3, [pc, #828]	; (80007d4 <__aeabi_ddiv+0x37c>)
 8000496:	00ed      	lsls	r5, r5, #3
 8000498:	469b      	mov	fp, r3
 800049a:	2300      	movs	r3, #0
 800049c:	4699      	mov	r9, r3
 800049e:	4483      	add	fp, r0
 80004a0:	9300      	str	r3, [sp, #0]
 80004a2:	033c      	lsls	r4, r7, #12
 80004a4:	007b      	lsls	r3, r7, #1
 80004a6:	4650      	mov	r0, sl
 80004a8:	0b24      	lsrs	r4, r4, #12
 80004aa:	0d5b      	lsrs	r3, r3, #21
 80004ac:	0fff      	lsrs	r7, r7, #31
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d100      	bne.n	80004b4 <__aeabi_ddiv+0x5c>
 80004b2:	e11f      	b.n	80006f4 <__aeabi_ddiv+0x29c>
 80004b4:	4ac6      	ldr	r2, [pc, #792]	; (80007d0 <__aeabi_ddiv+0x378>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d100      	bne.n	80004bc <__aeabi_ddiv+0x64>
 80004ba:	e162      	b.n	8000782 <__aeabi_ddiv+0x32a>
 80004bc:	49c5      	ldr	r1, [pc, #788]	; (80007d4 <__aeabi_ddiv+0x37c>)
 80004be:	0f42      	lsrs	r2, r0, #29
 80004c0:	468c      	mov	ip, r1
 80004c2:	00e4      	lsls	r4, r4, #3
 80004c4:	4659      	mov	r1, fp
 80004c6:	4314      	orrs	r4, r2
 80004c8:	2280      	movs	r2, #128	; 0x80
 80004ca:	4463      	add	r3, ip
 80004cc:	0412      	lsls	r2, r2, #16
 80004ce:	1acb      	subs	r3, r1, r3
 80004d0:	4314      	orrs	r4, r2
 80004d2:	469b      	mov	fp, r3
 80004d4:	00c2      	lsls	r2, r0, #3
 80004d6:	2000      	movs	r0, #0
 80004d8:	0033      	movs	r3, r6
 80004da:	407b      	eors	r3, r7
 80004dc:	469a      	mov	sl, r3
 80004de:	464b      	mov	r3, r9
 80004e0:	2b0f      	cmp	r3, #15
 80004e2:	d827      	bhi.n	8000534 <__aeabi_ddiv+0xdc>
 80004e4:	49bc      	ldr	r1, [pc, #752]	; (80007d8 <__aeabi_ddiv+0x380>)
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	58cb      	ldr	r3, [r1, r3]
 80004ea:	469f      	mov	pc, r3
 80004ec:	46b2      	mov	sl, r6
 80004ee:	9b00      	ldr	r3, [sp, #0]
 80004f0:	2b02      	cmp	r3, #2
 80004f2:	d016      	beq.n	8000522 <__aeabi_ddiv+0xca>
 80004f4:	2b03      	cmp	r3, #3
 80004f6:	d100      	bne.n	80004fa <__aeabi_ddiv+0xa2>
 80004f8:	e28e      	b.n	8000a18 <__aeabi_ddiv+0x5c0>
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d000      	beq.n	8000500 <__aeabi_ddiv+0xa8>
 80004fe:	e0d9      	b.n	80006b4 <__aeabi_ddiv+0x25c>
 8000500:	2300      	movs	r3, #0
 8000502:	2400      	movs	r4, #0
 8000504:	2500      	movs	r5, #0
 8000506:	4652      	mov	r2, sl
 8000508:	051b      	lsls	r3, r3, #20
 800050a:	4323      	orrs	r3, r4
 800050c:	07d2      	lsls	r2, r2, #31
 800050e:	4313      	orrs	r3, r2
 8000510:	0028      	movs	r0, r5
 8000512:	0019      	movs	r1, r3
 8000514:	b005      	add	sp, #20
 8000516:	bcf0      	pop	{r4, r5, r6, r7}
 8000518:	46bb      	mov	fp, r7
 800051a:	46b2      	mov	sl, r6
 800051c:	46a9      	mov	r9, r5
 800051e:	46a0      	mov	r8, r4
 8000520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000522:	2400      	movs	r4, #0
 8000524:	2500      	movs	r5, #0
 8000526:	4baa      	ldr	r3, [pc, #680]	; (80007d0 <__aeabi_ddiv+0x378>)
 8000528:	e7ed      	b.n	8000506 <__aeabi_ddiv+0xae>
 800052a:	46ba      	mov	sl, r7
 800052c:	46a0      	mov	r8, r4
 800052e:	0015      	movs	r5, r2
 8000530:	9000      	str	r0, [sp, #0]
 8000532:	e7dc      	b.n	80004ee <__aeabi_ddiv+0x96>
 8000534:	4544      	cmp	r4, r8
 8000536:	d200      	bcs.n	800053a <__aeabi_ddiv+0xe2>
 8000538:	e1c7      	b.n	80008ca <__aeabi_ddiv+0x472>
 800053a:	d100      	bne.n	800053e <__aeabi_ddiv+0xe6>
 800053c:	e1c2      	b.n	80008c4 <__aeabi_ddiv+0x46c>
 800053e:	2301      	movs	r3, #1
 8000540:	425b      	negs	r3, r3
 8000542:	469c      	mov	ip, r3
 8000544:	002e      	movs	r6, r5
 8000546:	4640      	mov	r0, r8
 8000548:	2500      	movs	r5, #0
 800054a:	44e3      	add	fp, ip
 800054c:	0223      	lsls	r3, r4, #8
 800054e:	0e14      	lsrs	r4, r2, #24
 8000550:	431c      	orrs	r4, r3
 8000552:	0c1b      	lsrs	r3, r3, #16
 8000554:	4699      	mov	r9, r3
 8000556:	0423      	lsls	r3, r4, #16
 8000558:	0c1f      	lsrs	r7, r3, #16
 800055a:	0212      	lsls	r2, r2, #8
 800055c:	4649      	mov	r1, r9
 800055e:	9200      	str	r2, [sp, #0]
 8000560:	9701      	str	r7, [sp, #4]
 8000562:	f7ff fe69 	bl	8000238 <__aeabi_uidivmod>
 8000566:	0002      	movs	r2, r0
 8000568:	437a      	muls	r2, r7
 800056a:	040b      	lsls	r3, r1, #16
 800056c:	0c31      	lsrs	r1, r6, #16
 800056e:	4680      	mov	r8, r0
 8000570:	4319      	orrs	r1, r3
 8000572:	428a      	cmp	r2, r1
 8000574:	d907      	bls.n	8000586 <__aeabi_ddiv+0x12e>
 8000576:	2301      	movs	r3, #1
 8000578:	425b      	negs	r3, r3
 800057a:	469c      	mov	ip, r3
 800057c:	1909      	adds	r1, r1, r4
 800057e:	44e0      	add	r8, ip
 8000580:	428c      	cmp	r4, r1
 8000582:	d800      	bhi.n	8000586 <__aeabi_ddiv+0x12e>
 8000584:	e207      	b.n	8000996 <__aeabi_ddiv+0x53e>
 8000586:	1a88      	subs	r0, r1, r2
 8000588:	4649      	mov	r1, r9
 800058a:	f7ff fe55 	bl	8000238 <__aeabi_uidivmod>
 800058e:	0409      	lsls	r1, r1, #16
 8000590:	468c      	mov	ip, r1
 8000592:	0431      	lsls	r1, r6, #16
 8000594:	4666      	mov	r6, ip
 8000596:	9a01      	ldr	r2, [sp, #4]
 8000598:	0c09      	lsrs	r1, r1, #16
 800059a:	4342      	muls	r2, r0
 800059c:	0003      	movs	r3, r0
 800059e:	4331      	orrs	r1, r6
 80005a0:	428a      	cmp	r2, r1
 80005a2:	d904      	bls.n	80005ae <__aeabi_ddiv+0x156>
 80005a4:	1909      	adds	r1, r1, r4
 80005a6:	3b01      	subs	r3, #1
 80005a8:	428c      	cmp	r4, r1
 80005aa:	d800      	bhi.n	80005ae <__aeabi_ddiv+0x156>
 80005ac:	e1ed      	b.n	800098a <__aeabi_ddiv+0x532>
 80005ae:	1a88      	subs	r0, r1, r2
 80005b0:	4642      	mov	r2, r8
 80005b2:	0412      	lsls	r2, r2, #16
 80005b4:	431a      	orrs	r2, r3
 80005b6:	4690      	mov	r8, r2
 80005b8:	4641      	mov	r1, r8
 80005ba:	9b00      	ldr	r3, [sp, #0]
 80005bc:	040e      	lsls	r6, r1, #16
 80005be:	0c1b      	lsrs	r3, r3, #16
 80005c0:	001f      	movs	r7, r3
 80005c2:	9302      	str	r3, [sp, #8]
 80005c4:	9b00      	ldr	r3, [sp, #0]
 80005c6:	0c36      	lsrs	r6, r6, #16
 80005c8:	041b      	lsls	r3, r3, #16
 80005ca:	0c19      	lsrs	r1, r3, #16
 80005cc:	000b      	movs	r3, r1
 80005ce:	4373      	muls	r3, r6
 80005d0:	0c12      	lsrs	r2, r2, #16
 80005d2:	437e      	muls	r6, r7
 80005d4:	9103      	str	r1, [sp, #12]
 80005d6:	4351      	muls	r1, r2
 80005d8:	437a      	muls	r2, r7
 80005da:	0c1f      	lsrs	r7, r3, #16
 80005dc:	46bc      	mov	ip, r7
 80005de:	1876      	adds	r6, r6, r1
 80005e0:	4466      	add	r6, ip
 80005e2:	42b1      	cmp	r1, r6
 80005e4:	d903      	bls.n	80005ee <__aeabi_ddiv+0x196>
 80005e6:	2180      	movs	r1, #128	; 0x80
 80005e8:	0249      	lsls	r1, r1, #9
 80005ea:	468c      	mov	ip, r1
 80005ec:	4462      	add	r2, ip
 80005ee:	0c31      	lsrs	r1, r6, #16
 80005f0:	188a      	adds	r2, r1, r2
 80005f2:	0431      	lsls	r1, r6, #16
 80005f4:	041e      	lsls	r6, r3, #16
 80005f6:	0c36      	lsrs	r6, r6, #16
 80005f8:	198e      	adds	r6, r1, r6
 80005fa:	4290      	cmp	r0, r2
 80005fc:	d302      	bcc.n	8000604 <__aeabi_ddiv+0x1ac>
 80005fe:	d112      	bne.n	8000626 <__aeabi_ddiv+0x1ce>
 8000600:	42b5      	cmp	r5, r6
 8000602:	d210      	bcs.n	8000626 <__aeabi_ddiv+0x1ce>
 8000604:	4643      	mov	r3, r8
 8000606:	1e59      	subs	r1, r3, #1
 8000608:	9b00      	ldr	r3, [sp, #0]
 800060a:	469c      	mov	ip, r3
 800060c:	4465      	add	r5, ip
 800060e:	001f      	movs	r7, r3
 8000610:	429d      	cmp	r5, r3
 8000612:	419b      	sbcs	r3, r3
 8000614:	425b      	negs	r3, r3
 8000616:	191b      	adds	r3, r3, r4
 8000618:	18c0      	adds	r0, r0, r3
 800061a:	4284      	cmp	r4, r0
 800061c:	d200      	bcs.n	8000620 <__aeabi_ddiv+0x1c8>
 800061e:	e1a0      	b.n	8000962 <__aeabi_ddiv+0x50a>
 8000620:	d100      	bne.n	8000624 <__aeabi_ddiv+0x1cc>
 8000622:	e19b      	b.n	800095c <__aeabi_ddiv+0x504>
 8000624:	4688      	mov	r8, r1
 8000626:	1bae      	subs	r6, r5, r6
 8000628:	42b5      	cmp	r5, r6
 800062a:	41ad      	sbcs	r5, r5
 800062c:	1a80      	subs	r0, r0, r2
 800062e:	426d      	negs	r5, r5
 8000630:	1b40      	subs	r0, r0, r5
 8000632:	4284      	cmp	r4, r0
 8000634:	d100      	bne.n	8000638 <__aeabi_ddiv+0x1e0>
 8000636:	e1d5      	b.n	80009e4 <__aeabi_ddiv+0x58c>
 8000638:	4649      	mov	r1, r9
 800063a:	f7ff fdfd 	bl	8000238 <__aeabi_uidivmod>
 800063e:	9a01      	ldr	r2, [sp, #4]
 8000640:	040b      	lsls	r3, r1, #16
 8000642:	4342      	muls	r2, r0
 8000644:	0c31      	lsrs	r1, r6, #16
 8000646:	0005      	movs	r5, r0
 8000648:	4319      	orrs	r1, r3
 800064a:	428a      	cmp	r2, r1
 800064c:	d900      	bls.n	8000650 <__aeabi_ddiv+0x1f8>
 800064e:	e16c      	b.n	800092a <__aeabi_ddiv+0x4d2>
 8000650:	1a88      	subs	r0, r1, r2
 8000652:	4649      	mov	r1, r9
 8000654:	f7ff fdf0 	bl	8000238 <__aeabi_uidivmod>
 8000658:	9a01      	ldr	r2, [sp, #4]
 800065a:	0436      	lsls	r6, r6, #16
 800065c:	4342      	muls	r2, r0
 800065e:	0409      	lsls	r1, r1, #16
 8000660:	0c36      	lsrs	r6, r6, #16
 8000662:	0003      	movs	r3, r0
 8000664:	430e      	orrs	r6, r1
 8000666:	42b2      	cmp	r2, r6
 8000668:	d900      	bls.n	800066c <__aeabi_ddiv+0x214>
 800066a:	e153      	b.n	8000914 <__aeabi_ddiv+0x4bc>
 800066c:	9803      	ldr	r0, [sp, #12]
 800066e:	1ab6      	subs	r6, r6, r2
 8000670:	0002      	movs	r2, r0
 8000672:	042d      	lsls	r5, r5, #16
 8000674:	431d      	orrs	r5, r3
 8000676:	9f02      	ldr	r7, [sp, #8]
 8000678:	042b      	lsls	r3, r5, #16
 800067a:	0c1b      	lsrs	r3, r3, #16
 800067c:	435a      	muls	r2, r3
 800067e:	437b      	muls	r3, r7
 8000680:	469c      	mov	ip, r3
 8000682:	0c29      	lsrs	r1, r5, #16
 8000684:	4348      	muls	r0, r1
 8000686:	0c13      	lsrs	r3, r2, #16
 8000688:	4484      	add	ip, r0
 800068a:	4463      	add	r3, ip
 800068c:	4379      	muls	r1, r7
 800068e:	4298      	cmp	r0, r3
 8000690:	d903      	bls.n	800069a <__aeabi_ddiv+0x242>
 8000692:	2080      	movs	r0, #128	; 0x80
 8000694:	0240      	lsls	r0, r0, #9
 8000696:	4684      	mov	ip, r0
 8000698:	4461      	add	r1, ip
 800069a:	0c18      	lsrs	r0, r3, #16
 800069c:	0412      	lsls	r2, r2, #16
 800069e:	041b      	lsls	r3, r3, #16
 80006a0:	0c12      	lsrs	r2, r2, #16
 80006a2:	1841      	adds	r1, r0, r1
 80006a4:	189b      	adds	r3, r3, r2
 80006a6:	428e      	cmp	r6, r1
 80006a8:	d200      	bcs.n	80006ac <__aeabi_ddiv+0x254>
 80006aa:	e0ff      	b.n	80008ac <__aeabi_ddiv+0x454>
 80006ac:	d100      	bne.n	80006b0 <__aeabi_ddiv+0x258>
 80006ae:	e0fa      	b.n	80008a6 <__aeabi_ddiv+0x44e>
 80006b0:	2301      	movs	r3, #1
 80006b2:	431d      	orrs	r5, r3
 80006b4:	4a49      	ldr	r2, [pc, #292]	; (80007dc <__aeabi_ddiv+0x384>)
 80006b6:	445a      	add	r2, fp
 80006b8:	2a00      	cmp	r2, #0
 80006ba:	dc00      	bgt.n	80006be <__aeabi_ddiv+0x266>
 80006bc:	e0aa      	b.n	8000814 <__aeabi_ddiv+0x3bc>
 80006be:	076b      	lsls	r3, r5, #29
 80006c0:	d000      	beq.n	80006c4 <__aeabi_ddiv+0x26c>
 80006c2:	e13d      	b.n	8000940 <__aeabi_ddiv+0x4e8>
 80006c4:	08ed      	lsrs	r5, r5, #3
 80006c6:	4643      	mov	r3, r8
 80006c8:	01db      	lsls	r3, r3, #7
 80006ca:	d506      	bpl.n	80006da <__aeabi_ddiv+0x282>
 80006cc:	4642      	mov	r2, r8
 80006ce:	4b44      	ldr	r3, [pc, #272]	; (80007e0 <__aeabi_ddiv+0x388>)
 80006d0:	401a      	ands	r2, r3
 80006d2:	4690      	mov	r8, r2
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	00d2      	lsls	r2, r2, #3
 80006d8:	445a      	add	r2, fp
 80006da:	4b42      	ldr	r3, [pc, #264]	; (80007e4 <__aeabi_ddiv+0x38c>)
 80006dc:	429a      	cmp	r2, r3
 80006de:	dd00      	ble.n	80006e2 <__aeabi_ddiv+0x28a>
 80006e0:	e71f      	b.n	8000522 <__aeabi_ddiv+0xca>
 80006e2:	4643      	mov	r3, r8
 80006e4:	075b      	lsls	r3, r3, #29
 80006e6:	431d      	orrs	r5, r3
 80006e8:	4643      	mov	r3, r8
 80006ea:	0552      	lsls	r2, r2, #21
 80006ec:	025c      	lsls	r4, r3, #9
 80006ee:	0b24      	lsrs	r4, r4, #12
 80006f0:	0d53      	lsrs	r3, r2, #21
 80006f2:	e708      	b.n	8000506 <__aeabi_ddiv+0xae>
 80006f4:	4652      	mov	r2, sl
 80006f6:	4322      	orrs	r2, r4
 80006f8:	d100      	bne.n	80006fc <__aeabi_ddiv+0x2a4>
 80006fa:	e07b      	b.n	80007f4 <__aeabi_ddiv+0x39c>
 80006fc:	2c00      	cmp	r4, #0
 80006fe:	d100      	bne.n	8000702 <__aeabi_ddiv+0x2aa>
 8000700:	e0fa      	b.n	80008f8 <__aeabi_ddiv+0x4a0>
 8000702:	0020      	movs	r0, r4
 8000704:	f000 fdec 	bl	80012e0 <__clzsi2>
 8000708:	0002      	movs	r2, r0
 800070a:	3a0b      	subs	r2, #11
 800070c:	231d      	movs	r3, #29
 800070e:	0001      	movs	r1, r0
 8000710:	1a9b      	subs	r3, r3, r2
 8000712:	4652      	mov	r2, sl
 8000714:	3908      	subs	r1, #8
 8000716:	40da      	lsrs	r2, r3
 8000718:	408c      	lsls	r4, r1
 800071a:	4314      	orrs	r4, r2
 800071c:	4652      	mov	r2, sl
 800071e:	408a      	lsls	r2, r1
 8000720:	4b31      	ldr	r3, [pc, #196]	; (80007e8 <__aeabi_ddiv+0x390>)
 8000722:	4458      	add	r0, fp
 8000724:	469b      	mov	fp, r3
 8000726:	4483      	add	fp, r0
 8000728:	2000      	movs	r0, #0
 800072a:	e6d5      	b.n	80004d8 <__aeabi_ddiv+0x80>
 800072c:	464b      	mov	r3, r9
 800072e:	4323      	orrs	r3, r4
 8000730:	4698      	mov	r8, r3
 8000732:	d044      	beq.n	80007be <__aeabi_ddiv+0x366>
 8000734:	2c00      	cmp	r4, #0
 8000736:	d100      	bne.n	800073a <__aeabi_ddiv+0x2e2>
 8000738:	e0ce      	b.n	80008d8 <__aeabi_ddiv+0x480>
 800073a:	0020      	movs	r0, r4
 800073c:	f000 fdd0 	bl	80012e0 <__clzsi2>
 8000740:	0001      	movs	r1, r0
 8000742:	0002      	movs	r2, r0
 8000744:	390b      	subs	r1, #11
 8000746:	231d      	movs	r3, #29
 8000748:	1a5b      	subs	r3, r3, r1
 800074a:	4649      	mov	r1, r9
 800074c:	0010      	movs	r0, r2
 800074e:	40d9      	lsrs	r1, r3
 8000750:	3808      	subs	r0, #8
 8000752:	4084      	lsls	r4, r0
 8000754:	000b      	movs	r3, r1
 8000756:	464d      	mov	r5, r9
 8000758:	4323      	orrs	r3, r4
 800075a:	4698      	mov	r8, r3
 800075c:	4085      	lsls	r5, r0
 800075e:	4823      	ldr	r0, [pc, #140]	; (80007ec <__aeabi_ddiv+0x394>)
 8000760:	1a83      	subs	r3, r0, r2
 8000762:	469b      	mov	fp, r3
 8000764:	2300      	movs	r3, #0
 8000766:	4699      	mov	r9, r3
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	e69a      	b.n	80004a2 <__aeabi_ddiv+0x4a>
 800076c:	464b      	mov	r3, r9
 800076e:	4323      	orrs	r3, r4
 8000770:	4698      	mov	r8, r3
 8000772:	d11d      	bne.n	80007b0 <__aeabi_ddiv+0x358>
 8000774:	2308      	movs	r3, #8
 8000776:	4699      	mov	r9, r3
 8000778:	3b06      	subs	r3, #6
 800077a:	2500      	movs	r5, #0
 800077c:	4683      	mov	fp, r0
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	e68f      	b.n	80004a2 <__aeabi_ddiv+0x4a>
 8000782:	4652      	mov	r2, sl
 8000784:	4322      	orrs	r2, r4
 8000786:	d109      	bne.n	800079c <__aeabi_ddiv+0x344>
 8000788:	2302      	movs	r3, #2
 800078a:	4649      	mov	r1, r9
 800078c:	4319      	orrs	r1, r3
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <__aeabi_ddiv+0x398>)
 8000790:	4689      	mov	r9, r1
 8000792:	469c      	mov	ip, r3
 8000794:	2400      	movs	r4, #0
 8000796:	2002      	movs	r0, #2
 8000798:	44e3      	add	fp, ip
 800079a:	e69d      	b.n	80004d8 <__aeabi_ddiv+0x80>
 800079c:	2303      	movs	r3, #3
 800079e:	464a      	mov	r2, r9
 80007a0:	431a      	orrs	r2, r3
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <__aeabi_ddiv+0x398>)
 80007a4:	4691      	mov	r9, r2
 80007a6:	469c      	mov	ip, r3
 80007a8:	4652      	mov	r2, sl
 80007aa:	2003      	movs	r0, #3
 80007ac:	44e3      	add	fp, ip
 80007ae:	e693      	b.n	80004d8 <__aeabi_ddiv+0x80>
 80007b0:	230c      	movs	r3, #12
 80007b2:	4699      	mov	r9, r3
 80007b4:	3b09      	subs	r3, #9
 80007b6:	46a0      	mov	r8, r4
 80007b8:	4683      	mov	fp, r0
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	e671      	b.n	80004a2 <__aeabi_ddiv+0x4a>
 80007be:	2304      	movs	r3, #4
 80007c0:	4699      	mov	r9, r3
 80007c2:	2300      	movs	r3, #0
 80007c4:	469b      	mov	fp, r3
 80007c6:	3301      	adds	r3, #1
 80007c8:	2500      	movs	r5, #0
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	e669      	b.n	80004a2 <__aeabi_ddiv+0x4a>
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	000007ff 	.word	0x000007ff
 80007d4:	fffffc01 	.word	0xfffffc01
 80007d8:	08008edc 	.word	0x08008edc
 80007dc:	000003ff 	.word	0x000003ff
 80007e0:	feffffff 	.word	0xfeffffff
 80007e4:	000007fe 	.word	0x000007fe
 80007e8:	000003f3 	.word	0x000003f3
 80007ec:	fffffc0d 	.word	0xfffffc0d
 80007f0:	fffff801 	.word	0xfffff801
 80007f4:	4649      	mov	r1, r9
 80007f6:	2301      	movs	r3, #1
 80007f8:	4319      	orrs	r1, r3
 80007fa:	4689      	mov	r9, r1
 80007fc:	2400      	movs	r4, #0
 80007fe:	2001      	movs	r0, #1
 8000800:	e66a      	b.n	80004d8 <__aeabi_ddiv+0x80>
 8000802:	2300      	movs	r3, #0
 8000804:	2480      	movs	r4, #128	; 0x80
 8000806:	469a      	mov	sl, r3
 8000808:	2500      	movs	r5, #0
 800080a:	4b8a      	ldr	r3, [pc, #552]	; (8000a34 <__aeabi_ddiv+0x5dc>)
 800080c:	0324      	lsls	r4, r4, #12
 800080e:	e67a      	b.n	8000506 <__aeabi_ddiv+0xae>
 8000810:	2501      	movs	r5, #1
 8000812:	426d      	negs	r5, r5
 8000814:	2301      	movs	r3, #1
 8000816:	1a9b      	subs	r3, r3, r2
 8000818:	2b38      	cmp	r3, #56	; 0x38
 800081a:	dd00      	ble.n	800081e <__aeabi_ddiv+0x3c6>
 800081c:	e670      	b.n	8000500 <__aeabi_ddiv+0xa8>
 800081e:	2b1f      	cmp	r3, #31
 8000820:	dc00      	bgt.n	8000824 <__aeabi_ddiv+0x3cc>
 8000822:	e0bf      	b.n	80009a4 <__aeabi_ddiv+0x54c>
 8000824:	211f      	movs	r1, #31
 8000826:	4249      	negs	r1, r1
 8000828:	1a8a      	subs	r2, r1, r2
 800082a:	4641      	mov	r1, r8
 800082c:	40d1      	lsrs	r1, r2
 800082e:	000a      	movs	r2, r1
 8000830:	2b20      	cmp	r3, #32
 8000832:	d004      	beq.n	800083e <__aeabi_ddiv+0x3e6>
 8000834:	4641      	mov	r1, r8
 8000836:	4b80      	ldr	r3, [pc, #512]	; (8000a38 <__aeabi_ddiv+0x5e0>)
 8000838:	445b      	add	r3, fp
 800083a:	4099      	lsls	r1, r3
 800083c:	430d      	orrs	r5, r1
 800083e:	1e6b      	subs	r3, r5, #1
 8000840:	419d      	sbcs	r5, r3
 8000842:	2307      	movs	r3, #7
 8000844:	432a      	orrs	r2, r5
 8000846:	001d      	movs	r5, r3
 8000848:	2400      	movs	r4, #0
 800084a:	4015      	ands	r5, r2
 800084c:	4213      	tst	r3, r2
 800084e:	d100      	bne.n	8000852 <__aeabi_ddiv+0x3fa>
 8000850:	e0d4      	b.n	80009fc <__aeabi_ddiv+0x5a4>
 8000852:	210f      	movs	r1, #15
 8000854:	2300      	movs	r3, #0
 8000856:	4011      	ands	r1, r2
 8000858:	2904      	cmp	r1, #4
 800085a:	d100      	bne.n	800085e <__aeabi_ddiv+0x406>
 800085c:	e0cb      	b.n	80009f6 <__aeabi_ddiv+0x59e>
 800085e:	1d11      	adds	r1, r2, #4
 8000860:	4291      	cmp	r1, r2
 8000862:	4192      	sbcs	r2, r2
 8000864:	4252      	negs	r2, r2
 8000866:	189b      	adds	r3, r3, r2
 8000868:	000a      	movs	r2, r1
 800086a:	0219      	lsls	r1, r3, #8
 800086c:	d400      	bmi.n	8000870 <__aeabi_ddiv+0x418>
 800086e:	e0c2      	b.n	80009f6 <__aeabi_ddiv+0x59e>
 8000870:	2301      	movs	r3, #1
 8000872:	2400      	movs	r4, #0
 8000874:	2500      	movs	r5, #0
 8000876:	e646      	b.n	8000506 <__aeabi_ddiv+0xae>
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	4641      	mov	r1, r8
 800087c:	031b      	lsls	r3, r3, #12
 800087e:	4219      	tst	r1, r3
 8000880:	d008      	beq.n	8000894 <__aeabi_ddiv+0x43c>
 8000882:	421c      	tst	r4, r3
 8000884:	d106      	bne.n	8000894 <__aeabi_ddiv+0x43c>
 8000886:	431c      	orrs	r4, r3
 8000888:	0324      	lsls	r4, r4, #12
 800088a:	46ba      	mov	sl, r7
 800088c:	0015      	movs	r5, r2
 800088e:	4b69      	ldr	r3, [pc, #420]	; (8000a34 <__aeabi_ddiv+0x5dc>)
 8000890:	0b24      	lsrs	r4, r4, #12
 8000892:	e638      	b.n	8000506 <__aeabi_ddiv+0xae>
 8000894:	2480      	movs	r4, #128	; 0x80
 8000896:	4643      	mov	r3, r8
 8000898:	0324      	lsls	r4, r4, #12
 800089a:	431c      	orrs	r4, r3
 800089c:	0324      	lsls	r4, r4, #12
 800089e:	46b2      	mov	sl, r6
 80008a0:	4b64      	ldr	r3, [pc, #400]	; (8000a34 <__aeabi_ddiv+0x5dc>)
 80008a2:	0b24      	lsrs	r4, r4, #12
 80008a4:	e62f      	b.n	8000506 <__aeabi_ddiv+0xae>
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d100      	bne.n	80008ac <__aeabi_ddiv+0x454>
 80008aa:	e703      	b.n	80006b4 <__aeabi_ddiv+0x25c>
 80008ac:	19a6      	adds	r6, r4, r6
 80008ae:	1e68      	subs	r0, r5, #1
 80008b0:	42a6      	cmp	r6, r4
 80008b2:	d200      	bcs.n	80008b6 <__aeabi_ddiv+0x45e>
 80008b4:	e08d      	b.n	80009d2 <__aeabi_ddiv+0x57a>
 80008b6:	428e      	cmp	r6, r1
 80008b8:	d200      	bcs.n	80008bc <__aeabi_ddiv+0x464>
 80008ba:	e0a3      	b.n	8000a04 <__aeabi_ddiv+0x5ac>
 80008bc:	d100      	bne.n	80008c0 <__aeabi_ddiv+0x468>
 80008be:	e0b3      	b.n	8000a28 <__aeabi_ddiv+0x5d0>
 80008c0:	0005      	movs	r5, r0
 80008c2:	e6f5      	b.n	80006b0 <__aeabi_ddiv+0x258>
 80008c4:	42aa      	cmp	r2, r5
 80008c6:	d900      	bls.n	80008ca <__aeabi_ddiv+0x472>
 80008c8:	e639      	b.n	800053e <__aeabi_ddiv+0xe6>
 80008ca:	4643      	mov	r3, r8
 80008cc:	07de      	lsls	r6, r3, #31
 80008ce:	0858      	lsrs	r0, r3, #1
 80008d0:	086b      	lsrs	r3, r5, #1
 80008d2:	431e      	orrs	r6, r3
 80008d4:	07ed      	lsls	r5, r5, #31
 80008d6:	e639      	b.n	800054c <__aeabi_ddiv+0xf4>
 80008d8:	4648      	mov	r0, r9
 80008da:	f000 fd01 	bl	80012e0 <__clzsi2>
 80008de:	0001      	movs	r1, r0
 80008e0:	0002      	movs	r2, r0
 80008e2:	3115      	adds	r1, #21
 80008e4:	3220      	adds	r2, #32
 80008e6:	291c      	cmp	r1, #28
 80008e8:	dc00      	bgt.n	80008ec <__aeabi_ddiv+0x494>
 80008ea:	e72c      	b.n	8000746 <__aeabi_ddiv+0x2ee>
 80008ec:	464b      	mov	r3, r9
 80008ee:	3808      	subs	r0, #8
 80008f0:	4083      	lsls	r3, r0
 80008f2:	2500      	movs	r5, #0
 80008f4:	4698      	mov	r8, r3
 80008f6:	e732      	b.n	800075e <__aeabi_ddiv+0x306>
 80008f8:	f000 fcf2 	bl	80012e0 <__clzsi2>
 80008fc:	0003      	movs	r3, r0
 80008fe:	001a      	movs	r2, r3
 8000900:	3215      	adds	r2, #21
 8000902:	3020      	adds	r0, #32
 8000904:	2a1c      	cmp	r2, #28
 8000906:	dc00      	bgt.n	800090a <__aeabi_ddiv+0x4b2>
 8000908:	e700      	b.n	800070c <__aeabi_ddiv+0x2b4>
 800090a:	4654      	mov	r4, sl
 800090c:	3b08      	subs	r3, #8
 800090e:	2200      	movs	r2, #0
 8000910:	409c      	lsls	r4, r3
 8000912:	e705      	b.n	8000720 <__aeabi_ddiv+0x2c8>
 8000914:	1936      	adds	r6, r6, r4
 8000916:	3b01      	subs	r3, #1
 8000918:	42b4      	cmp	r4, r6
 800091a:	d900      	bls.n	800091e <__aeabi_ddiv+0x4c6>
 800091c:	e6a6      	b.n	800066c <__aeabi_ddiv+0x214>
 800091e:	42b2      	cmp	r2, r6
 8000920:	d800      	bhi.n	8000924 <__aeabi_ddiv+0x4cc>
 8000922:	e6a3      	b.n	800066c <__aeabi_ddiv+0x214>
 8000924:	1e83      	subs	r3, r0, #2
 8000926:	1936      	adds	r6, r6, r4
 8000928:	e6a0      	b.n	800066c <__aeabi_ddiv+0x214>
 800092a:	1909      	adds	r1, r1, r4
 800092c:	3d01      	subs	r5, #1
 800092e:	428c      	cmp	r4, r1
 8000930:	d900      	bls.n	8000934 <__aeabi_ddiv+0x4dc>
 8000932:	e68d      	b.n	8000650 <__aeabi_ddiv+0x1f8>
 8000934:	428a      	cmp	r2, r1
 8000936:	d800      	bhi.n	800093a <__aeabi_ddiv+0x4e2>
 8000938:	e68a      	b.n	8000650 <__aeabi_ddiv+0x1f8>
 800093a:	1e85      	subs	r5, r0, #2
 800093c:	1909      	adds	r1, r1, r4
 800093e:	e687      	b.n	8000650 <__aeabi_ddiv+0x1f8>
 8000940:	230f      	movs	r3, #15
 8000942:	402b      	ands	r3, r5
 8000944:	2b04      	cmp	r3, #4
 8000946:	d100      	bne.n	800094a <__aeabi_ddiv+0x4f2>
 8000948:	e6bc      	b.n	80006c4 <__aeabi_ddiv+0x26c>
 800094a:	2305      	movs	r3, #5
 800094c:	425b      	negs	r3, r3
 800094e:	42ab      	cmp	r3, r5
 8000950:	419b      	sbcs	r3, r3
 8000952:	3504      	adds	r5, #4
 8000954:	425b      	negs	r3, r3
 8000956:	08ed      	lsrs	r5, r5, #3
 8000958:	4498      	add	r8, r3
 800095a:	e6b4      	b.n	80006c6 <__aeabi_ddiv+0x26e>
 800095c:	42af      	cmp	r7, r5
 800095e:	d900      	bls.n	8000962 <__aeabi_ddiv+0x50a>
 8000960:	e660      	b.n	8000624 <__aeabi_ddiv+0x1cc>
 8000962:	4282      	cmp	r2, r0
 8000964:	d804      	bhi.n	8000970 <__aeabi_ddiv+0x518>
 8000966:	d000      	beq.n	800096a <__aeabi_ddiv+0x512>
 8000968:	e65c      	b.n	8000624 <__aeabi_ddiv+0x1cc>
 800096a:	42ae      	cmp	r6, r5
 800096c:	d800      	bhi.n	8000970 <__aeabi_ddiv+0x518>
 800096e:	e659      	b.n	8000624 <__aeabi_ddiv+0x1cc>
 8000970:	2302      	movs	r3, #2
 8000972:	425b      	negs	r3, r3
 8000974:	469c      	mov	ip, r3
 8000976:	9b00      	ldr	r3, [sp, #0]
 8000978:	44e0      	add	r8, ip
 800097a:	469c      	mov	ip, r3
 800097c:	4465      	add	r5, ip
 800097e:	429d      	cmp	r5, r3
 8000980:	419b      	sbcs	r3, r3
 8000982:	425b      	negs	r3, r3
 8000984:	191b      	adds	r3, r3, r4
 8000986:	18c0      	adds	r0, r0, r3
 8000988:	e64d      	b.n	8000626 <__aeabi_ddiv+0x1ce>
 800098a:	428a      	cmp	r2, r1
 800098c:	d800      	bhi.n	8000990 <__aeabi_ddiv+0x538>
 800098e:	e60e      	b.n	80005ae <__aeabi_ddiv+0x156>
 8000990:	1e83      	subs	r3, r0, #2
 8000992:	1909      	adds	r1, r1, r4
 8000994:	e60b      	b.n	80005ae <__aeabi_ddiv+0x156>
 8000996:	428a      	cmp	r2, r1
 8000998:	d800      	bhi.n	800099c <__aeabi_ddiv+0x544>
 800099a:	e5f4      	b.n	8000586 <__aeabi_ddiv+0x12e>
 800099c:	1e83      	subs	r3, r0, #2
 800099e:	4698      	mov	r8, r3
 80009a0:	1909      	adds	r1, r1, r4
 80009a2:	e5f0      	b.n	8000586 <__aeabi_ddiv+0x12e>
 80009a4:	4925      	ldr	r1, [pc, #148]	; (8000a3c <__aeabi_ddiv+0x5e4>)
 80009a6:	0028      	movs	r0, r5
 80009a8:	4459      	add	r1, fp
 80009aa:	408d      	lsls	r5, r1
 80009ac:	4642      	mov	r2, r8
 80009ae:	408a      	lsls	r2, r1
 80009b0:	1e69      	subs	r1, r5, #1
 80009b2:	418d      	sbcs	r5, r1
 80009b4:	4641      	mov	r1, r8
 80009b6:	40d8      	lsrs	r0, r3
 80009b8:	40d9      	lsrs	r1, r3
 80009ba:	4302      	orrs	r2, r0
 80009bc:	432a      	orrs	r2, r5
 80009be:	000b      	movs	r3, r1
 80009c0:	0751      	lsls	r1, r2, #29
 80009c2:	d100      	bne.n	80009c6 <__aeabi_ddiv+0x56e>
 80009c4:	e751      	b.n	800086a <__aeabi_ddiv+0x412>
 80009c6:	210f      	movs	r1, #15
 80009c8:	4011      	ands	r1, r2
 80009ca:	2904      	cmp	r1, #4
 80009cc:	d000      	beq.n	80009d0 <__aeabi_ddiv+0x578>
 80009ce:	e746      	b.n	800085e <__aeabi_ddiv+0x406>
 80009d0:	e74b      	b.n	800086a <__aeabi_ddiv+0x412>
 80009d2:	0005      	movs	r5, r0
 80009d4:	428e      	cmp	r6, r1
 80009d6:	d000      	beq.n	80009da <__aeabi_ddiv+0x582>
 80009d8:	e66a      	b.n	80006b0 <__aeabi_ddiv+0x258>
 80009da:	9a00      	ldr	r2, [sp, #0]
 80009dc:	4293      	cmp	r3, r2
 80009de:	d000      	beq.n	80009e2 <__aeabi_ddiv+0x58a>
 80009e0:	e666      	b.n	80006b0 <__aeabi_ddiv+0x258>
 80009e2:	e667      	b.n	80006b4 <__aeabi_ddiv+0x25c>
 80009e4:	4a16      	ldr	r2, [pc, #88]	; (8000a40 <__aeabi_ddiv+0x5e8>)
 80009e6:	445a      	add	r2, fp
 80009e8:	2a00      	cmp	r2, #0
 80009ea:	dc00      	bgt.n	80009ee <__aeabi_ddiv+0x596>
 80009ec:	e710      	b.n	8000810 <__aeabi_ddiv+0x3b8>
 80009ee:	2301      	movs	r3, #1
 80009f0:	2500      	movs	r5, #0
 80009f2:	4498      	add	r8, r3
 80009f4:	e667      	b.n	80006c6 <__aeabi_ddiv+0x26e>
 80009f6:	075d      	lsls	r5, r3, #29
 80009f8:	025b      	lsls	r3, r3, #9
 80009fa:	0b1c      	lsrs	r4, r3, #12
 80009fc:	08d2      	lsrs	r2, r2, #3
 80009fe:	2300      	movs	r3, #0
 8000a00:	4315      	orrs	r5, r2
 8000a02:	e580      	b.n	8000506 <__aeabi_ddiv+0xae>
 8000a04:	9800      	ldr	r0, [sp, #0]
 8000a06:	3d02      	subs	r5, #2
 8000a08:	0042      	lsls	r2, r0, #1
 8000a0a:	4282      	cmp	r2, r0
 8000a0c:	41bf      	sbcs	r7, r7
 8000a0e:	427f      	negs	r7, r7
 8000a10:	193c      	adds	r4, r7, r4
 8000a12:	1936      	adds	r6, r6, r4
 8000a14:	9200      	str	r2, [sp, #0]
 8000a16:	e7dd      	b.n	80009d4 <__aeabi_ddiv+0x57c>
 8000a18:	2480      	movs	r4, #128	; 0x80
 8000a1a:	4643      	mov	r3, r8
 8000a1c:	0324      	lsls	r4, r4, #12
 8000a1e:	431c      	orrs	r4, r3
 8000a20:	0324      	lsls	r4, r4, #12
 8000a22:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <__aeabi_ddiv+0x5dc>)
 8000a24:	0b24      	lsrs	r4, r4, #12
 8000a26:	e56e      	b.n	8000506 <__aeabi_ddiv+0xae>
 8000a28:	9a00      	ldr	r2, [sp, #0]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	d3ea      	bcc.n	8000a04 <__aeabi_ddiv+0x5ac>
 8000a2e:	0005      	movs	r5, r0
 8000a30:	e7d3      	b.n	80009da <__aeabi_ddiv+0x582>
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	000007ff 	.word	0x000007ff
 8000a38:	0000043e 	.word	0x0000043e
 8000a3c:	0000041e 	.word	0x0000041e
 8000a40:	000003ff 	.word	0x000003ff

08000a44 <__aeabi_dsub>:
 8000a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a46:	4657      	mov	r7, sl
 8000a48:	464e      	mov	r6, r9
 8000a4a:	4645      	mov	r5, r8
 8000a4c:	46de      	mov	lr, fp
 8000a4e:	b5e0      	push	{r5, r6, r7, lr}
 8000a50:	001e      	movs	r6, r3
 8000a52:	0017      	movs	r7, r2
 8000a54:	004a      	lsls	r2, r1, #1
 8000a56:	030b      	lsls	r3, r1, #12
 8000a58:	0d52      	lsrs	r2, r2, #21
 8000a5a:	0a5b      	lsrs	r3, r3, #9
 8000a5c:	4690      	mov	r8, r2
 8000a5e:	0f42      	lsrs	r2, r0, #29
 8000a60:	431a      	orrs	r2, r3
 8000a62:	0fcd      	lsrs	r5, r1, #31
 8000a64:	4ccd      	ldr	r4, [pc, #820]	; (8000d9c <__aeabi_dsub+0x358>)
 8000a66:	0331      	lsls	r1, r6, #12
 8000a68:	00c3      	lsls	r3, r0, #3
 8000a6a:	4694      	mov	ip, r2
 8000a6c:	0070      	lsls	r0, r6, #1
 8000a6e:	0f7a      	lsrs	r2, r7, #29
 8000a70:	0a49      	lsrs	r1, r1, #9
 8000a72:	00ff      	lsls	r7, r7, #3
 8000a74:	469a      	mov	sl, r3
 8000a76:	46b9      	mov	r9, r7
 8000a78:	0d40      	lsrs	r0, r0, #21
 8000a7a:	0ff6      	lsrs	r6, r6, #31
 8000a7c:	4311      	orrs	r1, r2
 8000a7e:	42a0      	cmp	r0, r4
 8000a80:	d100      	bne.n	8000a84 <__aeabi_dsub+0x40>
 8000a82:	e0b1      	b.n	8000be8 <__aeabi_dsub+0x1a4>
 8000a84:	2201      	movs	r2, #1
 8000a86:	4056      	eors	r6, r2
 8000a88:	46b3      	mov	fp, r6
 8000a8a:	42b5      	cmp	r5, r6
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_dsub+0x4c>
 8000a8e:	e088      	b.n	8000ba2 <__aeabi_dsub+0x15e>
 8000a90:	4642      	mov	r2, r8
 8000a92:	1a12      	subs	r2, r2, r0
 8000a94:	2a00      	cmp	r2, #0
 8000a96:	dc00      	bgt.n	8000a9a <__aeabi_dsub+0x56>
 8000a98:	e0ae      	b.n	8000bf8 <__aeabi_dsub+0x1b4>
 8000a9a:	2800      	cmp	r0, #0
 8000a9c:	d100      	bne.n	8000aa0 <__aeabi_dsub+0x5c>
 8000a9e:	e0c1      	b.n	8000c24 <__aeabi_dsub+0x1e0>
 8000aa0:	48be      	ldr	r0, [pc, #760]	; (8000d9c <__aeabi_dsub+0x358>)
 8000aa2:	4580      	cmp	r8, r0
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_dsub+0x64>
 8000aa6:	e151      	b.n	8000d4c <__aeabi_dsub+0x308>
 8000aa8:	2080      	movs	r0, #128	; 0x80
 8000aaa:	0400      	lsls	r0, r0, #16
 8000aac:	4301      	orrs	r1, r0
 8000aae:	2a38      	cmp	r2, #56	; 0x38
 8000ab0:	dd00      	ble.n	8000ab4 <__aeabi_dsub+0x70>
 8000ab2:	e17b      	b.n	8000dac <__aeabi_dsub+0x368>
 8000ab4:	2a1f      	cmp	r2, #31
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dsub+0x76>
 8000ab8:	e1ee      	b.n	8000e98 <__aeabi_dsub+0x454>
 8000aba:	2020      	movs	r0, #32
 8000abc:	003e      	movs	r6, r7
 8000abe:	1a80      	subs	r0, r0, r2
 8000ac0:	000c      	movs	r4, r1
 8000ac2:	40d6      	lsrs	r6, r2
 8000ac4:	40d1      	lsrs	r1, r2
 8000ac6:	4087      	lsls	r7, r0
 8000ac8:	4662      	mov	r2, ip
 8000aca:	4084      	lsls	r4, r0
 8000acc:	1a52      	subs	r2, r2, r1
 8000ace:	1e78      	subs	r0, r7, #1
 8000ad0:	4187      	sbcs	r7, r0
 8000ad2:	4694      	mov	ip, r2
 8000ad4:	4334      	orrs	r4, r6
 8000ad6:	4327      	orrs	r7, r4
 8000ad8:	1bdc      	subs	r4, r3, r7
 8000ada:	42a3      	cmp	r3, r4
 8000adc:	419b      	sbcs	r3, r3
 8000ade:	4662      	mov	r2, ip
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	4699      	mov	r9, r3
 8000ae6:	464b      	mov	r3, r9
 8000ae8:	021b      	lsls	r3, r3, #8
 8000aea:	d400      	bmi.n	8000aee <__aeabi_dsub+0xaa>
 8000aec:	e118      	b.n	8000d20 <__aeabi_dsub+0x2dc>
 8000aee:	464b      	mov	r3, r9
 8000af0:	0258      	lsls	r0, r3, #9
 8000af2:	0a43      	lsrs	r3, r0, #9
 8000af4:	4699      	mov	r9, r3
 8000af6:	464b      	mov	r3, r9
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d100      	bne.n	8000afe <__aeabi_dsub+0xba>
 8000afc:	e137      	b.n	8000d6e <__aeabi_dsub+0x32a>
 8000afe:	4648      	mov	r0, r9
 8000b00:	f000 fbee 	bl	80012e0 <__clzsi2>
 8000b04:	0001      	movs	r1, r0
 8000b06:	3908      	subs	r1, #8
 8000b08:	2320      	movs	r3, #32
 8000b0a:	0022      	movs	r2, r4
 8000b0c:	4648      	mov	r0, r9
 8000b0e:	1a5b      	subs	r3, r3, r1
 8000b10:	40da      	lsrs	r2, r3
 8000b12:	4088      	lsls	r0, r1
 8000b14:	408c      	lsls	r4, r1
 8000b16:	4643      	mov	r3, r8
 8000b18:	4310      	orrs	r0, r2
 8000b1a:	4588      	cmp	r8, r1
 8000b1c:	dd00      	ble.n	8000b20 <__aeabi_dsub+0xdc>
 8000b1e:	e136      	b.n	8000d8e <__aeabi_dsub+0x34a>
 8000b20:	1ac9      	subs	r1, r1, r3
 8000b22:	1c4b      	adds	r3, r1, #1
 8000b24:	2b1f      	cmp	r3, #31
 8000b26:	dd00      	ble.n	8000b2a <__aeabi_dsub+0xe6>
 8000b28:	e0ea      	b.n	8000d00 <__aeabi_dsub+0x2bc>
 8000b2a:	2220      	movs	r2, #32
 8000b2c:	0026      	movs	r6, r4
 8000b2e:	1ad2      	subs	r2, r2, r3
 8000b30:	0001      	movs	r1, r0
 8000b32:	4094      	lsls	r4, r2
 8000b34:	40de      	lsrs	r6, r3
 8000b36:	40d8      	lsrs	r0, r3
 8000b38:	2300      	movs	r3, #0
 8000b3a:	4091      	lsls	r1, r2
 8000b3c:	1e62      	subs	r2, r4, #1
 8000b3e:	4194      	sbcs	r4, r2
 8000b40:	4681      	mov	r9, r0
 8000b42:	4698      	mov	r8, r3
 8000b44:	4331      	orrs	r1, r6
 8000b46:	430c      	orrs	r4, r1
 8000b48:	0763      	lsls	r3, r4, #29
 8000b4a:	d009      	beq.n	8000b60 <__aeabi_dsub+0x11c>
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	4023      	ands	r3, r4
 8000b50:	2b04      	cmp	r3, #4
 8000b52:	d005      	beq.n	8000b60 <__aeabi_dsub+0x11c>
 8000b54:	1d23      	adds	r3, r4, #4
 8000b56:	42a3      	cmp	r3, r4
 8000b58:	41a4      	sbcs	r4, r4
 8000b5a:	4264      	negs	r4, r4
 8000b5c:	44a1      	add	r9, r4
 8000b5e:	001c      	movs	r4, r3
 8000b60:	464b      	mov	r3, r9
 8000b62:	021b      	lsls	r3, r3, #8
 8000b64:	d400      	bmi.n	8000b68 <__aeabi_dsub+0x124>
 8000b66:	e0de      	b.n	8000d26 <__aeabi_dsub+0x2e2>
 8000b68:	4641      	mov	r1, r8
 8000b6a:	4b8c      	ldr	r3, [pc, #560]	; (8000d9c <__aeabi_dsub+0x358>)
 8000b6c:	3101      	adds	r1, #1
 8000b6e:	4299      	cmp	r1, r3
 8000b70:	d100      	bne.n	8000b74 <__aeabi_dsub+0x130>
 8000b72:	e0e7      	b.n	8000d44 <__aeabi_dsub+0x300>
 8000b74:	464b      	mov	r3, r9
 8000b76:	488a      	ldr	r0, [pc, #552]	; (8000da0 <__aeabi_dsub+0x35c>)
 8000b78:	08e4      	lsrs	r4, r4, #3
 8000b7a:	4003      	ands	r3, r0
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	0549      	lsls	r1, r1, #21
 8000b80:	075b      	lsls	r3, r3, #29
 8000b82:	0240      	lsls	r0, r0, #9
 8000b84:	4323      	orrs	r3, r4
 8000b86:	0d4a      	lsrs	r2, r1, #21
 8000b88:	0b04      	lsrs	r4, r0, #12
 8000b8a:	0512      	lsls	r2, r2, #20
 8000b8c:	07ed      	lsls	r5, r5, #31
 8000b8e:	4322      	orrs	r2, r4
 8000b90:	432a      	orrs	r2, r5
 8000b92:	0018      	movs	r0, r3
 8000b94:	0011      	movs	r1, r2
 8000b96:	bcf0      	pop	{r4, r5, r6, r7}
 8000b98:	46bb      	mov	fp, r7
 8000b9a:	46b2      	mov	sl, r6
 8000b9c:	46a9      	mov	r9, r5
 8000b9e:	46a0      	mov	r8, r4
 8000ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ba2:	4642      	mov	r2, r8
 8000ba4:	1a12      	subs	r2, r2, r0
 8000ba6:	2a00      	cmp	r2, #0
 8000ba8:	dd52      	ble.n	8000c50 <__aeabi_dsub+0x20c>
 8000baa:	2800      	cmp	r0, #0
 8000bac:	d100      	bne.n	8000bb0 <__aeabi_dsub+0x16c>
 8000bae:	e09c      	b.n	8000cea <__aeabi_dsub+0x2a6>
 8000bb0:	45a0      	cmp	r8, r4
 8000bb2:	d100      	bne.n	8000bb6 <__aeabi_dsub+0x172>
 8000bb4:	e0ca      	b.n	8000d4c <__aeabi_dsub+0x308>
 8000bb6:	2080      	movs	r0, #128	; 0x80
 8000bb8:	0400      	lsls	r0, r0, #16
 8000bba:	4301      	orrs	r1, r0
 8000bbc:	2a38      	cmp	r2, #56	; 0x38
 8000bbe:	dd00      	ble.n	8000bc2 <__aeabi_dsub+0x17e>
 8000bc0:	e149      	b.n	8000e56 <__aeabi_dsub+0x412>
 8000bc2:	2a1f      	cmp	r2, #31
 8000bc4:	dc00      	bgt.n	8000bc8 <__aeabi_dsub+0x184>
 8000bc6:	e197      	b.n	8000ef8 <__aeabi_dsub+0x4b4>
 8000bc8:	0010      	movs	r0, r2
 8000bca:	000e      	movs	r6, r1
 8000bcc:	3820      	subs	r0, #32
 8000bce:	40c6      	lsrs	r6, r0
 8000bd0:	2a20      	cmp	r2, #32
 8000bd2:	d004      	beq.n	8000bde <__aeabi_dsub+0x19a>
 8000bd4:	2040      	movs	r0, #64	; 0x40
 8000bd6:	1a82      	subs	r2, r0, r2
 8000bd8:	4091      	lsls	r1, r2
 8000bda:	430f      	orrs	r7, r1
 8000bdc:	46b9      	mov	r9, r7
 8000bde:	464c      	mov	r4, r9
 8000be0:	1e62      	subs	r2, r4, #1
 8000be2:	4194      	sbcs	r4, r2
 8000be4:	4334      	orrs	r4, r6
 8000be6:	e13a      	b.n	8000e5e <__aeabi_dsub+0x41a>
 8000be8:	000a      	movs	r2, r1
 8000bea:	433a      	orrs	r2, r7
 8000bec:	d028      	beq.n	8000c40 <__aeabi_dsub+0x1fc>
 8000bee:	46b3      	mov	fp, r6
 8000bf0:	42b5      	cmp	r5, r6
 8000bf2:	d02b      	beq.n	8000c4c <__aeabi_dsub+0x208>
 8000bf4:	4a6b      	ldr	r2, [pc, #428]	; (8000da4 <__aeabi_dsub+0x360>)
 8000bf6:	4442      	add	r2, r8
 8000bf8:	2a00      	cmp	r2, #0
 8000bfa:	d05d      	beq.n	8000cb8 <__aeabi_dsub+0x274>
 8000bfc:	4642      	mov	r2, r8
 8000bfe:	4644      	mov	r4, r8
 8000c00:	1a82      	subs	r2, r0, r2
 8000c02:	2c00      	cmp	r4, #0
 8000c04:	d000      	beq.n	8000c08 <__aeabi_dsub+0x1c4>
 8000c06:	e0f5      	b.n	8000df4 <__aeabi_dsub+0x3b0>
 8000c08:	4665      	mov	r5, ip
 8000c0a:	431d      	orrs	r5, r3
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_dsub+0x1cc>
 8000c0e:	e19c      	b.n	8000f4a <__aeabi_dsub+0x506>
 8000c10:	1e55      	subs	r5, r2, #1
 8000c12:	2a01      	cmp	r2, #1
 8000c14:	d100      	bne.n	8000c18 <__aeabi_dsub+0x1d4>
 8000c16:	e1fb      	b.n	8001010 <__aeabi_dsub+0x5cc>
 8000c18:	4c60      	ldr	r4, [pc, #384]	; (8000d9c <__aeabi_dsub+0x358>)
 8000c1a:	42a2      	cmp	r2, r4
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_dsub+0x1dc>
 8000c1e:	e1bd      	b.n	8000f9c <__aeabi_dsub+0x558>
 8000c20:	002a      	movs	r2, r5
 8000c22:	e0f0      	b.n	8000e06 <__aeabi_dsub+0x3c2>
 8000c24:	0008      	movs	r0, r1
 8000c26:	4338      	orrs	r0, r7
 8000c28:	d100      	bne.n	8000c2c <__aeabi_dsub+0x1e8>
 8000c2a:	e0c3      	b.n	8000db4 <__aeabi_dsub+0x370>
 8000c2c:	1e50      	subs	r0, r2, #1
 8000c2e:	2a01      	cmp	r2, #1
 8000c30:	d100      	bne.n	8000c34 <__aeabi_dsub+0x1f0>
 8000c32:	e1a8      	b.n	8000f86 <__aeabi_dsub+0x542>
 8000c34:	4c59      	ldr	r4, [pc, #356]	; (8000d9c <__aeabi_dsub+0x358>)
 8000c36:	42a2      	cmp	r2, r4
 8000c38:	d100      	bne.n	8000c3c <__aeabi_dsub+0x1f8>
 8000c3a:	e087      	b.n	8000d4c <__aeabi_dsub+0x308>
 8000c3c:	0002      	movs	r2, r0
 8000c3e:	e736      	b.n	8000aae <__aeabi_dsub+0x6a>
 8000c40:	2201      	movs	r2, #1
 8000c42:	4056      	eors	r6, r2
 8000c44:	46b3      	mov	fp, r6
 8000c46:	42b5      	cmp	r5, r6
 8000c48:	d000      	beq.n	8000c4c <__aeabi_dsub+0x208>
 8000c4a:	e721      	b.n	8000a90 <__aeabi_dsub+0x4c>
 8000c4c:	4a55      	ldr	r2, [pc, #340]	; (8000da4 <__aeabi_dsub+0x360>)
 8000c4e:	4442      	add	r2, r8
 8000c50:	2a00      	cmp	r2, #0
 8000c52:	d100      	bne.n	8000c56 <__aeabi_dsub+0x212>
 8000c54:	e0b5      	b.n	8000dc2 <__aeabi_dsub+0x37e>
 8000c56:	4642      	mov	r2, r8
 8000c58:	4644      	mov	r4, r8
 8000c5a:	1a82      	subs	r2, r0, r2
 8000c5c:	2c00      	cmp	r4, #0
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_dsub+0x21e>
 8000c60:	e138      	b.n	8000ed4 <__aeabi_dsub+0x490>
 8000c62:	4e4e      	ldr	r6, [pc, #312]	; (8000d9c <__aeabi_dsub+0x358>)
 8000c64:	42b0      	cmp	r0, r6
 8000c66:	d100      	bne.n	8000c6a <__aeabi_dsub+0x226>
 8000c68:	e1de      	b.n	8001028 <__aeabi_dsub+0x5e4>
 8000c6a:	2680      	movs	r6, #128	; 0x80
 8000c6c:	4664      	mov	r4, ip
 8000c6e:	0436      	lsls	r6, r6, #16
 8000c70:	4334      	orrs	r4, r6
 8000c72:	46a4      	mov	ip, r4
 8000c74:	2a38      	cmp	r2, #56	; 0x38
 8000c76:	dd00      	ble.n	8000c7a <__aeabi_dsub+0x236>
 8000c78:	e196      	b.n	8000fa8 <__aeabi_dsub+0x564>
 8000c7a:	2a1f      	cmp	r2, #31
 8000c7c:	dd00      	ble.n	8000c80 <__aeabi_dsub+0x23c>
 8000c7e:	e224      	b.n	80010ca <__aeabi_dsub+0x686>
 8000c80:	2620      	movs	r6, #32
 8000c82:	1ab4      	subs	r4, r6, r2
 8000c84:	46a2      	mov	sl, r4
 8000c86:	4664      	mov	r4, ip
 8000c88:	4656      	mov	r6, sl
 8000c8a:	40b4      	lsls	r4, r6
 8000c8c:	46a1      	mov	r9, r4
 8000c8e:	001c      	movs	r4, r3
 8000c90:	464e      	mov	r6, r9
 8000c92:	40d4      	lsrs	r4, r2
 8000c94:	4326      	orrs	r6, r4
 8000c96:	0034      	movs	r4, r6
 8000c98:	4656      	mov	r6, sl
 8000c9a:	40b3      	lsls	r3, r6
 8000c9c:	1e5e      	subs	r6, r3, #1
 8000c9e:	41b3      	sbcs	r3, r6
 8000ca0:	431c      	orrs	r4, r3
 8000ca2:	4663      	mov	r3, ip
 8000ca4:	40d3      	lsrs	r3, r2
 8000ca6:	18c9      	adds	r1, r1, r3
 8000ca8:	19e4      	adds	r4, r4, r7
 8000caa:	42bc      	cmp	r4, r7
 8000cac:	41bf      	sbcs	r7, r7
 8000cae:	427f      	negs	r7, r7
 8000cb0:	46b9      	mov	r9, r7
 8000cb2:	4680      	mov	r8, r0
 8000cb4:	4489      	add	r9, r1
 8000cb6:	e0d8      	b.n	8000e6a <__aeabi_dsub+0x426>
 8000cb8:	4640      	mov	r0, r8
 8000cba:	4c3b      	ldr	r4, [pc, #236]	; (8000da8 <__aeabi_dsub+0x364>)
 8000cbc:	3001      	adds	r0, #1
 8000cbe:	4220      	tst	r0, r4
 8000cc0:	d000      	beq.n	8000cc4 <__aeabi_dsub+0x280>
 8000cc2:	e0b4      	b.n	8000e2e <__aeabi_dsub+0x3ea>
 8000cc4:	4640      	mov	r0, r8
 8000cc6:	2800      	cmp	r0, #0
 8000cc8:	d000      	beq.n	8000ccc <__aeabi_dsub+0x288>
 8000cca:	e144      	b.n	8000f56 <__aeabi_dsub+0x512>
 8000ccc:	4660      	mov	r0, ip
 8000cce:	4318      	orrs	r0, r3
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_dsub+0x290>
 8000cd2:	e190      	b.n	8000ff6 <__aeabi_dsub+0x5b2>
 8000cd4:	0008      	movs	r0, r1
 8000cd6:	4338      	orrs	r0, r7
 8000cd8:	d000      	beq.n	8000cdc <__aeabi_dsub+0x298>
 8000cda:	e1aa      	b.n	8001032 <__aeabi_dsub+0x5ee>
 8000cdc:	4661      	mov	r1, ip
 8000cde:	08db      	lsrs	r3, r3, #3
 8000ce0:	0749      	lsls	r1, r1, #29
 8000ce2:	430b      	orrs	r3, r1
 8000ce4:	4661      	mov	r1, ip
 8000ce6:	08cc      	lsrs	r4, r1, #3
 8000ce8:	e027      	b.n	8000d3a <__aeabi_dsub+0x2f6>
 8000cea:	0008      	movs	r0, r1
 8000cec:	4338      	orrs	r0, r7
 8000cee:	d061      	beq.n	8000db4 <__aeabi_dsub+0x370>
 8000cf0:	1e50      	subs	r0, r2, #1
 8000cf2:	2a01      	cmp	r2, #1
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_dsub+0x2b4>
 8000cf6:	e139      	b.n	8000f6c <__aeabi_dsub+0x528>
 8000cf8:	42a2      	cmp	r2, r4
 8000cfa:	d027      	beq.n	8000d4c <__aeabi_dsub+0x308>
 8000cfc:	0002      	movs	r2, r0
 8000cfe:	e75d      	b.n	8000bbc <__aeabi_dsub+0x178>
 8000d00:	0002      	movs	r2, r0
 8000d02:	391f      	subs	r1, #31
 8000d04:	40ca      	lsrs	r2, r1
 8000d06:	0011      	movs	r1, r2
 8000d08:	2b20      	cmp	r3, #32
 8000d0a:	d003      	beq.n	8000d14 <__aeabi_dsub+0x2d0>
 8000d0c:	2240      	movs	r2, #64	; 0x40
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	4098      	lsls	r0, r3
 8000d12:	4304      	orrs	r4, r0
 8000d14:	1e63      	subs	r3, r4, #1
 8000d16:	419c      	sbcs	r4, r3
 8000d18:	2300      	movs	r3, #0
 8000d1a:	4699      	mov	r9, r3
 8000d1c:	4698      	mov	r8, r3
 8000d1e:	430c      	orrs	r4, r1
 8000d20:	0763      	lsls	r3, r4, #29
 8000d22:	d000      	beq.n	8000d26 <__aeabi_dsub+0x2e2>
 8000d24:	e712      	b.n	8000b4c <__aeabi_dsub+0x108>
 8000d26:	464b      	mov	r3, r9
 8000d28:	464a      	mov	r2, r9
 8000d2a:	08e4      	lsrs	r4, r4, #3
 8000d2c:	075b      	lsls	r3, r3, #29
 8000d2e:	4323      	orrs	r3, r4
 8000d30:	08d4      	lsrs	r4, r2, #3
 8000d32:	4642      	mov	r2, r8
 8000d34:	4919      	ldr	r1, [pc, #100]	; (8000d9c <__aeabi_dsub+0x358>)
 8000d36:	428a      	cmp	r2, r1
 8000d38:	d00e      	beq.n	8000d58 <__aeabi_dsub+0x314>
 8000d3a:	0324      	lsls	r4, r4, #12
 8000d3c:	0552      	lsls	r2, r2, #21
 8000d3e:	0b24      	lsrs	r4, r4, #12
 8000d40:	0d52      	lsrs	r2, r2, #21
 8000d42:	e722      	b.n	8000b8a <__aeabi_dsub+0x146>
 8000d44:	000a      	movs	r2, r1
 8000d46:	2400      	movs	r4, #0
 8000d48:	2300      	movs	r3, #0
 8000d4a:	e71e      	b.n	8000b8a <__aeabi_dsub+0x146>
 8000d4c:	08db      	lsrs	r3, r3, #3
 8000d4e:	4662      	mov	r2, ip
 8000d50:	0752      	lsls	r2, r2, #29
 8000d52:	4313      	orrs	r3, r2
 8000d54:	4662      	mov	r2, ip
 8000d56:	08d4      	lsrs	r4, r2, #3
 8000d58:	001a      	movs	r2, r3
 8000d5a:	4322      	orrs	r2, r4
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dsub+0x31c>
 8000d5e:	e1fc      	b.n	800115a <__aeabi_dsub+0x716>
 8000d60:	2280      	movs	r2, #128	; 0x80
 8000d62:	0312      	lsls	r2, r2, #12
 8000d64:	4314      	orrs	r4, r2
 8000d66:	0324      	lsls	r4, r4, #12
 8000d68:	4a0c      	ldr	r2, [pc, #48]	; (8000d9c <__aeabi_dsub+0x358>)
 8000d6a:	0b24      	lsrs	r4, r4, #12
 8000d6c:	e70d      	b.n	8000b8a <__aeabi_dsub+0x146>
 8000d6e:	0020      	movs	r0, r4
 8000d70:	f000 fab6 	bl	80012e0 <__clzsi2>
 8000d74:	0001      	movs	r1, r0
 8000d76:	3118      	adds	r1, #24
 8000d78:	291f      	cmp	r1, #31
 8000d7a:	dc00      	bgt.n	8000d7e <__aeabi_dsub+0x33a>
 8000d7c:	e6c4      	b.n	8000b08 <__aeabi_dsub+0xc4>
 8000d7e:	3808      	subs	r0, #8
 8000d80:	4084      	lsls	r4, r0
 8000d82:	4643      	mov	r3, r8
 8000d84:	0020      	movs	r0, r4
 8000d86:	2400      	movs	r4, #0
 8000d88:	4588      	cmp	r8, r1
 8000d8a:	dc00      	bgt.n	8000d8e <__aeabi_dsub+0x34a>
 8000d8c:	e6c8      	b.n	8000b20 <__aeabi_dsub+0xdc>
 8000d8e:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <__aeabi_dsub+0x35c>)
 8000d90:	1a5b      	subs	r3, r3, r1
 8000d92:	4010      	ands	r0, r2
 8000d94:	4698      	mov	r8, r3
 8000d96:	4681      	mov	r9, r0
 8000d98:	e6d6      	b.n	8000b48 <__aeabi_dsub+0x104>
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	000007ff 	.word	0x000007ff
 8000da0:	ff7fffff 	.word	0xff7fffff
 8000da4:	fffff801 	.word	0xfffff801
 8000da8:	000007fe 	.word	0x000007fe
 8000dac:	430f      	orrs	r7, r1
 8000dae:	1e7a      	subs	r2, r7, #1
 8000db0:	4197      	sbcs	r7, r2
 8000db2:	e691      	b.n	8000ad8 <__aeabi_dsub+0x94>
 8000db4:	4661      	mov	r1, ip
 8000db6:	08db      	lsrs	r3, r3, #3
 8000db8:	0749      	lsls	r1, r1, #29
 8000dba:	430b      	orrs	r3, r1
 8000dbc:	4661      	mov	r1, ip
 8000dbe:	08cc      	lsrs	r4, r1, #3
 8000dc0:	e7b8      	b.n	8000d34 <__aeabi_dsub+0x2f0>
 8000dc2:	4640      	mov	r0, r8
 8000dc4:	4cd3      	ldr	r4, [pc, #844]	; (8001114 <__aeabi_dsub+0x6d0>)
 8000dc6:	3001      	adds	r0, #1
 8000dc8:	4220      	tst	r0, r4
 8000dca:	d000      	beq.n	8000dce <__aeabi_dsub+0x38a>
 8000dcc:	e0a2      	b.n	8000f14 <__aeabi_dsub+0x4d0>
 8000dce:	4640      	mov	r0, r8
 8000dd0:	2800      	cmp	r0, #0
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_dsub+0x392>
 8000dd4:	e101      	b.n	8000fda <__aeabi_dsub+0x596>
 8000dd6:	4660      	mov	r0, ip
 8000dd8:	4318      	orrs	r0, r3
 8000dda:	d100      	bne.n	8000dde <__aeabi_dsub+0x39a>
 8000ddc:	e15e      	b.n	800109c <__aeabi_dsub+0x658>
 8000dde:	0008      	movs	r0, r1
 8000de0:	4338      	orrs	r0, r7
 8000de2:	d000      	beq.n	8000de6 <__aeabi_dsub+0x3a2>
 8000de4:	e15f      	b.n	80010a6 <__aeabi_dsub+0x662>
 8000de6:	4661      	mov	r1, ip
 8000de8:	08db      	lsrs	r3, r3, #3
 8000dea:	0749      	lsls	r1, r1, #29
 8000dec:	430b      	orrs	r3, r1
 8000dee:	4661      	mov	r1, ip
 8000df0:	08cc      	lsrs	r4, r1, #3
 8000df2:	e7a2      	b.n	8000d3a <__aeabi_dsub+0x2f6>
 8000df4:	4dc8      	ldr	r5, [pc, #800]	; (8001118 <__aeabi_dsub+0x6d4>)
 8000df6:	42a8      	cmp	r0, r5
 8000df8:	d100      	bne.n	8000dfc <__aeabi_dsub+0x3b8>
 8000dfa:	e0cf      	b.n	8000f9c <__aeabi_dsub+0x558>
 8000dfc:	2580      	movs	r5, #128	; 0x80
 8000dfe:	4664      	mov	r4, ip
 8000e00:	042d      	lsls	r5, r5, #16
 8000e02:	432c      	orrs	r4, r5
 8000e04:	46a4      	mov	ip, r4
 8000e06:	2a38      	cmp	r2, #56	; 0x38
 8000e08:	dc56      	bgt.n	8000eb8 <__aeabi_dsub+0x474>
 8000e0a:	2a1f      	cmp	r2, #31
 8000e0c:	dd00      	ble.n	8000e10 <__aeabi_dsub+0x3cc>
 8000e0e:	e0d1      	b.n	8000fb4 <__aeabi_dsub+0x570>
 8000e10:	2520      	movs	r5, #32
 8000e12:	001e      	movs	r6, r3
 8000e14:	1aad      	subs	r5, r5, r2
 8000e16:	4664      	mov	r4, ip
 8000e18:	40ab      	lsls	r3, r5
 8000e1a:	40ac      	lsls	r4, r5
 8000e1c:	40d6      	lsrs	r6, r2
 8000e1e:	1e5d      	subs	r5, r3, #1
 8000e20:	41ab      	sbcs	r3, r5
 8000e22:	4334      	orrs	r4, r6
 8000e24:	4323      	orrs	r3, r4
 8000e26:	4664      	mov	r4, ip
 8000e28:	40d4      	lsrs	r4, r2
 8000e2a:	1b09      	subs	r1, r1, r4
 8000e2c:	e049      	b.n	8000ec2 <__aeabi_dsub+0x47e>
 8000e2e:	4660      	mov	r0, ip
 8000e30:	1bdc      	subs	r4, r3, r7
 8000e32:	1a46      	subs	r6, r0, r1
 8000e34:	42a3      	cmp	r3, r4
 8000e36:	4180      	sbcs	r0, r0
 8000e38:	4240      	negs	r0, r0
 8000e3a:	4681      	mov	r9, r0
 8000e3c:	0030      	movs	r0, r6
 8000e3e:	464e      	mov	r6, r9
 8000e40:	1b80      	subs	r0, r0, r6
 8000e42:	4681      	mov	r9, r0
 8000e44:	0200      	lsls	r0, r0, #8
 8000e46:	d476      	bmi.n	8000f36 <__aeabi_dsub+0x4f2>
 8000e48:	464b      	mov	r3, r9
 8000e4a:	4323      	orrs	r3, r4
 8000e4c:	d000      	beq.n	8000e50 <__aeabi_dsub+0x40c>
 8000e4e:	e652      	b.n	8000af6 <__aeabi_dsub+0xb2>
 8000e50:	2400      	movs	r4, #0
 8000e52:	2500      	movs	r5, #0
 8000e54:	e771      	b.n	8000d3a <__aeabi_dsub+0x2f6>
 8000e56:	4339      	orrs	r1, r7
 8000e58:	000c      	movs	r4, r1
 8000e5a:	1e62      	subs	r2, r4, #1
 8000e5c:	4194      	sbcs	r4, r2
 8000e5e:	18e4      	adds	r4, r4, r3
 8000e60:	429c      	cmp	r4, r3
 8000e62:	419b      	sbcs	r3, r3
 8000e64:	425b      	negs	r3, r3
 8000e66:	4463      	add	r3, ip
 8000e68:	4699      	mov	r9, r3
 8000e6a:	464b      	mov	r3, r9
 8000e6c:	021b      	lsls	r3, r3, #8
 8000e6e:	d400      	bmi.n	8000e72 <__aeabi_dsub+0x42e>
 8000e70:	e756      	b.n	8000d20 <__aeabi_dsub+0x2dc>
 8000e72:	2301      	movs	r3, #1
 8000e74:	469c      	mov	ip, r3
 8000e76:	4ba8      	ldr	r3, [pc, #672]	; (8001118 <__aeabi_dsub+0x6d4>)
 8000e78:	44e0      	add	r8, ip
 8000e7a:	4598      	cmp	r8, r3
 8000e7c:	d038      	beq.n	8000ef0 <__aeabi_dsub+0x4ac>
 8000e7e:	464b      	mov	r3, r9
 8000e80:	48a6      	ldr	r0, [pc, #664]	; (800111c <__aeabi_dsub+0x6d8>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	4003      	ands	r3, r0
 8000e86:	0018      	movs	r0, r3
 8000e88:	0863      	lsrs	r3, r4, #1
 8000e8a:	4014      	ands	r4, r2
 8000e8c:	431c      	orrs	r4, r3
 8000e8e:	07c3      	lsls	r3, r0, #31
 8000e90:	431c      	orrs	r4, r3
 8000e92:	0843      	lsrs	r3, r0, #1
 8000e94:	4699      	mov	r9, r3
 8000e96:	e657      	b.n	8000b48 <__aeabi_dsub+0x104>
 8000e98:	0010      	movs	r0, r2
 8000e9a:	000e      	movs	r6, r1
 8000e9c:	3820      	subs	r0, #32
 8000e9e:	40c6      	lsrs	r6, r0
 8000ea0:	2a20      	cmp	r2, #32
 8000ea2:	d004      	beq.n	8000eae <__aeabi_dsub+0x46a>
 8000ea4:	2040      	movs	r0, #64	; 0x40
 8000ea6:	1a82      	subs	r2, r0, r2
 8000ea8:	4091      	lsls	r1, r2
 8000eaa:	430f      	orrs	r7, r1
 8000eac:	46b9      	mov	r9, r7
 8000eae:	464f      	mov	r7, r9
 8000eb0:	1e7a      	subs	r2, r7, #1
 8000eb2:	4197      	sbcs	r7, r2
 8000eb4:	4337      	orrs	r7, r6
 8000eb6:	e60f      	b.n	8000ad8 <__aeabi_dsub+0x94>
 8000eb8:	4662      	mov	r2, ip
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	0013      	movs	r3, r2
 8000ebe:	1e5a      	subs	r2, r3, #1
 8000ec0:	4193      	sbcs	r3, r2
 8000ec2:	1afc      	subs	r4, r7, r3
 8000ec4:	42a7      	cmp	r7, r4
 8000ec6:	41bf      	sbcs	r7, r7
 8000ec8:	427f      	negs	r7, r7
 8000eca:	1bcb      	subs	r3, r1, r7
 8000ecc:	4699      	mov	r9, r3
 8000ece:	465d      	mov	r5, fp
 8000ed0:	4680      	mov	r8, r0
 8000ed2:	e608      	b.n	8000ae6 <__aeabi_dsub+0xa2>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	431e      	orrs	r6, r3
 8000ed8:	d100      	bne.n	8000edc <__aeabi_dsub+0x498>
 8000eda:	e0be      	b.n	800105a <__aeabi_dsub+0x616>
 8000edc:	1e56      	subs	r6, r2, #1
 8000ede:	2a01      	cmp	r2, #1
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_dsub+0x4a0>
 8000ee2:	e109      	b.n	80010f8 <__aeabi_dsub+0x6b4>
 8000ee4:	4c8c      	ldr	r4, [pc, #560]	; (8001118 <__aeabi_dsub+0x6d4>)
 8000ee6:	42a2      	cmp	r2, r4
 8000ee8:	d100      	bne.n	8000eec <__aeabi_dsub+0x4a8>
 8000eea:	e119      	b.n	8001120 <__aeabi_dsub+0x6dc>
 8000eec:	0032      	movs	r2, r6
 8000eee:	e6c1      	b.n	8000c74 <__aeabi_dsub+0x230>
 8000ef0:	4642      	mov	r2, r8
 8000ef2:	2400      	movs	r4, #0
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	e648      	b.n	8000b8a <__aeabi_dsub+0x146>
 8000ef8:	2020      	movs	r0, #32
 8000efa:	000c      	movs	r4, r1
 8000efc:	1a80      	subs	r0, r0, r2
 8000efe:	003e      	movs	r6, r7
 8000f00:	4087      	lsls	r7, r0
 8000f02:	4084      	lsls	r4, r0
 8000f04:	40d6      	lsrs	r6, r2
 8000f06:	1e78      	subs	r0, r7, #1
 8000f08:	4187      	sbcs	r7, r0
 8000f0a:	40d1      	lsrs	r1, r2
 8000f0c:	4334      	orrs	r4, r6
 8000f0e:	433c      	orrs	r4, r7
 8000f10:	448c      	add	ip, r1
 8000f12:	e7a4      	b.n	8000e5e <__aeabi_dsub+0x41a>
 8000f14:	4a80      	ldr	r2, [pc, #512]	; (8001118 <__aeabi_dsub+0x6d4>)
 8000f16:	4290      	cmp	r0, r2
 8000f18:	d100      	bne.n	8000f1c <__aeabi_dsub+0x4d8>
 8000f1a:	e0e9      	b.n	80010f0 <__aeabi_dsub+0x6ac>
 8000f1c:	19df      	adds	r7, r3, r7
 8000f1e:	429f      	cmp	r7, r3
 8000f20:	419b      	sbcs	r3, r3
 8000f22:	4461      	add	r1, ip
 8000f24:	425b      	negs	r3, r3
 8000f26:	18c9      	adds	r1, r1, r3
 8000f28:	07cc      	lsls	r4, r1, #31
 8000f2a:	087f      	lsrs	r7, r7, #1
 8000f2c:	084b      	lsrs	r3, r1, #1
 8000f2e:	4699      	mov	r9, r3
 8000f30:	4680      	mov	r8, r0
 8000f32:	433c      	orrs	r4, r7
 8000f34:	e6f4      	b.n	8000d20 <__aeabi_dsub+0x2dc>
 8000f36:	1afc      	subs	r4, r7, r3
 8000f38:	42a7      	cmp	r7, r4
 8000f3a:	41bf      	sbcs	r7, r7
 8000f3c:	4663      	mov	r3, ip
 8000f3e:	427f      	negs	r7, r7
 8000f40:	1ac9      	subs	r1, r1, r3
 8000f42:	1bcb      	subs	r3, r1, r7
 8000f44:	4699      	mov	r9, r3
 8000f46:	465d      	mov	r5, fp
 8000f48:	e5d5      	b.n	8000af6 <__aeabi_dsub+0xb2>
 8000f4a:	08ff      	lsrs	r7, r7, #3
 8000f4c:	074b      	lsls	r3, r1, #29
 8000f4e:	465d      	mov	r5, fp
 8000f50:	433b      	orrs	r3, r7
 8000f52:	08cc      	lsrs	r4, r1, #3
 8000f54:	e6ee      	b.n	8000d34 <__aeabi_dsub+0x2f0>
 8000f56:	4662      	mov	r2, ip
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	d000      	beq.n	8000f5e <__aeabi_dsub+0x51a>
 8000f5c:	e082      	b.n	8001064 <__aeabi_dsub+0x620>
 8000f5e:	000b      	movs	r3, r1
 8000f60:	433b      	orrs	r3, r7
 8000f62:	d11b      	bne.n	8000f9c <__aeabi_dsub+0x558>
 8000f64:	2480      	movs	r4, #128	; 0x80
 8000f66:	2500      	movs	r5, #0
 8000f68:	0324      	lsls	r4, r4, #12
 8000f6a:	e6f9      	b.n	8000d60 <__aeabi_dsub+0x31c>
 8000f6c:	19dc      	adds	r4, r3, r7
 8000f6e:	429c      	cmp	r4, r3
 8000f70:	419b      	sbcs	r3, r3
 8000f72:	4461      	add	r1, ip
 8000f74:	4689      	mov	r9, r1
 8000f76:	425b      	negs	r3, r3
 8000f78:	4499      	add	r9, r3
 8000f7a:	464b      	mov	r3, r9
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	d444      	bmi.n	800100a <__aeabi_dsub+0x5c6>
 8000f80:	2301      	movs	r3, #1
 8000f82:	4698      	mov	r8, r3
 8000f84:	e6cc      	b.n	8000d20 <__aeabi_dsub+0x2dc>
 8000f86:	1bdc      	subs	r4, r3, r7
 8000f88:	4662      	mov	r2, ip
 8000f8a:	42a3      	cmp	r3, r4
 8000f8c:	419b      	sbcs	r3, r3
 8000f8e:	1a51      	subs	r1, r2, r1
 8000f90:	425b      	negs	r3, r3
 8000f92:	1acb      	subs	r3, r1, r3
 8000f94:	4699      	mov	r9, r3
 8000f96:	2301      	movs	r3, #1
 8000f98:	4698      	mov	r8, r3
 8000f9a:	e5a4      	b.n	8000ae6 <__aeabi_dsub+0xa2>
 8000f9c:	08ff      	lsrs	r7, r7, #3
 8000f9e:	074b      	lsls	r3, r1, #29
 8000fa0:	465d      	mov	r5, fp
 8000fa2:	433b      	orrs	r3, r7
 8000fa4:	08cc      	lsrs	r4, r1, #3
 8000fa6:	e6d7      	b.n	8000d58 <__aeabi_dsub+0x314>
 8000fa8:	4662      	mov	r2, ip
 8000faa:	431a      	orrs	r2, r3
 8000fac:	0014      	movs	r4, r2
 8000fae:	1e63      	subs	r3, r4, #1
 8000fb0:	419c      	sbcs	r4, r3
 8000fb2:	e679      	b.n	8000ca8 <__aeabi_dsub+0x264>
 8000fb4:	0015      	movs	r5, r2
 8000fb6:	4664      	mov	r4, ip
 8000fb8:	3d20      	subs	r5, #32
 8000fba:	40ec      	lsrs	r4, r5
 8000fbc:	46a0      	mov	r8, r4
 8000fbe:	2a20      	cmp	r2, #32
 8000fc0:	d005      	beq.n	8000fce <__aeabi_dsub+0x58a>
 8000fc2:	2540      	movs	r5, #64	; 0x40
 8000fc4:	4664      	mov	r4, ip
 8000fc6:	1aaa      	subs	r2, r5, r2
 8000fc8:	4094      	lsls	r4, r2
 8000fca:	4323      	orrs	r3, r4
 8000fcc:	469a      	mov	sl, r3
 8000fce:	4654      	mov	r4, sl
 8000fd0:	1e63      	subs	r3, r4, #1
 8000fd2:	419c      	sbcs	r4, r3
 8000fd4:	4643      	mov	r3, r8
 8000fd6:	4323      	orrs	r3, r4
 8000fd8:	e773      	b.n	8000ec2 <__aeabi_dsub+0x47e>
 8000fda:	4662      	mov	r2, ip
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	d023      	beq.n	8001028 <__aeabi_dsub+0x5e4>
 8000fe0:	000a      	movs	r2, r1
 8000fe2:	433a      	orrs	r2, r7
 8000fe4:	d000      	beq.n	8000fe8 <__aeabi_dsub+0x5a4>
 8000fe6:	e0a0      	b.n	800112a <__aeabi_dsub+0x6e6>
 8000fe8:	4662      	mov	r2, ip
 8000fea:	08db      	lsrs	r3, r3, #3
 8000fec:	0752      	lsls	r2, r2, #29
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	4662      	mov	r2, ip
 8000ff2:	08d4      	lsrs	r4, r2, #3
 8000ff4:	e6b0      	b.n	8000d58 <__aeabi_dsub+0x314>
 8000ff6:	000b      	movs	r3, r1
 8000ff8:	433b      	orrs	r3, r7
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_dsub+0x5ba>
 8000ffc:	e728      	b.n	8000e50 <__aeabi_dsub+0x40c>
 8000ffe:	08ff      	lsrs	r7, r7, #3
 8001000:	074b      	lsls	r3, r1, #29
 8001002:	465d      	mov	r5, fp
 8001004:	433b      	orrs	r3, r7
 8001006:	08cc      	lsrs	r4, r1, #3
 8001008:	e697      	b.n	8000d3a <__aeabi_dsub+0x2f6>
 800100a:	2302      	movs	r3, #2
 800100c:	4698      	mov	r8, r3
 800100e:	e736      	b.n	8000e7e <__aeabi_dsub+0x43a>
 8001010:	1afc      	subs	r4, r7, r3
 8001012:	42a7      	cmp	r7, r4
 8001014:	41bf      	sbcs	r7, r7
 8001016:	4663      	mov	r3, ip
 8001018:	427f      	negs	r7, r7
 800101a:	1ac9      	subs	r1, r1, r3
 800101c:	1bcb      	subs	r3, r1, r7
 800101e:	4699      	mov	r9, r3
 8001020:	2301      	movs	r3, #1
 8001022:	465d      	mov	r5, fp
 8001024:	4698      	mov	r8, r3
 8001026:	e55e      	b.n	8000ae6 <__aeabi_dsub+0xa2>
 8001028:	074b      	lsls	r3, r1, #29
 800102a:	08ff      	lsrs	r7, r7, #3
 800102c:	433b      	orrs	r3, r7
 800102e:	08cc      	lsrs	r4, r1, #3
 8001030:	e692      	b.n	8000d58 <__aeabi_dsub+0x314>
 8001032:	1bdc      	subs	r4, r3, r7
 8001034:	4660      	mov	r0, ip
 8001036:	42a3      	cmp	r3, r4
 8001038:	41b6      	sbcs	r6, r6
 800103a:	1a40      	subs	r0, r0, r1
 800103c:	4276      	negs	r6, r6
 800103e:	1b80      	subs	r0, r0, r6
 8001040:	4681      	mov	r9, r0
 8001042:	0200      	lsls	r0, r0, #8
 8001044:	d560      	bpl.n	8001108 <__aeabi_dsub+0x6c4>
 8001046:	1afc      	subs	r4, r7, r3
 8001048:	42a7      	cmp	r7, r4
 800104a:	41bf      	sbcs	r7, r7
 800104c:	4663      	mov	r3, ip
 800104e:	427f      	negs	r7, r7
 8001050:	1ac9      	subs	r1, r1, r3
 8001052:	1bcb      	subs	r3, r1, r7
 8001054:	4699      	mov	r9, r3
 8001056:	465d      	mov	r5, fp
 8001058:	e576      	b.n	8000b48 <__aeabi_dsub+0x104>
 800105a:	08ff      	lsrs	r7, r7, #3
 800105c:	074b      	lsls	r3, r1, #29
 800105e:	433b      	orrs	r3, r7
 8001060:	08cc      	lsrs	r4, r1, #3
 8001062:	e667      	b.n	8000d34 <__aeabi_dsub+0x2f0>
 8001064:	000a      	movs	r2, r1
 8001066:	08db      	lsrs	r3, r3, #3
 8001068:	433a      	orrs	r2, r7
 800106a:	d100      	bne.n	800106e <__aeabi_dsub+0x62a>
 800106c:	e66f      	b.n	8000d4e <__aeabi_dsub+0x30a>
 800106e:	4662      	mov	r2, ip
 8001070:	0752      	lsls	r2, r2, #29
 8001072:	4313      	orrs	r3, r2
 8001074:	4662      	mov	r2, ip
 8001076:	08d4      	lsrs	r4, r2, #3
 8001078:	2280      	movs	r2, #128	; 0x80
 800107a:	0312      	lsls	r2, r2, #12
 800107c:	4214      	tst	r4, r2
 800107e:	d007      	beq.n	8001090 <__aeabi_dsub+0x64c>
 8001080:	08c8      	lsrs	r0, r1, #3
 8001082:	4210      	tst	r0, r2
 8001084:	d104      	bne.n	8001090 <__aeabi_dsub+0x64c>
 8001086:	465d      	mov	r5, fp
 8001088:	0004      	movs	r4, r0
 800108a:	08fb      	lsrs	r3, r7, #3
 800108c:	0749      	lsls	r1, r1, #29
 800108e:	430b      	orrs	r3, r1
 8001090:	0f5a      	lsrs	r2, r3, #29
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	08db      	lsrs	r3, r3, #3
 8001096:	0752      	lsls	r2, r2, #29
 8001098:	4313      	orrs	r3, r2
 800109a:	e65d      	b.n	8000d58 <__aeabi_dsub+0x314>
 800109c:	074b      	lsls	r3, r1, #29
 800109e:	08ff      	lsrs	r7, r7, #3
 80010a0:	433b      	orrs	r3, r7
 80010a2:	08cc      	lsrs	r4, r1, #3
 80010a4:	e649      	b.n	8000d3a <__aeabi_dsub+0x2f6>
 80010a6:	19dc      	adds	r4, r3, r7
 80010a8:	429c      	cmp	r4, r3
 80010aa:	419b      	sbcs	r3, r3
 80010ac:	4461      	add	r1, ip
 80010ae:	4689      	mov	r9, r1
 80010b0:	425b      	negs	r3, r3
 80010b2:	4499      	add	r9, r3
 80010b4:	464b      	mov	r3, r9
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	d400      	bmi.n	80010bc <__aeabi_dsub+0x678>
 80010ba:	e631      	b.n	8000d20 <__aeabi_dsub+0x2dc>
 80010bc:	464a      	mov	r2, r9
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <__aeabi_dsub+0x6d8>)
 80010c0:	401a      	ands	r2, r3
 80010c2:	2301      	movs	r3, #1
 80010c4:	4691      	mov	r9, r2
 80010c6:	4698      	mov	r8, r3
 80010c8:	e62a      	b.n	8000d20 <__aeabi_dsub+0x2dc>
 80010ca:	0016      	movs	r6, r2
 80010cc:	4664      	mov	r4, ip
 80010ce:	3e20      	subs	r6, #32
 80010d0:	40f4      	lsrs	r4, r6
 80010d2:	46a0      	mov	r8, r4
 80010d4:	2a20      	cmp	r2, #32
 80010d6:	d005      	beq.n	80010e4 <__aeabi_dsub+0x6a0>
 80010d8:	2640      	movs	r6, #64	; 0x40
 80010da:	4664      	mov	r4, ip
 80010dc:	1ab2      	subs	r2, r6, r2
 80010de:	4094      	lsls	r4, r2
 80010e0:	4323      	orrs	r3, r4
 80010e2:	469a      	mov	sl, r3
 80010e4:	4654      	mov	r4, sl
 80010e6:	1e63      	subs	r3, r4, #1
 80010e8:	419c      	sbcs	r4, r3
 80010ea:	4643      	mov	r3, r8
 80010ec:	431c      	orrs	r4, r3
 80010ee:	e5db      	b.n	8000ca8 <__aeabi_dsub+0x264>
 80010f0:	0002      	movs	r2, r0
 80010f2:	2400      	movs	r4, #0
 80010f4:	2300      	movs	r3, #0
 80010f6:	e548      	b.n	8000b8a <__aeabi_dsub+0x146>
 80010f8:	19dc      	adds	r4, r3, r7
 80010fa:	42bc      	cmp	r4, r7
 80010fc:	41bf      	sbcs	r7, r7
 80010fe:	4461      	add	r1, ip
 8001100:	4689      	mov	r9, r1
 8001102:	427f      	negs	r7, r7
 8001104:	44b9      	add	r9, r7
 8001106:	e738      	b.n	8000f7a <__aeabi_dsub+0x536>
 8001108:	464b      	mov	r3, r9
 800110a:	4323      	orrs	r3, r4
 800110c:	d100      	bne.n	8001110 <__aeabi_dsub+0x6cc>
 800110e:	e69f      	b.n	8000e50 <__aeabi_dsub+0x40c>
 8001110:	e606      	b.n	8000d20 <__aeabi_dsub+0x2dc>
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	000007fe 	.word	0x000007fe
 8001118:	000007ff 	.word	0x000007ff
 800111c:	ff7fffff 	.word	0xff7fffff
 8001120:	08ff      	lsrs	r7, r7, #3
 8001122:	074b      	lsls	r3, r1, #29
 8001124:	433b      	orrs	r3, r7
 8001126:	08cc      	lsrs	r4, r1, #3
 8001128:	e616      	b.n	8000d58 <__aeabi_dsub+0x314>
 800112a:	4662      	mov	r2, ip
 800112c:	08db      	lsrs	r3, r3, #3
 800112e:	0752      	lsls	r2, r2, #29
 8001130:	4313      	orrs	r3, r2
 8001132:	4662      	mov	r2, ip
 8001134:	08d4      	lsrs	r4, r2, #3
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	0312      	lsls	r2, r2, #12
 800113a:	4214      	tst	r4, r2
 800113c:	d007      	beq.n	800114e <__aeabi_dsub+0x70a>
 800113e:	08c8      	lsrs	r0, r1, #3
 8001140:	4210      	tst	r0, r2
 8001142:	d104      	bne.n	800114e <__aeabi_dsub+0x70a>
 8001144:	465d      	mov	r5, fp
 8001146:	0004      	movs	r4, r0
 8001148:	08fb      	lsrs	r3, r7, #3
 800114a:	0749      	lsls	r1, r1, #29
 800114c:	430b      	orrs	r3, r1
 800114e:	0f5a      	lsrs	r2, r3, #29
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	0752      	lsls	r2, r2, #29
 8001154:	08db      	lsrs	r3, r3, #3
 8001156:	4313      	orrs	r3, r2
 8001158:	e5fe      	b.n	8000d58 <__aeabi_dsub+0x314>
 800115a:	2300      	movs	r3, #0
 800115c:	4a01      	ldr	r2, [pc, #4]	; (8001164 <__aeabi_dsub+0x720>)
 800115e:	001c      	movs	r4, r3
 8001160:	e513      	b.n	8000b8a <__aeabi_dsub+0x146>
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	000007ff 	.word	0x000007ff

08001168 <__aeabi_d2iz>:
 8001168:	000a      	movs	r2, r1
 800116a:	b530      	push	{r4, r5, lr}
 800116c:	4c13      	ldr	r4, [pc, #76]	; (80011bc <__aeabi_d2iz+0x54>)
 800116e:	0053      	lsls	r3, r2, #1
 8001170:	0309      	lsls	r1, r1, #12
 8001172:	0005      	movs	r5, r0
 8001174:	0b09      	lsrs	r1, r1, #12
 8001176:	2000      	movs	r0, #0
 8001178:	0d5b      	lsrs	r3, r3, #21
 800117a:	0fd2      	lsrs	r2, r2, #31
 800117c:	42a3      	cmp	r3, r4
 800117e:	dd04      	ble.n	800118a <__aeabi_d2iz+0x22>
 8001180:	480f      	ldr	r0, [pc, #60]	; (80011c0 <__aeabi_d2iz+0x58>)
 8001182:	4283      	cmp	r3, r0
 8001184:	dd02      	ble.n	800118c <__aeabi_d2iz+0x24>
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <__aeabi_d2iz+0x5c>)
 8001188:	18d0      	adds	r0, r2, r3
 800118a:	bd30      	pop	{r4, r5, pc}
 800118c:	2080      	movs	r0, #128	; 0x80
 800118e:	0340      	lsls	r0, r0, #13
 8001190:	4301      	orrs	r1, r0
 8001192:	480d      	ldr	r0, [pc, #52]	; (80011c8 <__aeabi_d2iz+0x60>)
 8001194:	1ac0      	subs	r0, r0, r3
 8001196:	281f      	cmp	r0, #31
 8001198:	dd08      	ble.n	80011ac <__aeabi_d2iz+0x44>
 800119a:	480c      	ldr	r0, [pc, #48]	; (80011cc <__aeabi_d2iz+0x64>)
 800119c:	1ac3      	subs	r3, r0, r3
 800119e:	40d9      	lsrs	r1, r3
 80011a0:	000b      	movs	r3, r1
 80011a2:	4258      	negs	r0, r3
 80011a4:	2a00      	cmp	r2, #0
 80011a6:	d1f0      	bne.n	800118a <__aeabi_d2iz+0x22>
 80011a8:	0018      	movs	r0, r3
 80011aa:	e7ee      	b.n	800118a <__aeabi_d2iz+0x22>
 80011ac:	4c08      	ldr	r4, [pc, #32]	; (80011d0 <__aeabi_d2iz+0x68>)
 80011ae:	40c5      	lsrs	r5, r0
 80011b0:	46a4      	mov	ip, r4
 80011b2:	4463      	add	r3, ip
 80011b4:	4099      	lsls	r1, r3
 80011b6:	000b      	movs	r3, r1
 80011b8:	432b      	orrs	r3, r5
 80011ba:	e7f2      	b.n	80011a2 <__aeabi_d2iz+0x3a>
 80011bc:	000003fe 	.word	0x000003fe
 80011c0:	0000041d 	.word	0x0000041d
 80011c4:	7fffffff 	.word	0x7fffffff
 80011c8:	00000433 	.word	0x00000433
 80011cc:	00000413 	.word	0x00000413
 80011d0:	fffffbed 	.word	0xfffffbed

080011d4 <__aeabi_f2d>:
 80011d4:	b570      	push	{r4, r5, r6, lr}
 80011d6:	0043      	lsls	r3, r0, #1
 80011d8:	0246      	lsls	r6, r0, #9
 80011da:	0fc4      	lsrs	r4, r0, #31
 80011dc:	20fe      	movs	r0, #254	; 0xfe
 80011de:	0e1b      	lsrs	r3, r3, #24
 80011e0:	1c59      	adds	r1, r3, #1
 80011e2:	0a75      	lsrs	r5, r6, #9
 80011e4:	4208      	tst	r0, r1
 80011e6:	d00c      	beq.n	8001202 <__aeabi_f2d+0x2e>
 80011e8:	22e0      	movs	r2, #224	; 0xe0
 80011ea:	0092      	lsls	r2, r2, #2
 80011ec:	4694      	mov	ip, r2
 80011ee:	076d      	lsls	r5, r5, #29
 80011f0:	0b36      	lsrs	r6, r6, #12
 80011f2:	4463      	add	r3, ip
 80011f4:	051b      	lsls	r3, r3, #20
 80011f6:	4333      	orrs	r3, r6
 80011f8:	07e4      	lsls	r4, r4, #31
 80011fa:	4323      	orrs	r3, r4
 80011fc:	0028      	movs	r0, r5
 80011fe:	0019      	movs	r1, r3
 8001200:	bd70      	pop	{r4, r5, r6, pc}
 8001202:	2b00      	cmp	r3, #0
 8001204:	d114      	bne.n	8001230 <__aeabi_f2d+0x5c>
 8001206:	2d00      	cmp	r5, #0
 8001208:	d01b      	beq.n	8001242 <__aeabi_f2d+0x6e>
 800120a:	0028      	movs	r0, r5
 800120c:	f000 f868 	bl	80012e0 <__clzsi2>
 8001210:	280a      	cmp	r0, #10
 8001212:	dc1c      	bgt.n	800124e <__aeabi_f2d+0x7a>
 8001214:	230b      	movs	r3, #11
 8001216:	002e      	movs	r6, r5
 8001218:	1a1b      	subs	r3, r3, r0
 800121a:	40de      	lsrs	r6, r3
 800121c:	0003      	movs	r3, r0
 800121e:	3315      	adds	r3, #21
 8001220:	409d      	lsls	r5, r3
 8001222:	4a0e      	ldr	r2, [pc, #56]	; (800125c <__aeabi_f2d+0x88>)
 8001224:	0336      	lsls	r6, r6, #12
 8001226:	1a12      	subs	r2, r2, r0
 8001228:	0552      	lsls	r2, r2, #21
 800122a:	0b36      	lsrs	r6, r6, #12
 800122c:	0d53      	lsrs	r3, r2, #21
 800122e:	e7e1      	b.n	80011f4 <__aeabi_f2d+0x20>
 8001230:	2d00      	cmp	r5, #0
 8001232:	d009      	beq.n	8001248 <__aeabi_f2d+0x74>
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	0b36      	lsrs	r6, r6, #12
 8001238:	0312      	lsls	r2, r2, #12
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <__aeabi_f2d+0x8c>)
 800123c:	076d      	lsls	r5, r5, #29
 800123e:	4316      	orrs	r6, r2
 8001240:	e7d8      	b.n	80011f4 <__aeabi_f2d+0x20>
 8001242:	2300      	movs	r3, #0
 8001244:	2600      	movs	r6, #0
 8001246:	e7d5      	b.n	80011f4 <__aeabi_f2d+0x20>
 8001248:	2600      	movs	r6, #0
 800124a:	4b05      	ldr	r3, [pc, #20]	; (8001260 <__aeabi_f2d+0x8c>)
 800124c:	e7d2      	b.n	80011f4 <__aeabi_f2d+0x20>
 800124e:	0003      	movs	r3, r0
 8001250:	3b0b      	subs	r3, #11
 8001252:	409d      	lsls	r5, r3
 8001254:	002e      	movs	r6, r5
 8001256:	2500      	movs	r5, #0
 8001258:	e7e3      	b.n	8001222 <__aeabi_f2d+0x4e>
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	00000389 	.word	0x00000389
 8001260:	000007ff 	.word	0x000007ff

08001264 <__aeabi_cdrcmple>:
 8001264:	4684      	mov	ip, r0
 8001266:	0010      	movs	r0, r2
 8001268:	4662      	mov	r2, ip
 800126a:	468c      	mov	ip, r1
 800126c:	0019      	movs	r1, r3
 800126e:	4663      	mov	r3, ip
 8001270:	e000      	b.n	8001274 <__aeabi_cdcmpeq>
 8001272:	46c0      	nop			; (mov r8, r8)

08001274 <__aeabi_cdcmpeq>:
 8001274:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001276:	f000 f8f9 	bl	800146c <__ledf2>
 800127a:	2800      	cmp	r0, #0
 800127c:	d401      	bmi.n	8001282 <__aeabi_cdcmpeq+0xe>
 800127e:	2100      	movs	r1, #0
 8001280:	42c8      	cmn	r0, r1
 8001282:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001284 <__aeabi_dcmpeq>:
 8001284:	b510      	push	{r4, lr}
 8001286:	f000 f849 	bl	800131c <__eqdf2>
 800128a:	4240      	negs	r0, r0
 800128c:	3001      	adds	r0, #1
 800128e:	bd10      	pop	{r4, pc}

08001290 <__aeabi_dcmplt>:
 8001290:	b510      	push	{r4, lr}
 8001292:	f000 f8eb 	bl	800146c <__ledf2>
 8001296:	2800      	cmp	r0, #0
 8001298:	db01      	blt.n	800129e <__aeabi_dcmplt+0xe>
 800129a:	2000      	movs	r0, #0
 800129c:	bd10      	pop	{r4, pc}
 800129e:	2001      	movs	r0, #1
 80012a0:	bd10      	pop	{r4, pc}
 80012a2:	46c0      	nop			; (mov r8, r8)

080012a4 <__aeabi_dcmple>:
 80012a4:	b510      	push	{r4, lr}
 80012a6:	f000 f8e1 	bl	800146c <__ledf2>
 80012aa:	2800      	cmp	r0, #0
 80012ac:	dd01      	ble.n	80012b2 <__aeabi_dcmple+0xe>
 80012ae:	2000      	movs	r0, #0
 80012b0:	bd10      	pop	{r4, pc}
 80012b2:	2001      	movs	r0, #1
 80012b4:	bd10      	pop	{r4, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)

080012b8 <__aeabi_dcmpgt>:
 80012b8:	b510      	push	{r4, lr}
 80012ba:	f000 f871 	bl	80013a0 <__gedf2>
 80012be:	2800      	cmp	r0, #0
 80012c0:	dc01      	bgt.n	80012c6 <__aeabi_dcmpgt+0xe>
 80012c2:	2000      	movs	r0, #0
 80012c4:	bd10      	pop	{r4, pc}
 80012c6:	2001      	movs	r0, #1
 80012c8:	bd10      	pop	{r4, pc}
 80012ca:	46c0      	nop			; (mov r8, r8)

080012cc <__aeabi_dcmpge>:
 80012cc:	b510      	push	{r4, lr}
 80012ce:	f000 f867 	bl	80013a0 <__gedf2>
 80012d2:	2800      	cmp	r0, #0
 80012d4:	da01      	bge.n	80012da <__aeabi_dcmpge+0xe>
 80012d6:	2000      	movs	r0, #0
 80012d8:	bd10      	pop	{r4, pc}
 80012da:	2001      	movs	r0, #1
 80012dc:	bd10      	pop	{r4, pc}
 80012de:	46c0      	nop			; (mov r8, r8)

080012e0 <__clzsi2>:
 80012e0:	211c      	movs	r1, #28
 80012e2:	2301      	movs	r3, #1
 80012e4:	041b      	lsls	r3, r3, #16
 80012e6:	4298      	cmp	r0, r3
 80012e8:	d301      	bcc.n	80012ee <__clzsi2+0xe>
 80012ea:	0c00      	lsrs	r0, r0, #16
 80012ec:	3910      	subs	r1, #16
 80012ee:	0a1b      	lsrs	r3, r3, #8
 80012f0:	4298      	cmp	r0, r3
 80012f2:	d301      	bcc.n	80012f8 <__clzsi2+0x18>
 80012f4:	0a00      	lsrs	r0, r0, #8
 80012f6:	3908      	subs	r1, #8
 80012f8:	091b      	lsrs	r3, r3, #4
 80012fa:	4298      	cmp	r0, r3
 80012fc:	d301      	bcc.n	8001302 <__clzsi2+0x22>
 80012fe:	0900      	lsrs	r0, r0, #4
 8001300:	3904      	subs	r1, #4
 8001302:	a202      	add	r2, pc, #8	; (adr r2, 800130c <__clzsi2+0x2c>)
 8001304:	5c10      	ldrb	r0, [r2, r0]
 8001306:	1840      	adds	r0, r0, r1
 8001308:	4770      	bx	lr
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	02020304 	.word	0x02020304
 8001310:	01010101 	.word	0x01010101
	...

0800131c <__eqdf2>:
 800131c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131e:	464e      	mov	r6, r9
 8001320:	4645      	mov	r5, r8
 8001322:	46de      	mov	lr, fp
 8001324:	4657      	mov	r7, sl
 8001326:	4690      	mov	r8, r2
 8001328:	b5e0      	push	{r5, r6, r7, lr}
 800132a:	0017      	movs	r7, r2
 800132c:	031a      	lsls	r2, r3, #12
 800132e:	0b12      	lsrs	r2, r2, #12
 8001330:	0005      	movs	r5, r0
 8001332:	4684      	mov	ip, r0
 8001334:	4819      	ldr	r0, [pc, #100]	; (800139c <__eqdf2+0x80>)
 8001336:	030e      	lsls	r6, r1, #12
 8001338:	004c      	lsls	r4, r1, #1
 800133a:	4691      	mov	r9, r2
 800133c:	005a      	lsls	r2, r3, #1
 800133e:	0fdb      	lsrs	r3, r3, #31
 8001340:	469b      	mov	fp, r3
 8001342:	0b36      	lsrs	r6, r6, #12
 8001344:	0d64      	lsrs	r4, r4, #21
 8001346:	0fc9      	lsrs	r1, r1, #31
 8001348:	0d52      	lsrs	r2, r2, #21
 800134a:	4284      	cmp	r4, r0
 800134c:	d019      	beq.n	8001382 <__eqdf2+0x66>
 800134e:	4282      	cmp	r2, r0
 8001350:	d010      	beq.n	8001374 <__eqdf2+0x58>
 8001352:	2001      	movs	r0, #1
 8001354:	4294      	cmp	r4, r2
 8001356:	d10e      	bne.n	8001376 <__eqdf2+0x5a>
 8001358:	454e      	cmp	r6, r9
 800135a:	d10c      	bne.n	8001376 <__eqdf2+0x5a>
 800135c:	2001      	movs	r0, #1
 800135e:	45c4      	cmp	ip, r8
 8001360:	d109      	bne.n	8001376 <__eqdf2+0x5a>
 8001362:	4559      	cmp	r1, fp
 8001364:	d017      	beq.n	8001396 <__eqdf2+0x7a>
 8001366:	2c00      	cmp	r4, #0
 8001368:	d105      	bne.n	8001376 <__eqdf2+0x5a>
 800136a:	0030      	movs	r0, r6
 800136c:	4328      	orrs	r0, r5
 800136e:	1e43      	subs	r3, r0, #1
 8001370:	4198      	sbcs	r0, r3
 8001372:	e000      	b.n	8001376 <__eqdf2+0x5a>
 8001374:	2001      	movs	r0, #1
 8001376:	bcf0      	pop	{r4, r5, r6, r7}
 8001378:	46bb      	mov	fp, r7
 800137a:	46b2      	mov	sl, r6
 800137c:	46a9      	mov	r9, r5
 800137e:	46a0      	mov	r8, r4
 8001380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001382:	0033      	movs	r3, r6
 8001384:	2001      	movs	r0, #1
 8001386:	432b      	orrs	r3, r5
 8001388:	d1f5      	bne.n	8001376 <__eqdf2+0x5a>
 800138a:	42a2      	cmp	r2, r4
 800138c:	d1f3      	bne.n	8001376 <__eqdf2+0x5a>
 800138e:	464b      	mov	r3, r9
 8001390:	433b      	orrs	r3, r7
 8001392:	d1f0      	bne.n	8001376 <__eqdf2+0x5a>
 8001394:	e7e2      	b.n	800135c <__eqdf2+0x40>
 8001396:	2000      	movs	r0, #0
 8001398:	e7ed      	b.n	8001376 <__eqdf2+0x5a>
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	000007ff 	.word	0x000007ff

080013a0 <__gedf2>:
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	4647      	mov	r7, r8
 80013a4:	46ce      	mov	lr, r9
 80013a6:	0004      	movs	r4, r0
 80013a8:	0018      	movs	r0, r3
 80013aa:	0016      	movs	r6, r2
 80013ac:	031b      	lsls	r3, r3, #12
 80013ae:	0b1b      	lsrs	r3, r3, #12
 80013b0:	4d2d      	ldr	r5, [pc, #180]	; (8001468 <__gedf2+0xc8>)
 80013b2:	004a      	lsls	r2, r1, #1
 80013b4:	4699      	mov	r9, r3
 80013b6:	b580      	push	{r7, lr}
 80013b8:	0043      	lsls	r3, r0, #1
 80013ba:	030f      	lsls	r7, r1, #12
 80013bc:	46a4      	mov	ip, r4
 80013be:	46b0      	mov	r8, r6
 80013c0:	0b3f      	lsrs	r7, r7, #12
 80013c2:	0d52      	lsrs	r2, r2, #21
 80013c4:	0fc9      	lsrs	r1, r1, #31
 80013c6:	0d5b      	lsrs	r3, r3, #21
 80013c8:	0fc0      	lsrs	r0, r0, #31
 80013ca:	42aa      	cmp	r2, r5
 80013cc:	d021      	beq.n	8001412 <__gedf2+0x72>
 80013ce:	42ab      	cmp	r3, r5
 80013d0:	d013      	beq.n	80013fa <__gedf2+0x5a>
 80013d2:	2a00      	cmp	r2, #0
 80013d4:	d122      	bne.n	800141c <__gedf2+0x7c>
 80013d6:	433c      	orrs	r4, r7
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <__gedf2+0x42>
 80013dc:	464d      	mov	r5, r9
 80013de:	432e      	orrs	r6, r5
 80013e0:	d022      	beq.n	8001428 <__gedf2+0x88>
 80013e2:	2c00      	cmp	r4, #0
 80013e4:	d010      	beq.n	8001408 <__gedf2+0x68>
 80013e6:	4281      	cmp	r1, r0
 80013e8:	d022      	beq.n	8001430 <__gedf2+0x90>
 80013ea:	2002      	movs	r0, #2
 80013ec:	3901      	subs	r1, #1
 80013ee:	4008      	ands	r0, r1
 80013f0:	3801      	subs	r0, #1
 80013f2:	bcc0      	pop	{r6, r7}
 80013f4:	46b9      	mov	r9, r7
 80013f6:	46b0      	mov	r8, r6
 80013f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013fa:	464d      	mov	r5, r9
 80013fc:	432e      	orrs	r6, r5
 80013fe:	d129      	bne.n	8001454 <__gedf2+0xb4>
 8001400:	2a00      	cmp	r2, #0
 8001402:	d1f0      	bne.n	80013e6 <__gedf2+0x46>
 8001404:	433c      	orrs	r4, r7
 8001406:	d1ee      	bne.n	80013e6 <__gedf2+0x46>
 8001408:	2800      	cmp	r0, #0
 800140a:	d1f2      	bne.n	80013f2 <__gedf2+0x52>
 800140c:	2001      	movs	r0, #1
 800140e:	4240      	negs	r0, r0
 8001410:	e7ef      	b.n	80013f2 <__gedf2+0x52>
 8001412:	003d      	movs	r5, r7
 8001414:	4325      	orrs	r5, r4
 8001416:	d11d      	bne.n	8001454 <__gedf2+0xb4>
 8001418:	4293      	cmp	r3, r2
 800141a:	d0ee      	beq.n	80013fa <__gedf2+0x5a>
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1e2      	bne.n	80013e6 <__gedf2+0x46>
 8001420:	464c      	mov	r4, r9
 8001422:	4326      	orrs	r6, r4
 8001424:	d1df      	bne.n	80013e6 <__gedf2+0x46>
 8001426:	e7e0      	b.n	80013ea <__gedf2+0x4a>
 8001428:	2000      	movs	r0, #0
 800142a:	2c00      	cmp	r4, #0
 800142c:	d0e1      	beq.n	80013f2 <__gedf2+0x52>
 800142e:	e7dc      	b.n	80013ea <__gedf2+0x4a>
 8001430:	429a      	cmp	r2, r3
 8001432:	dc0a      	bgt.n	800144a <__gedf2+0xaa>
 8001434:	dbe8      	blt.n	8001408 <__gedf2+0x68>
 8001436:	454f      	cmp	r7, r9
 8001438:	d8d7      	bhi.n	80013ea <__gedf2+0x4a>
 800143a:	d00e      	beq.n	800145a <__gedf2+0xba>
 800143c:	2000      	movs	r0, #0
 800143e:	454f      	cmp	r7, r9
 8001440:	d2d7      	bcs.n	80013f2 <__gedf2+0x52>
 8001442:	2900      	cmp	r1, #0
 8001444:	d0e2      	beq.n	800140c <__gedf2+0x6c>
 8001446:	0008      	movs	r0, r1
 8001448:	e7d3      	b.n	80013f2 <__gedf2+0x52>
 800144a:	4243      	negs	r3, r0
 800144c:	4158      	adcs	r0, r3
 800144e:	0040      	lsls	r0, r0, #1
 8001450:	3801      	subs	r0, #1
 8001452:	e7ce      	b.n	80013f2 <__gedf2+0x52>
 8001454:	2002      	movs	r0, #2
 8001456:	4240      	negs	r0, r0
 8001458:	e7cb      	b.n	80013f2 <__gedf2+0x52>
 800145a:	45c4      	cmp	ip, r8
 800145c:	d8c5      	bhi.n	80013ea <__gedf2+0x4a>
 800145e:	2000      	movs	r0, #0
 8001460:	45c4      	cmp	ip, r8
 8001462:	d2c6      	bcs.n	80013f2 <__gedf2+0x52>
 8001464:	e7ed      	b.n	8001442 <__gedf2+0xa2>
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	000007ff 	.word	0x000007ff

0800146c <__ledf2>:
 800146c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146e:	4647      	mov	r7, r8
 8001470:	46ce      	mov	lr, r9
 8001472:	0004      	movs	r4, r0
 8001474:	0018      	movs	r0, r3
 8001476:	0016      	movs	r6, r2
 8001478:	031b      	lsls	r3, r3, #12
 800147a:	0b1b      	lsrs	r3, r3, #12
 800147c:	4d2c      	ldr	r5, [pc, #176]	; (8001530 <__ledf2+0xc4>)
 800147e:	004a      	lsls	r2, r1, #1
 8001480:	4699      	mov	r9, r3
 8001482:	b580      	push	{r7, lr}
 8001484:	0043      	lsls	r3, r0, #1
 8001486:	030f      	lsls	r7, r1, #12
 8001488:	46a4      	mov	ip, r4
 800148a:	46b0      	mov	r8, r6
 800148c:	0b3f      	lsrs	r7, r7, #12
 800148e:	0d52      	lsrs	r2, r2, #21
 8001490:	0fc9      	lsrs	r1, r1, #31
 8001492:	0d5b      	lsrs	r3, r3, #21
 8001494:	0fc0      	lsrs	r0, r0, #31
 8001496:	42aa      	cmp	r2, r5
 8001498:	d00d      	beq.n	80014b6 <__ledf2+0x4a>
 800149a:	42ab      	cmp	r3, r5
 800149c:	d010      	beq.n	80014c0 <__ledf2+0x54>
 800149e:	2a00      	cmp	r2, #0
 80014a0:	d127      	bne.n	80014f2 <__ledf2+0x86>
 80014a2:	433c      	orrs	r4, r7
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d111      	bne.n	80014cc <__ledf2+0x60>
 80014a8:	464d      	mov	r5, r9
 80014aa:	432e      	orrs	r6, r5
 80014ac:	d10e      	bne.n	80014cc <__ledf2+0x60>
 80014ae:	2000      	movs	r0, #0
 80014b0:	2c00      	cmp	r4, #0
 80014b2:	d015      	beq.n	80014e0 <__ledf2+0x74>
 80014b4:	e00e      	b.n	80014d4 <__ledf2+0x68>
 80014b6:	003d      	movs	r5, r7
 80014b8:	4325      	orrs	r5, r4
 80014ba:	d110      	bne.n	80014de <__ledf2+0x72>
 80014bc:	4293      	cmp	r3, r2
 80014be:	d118      	bne.n	80014f2 <__ledf2+0x86>
 80014c0:	464d      	mov	r5, r9
 80014c2:	432e      	orrs	r6, r5
 80014c4:	d10b      	bne.n	80014de <__ledf2+0x72>
 80014c6:	2a00      	cmp	r2, #0
 80014c8:	d102      	bne.n	80014d0 <__ledf2+0x64>
 80014ca:	433c      	orrs	r4, r7
 80014cc:	2c00      	cmp	r4, #0
 80014ce:	d00b      	beq.n	80014e8 <__ledf2+0x7c>
 80014d0:	4281      	cmp	r1, r0
 80014d2:	d014      	beq.n	80014fe <__ledf2+0x92>
 80014d4:	2002      	movs	r0, #2
 80014d6:	3901      	subs	r1, #1
 80014d8:	4008      	ands	r0, r1
 80014da:	3801      	subs	r0, #1
 80014dc:	e000      	b.n	80014e0 <__ledf2+0x74>
 80014de:	2002      	movs	r0, #2
 80014e0:	bcc0      	pop	{r6, r7}
 80014e2:	46b9      	mov	r9, r7
 80014e4:	46b0      	mov	r8, r6
 80014e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e8:	2800      	cmp	r0, #0
 80014ea:	d1f9      	bne.n	80014e0 <__ledf2+0x74>
 80014ec:	2001      	movs	r0, #1
 80014ee:	4240      	negs	r0, r0
 80014f0:	e7f6      	b.n	80014e0 <__ledf2+0x74>
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1ec      	bne.n	80014d0 <__ledf2+0x64>
 80014f6:	464c      	mov	r4, r9
 80014f8:	4326      	orrs	r6, r4
 80014fa:	d1e9      	bne.n	80014d0 <__ledf2+0x64>
 80014fc:	e7ea      	b.n	80014d4 <__ledf2+0x68>
 80014fe:	429a      	cmp	r2, r3
 8001500:	dd04      	ble.n	800150c <__ledf2+0xa0>
 8001502:	4243      	negs	r3, r0
 8001504:	4158      	adcs	r0, r3
 8001506:	0040      	lsls	r0, r0, #1
 8001508:	3801      	subs	r0, #1
 800150a:	e7e9      	b.n	80014e0 <__ledf2+0x74>
 800150c:	429a      	cmp	r2, r3
 800150e:	dbeb      	blt.n	80014e8 <__ledf2+0x7c>
 8001510:	454f      	cmp	r7, r9
 8001512:	d8df      	bhi.n	80014d4 <__ledf2+0x68>
 8001514:	d006      	beq.n	8001524 <__ledf2+0xb8>
 8001516:	2000      	movs	r0, #0
 8001518:	454f      	cmp	r7, r9
 800151a:	d2e1      	bcs.n	80014e0 <__ledf2+0x74>
 800151c:	2900      	cmp	r1, #0
 800151e:	d0e5      	beq.n	80014ec <__ledf2+0x80>
 8001520:	0008      	movs	r0, r1
 8001522:	e7dd      	b.n	80014e0 <__ledf2+0x74>
 8001524:	45c4      	cmp	ip, r8
 8001526:	d8d5      	bhi.n	80014d4 <__ledf2+0x68>
 8001528:	2000      	movs	r0, #0
 800152a:	45c4      	cmp	ip, r8
 800152c:	d2d8      	bcs.n	80014e0 <__ledf2+0x74>
 800152e:	e7f5      	b.n	800151c <__ledf2+0xb0>
 8001530:	000007ff 	.word	0x000007ff

08001534 <vApplicationStackOverflowHook>:
}
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	b002      	add	sp, #8
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b087      	sub	sp, #28
 800154c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	4a08      	ldr	r2, [pc, #32]	; (8001574 <MX_FREERTOS_Init+0x2c>)
 8001552:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001554:	c313      	stmia	r3!, {r0, r1, r4}
 8001556:	ca03      	ldmia	r2!, {r0, r1}
 8001558:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2100      	movs	r1, #0
 800155e:	0018      	movs	r0, r3
 8001560:	f004 fb93 	bl	8005c8a <osThreadCreate>
 8001564:	0002      	movs	r2, r0
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <MX_FREERTOS_Init+0x30>)
 8001568:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	b007      	add	sp, #28
 8001570:	bd90      	pop	{r4, r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	080087e0 	.word	0x080087e0
 8001578:	20000090 	.word	0x20000090

0800157c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001584:	2001      	movs	r0, #1
 8001586:	f004 fba8 	bl	8005cda <osDelay>
 800158a:	e7fb      	b.n	8001584 <StartDefaultTask+0x8>

0800158c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001592:	4b20      	ldr	r3, [pc, #128]	; (8001614 <MX_GPIO_Init+0x88>)
 8001594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001596:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <MX_GPIO_Init+0x88>)
 8001598:	2120      	movs	r1, #32
 800159a:	430a      	orrs	r2, r1
 800159c:	635a      	str	r2, [r3, #52]	; 0x34
 800159e:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <MX_GPIO_Init+0x88>)
 80015a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a2:	2220      	movs	r2, #32
 80015a4:	4013      	ands	r3, r2
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <MX_GPIO_Init+0x88>)
 80015ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <MX_GPIO_Init+0x88>)
 80015b0:	2101      	movs	r1, #1
 80015b2:	430a      	orrs	r2, r1
 80015b4:	635a      	str	r2, [r3, #52]	; 0x34
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <MX_GPIO_Init+0x88>)
 80015b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ba:	2201      	movs	r2, #1
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_GPIO_Init+0x88>)
 80015c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_GPIO_Init+0x88>)
 80015c8:	2104      	movs	r1, #4
 80015ca:	430a      	orrs	r2, r1
 80015cc:	635a      	str	r2, [r3, #52]	; 0x34
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_GPIO_Init+0x88>)
 80015d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d2:	2204      	movs	r2, #4
 80015d4:	4013      	ands	r3, r2
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_GPIO_Init+0x88>)
 80015dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015de:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <MX_GPIO_Init+0x88>)
 80015e0:	2102      	movs	r1, #2
 80015e2:	430a      	orrs	r2, r1
 80015e4:	635a      	str	r2, [r3, #52]	; 0x34
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <MX_GPIO_Init+0x88>)
 80015e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ea:	2202      	movs	r2, #2
 80015ec:	4013      	ands	r3, r2
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <MX_GPIO_Init+0x88>)
 80015f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015f6:	4b07      	ldr	r3, [pc, #28]	; (8001614 <MX_GPIO_Init+0x88>)
 80015f8:	2108      	movs	r1, #8
 80015fa:	430a      	orrs	r2, r1
 80015fc:	635a      	str	r2, [r3, #52]	; 0x34
 80015fe:	4b05      	ldr	r3, [pc, #20]	; (8001614 <MX_GPIO_Init+0x88>)
 8001600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001602:	2208      	movs	r2, #8
 8001604:	4013      	ands	r3, r2
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]

}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	46bd      	mov	sp, r7
 800160e:	b006      	add	sp, #24
 8001610:	bd80      	pop	{r7, pc}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	40021000 	.word	0x40021000

08001618 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <__io_putchar+0x20>)
 8001622:	1d39      	adds	r1, r7, #4
 8001624:	4805      	ldr	r0, [pc, #20]	; (800163c <__io_putchar+0x24>)
 8001626:	2201      	movs	r2, #1
 8001628:	f003 fc64 	bl	8004ef4 <HAL_UART_Transmit>
	return ch;
 800162c:	687b      	ldr	r3, [r7, #4]
}
 800162e:	0018      	movs	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	b002      	add	sp, #8
 8001634:	bd80      	pop	{r7, pc}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	0000ffff 	.word	0x0000ffff
 800163c:	200004a8 	.word	0x200004a8

08001640 <taskServoMoteur.0>:
  MX_TIM16_Init();
  /* USER CODE BEGIN 2 */
	xl320.serial.transmit = uart_half_duplex_transmit;
	xl320.serial.receive  = uart_half_duplex_receive;

	void taskServoMoteur(void * unused){
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	4663      	mov	r3, ip
 800164a:	603b      	str	r3, [r7, #0]
		xl320_init(&xl320, 1, BR_1M);
 800164c:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <taskServoMoteur.0+0x70>)
 800164e:	2203      	movs	r2, #3
 8001650:	2101      	movs	r1, #1
 8001652:	0018      	movs	r0, r3
 8001654:	f000 ff10 	bl	8002478 <xl320_init>
		xl320_setSpeed(&xl320, 20);
 8001658:	4a16      	ldr	r2, [pc, #88]	; (80016b4 <taskServoMoteur.0+0x74>)
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <taskServoMoteur.0+0x70>)
 800165c:	1c11      	adds	r1, r2, #0
 800165e:	0018      	movs	r0, r3
 8001660:	f001 f89a 	bl	8002798 <xl320_setSpeed>
		xl320_torqueEnable(&xl320);
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <taskServoMoteur.0+0x70>)
 8001666:	0018      	movs	r0, r3
 8001668:	f001 f8e8 	bl	800283c <xl320_torqueEnable>
		vTaskDelay(250);
 800166c:	20fa      	movs	r0, #250	; 0xfa
 800166e:	f004 fd2d 	bl	80060cc <vTaskDelay>

		for(;;){
			xl320_setGoalPosition(&xl320, 20);
 8001672:	4a10      	ldr	r2, [pc, #64]	; (80016b4 <taskServoMoteur.0+0x74>)
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <taskServoMoteur.0+0x70>)
 8001676:	1c11      	adds	r1, r2, #0
 8001678:	0018      	movs	r0, r3
 800167a:	f001 f855 	bl	8002728 <xl320_setGoalPosition>
			xl320_executeAction(&xl320);
 800167e:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <taskServoMoteur.0+0x70>)
 8001680:	0018      	movs	r0, r3
 8001682:	f001 f8cb 	bl	800281c <xl320_executeAction>
			vTaskDelay(2000);
 8001686:	23fa      	movs	r3, #250	; 0xfa
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	0018      	movs	r0, r3
 800168c:	f004 fd1e 	bl	80060cc <vTaskDelay>
			xl320_setGoalPosition(&xl320, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <taskServoMoteur.0+0x70>)
 8001694:	1c11      	adds	r1, r2, #0
 8001696:	0018      	movs	r0, r3
 8001698:	f001 f846 	bl	8002728 <xl320_setGoalPosition>
			xl320_executeAction(&xl320);
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <taskServoMoteur.0+0x70>)
 800169e:	0018      	movs	r0, r3
 80016a0:	f001 f8bc 	bl	800281c <xl320_executeAction>
			vTaskDelay(2000);
 80016a4:	23fa      	movs	r3, #250	; 0xfa
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	0018      	movs	r0, r3
 80016aa:	f004 fd0f 	bl	80060cc <vTaskDelay>
			xl320_setGoalPosition(&xl320, 20);
 80016ae:	e7e0      	b.n	8001672 <taskServoMoteur.0+0x32>
 80016b0:	20000094 	.word	0x20000094
 80016b4:	41a00000 	.word	0x41a00000

080016b8 <main>:
{
 80016b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ba:	b089      	sub	sp, #36	; 0x24
 80016bc:	af02      	add	r7, sp, #8
int main(void)
 80016be:	2320      	movs	r3, #32
 80016c0:	2210      	movs	r2, #16
 80016c2:	189b      	adds	r3, r3, r2
 80016c4:	19da      	adds	r2, r3, r7
 80016c6:	003b      	movs	r3, r7
 80016c8:	615a      	str	r2, [r3, #20]
 80016ca:	003b      	movs	r3, r7
 80016cc:	0038      	movs	r0, r7
 80016ce:	4923      	ldr	r1, [pc, #140]	; (800175c <main+0xa4>)
 80016d0:	001a      	movs	r2, r3
 80016d2:	c970      	ldmia	r1!, {r4, r5, r6}
 80016d4:	c270      	stmia	r2!, {r4, r5, r6}
 80016d6:	c930      	ldmia	r1!, {r4, r5}
 80016d8:	c230      	stmia	r2!, {r4, r5}
 80016da:	60d8      	str	r0, [r3, #12]
 80016dc:	4a20      	ldr	r2, [pc, #128]	; (8001760 <main+0xa8>)
 80016de:	611a      	str	r2, [r3, #16]
 80016e0:	001a      	movs	r2, r3
 80016e2:	3214      	adds	r2, #20
 80016e4:	0011      	movs	r1, r2
 80016e6:	0018      	movs	r0, r3
 80016e8:	f7fe fe96 	bl	8000418 <__clear_cache>
  HAL_Init();
 80016ec:	f001 f8e8 	bl	80028c0 <HAL_Init>
  SystemClock_Config();
 80016f0:	f000 f844 	bl	800177c <SystemClock_Config>
  MX_GPIO_Init();
 80016f4:	f7ff ff4a 	bl	800158c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80016f8:	f000 fd78 	bl	80021ec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80016fc:	f000 fdc4 	bl	8002288 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 8001700:	f000 faae 	bl	8001c60 <MX_TIM14_Init>
  MX_TIM3_Init();
 8001704:	f000 fa56 	bl	8001bb4 <MX_TIM3_Init>
  MX_TIM15_Init();
 8001708:	f000 faf6 	bl	8001cf8 <MX_TIM15_Init>
  MX_TIM16_Init();
 800170c:	f000 fb8e 	bl	8001e2c <MX_TIM16_Init>
	xl320.serial.transmit = uart_half_duplex_transmit;
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <main+0xac>)
 8001712:	4a15      	ldr	r2, [pc, #84]	; (8001768 <main+0xb0>)
 8001714:	605a      	str	r2, [r3, #4]
	xl320.serial.receive  = uart_half_duplex_receive;
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <main+0xac>)
 8001718:	4a14      	ldr	r2, [pc, #80]	; (800176c <main+0xb4>)
 800171a:	609a      	str	r2, [r3, #8]
		}
	}

	if (xTaskCreate(taskServoMoteur, "Tâche Servo moteur", STACK_DEPTH, NULL, 3, NULL) != pdTRUE){
 800171c:	003b      	movs	r3, r7
 800171e:	2201      	movs	r2, #1
 8001720:	4313      	orrs	r3, r2
 8001722:	0018      	movs	r0, r3
 8001724:	23fa      	movs	r3, #250	; 0xfa
 8001726:	005a      	lsls	r2, r3, #1
 8001728:	4911      	ldr	r1, [pc, #68]	; (8001770 <main+0xb8>)
 800172a:	2300      	movs	r3, #0
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	2303      	movs	r3, #3
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2300      	movs	r3, #0
 8001734:	f004 fb8e 	bl	8005e54 <xTaskCreate>
 8001738:	0003      	movs	r3, r0
 800173a:	2b01      	cmp	r3, #1
 800173c:	d003      	beq.n	8001746 <main+0x8e>
		printf("TaskServoMoteur not created");
 800173e:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <main+0xbc>)
 8001740:	0018      	movs	r0, r3
 8001742:	f005 fec1 	bl	80074c8 <iprintf>
	}

	sh_init(&shell);
 8001746:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <main+0xc0>)
 8001748:	0018      	movs	r0, r3
 800174a:	f000 f8d1 	bl	80018f0 <sh_init>


	vTaskStartScheduler();
 800174e:	f004 fd51 	bl	80061f4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001752:	f7ff fef9 	bl	8001548 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001756:	f004 fa90 	bl	8005c7a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 800175a:	e7fe      	b.n	800175a <main+0xa2>
 800175c:	080087f4 	.word	0x080087f4
 8001760:	08001641 	.word	0x08001641
 8001764:	20000094 	.word	0x20000094
 8001768:	0800217d 	.word	0x0800217d
 800176c:	080021b5 	.word	0x080021b5
 8001770:	08008808 	.word	0x08008808
 8001774:	0800881c 	.word	0x0800881c
 8001778:	200000a0 	.word	0x200000a0

0800177c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b093      	sub	sp, #76	; 0x4c
 8001780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001782:	2414      	movs	r4, #20
 8001784:	193b      	adds	r3, r7, r4
 8001786:	0018      	movs	r0, r3
 8001788:	2334      	movs	r3, #52	; 0x34
 800178a:	001a      	movs	r2, r3
 800178c:	2100      	movs	r1, #0
 800178e:	f005 fdb0 	bl	80072f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	0018      	movs	r0, r3
 8001796:	2310      	movs	r3, #16
 8001798:	001a      	movs	r2, r3
 800179a:	2100      	movs	r1, #0
 800179c:	f005 fda9 	bl	80072f2 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	0018      	movs	r0, r3
 80017a6:	f001 fb29 	bl	8002dfc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017aa:	193b      	adds	r3, r7, r4
 80017ac:	2202      	movs	r2, #2
 80017ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b0:	193b      	adds	r3, r7, r4
 80017b2:	2280      	movs	r2, #128	; 0x80
 80017b4:	0052      	lsls	r2, r2, #1
 80017b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80017b8:	193b      	adds	r3, r7, r4
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017be:	193b      	adds	r3, r7, r4
 80017c0:	2240      	movs	r2, #64	; 0x40
 80017c2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017c4:	193b      	adds	r3, r7, r4
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ca:	193b      	adds	r3, r7, r4
 80017cc:	0018      	movs	r0, r3
 80017ce:	f001 fb61 	bl	8002e94 <HAL_RCC_OscConfig>
 80017d2:	1e03      	subs	r3, r0, #0
 80017d4:	d001      	beq.n	80017da <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80017d6:	f000 f819 	bl	800180c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2207      	movs	r2, #7
 80017de:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	2200      	movs	r2, #0
 80017e4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e6:	1d3b      	adds	r3, r7, #4
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	2100      	movs	r1, #0
 80017f6:	0018      	movs	r0, r3
 80017f8:	f001 fe5c 	bl	80034b4 <HAL_RCC_ClockConfig>
 80017fc:	1e03      	subs	r3, r0, #0
 80017fe:	d001      	beq.n	8001804 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001800:	f000 f804 	bl	800180c <Error_Handler>
  }
}
 8001804:	46c0      	nop			; (mov r8, r8)
 8001806:	46bd      	mov	sp, r7
 8001808:	b013      	add	sp, #76	; 0x4c
 800180a:	bd90      	pop	{r4, r7, pc}

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
}
 8001812:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001814:	e7fe      	b.n	8001814 <Error_Handler+0x8>

08001816 <sh_uartWrite>:

static char g_backspaceString[] = "\b \b";
static char g_promptString[] = "> ";
char g_statistics[256];

static int sh_uartWrite(h_shell_t* shell, char * s, uint16_t size) {
 8001816:	b580      	push	{r7, lr}
 8001818:	b084      	sub	sp, #16
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	1dbb      	adds	r3, r7, #6
 8001822:	801a      	strh	r2, [r3, #0]
	shell->uart.transmit(s, size);
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	23e2      	movs	r3, #226	; 0xe2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	58d3      	ldr	r3, [r2, r3]
 800182c:	1dba      	adds	r2, r7, #6
 800182e:	8811      	ldrh	r1, [r2, #0]
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	0010      	movs	r0, r2
 8001834:	4798      	blx	r3
	return size;
 8001836:	1dbb      	adds	r3, r7, #6
 8001838:	881b      	ldrh	r3, [r3, #0]
}
 800183a:	0018      	movs	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	b004      	add	sp, #16
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <sh_stats>:

int sh_stats(h_shell_t* shell, int argc, char ** argv){
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
	vTaskGetRunTimeStats((char*) &g_statistics);
 8001850:	4b07      	ldr	r3, [pc, #28]	; (8001870 <sh_stats+0x2c>)
 8001852:	0018      	movs	r0, r3
 8001854:	f005 f944 	bl	8006ae0 <vTaskGetRunTimeStats>
	printf("%s", g_statistics);
 8001858:	4a05      	ldr	r2, [pc, #20]	; (8001870 <sh_stats+0x2c>)
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <sh_stats+0x30>)
 800185c:	0011      	movs	r1, r2
 800185e:	0018      	movs	r0, r3
 8001860:	f005 fe32 	bl	80074c8 <iprintf>
	return 0;
 8001864:	2300      	movs	r3, #0
}
 8001866:	0018      	movs	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	b004      	add	sp, #16
 800186c:	bd80      	pop	{r7, pc}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	20000274 	.word	0x20000274
 8001874:	08008838 	.word	0x08008838

08001878 <sh_help>:

static int sh_help(h_shell_t* shell, int argc, char ** argv) {
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af02      	add	r7, sp, #8
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
	int i;
	for(i = 0 ; i < shell->shell_func_list_size ; i++) {
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	e026      	b.n	80018d8 <sh_help+0x60>
		int size;
		size = snprintf (shell->print_buffer, BUFFER_SIZE, "%s:\t\t%s\r\n", shell->shell_func_list[i].c, shell->shell_func_list[i].description);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	1d18      	adds	r0, r3, #4
 800188e:	68f9      	ldr	r1, [r7, #12]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	0013      	movs	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	189b      	adds	r3, r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	18cb      	adds	r3, r1, r3
 800189c:	3344      	adds	r3, #68	; 0x44
 800189e:	681c      	ldr	r4, [r3, #0]
 80018a0:	68f9      	ldr	r1, [r7, #12]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	0013      	movs	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	189b      	adds	r3, r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	18cb      	adds	r3, r1, r3
 80018ae:	334c      	adds	r3, #76	; 0x4c
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <sh_help+0x74>)
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	0023      	movs	r3, r4
 80018b8:	2140      	movs	r1, #64	; 0x40
 80018ba:	f005 fead 	bl	8007618 <sniprintf>
 80018be:	0003      	movs	r3, r0
 80018c0:	613b      	str	r3, [r7, #16]
		sh_uartWrite(shell, shell->print_buffer, size);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	1d19      	adds	r1, r3, #4
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	0018      	movs	r0, r3
 80018ce:	f7ff ffa2 	bl	8001816 <sh_uartWrite>
	for(i = 0 ; i < shell->shell_func_list_size ; i++) {
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3301      	adds	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	429a      	cmp	r2, r3
 80018e0:	dbd3      	blt.n	800188a <sh_help+0x12>
	}
	return 0;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	0018      	movs	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b007      	add	sp, #28
 80018ea:	bd90      	pop	{r4, r7, pc}
 80018ec:	0800883c 	.word	0x0800883c

080018f0 <sh_init>:
	shell->uart.receive(&c, 1);

	return c;
}

void sh_init(h_shell_t* shell) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	int size = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
	shell->shell_func_list_size = 0;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
	shell->shellTaskHandler = NULL;
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	23e8      	movs	r3, #232	; 0xe8
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	2100      	movs	r1, #0
 800190a:	50d1      	str	r1, [r2, r3]


	size = snprintf (shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Bière Dynamics Debug Tool =====\r\n");
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3304      	adds	r3, #4
 8001910:	4a0f      	ldr	r2, [pc, #60]	; (8001950 <sh_init+0x60>)
 8001912:	2140      	movs	r1, #64	; 0x40
 8001914:	0018      	movs	r0, r3
 8001916:	f005 fe7f 	bl	8007618 <sniprintf>
 800191a:	0003      	movs	r3, r0
 800191c:	60fb      	str	r3, [r7, #12]
	sh_uartWrite(shell, shell->print_buffer, size);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	1d19      	adds	r1, r3, #4
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	b29a      	uxth	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	0018      	movs	r0, r3
 800192a:	f7ff ff74 	bl	8001816 <sh_uartWrite>

	sh_add(shell, "help", sh_help, "Help");
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <sh_init+0x64>)
 8001930:	4a09      	ldr	r2, [pc, #36]	; (8001958 <sh_init+0x68>)
 8001932:	490a      	ldr	r1, [pc, #40]	; (800195c <sh_init+0x6c>)
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 f819 	bl	800196c <sh_add>
	sh_add(shell, "stats", sh_stats, "CPU occupation of the running tasks");
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <sh_init+0x70>)
 800193c:	4a09      	ldr	r2, [pc, #36]	; (8001964 <sh_init+0x74>)
 800193e:	490a      	ldr	r1, [pc, #40]	; (8001968 <sh_init+0x78>)
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f813 	bl	800196c <sh_add>
}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	46bd      	mov	sp, r7
 800194a:	b004      	add	sp, #16
 800194c:	bd80      	pop	{r7, pc}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	08008860 	.word	0x08008860
 8001954:	08008890 	.word	0x08008890
 8001958:	08001879 	.word	0x08001879
 800195c:	08008898 	.word	0x08008898
 8001960:	080088a0 	.word	0x080088a0
 8001964:	08001845 	.word	0x08001845
 8001968:	080088c4 	.word	0x080088c4

0800196c <sh_add>:
		printf("Shell task failed");
		while(1);
	}
}

int sh_add(h_shell_t* shell, char* c, int (* pfunc)(h_shell_t* shell, int argc, char ** argv), char * description) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	603b      	str	r3, [r7, #0]
	if (shell->shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b1f      	cmp	r3, #31
 8001980:	dc27      	bgt.n	80019d2 <sh_add+0x66>
		shell->shell_func_list[shell->shell_func_list_size].c = c;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68f9      	ldr	r1, [r7, #12]
 8001988:	0013      	movs	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	189b      	adds	r3, r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	18cb      	adds	r3, r1, r3
 8001992:	3344      	adds	r3, #68	; 0x44
 8001994:	68ba      	ldr	r2, [r7, #8]
 8001996:	601a      	str	r2, [r3, #0]
		shell->shell_func_list[shell->shell_func_list_size].func = pfunc;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68f9      	ldr	r1, [r7, #12]
 800199e:	0013      	movs	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	189b      	adds	r3, r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	18cb      	adds	r3, r1, r3
 80019a8:	3348      	adds	r3, #72	; 0x48
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	601a      	str	r2, [r3, #0]
		shell->shell_func_list[shell->shell_func_list_size].description = description;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68f9      	ldr	r1, [r7, #12]
 80019b4:	0013      	movs	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	189b      	adds	r3, r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	18cb      	adds	r3, r1, r3
 80019be:	334c      	adds	r3, #76	; 0x4c
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	601a      	str	r2, [r3, #0]
		shell->shell_func_list_size++;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	1c5a      	adds	r2, r3, #1
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	601a      	str	r2, [r3, #0]
		return 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e001      	b.n	80019d6 <sh_add+0x6a>
	}
	return -1;
 80019d2:	2301      	movs	r3, #1
 80019d4:	425b      	negs	r3, r3
}
 80019d6:	0018      	movs	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	b004      	add	sp, #16
 80019dc:	bd80      	pop	{r7, pc}

080019de <configureTimerForRunTimeStats>:
	}
	return 0;
}

//The two following functions need to be defined to get the task statistics
void configureTimerForRunTimeStats(void){
 80019de:	b580      	push	{r7, lr}
 80019e0:	af00      	add	r7, sp, #0

}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <getRunTimeCounterValue>:
unsigned long getRunTimeCounterValue(void){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	//return 0;
}
 80019ec:	46c0      	nop			; (mov r8, r8)
 80019ee:	0018      	movs	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_MspInit+0x50>)
 80019fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_MspInit+0x50>)
 8001a00:	2101      	movs	r1, #1
 8001a02:	430a      	orrs	r2, r1
 8001a04:	641a      	str	r2, [r3, #64]	; 0x40
 8001a06:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_MspInit+0x50>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	607b      	str	r3, [r7, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_MspInit+0x50>)
 8001a14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_MspInit+0x50>)
 8001a18:	2180      	movs	r1, #128	; 0x80
 8001a1a:	0549      	lsls	r1, r1, #21
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <HAL_MspInit+0x50>)
 8001a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	055b      	lsls	r3, r3, #21
 8001a28:	4013      	ands	r3, r2
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8001a2e:	2302      	movs	r3, #2
 8001a30:	425b      	negs	r3, r3
 8001a32:	2200      	movs	r2, #0
 8001a34:	2103      	movs	r1, #3
 8001a36:	0018      	movs	r0, r3
 8001a38:	f001 f85a 	bl	8002af0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3c:	46c0      	nop			; (mov r8, r8)
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b002      	add	sp, #8
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40021000 	.word	0x40021000

08001a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <NMI_Handler+0x4>

08001a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a52:	e7fe      	b.n	8001a52 <HardFault_Handler+0x4>

08001a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a58:	f000 ff9c 	bl	8002994 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001a5c:	f004 fffa 	bl	8006a54 <xTaskGetSchedulerState>
 8001a60:	0003      	movs	r3, r0
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d001      	beq.n	8001a6a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001a66:	f005 fa0f 	bl	8006e88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	e00a      	b.n	8001a98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a82:	e000      	b.n	8001a86 <_read+0x16>
 8001a84:	bf00      	nop
 8001a86:	0001      	movs	r1, r0
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	60ba      	str	r2, [r7, #8]
 8001a8e:	b2ca      	uxtb	r2, r1
 8001a90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	3301      	adds	r3, #1
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	dbf0      	blt.n	8001a82 <_read+0x12>
	}

return len;
 8001aa0:	687b      	ldr	r3, [r7, #4]
}
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	b006      	add	sp, #24
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	e009      	b.n	8001ad0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	60ba      	str	r2, [r7, #8]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f7ff fda7 	bl	8001618 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	3301      	adds	r3, #1
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	dbf1      	blt.n	8001abc <_write+0x12>
	}
	return len;
 8001ad8:	687b      	ldr	r3, [r7, #4]
}
 8001ada:	0018      	movs	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b006      	add	sp, #24
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <_close>:

int _close(int file)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
	return -1;
 8001aea:	2301      	movs	r3, #1
 8001aec:	425b      	negs	r3, r3
}
 8001aee:	0018      	movs	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b002      	add	sp, #8
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
 8001afe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	2280      	movs	r2, #128	; 0x80
 8001b04:	0192      	lsls	r2, r2, #6
 8001b06:	605a      	str	r2, [r3, #4]
	return 0;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b002      	add	sp, #8
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <_isatty>:

int _isatty(int file)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
	return 1;
 8001b1a:	2301      	movs	r3, #1
}
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b002      	add	sp, #8
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	0018      	movs	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	b004      	add	sp, #16
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b44:	4a14      	ldr	r2, [pc, #80]	; (8001b98 <_sbrk+0x5c>)
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <_sbrk+0x60>)
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <_sbrk+0x64>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <_sbrk+0x64>)
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <_sbrk+0x68>)
 8001b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <_sbrk+0x64>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	18d3      	adds	r3, r2, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d207      	bcs.n	8001b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b6c:	f005 fb7a 	bl	8007264 <__errno>
 8001b70:	0003      	movs	r3, r0
 8001b72:	220c      	movs	r2, #12
 8001b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b76:	2301      	movs	r3, #1
 8001b78:	425b      	negs	r3, r3
 8001b7a:	e009      	b.n	8001b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <_sbrk+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	18d2      	adds	r2, r2, r3
 8001b8a:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <_sbrk+0x64>)
 8001b8c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}
 8001b90:	0018      	movs	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b006      	add	sp, #24
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20009000 	.word	0x20009000
 8001b9c:	00000400 	.word	0x00000400
 8001ba0:	20000374 	.word	0x20000374
 8001ba4:	20001338 	.word	0x20001338

08001ba8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bac:	46c0      	nop			; (mov r8, r8)
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bba:	2310      	movs	r3, #16
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	2310      	movs	r3, #16
 8001bc2:	001a      	movs	r2, r3
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	f005 fb94 	bl	80072f2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	0018      	movs	r0, r3
 8001bce:	230c      	movs	r3, #12
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	f005 fb8d 	bl	80072f2 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	; (8001c54 <MX_TIM3_Init+0xa0>)
 8001bda:	4a1f      	ldr	r2, [pc, #124]	; (8001c58 <MX_TIM3_Init+0xa4>)
 8001bdc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bde:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <MX_TIM3_Init+0xa0>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <MX_TIM3_Init+0xa0>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bea:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <MX_TIM3_Init+0xa0>)
 8001bec:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <MX_TIM3_Init+0xa8>)
 8001bee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf0:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <MX_TIM3_Init+0xa0>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf6:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <MX_TIM3_Init+0xa0>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bfc:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <MX_TIM3_Init+0xa0>)
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f001 ff36 	bl	8003a70 <HAL_TIM_Base_Init>
 8001c04:	1e03      	subs	r3, r0, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001c08:	f7ff fe00 	bl	800180c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c0c:	2110      	movs	r1, #16
 8001c0e:	187b      	adds	r3, r7, r1
 8001c10:	2280      	movs	r2, #128	; 0x80
 8001c12:	0152      	lsls	r2, r2, #5
 8001c14:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c16:	187a      	adds	r2, r7, r1
 8001c18:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <MX_TIM3_Init+0xa0>)
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f002 f9db 	bl	8003fd8 <HAL_TIM_ConfigClockSource>
 8001c22:	1e03      	subs	r3, r0, #0
 8001c24:	d001      	beq.n	8001c2a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c26:	f7ff fdf1 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c36:	1d3a      	adds	r2, r7, #4
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_TIM3_Init+0xa0>)
 8001c3a:	0011      	movs	r1, r2
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f002 ff97 	bl	8004b70 <HAL_TIMEx_MasterConfigSynchronization>
 8001c42:	1e03      	subs	r3, r0, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001c46:	f7ff fde1 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b008      	add	sp, #32
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	20000378 	.word	0x20000378
 8001c58:	40000400 	.word	0x40000400
 8001c5c:	0000ffff 	.word	0x0000ffff

08001c60 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c66:	003b      	movs	r3, r7
 8001c68:	0018      	movs	r0, r3
 8001c6a:	2310      	movs	r3, #16
 8001c6c:	001a      	movs	r2, r3
 8001c6e:	2100      	movs	r1, #0
 8001c70:	f005 fb3f 	bl	80072f2 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <MX_TIM14_Init+0x8c>)
 8001c76:	4a1e      	ldr	r2, [pc, #120]	; (8001cf0 <MX_TIM14_Init+0x90>)
 8001c78:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <MX_TIM14_Init+0x8c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c80:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <MX_TIM14_Init+0x8c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001c86:	4b19      	ldr	r3, [pc, #100]	; (8001cec <MX_TIM14_Init+0x8c>)
 8001c88:	4a1a      	ldr	r2, [pc, #104]	; (8001cf4 <MX_TIM14_Init+0x94>)
 8001c8a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8c:	4b17      	ldr	r3, [pc, #92]	; (8001cec <MX_TIM14_Init+0x8c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c92:	4b16      	ldr	r3, [pc, #88]	; (8001cec <MX_TIM14_Init+0x8c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001c98:	4b14      	ldr	r3, [pc, #80]	; (8001cec <MX_TIM14_Init+0x8c>)
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f001 fee8 	bl	8003a70 <HAL_TIM_Base_Init>
 8001ca0:	1e03      	subs	r3, r0, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8001ca4:	f7ff fdb2 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim14) != HAL_OK)
 8001ca8:	4b10      	ldr	r3, [pc, #64]	; (8001cec <MX_TIM14_Init+0x8c>)
 8001caa:	0018      	movs	r0, r3
 8001cac:	f001 ff90 	bl	8003bd0 <HAL_TIM_IC_Init>
 8001cb0:	1e03      	subs	r3, r0, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8001cb4:	f7ff fdaa 	bl	800180c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001cb8:	003b      	movs	r3, r7
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cbe:	003b      	movs	r3, r7
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cc4:	003b      	movs	r3, r7
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8001cca:	003b      	movs	r3, r7
 8001ccc:	2200      	movs	r2, #0
 8001cce:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim14, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001cd0:	0039      	movs	r1, r7
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <MX_TIM14_Init+0x8c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f001 ffda 	bl	8003c90 <HAL_TIM_IC_ConfigChannel>
 8001cdc:	1e03      	subs	r3, r0, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001ce0:	f7ff fd94 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b004      	add	sp, #16
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	200003c4 	.word	0x200003c4
 8001cf0:	40002000 	.word	0x40002000
 8001cf4:	0000ffff 	.word	0x0000ffff

08001cf8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b098      	sub	sp, #96	; 0x60
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfe:	2354      	movs	r3, #84	; 0x54
 8001d00:	18fb      	adds	r3, r7, r3
 8001d02:	0018      	movs	r0, r3
 8001d04:	230c      	movs	r3, #12
 8001d06:	001a      	movs	r2, r3
 8001d08:	2100      	movs	r1, #0
 8001d0a:	f005 faf2 	bl	80072f2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d0e:	2338      	movs	r3, #56	; 0x38
 8001d10:	18fb      	adds	r3, r7, r3
 8001d12:	0018      	movs	r0, r3
 8001d14:	231c      	movs	r3, #28
 8001d16:	001a      	movs	r2, r3
 8001d18:	2100      	movs	r1, #0
 8001d1a:	f005 faea 	bl	80072f2 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	0018      	movs	r0, r3
 8001d22:	2334      	movs	r3, #52	; 0x34
 8001d24:	001a      	movs	r2, r3
 8001d26:	2100      	movs	r1, #0
 8001d28:	f005 fae3 	bl	80072f2 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001d2c:	4b3c      	ldr	r3, [pc, #240]	; (8001e20 <MX_TIM15_Init+0x128>)
 8001d2e:	4a3d      	ldr	r2, [pc, #244]	; (8001e24 <MX_TIM15_Init+0x12c>)
 8001d30:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2-1;
 8001d32:	4b3b      	ldr	r3, [pc, #236]	; (8001e20 <MX_TIM15_Init+0x128>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d38:	4b39      	ldr	r3, [pc, #228]	; (8001e20 <MX_TIM15_Init+0x128>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1500-1;
 8001d3e:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <MX_TIM15_Init+0x128>)
 8001d40:	4a39      	ldr	r2, [pc, #228]	; (8001e28 <MX_TIM15_Init+0x130>)
 8001d42:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d44:	4b36      	ldr	r3, [pc, #216]	; (8001e20 <MX_TIM15_Init+0x128>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001d4a:	4b35      	ldr	r3, [pc, #212]	; (8001e20 <MX_TIM15_Init+0x128>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d50:	4b33      	ldr	r3, [pc, #204]	; (8001e20 <MX_TIM15_Init+0x128>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001d56:	4b32      	ldr	r3, [pc, #200]	; (8001e20 <MX_TIM15_Init+0x128>)
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f001 fee1 	bl	8003b20 <HAL_TIM_PWM_Init>
 8001d5e:	1e03      	subs	r3, r0, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001d62:	f7ff fd53 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d66:	2154      	movs	r1, #84	; 0x54
 8001d68:	187b      	adds	r3, r7, r1
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6e:	187b      	adds	r3, r7, r1
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001d74:	187a      	adds	r2, r7, r1
 8001d76:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <MX_TIM15_Init+0x128>)
 8001d78:	0011      	movs	r1, r2
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f002 fef8 	bl	8004b70 <HAL_TIMEx_MasterConfigSynchronization>
 8001d80:	1e03      	subs	r3, r0, #0
 8001d82:	d001      	beq.n	8001d88 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8001d84:	f7ff fd42 	bl	800180c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d88:	2138      	movs	r1, #56	; 0x38
 8001d8a:	187b      	adds	r3, r7, r1
 8001d8c:	2260      	movs	r2, #96	; 0x60
 8001d8e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001d90:	187b      	adds	r3, r7, r1
 8001d92:	2200      	movs	r2, #0
 8001d94:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d96:	187b      	adds	r3, r7, r1
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d9c:	187b      	adds	r3, r7, r1
 8001d9e:	2200      	movs	r2, #0
 8001da0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001da2:	187b      	adds	r3, r7, r1
 8001da4:	2200      	movs	r2, #0
 8001da6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001da8:	187b      	adds	r3, r7, r1
 8001daa:	2200      	movs	r2, #0
 8001dac:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dae:	187b      	adds	r3, r7, r1
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001db4:	1879      	adds	r1, r7, r1
 8001db6:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <MX_TIM15_Init+0x128>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f002 f80c 	bl	8003dd8 <HAL_TIM_PWM_ConfigChannel>
 8001dc0:	1e03      	subs	r3, r0, #0
 8001dc2:	d001      	beq.n	8001dc8 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8001dc4:	f7ff fd22 	bl	800180c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	2200      	movs	r2, #0
 8001dde:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001de0:	1d3b      	adds	r3, r7, #4
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	2280      	movs	r2, #128	; 0x80
 8001dea:	0192      	lsls	r2, r2, #6
 8001dec:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	2200      	movs	r2, #0
 8001df8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001dfa:	1d3a      	adds	r2, r7, #4
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <MX_TIM15_Init+0x128>)
 8001dfe:	0011      	movs	r1, r2
 8001e00:	0018      	movs	r0, r3
 8001e02:	f002 ff1d 	bl	8004c40 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e06:	1e03      	subs	r3, r0, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 8001e0a:	f7ff fcff 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001e0e:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <MX_TIM15_Init+0x128>)
 8001e10:	0018      	movs	r0, r3
 8001e12:	f000 f927 	bl	8002064 <HAL_TIM_MspPostInit>

}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	b018      	add	sp, #96	; 0x60
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	20000410 	.word	0x20000410
 8001e24:	40014000 	.word	0x40014000
 8001e28:	000005db 	.word	0x000005db

08001e2c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b094      	sub	sp, #80	; 0x50
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e32:	2334      	movs	r3, #52	; 0x34
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	0018      	movs	r0, r3
 8001e38:	231c      	movs	r3, #28
 8001e3a:	001a      	movs	r2, r3
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	f005 fa58 	bl	80072f2 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e42:	003b      	movs	r3, r7
 8001e44:	0018      	movs	r0, r3
 8001e46:	2334      	movs	r3, #52	; 0x34
 8001e48:	001a      	movs	r2, r3
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	f005 fa51 	bl	80072f2 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001e50:	4b37      	ldr	r3, [pc, #220]	; (8001f30 <MX_TIM16_Init+0x104>)
 8001e52:	4a38      	ldr	r2, [pc, #224]	; (8001f34 <MX_TIM16_Init+0x108>)
 8001e54:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001e56:	4b36      	ldr	r3, [pc, #216]	; (8001f30 <MX_TIM16_Init+0x104>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5c:	4b34      	ldr	r3, [pc, #208]	; (8001f30 <MX_TIM16_Init+0x104>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001e62:	4b33      	ldr	r3, [pc, #204]	; (8001f30 <MX_TIM16_Init+0x104>)
 8001e64:	4a34      	ldr	r2, [pc, #208]	; (8001f38 <MX_TIM16_Init+0x10c>)
 8001e66:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e68:	4b31      	ldr	r3, [pc, #196]	; (8001f30 <MX_TIM16_Init+0x104>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001e6e:	4b30      	ldr	r3, [pc, #192]	; (8001f30 <MX_TIM16_Init+0x104>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e74:	4b2e      	ldr	r3, [pc, #184]	; (8001f30 <MX_TIM16_Init+0x104>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e7a:	4b2d      	ldr	r3, [pc, #180]	; (8001f30 <MX_TIM16_Init+0x104>)
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f001 fdf7 	bl	8003a70 <HAL_TIM_Base_Init>
 8001e82:	1e03      	subs	r3, r0, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8001e86:	f7ff fcc1 	bl	800180c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001e8a:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <MX_TIM16_Init+0x104>)
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f001 fe47 	bl	8003b20 <HAL_TIM_PWM_Init>
 8001e92:	1e03      	subs	r3, r0, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8001e96:	f7ff fcb9 	bl	800180c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e9a:	2134      	movs	r1, #52	; 0x34
 8001e9c:	187b      	adds	r3, r7, r1
 8001e9e:	2260      	movs	r2, #96	; 0x60
 8001ea0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001ea2:	187b      	adds	r3, r7, r1
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ea8:	187b      	adds	r3, r7, r1
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001eae:	187b      	adds	r3, r7, r1
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb4:	187b      	adds	r3, r7, r1
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001eba:	187b      	adds	r3, r7, r1
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ec0:	187b      	adds	r3, r7, r1
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ec6:	1879      	adds	r1, r7, r1
 8001ec8:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <MX_TIM16_Init+0x104>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f001 ff83 	bl	8003dd8 <HAL_TIM_PWM_ConfigChannel>
 8001ed2:	1e03      	subs	r3, r0, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8001ed6:	f7ff fc99 	bl	800180c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eda:	003b      	movs	r3, r7
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ee0:	003b      	movs	r3, r7
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ee6:	003b      	movs	r3, r7
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eec:	003b      	movs	r3, r7
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ef2:	003b      	movs	r3, r7
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ef8:	003b      	movs	r3, r7
 8001efa:	2280      	movs	r2, #128	; 0x80
 8001efc:	0192      	lsls	r2, r2, #6
 8001efe:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f00:	003b      	movs	r3, r7
 8001f02:	2200      	movs	r2, #0
 8001f04:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f06:	003b      	movs	r3, r7
 8001f08:	2200      	movs	r2, #0
 8001f0a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001f0c:	003a      	movs	r2, r7
 8001f0e:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <MX_TIM16_Init+0x104>)
 8001f10:	0011      	movs	r1, r2
 8001f12:	0018      	movs	r0, r3
 8001f14:	f002 fe94 	bl	8004c40 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f18:	1e03      	subs	r3, r0, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8001f1c:	f7ff fc76 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001f20:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <MX_TIM16_Init+0x104>)
 8001f22:	0018      	movs	r0, r3
 8001f24:	f000 f89e 	bl	8002064 <HAL_TIM_MspPostInit>

}
 8001f28:	46c0      	nop			; (mov r8, r8)
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b014      	add	sp, #80	; 0x50
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	2000045c 	.word	0x2000045c
 8001f34:	40014400 	.word	0x40014400
 8001f38:	0000ffff 	.word	0x0000ffff

08001f3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08c      	sub	sp, #48	; 0x30
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	231c      	movs	r3, #28
 8001f46:	18fb      	adds	r3, r7, r3
 8001f48:	0018      	movs	r0, r3
 8001f4a:	2314      	movs	r3, #20
 8001f4c:	001a      	movs	r2, r3
 8001f4e:	2100      	movs	r1, #0
 8001f50:	f005 f9cf 	bl	80072f2 <memset>
  if(tim_baseHandle->Instance==TIM3)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a2e      	ldr	r2, [pc, #184]	; (8002014 <HAL_TIM_Base_MspInit+0xd8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d10c      	bne.n	8001f78 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f5e:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <HAL_TIM_Base_MspInit+0xdc>)
 8001f60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f62:	4b2d      	ldr	r3, [pc, #180]	; (8002018 <HAL_TIM_Base_MspInit+0xdc>)
 8001f64:	2102      	movs	r1, #2
 8001f66:	430a      	orrs	r2, r1
 8001f68:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f6a:	4b2b      	ldr	r3, [pc, #172]	; (8002018 <HAL_TIM_Base_MspInit+0xdc>)
 8001f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6e:	2202      	movs	r2, #2
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
 8001f74:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001f76:	e049      	b.n	800200c <HAL_TIM_Base_MspInit+0xd0>
  else if(tim_baseHandle->Instance==TIM14)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a27      	ldr	r2, [pc, #156]	; (800201c <HAL_TIM_Base_MspInit+0xe0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d131      	bne.n	8001fe6 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001f82:	4b25      	ldr	r3, [pc, #148]	; (8002018 <HAL_TIM_Base_MspInit+0xdc>)
 8001f84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f86:	4b24      	ldr	r3, [pc, #144]	; (8002018 <HAL_TIM_Base_MspInit+0xdc>)
 8001f88:	2180      	movs	r1, #128	; 0x80
 8001f8a:	0209      	lsls	r1, r1, #8
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40
 8001f90:	4b21      	ldr	r3, [pc, #132]	; (8002018 <HAL_TIM_Base_MspInit+0xdc>)
 8001f92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	021b      	lsls	r3, r3, #8
 8001f98:	4013      	ands	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <HAL_TIM_Base_MspInit+0xdc>)
 8001fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fa2:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <HAL_TIM_Base_MspInit+0xdc>)
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	635a      	str	r2, [r3, #52]	; 0x34
 8001faa:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <HAL_TIM_Base_MspInit+0xdc>)
 8001fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fae:	2201      	movs	r2, #1
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001fb6:	211c      	movs	r1, #28
 8001fb8:	187b      	adds	r3, r7, r1
 8001fba:	2210      	movs	r2, #16
 8001fbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	187b      	adds	r3, r7, r1
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	187b      	adds	r3, r7, r1
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fca:	187b      	adds	r3, r7, r1
 8001fcc:	2200      	movs	r2, #0
 8001fce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8001fd0:	187b      	adds	r3, r7, r1
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd6:	187a      	adds	r2, r7, r1
 8001fd8:	23a0      	movs	r3, #160	; 0xa0
 8001fda:	05db      	lsls	r3, r3, #23
 8001fdc:	0011      	movs	r1, r2
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f000 fda8 	bl	8002b34 <HAL_GPIO_Init>
}
 8001fe4:	e012      	b.n	800200c <HAL_TIM_Base_MspInit+0xd0>
  else if(tim_baseHandle->Instance==TIM16)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a0d      	ldr	r2, [pc, #52]	; (8002020 <HAL_TIM_Base_MspInit+0xe4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d10d      	bne.n	800200c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001ff0:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_TIM_Base_MspInit+0xdc>)
 8001ff2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ff4:	4b08      	ldr	r3, [pc, #32]	; (8002018 <HAL_TIM_Base_MspInit+0xdc>)
 8001ff6:	2180      	movs	r1, #128	; 0x80
 8001ff8:	0289      	lsls	r1, r1, #10
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_TIM_Base_MspInit+0xdc>)
 8002000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	029b      	lsls	r3, r3, #10
 8002006:	4013      	ands	r3, r2
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	68fb      	ldr	r3, [r7, #12]
}
 800200c:	46c0      	nop			; (mov r8, r8)
 800200e:	46bd      	mov	sp, r7
 8002010:	b00c      	add	sp, #48	; 0x30
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40000400 	.word	0x40000400
 8002018:	40021000 	.word	0x40021000
 800201c:	40002000 	.word	0x40002000
 8002020:	40014400 	.word	0x40014400

08002024 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0a      	ldr	r2, [pc, #40]	; (800205c <HAL_TIM_PWM_MspInit+0x38>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d10d      	bne.n	8002052 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002036:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <HAL_TIM_PWM_MspInit+0x3c>)
 8002038:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_TIM_PWM_MspInit+0x3c>)
 800203c:	2180      	movs	r1, #128	; 0x80
 800203e:	0249      	lsls	r1, r1, #9
 8002040:	430a      	orrs	r2, r1
 8002042:	641a      	str	r2, [r3, #64]	; 0x40
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_TIM_PWM_MspInit+0x3c>)
 8002046:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	025b      	lsls	r3, r3, #9
 800204c:	4013      	ands	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	46bd      	mov	sp, r7
 8002056:	b004      	add	sp, #16
 8002058:	bd80      	pop	{r7, pc}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	40014000 	.word	0x40014000
 8002060:	40021000 	.word	0x40021000

08002064 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002064:	b590      	push	{r4, r7, lr}
 8002066:	b08b      	sub	sp, #44	; 0x2c
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	2414      	movs	r4, #20
 800206e:	193b      	adds	r3, r7, r4
 8002070:	0018      	movs	r0, r3
 8002072:	2314      	movs	r3, #20
 8002074:	001a      	movs	r2, r3
 8002076:	2100      	movs	r1, #0
 8002078:	f005 f93b 	bl	80072f2 <memset>
  if(timHandle->Instance==TIM15)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a39      	ldr	r2, [pc, #228]	; (8002168 <HAL_TIM_MspPostInit+0x104>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d123      	bne.n	80020ce <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002086:	4b39      	ldr	r3, [pc, #228]	; (800216c <HAL_TIM_MspPostInit+0x108>)
 8002088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800208a:	4b38      	ldr	r3, [pc, #224]	; (800216c <HAL_TIM_MspPostInit+0x108>)
 800208c:	2102      	movs	r1, #2
 800208e:	430a      	orrs	r2, r1
 8002090:	635a      	str	r2, [r3, #52]	; 0x34
 8002092:	4b36      	ldr	r3, [pc, #216]	; (800216c <HAL_TIM_MspPostInit+0x108>)
 8002094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002096:	2202      	movs	r2, #2
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	693b      	ldr	r3, [r7, #16]
    /**TIM15 GPIO Configuration
    PB13     ------> TIM15_CH1N
    PB14     ------> TIM15_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800209e:	193b      	adds	r3, r7, r4
 80020a0:	22c0      	movs	r2, #192	; 0xc0
 80020a2:	01d2      	lsls	r2, r2, #7
 80020a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a6:	0021      	movs	r1, r4
 80020a8:	187b      	adds	r3, r7, r1
 80020aa:	2202      	movs	r2, #2
 80020ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	187b      	adds	r3, r7, r1
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b4:	187b      	adds	r3, r7, r1
 80020b6:	2200      	movs	r2, #0
 80020b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 80020ba:	187b      	adds	r3, r7, r1
 80020bc:	2205      	movs	r2, #5
 80020be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c0:	187b      	adds	r3, r7, r1
 80020c2:	4a2b      	ldr	r2, [pc, #172]	; (8002170 <HAL_TIM_MspPostInit+0x10c>)
 80020c4:	0019      	movs	r1, r3
 80020c6:	0010      	movs	r0, r2
 80020c8:	f000 fd34 	bl	8002b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80020cc:	e048      	b.n	8002160 <HAL_TIM_MspPostInit+0xfc>
  else if(timHandle->Instance==TIM16)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a28      	ldr	r2, [pc, #160]	; (8002174 <HAL_TIM_MspPostInit+0x110>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d143      	bne.n	8002160 <HAL_TIM_MspPostInit+0xfc>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020d8:	4b24      	ldr	r3, [pc, #144]	; (800216c <HAL_TIM_MspPostInit+0x108>)
 80020da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020dc:	4b23      	ldr	r3, [pc, #140]	; (800216c <HAL_TIM_MspPostInit+0x108>)
 80020de:	2108      	movs	r1, #8
 80020e0:	430a      	orrs	r2, r1
 80020e2:	635a      	str	r2, [r3, #52]	; 0x34
 80020e4:	4b21      	ldr	r3, [pc, #132]	; (800216c <HAL_TIM_MspPostInit+0x108>)
 80020e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e8:	2208      	movs	r2, #8
 80020ea:	4013      	ands	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f0:	4b1e      	ldr	r3, [pc, #120]	; (800216c <HAL_TIM_MspPostInit+0x108>)
 80020f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020f4:	4b1d      	ldr	r3, [pc, #116]	; (800216c <HAL_TIM_MspPostInit+0x108>)
 80020f6:	2102      	movs	r1, #2
 80020f8:	430a      	orrs	r2, r1
 80020fa:	635a      	str	r2, [r3, #52]	; 0x34
 80020fc:	4b1b      	ldr	r3, [pc, #108]	; (800216c <HAL_TIM_MspPostInit+0x108>)
 80020fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002100:	2202      	movs	r2, #2
 8002102:	4013      	ands	r3, r2
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002108:	2414      	movs	r4, #20
 800210a:	193b      	adds	r3, r7, r4
 800210c:	2201      	movs	r2, #1
 800210e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	193b      	adds	r3, r7, r4
 8002112:	2202      	movs	r2, #2
 8002114:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	193b      	adds	r3, r7, r4
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	193b      	adds	r3, r7, r4
 800211e:	2200      	movs	r2, #0
 8002120:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8002122:	193b      	adds	r3, r7, r4
 8002124:	2202      	movs	r2, #2
 8002126:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002128:	193b      	adds	r3, r7, r4
 800212a:	4a13      	ldr	r2, [pc, #76]	; (8002178 <HAL_TIM_MspPostInit+0x114>)
 800212c:	0019      	movs	r1, r3
 800212e:	0010      	movs	r0, r2
 8002130:	f000 fd00 	bl	8002b34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002134:	0021      	movs	r1, r4
 8002136:	187b      	adds	r3, r7, r1
 8002138:	2240      	movs	r2, #64	; 0x40
 800213a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	187b      	adds	r3, r7, r1
 800213e:	2202      	movs	r2, #2
 8002140:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	187b      	adds	r3, r7, r1
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002148:	187b      	adds	r3, r7, r1
 800214a:	2200      	movs	r2, #0
 800214c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 800214e:	187b      	adds	r3, r7, r1
 8002150:	2202      	movs	r2, #2
 8002152:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002154:	187b      	adds	r3, r7, r1
 8002156:	4a06      	ldr	r2, [pc, #24]	; (8002170 <HAL_TIM_MspPostInit+0x10c>)
 8002158:	0019      	movs	r1, r3
 800215a:	0010      	movs	r0, r2
 800215c:	f000 fcea 	bl	8002b34 <HAL_GPIO_Init>
}
 8002160:	46c0      	nop			; (mov r8, r8)
 8002162:	46bd      	mov	sp, r7
 8002164:	b00b      	add	sp, #44	; 0x2c
 8002166:	bd90      	pop	{r4, r7, pc}
 8002168:	40014000 	.word	0x40014000
 800216c:	40021000 	.word	0x40021000
 8002170:	50000400 	.word	0x50000400
 8002174:	40014400 	.word	0x40014400
 8002178:	50000c00 	.word	0x50000c00

0800217c <uart_half_duplex_transmit>:
 *  Created on: Oct 27, 2022
 *      Author: lucas
 */
#include "uart_half_duplex_driver.h"

int uart_half_duplex_transmit(uint8_t *pData, uint16_t size, uint32_t timeout){
 800217c:	b5b0      	push	{r4, r5, r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	607a      	str	r2, [r7, #4]
 8002186:	250a      	movs	r5, #10
 8002188:	197b      	adds	r3, r7, r5
 800218a:	1c0a      	adds	r2, r1, #0
 800218c:	801a      	strh	r2, [r3, #0]
	HAL_HalfDuplex_EnableTransmitter(&USART_PORT);
 800218e:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <uart_half_duplex_transmit+0x34>)
 8002190:	0018      	movs	r0, r3
 8002192:	f003 f82d 	bl	80051f0 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(&USART_PORT, pData, size, timeout);
 8002196:	687c      	ldr	r4, [r7, #4]
 8002198:	197b      	adds	r3, r7, r5
 800219a:	881a      	ldrh	r2, [r3, #0]
 800219c:	68f9      	ldr	r1, [r7, #12]
 800219e:	4804      	ldr	r0, [pc, #16]	; (80021b0 <uart_half_duplex_transmit+0x34>)
 80021a0:	0023      	movs	r3, r4
 80021a2:	f002 fea7 	bl	8004ef4 <HAL_UART_Transmit>

	return 0;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	0018      	movs	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b004      	add	sp, #16
 80021ae:	bdb0      	pop	{r4, r5, r7, pc}
 80021b0:	2000053c 	.word	0x2000053c

080021b4 <uart_half_duplex_receive>:

int uart_half_duplex_receive(uint8_t *pData, uint16_t size, uint32_t timeout) {
 80021b4:	b5b0      	push	{r4, r5, r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	250a      	movs	r5, #10
 80021c0:	197b      	adds	r3, r7, r5
 80021c2:	1c0a      	adds	r2, r1, #0
 80021c4:	801a      	strh	r2, [r3, #0]
	HAL_HalfDuplex_EnableReceiver(&USART_PORT);
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <uart_half_duplex_receive+0x34>)
 80021c8:	0018      	movs	r0, r3
 80021ca:	f003 f863 	bl	8005294 <HAL_HalfDuplex_EnableReceiver>
	HAL_UART_Receive(&USART_PORT, pData, size, timeout);
 80021ce:	687c      	ldr	r4, [r7, #4]
 80021d0:	197b      	adds	r3, r7, r5
 80021d2:	881a      	ldrh	r2, [r3, #0]
 80021d4:	68f9      	ldr	r1, [r7, #12]
 80021d6:	4804      	ldr	r0, [pc, #16]	; (80021e8 <uart_half_duplex_receive+0x34>)
 80021d8:	0023      	movs	r3, r4
 80021da:	f002 ff27 	bl	800502c <HAL_UART_Receive>

	return 0;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	0018      	movs	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b004      	add	sp, #16
 80021e6:	bdb0      	pop	{r4, r5, r7, pc}
 80021e8:	2000053c 	.word	0x2000053c

080021ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021f0:	4b23      	ldr	r3, [pc, #140]	; (8002280 <MX_USART1_UART_Init+0x94>)
 80021f2:	4a24      	ldr	r2, [pc, #144]	; (8002284 <MX_USART1_UART_Init+0x98>)
 80021f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021f6:	4b22      	ldr	r3, [pc, #136]	; (8002280 <MX_USART1_UART_Init+0x94>)
 80021f8:	22e1      	movs	r2, #225	; 0xe1
 80021fa:	0252      	lsls	r2, r2, #9
 80021fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021fe:	4b20      	ldr	r3, [pc, #128]	; (8002280 <MX_USART1_UART_Init+0x94>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002204:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <MX_USART1_UART_Init+0x94>)
 8002206:	2200      	movs	r2, #0
 8002208:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800220a:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <MX_USART1_UART_Init+0x94>)
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002210:	4b1b      	ldr	r3, [pc, #108]	; (8002280 <MX_USART1_UART_Init+0x94>)
 8002212:	220c      	movs	r2, #12
 8002214:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002216:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <MX_USART1_UART_Init+0x94>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800221c:	4b18      	ldr	r3, [pc, #96]	; (8002280 <MX_USART1_UART_Init+0x94>)
 800221e:	2200      	movs	r2, #0
 8002220:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002222:	4b17      	ldr	r3, [pc, #92]	; (8002280 <MX_USART1_UART_Init+0x94>)
 8002224:	2200      	movs	r2, #0
 8002226:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002228:	4b15      	ldr	r3, [pc, #84]	; (8002280 <MX_USART1_UART_Init+0x94>)
 800222a:	2200      	movs	r2, #0
 800222c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800222e:	4b14      	ldr	r3, [pc, #80]	; (8002280 <MX_USART1_UART_Init+0x94>)
 8002230:	2200      	movs	r2, #0
 8002232:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002234:	4b12      	ldr	r3, [pc, #72]	; (8002280 <MX_USART1_UART_Init+0x94>)
 8002236:	0018      	movs	r0, r3
 8002238:	f002 fda8 	bl	8004d8c <HAL_UART_Init>
 800223c:	1e03      	subs	r3, r0, #0
 800223e:	d001      	beq.n	8002244 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002240:	f7ff fae4 	bl	800180c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002244:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <MX_USART1_UART_Init+0x94>)
 8002246:	2100      	movs	r1, #0
 8002248:	0018      	movs	r0, r3
 800224a:	f003 fc1d 	bl	8005a88 <HAL_UARTEx_SetTxFifoThreshold>
 800224e:	1e03      	subs	r3, r0, #0
 8002250:	d001      	beq.n	8002256 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002252:	f7ff fadb 	bl	800180c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <MX_USART1_UART_Init+0x94>)
 8002258:	2100      	movs	r1, #0
 800225a:	0018      	movs	r0, r3
 800225c:	f003 fc54 	bl	8005b08 <HAL_UARTEx_SetRxFifoThreshold>
 8002260:	1e03      	subs	r3, r0, #0
 8002262:	d001      	beq.n	8002268 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002264:	f7ff fad2 	bl	800180c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <MX_USART1_UART_Init+0x94>)
 800226a:	0018      	movs	r0, r3
 800226c:	f003 fbd2 	bl	8005a14 <HAL_UARTEx_DisableFifoMode>
 8002270:	1e03      	subs	r3, r0, #0
 8002272:	d001      	beq.n	8002278 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002274:	f7ff faca 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002278:	46c0      	nop			; (mov r8, r8)
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	46c0      	nop			; (mov r8, r8)
 8002280:	200004a8 	.word	0x200004a8
 8002284:	40013800 	.word	0x40013800

08002288 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800228c:	4b22      	ldr	r3, [pc, #136]	; (8002318 <MX_USART2_UART_Init+0x90>)
 800228e:	4a23      	ldr	r2, [pc, #140]	; (800231c <MX_USART2_UART_Init+0x94>)
 8002290:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8002292:	4b21      	ldr	r3, [pc, #132]	; (8002318 <MX_USART2_UART_Init+0x90>)
 8002294:	4a22      	ldr	r2, [pc, #136]	; (8002320 <MX_USART2_UART_Init+0x98>)
 8002296:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002298:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <MX_USART2_UART_Init+0x90>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800229e:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <MX_USART2_UART_Init+0x90>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022a4:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <MX_USART2_UART_Init+0x90>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022aa:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <MX_USART2_UART_Init+0x90>)
 80022ac:	220c      	movs	r2, #12
 80022ae:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022b0:	4b19      	ldr	r3, [pc, #100]	; (8002318 <MX_USART2_UART_Init+0x90>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b6:	4b18      	ldr	r3, [pc, #96]	; (8002318 <MX_USART2_UART_Init+0x90>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022bc:	4b16      	ldr	r3, [pc, #88]	; (8002318 <MX_USART2_UART_Init+0x90>)
 80022be:	2200      	movs	r2, #0
 80022c0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <MX_USART2_UART_Init+0x90>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022c8:	4b13      	ldr	r3, [pc, #76]	; (8002318 <MX_USART2_UART_Init+0x90>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80022ce:	4b12      	ldr	r3, [pc, #72]	; (8002318 <MX_USART2_UART_Init+0x90>)
 80022d0:	0018      	movs	r0, r3
 80022d2:	f002 fdb1 	bl	8004e38 <HAL_HalfDuplex_Init>
 80022d6:	1e03      	subs	r3, r0, #0
 80022d8:	d001      	beq.n	80022de <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 80022da:	f7ff fa97 	bl	800180c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <MX_USART2_UART_Init+0x90>)
 80022e0:	2100      	movs	r1, #0
 80022e2:	0018      	movs	r0, r3
 80022e4:	f003 fbd0 	bl	8005a88 <HAL_UARTEx_SetTxFifoThreshold>
 80022e8:	1e03      	subs	r3, r0, #0
 80022ea:	d001      	beq.n	80022f0 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 80022ec:	f7ff fa8e 	bl	800180c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022f0:	4b09      	ldr	r3, [pc, #36]	; (8002318 <MX_USART2_UART_Init+0x90>)
 80022f2:	2100      	movs	r1, #0
 80022f4:	0018      	movs	r0, r3
 80022f6:	f003 fc07 	bl	8005b08 <HAL_UARTEx_SetRxFifoThreshold>
 80022fa:	1e03      	subs	r3, r0, #0
 80022fc:	d001      	beq.n	8002302 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 80022fe:	f7ff fa85 	bl	800180c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002302:	4b05      	ldr	r3, [pc, #20]	; (8002318 <MX_USART2_UART_Init+0x90>)
 8002304:	0018      	movs	r0, r3
 8002306:	f003 fb85 	bl	8005a14 <HAL_UARTEx_DisableFifoMode>
 800230a:	1e03      	subs	r3, r0, #0
 800230c:	d001      	beq.n	8002312 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 800230e:	f7ff fa7d 	bl	800180c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	2000053c 	.word	0x2000053c
 800231c:	40004400 	.word	0x40004400
 8002320:	000f4240 	.word	0x000f4240

08002324 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002324:	b590      	push	{r4, r7, lr}
 8002326:	b093      	sub	sp, #76	; 0x4c
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	2334      	movs	r3, #52	; 0x34
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	0018      	movs	r0, r3
 8002332:	2314      	movs	r3, #20
 8002334:	001a      	movs	r2, r3
 8002336:	2100      	movs	r1, #0
 8002338:	f004 ffdb 	bl	80072f2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800233c:	2418      	movs	r4, #24
 800233e:	193b      	adds	r3, r7, r4
 8002340:	0018      	movs	r0, r3
 8002342:	231c      	movs	r3, #28
 8002344:	001a      	movs	r2, r3
 8002346:	2100      	movs	r1, #0
 8002348:	f004 ffd3 	bl	80072f2 <memset>
  if(uartHandle->Instance==USART1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a45      	ldr	r2, [pc, #276]	; (8002468 <HAL_UART_MspInit+0x144>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d13e      	bne.n	80023d4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002356:	193b      	adds	r3, r7, r4
 8002358:	2201      	movs	r2, #1
 800235a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800235c:	193b      	adds	r3, r7, r4
 800235e:	2200      	movs	r2, #0
 8002360:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002362:	193b      	adds	r3, r7, r4
 8002364:	0018      	movs	r0, r3
 8002366:	f001 fa4f 	bl	8003808 <HAL_RCCEx_PeriphCLKConfig>
 800236a:	1e03      	subs	r3, r0, #0
 800236c:	d001      	beq.n	8002372 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800236e:	f7ff fa4d 	bl	800180c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002372:	4b3e      	ldr	r3, [pc, #248]	; (800246c <HAL_UART_MspInit+0x148>)
 8002374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002376:	4b3d      	ldr	r3, [pc, #244]	; (800246c <HAL_UART_MspInit+0x148>)
 8002378:	2180      	movs	r1, #128	; 0x80
 800237a:	01c9      	lsls	r1, r1, #7
 800237c:	430a      	orrs	r2, r1
 800237e:	641a      	str	r2, [r3, #64]	; 0x40
 8002380:	4b3a      	ldr	r3, [pc, #232]	; (800246c <HAL_UART_MspInit+0x148>)
 8002382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	01db      	lsls	r3, r3, #7
 8002388:	4013      	ands	r3, r2
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800238e:	4b37      	ldr	r3, [pc, #220]	; (800246c <HAL_UART_MspInit+0x148>)
 8002390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002392:	4b36      	ldr	r3, [pc, #216]	; (800246c <HAL_UART_MspInit+0x148>)
 8002394:	2104      	movs	r1, #4
 8002396:	430a      	orrs	r2, r1
 8002398:	635a      	str	r2, [r3, #52]	; 0x34
 800239a:	4b34      	ldr	r3, [pc, #208]	; (800246c <HAL_UART_MspInit+0x148>)
 800239c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239e:	2204      	movs	r2, #4
 80023a0:	4013      	ands	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80023a6:	2134      	movs	r1, #52	; 0x34
 80023a8:	187b      	adds	r3, r7, r1
 80023aa:	2230      	movs	r2, #48	; 0x30
 80023ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	187b      	adds	r3, r7, r1
 80023b0:	2202      	movs	r2, #2
 80023b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	187b      	adds	r3, r7, r1
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ba:	187b      	adds	r3, r7, r1
 80023bc:	2200      	movs	r2, #0
 80023be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80023c0:	187b      	adds	r3, r7, r1
 80023c2:	2201      	movs	r2, #1
 80023c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c6:	187b      	adds	r3, r7, r1
 80023c8:	4a29      	ldr	r2, [pc, #164]	; (8002470 <HAL_UART_MspInit+0x14c>)
 80023ca:	0019      	movs	r1, r3
 80023cc:	0010      	movs	r0, r2
 80023ce:	f000 fbb1 	bl	8002b34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023d2:	e044      	b.n	800245e <HAL_UART_MspInit+0x13a>
  else if(uartHandle->Instance==USART2)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a26      	ldr	r2, [pc, #152]	; (8002474 <HAL_UART_MspInit+0x150>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d13f      	bne.n	800245e <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023de:	2118      	movs	r1, #24
 80023e0:	187b      	adds	r3, r7, r1
 80023e2:	2202      	movs	r2, #2
 80023e4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023e6:	187b      	adds	r3, r7, r1
 80023e8:	2200      	movs	r2, #0
 80023ea:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023ec:	187b      	adds	r3, r7, r1
 80023ee:	0018      	movs	r0, r3
 80023f0:	f001 fa0a 	bl	8003808 <HAL_RCCEx_PeriphCLKConfig>
 80023f4:	1e03      	subs	r3, r0, #0
 80023f6:	d001      	beq.n	80023fc <HAL_UART_MspInit+0xd8>
      Error_Handler();
 80023f8:	f7ff fa08 	bl	800180c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023fc:	4b1b      	ldr	r3, [pc, #108]	; (800246c <HAL_UART_MspInit+0x148>)
 80023fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002400:	4b1a      	ldr	r3, [pc, #104]	; (800246c <HAL_UART_MspInit+0x148>)
 8002402:	2180      	movs	r1, #128	; 0x80
 8002404:	0289      	lsls	r1, r1, #10
 8002406:	430a      	orrs	r2, r1
 8002408:	63da      	str	r2, [r3, #60]	; 0x3c
 800240a:	4b18      	ldr	r3, [pc, #96]	; (800246c <HAL_UART_MspInit+0x148>)
 800240c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	029b      	lsls	r3, r3, #10
 8002412:	4013      	ands	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002418:	4b14      	ldr	r3, [pc, #80]	; (800246c <HAL_UART_MspInit+0x148>)
 800241a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <HAL_UART_MspInit+0x148>)
 800241e:	2101      	movs	r1, #1
 8002420:	430a      	orrs	r2, r1
 8002422:	635a      	str	r2, [r3, #52]	; 0x34
 8002424:	4b11      	ldr	r3, [pc, #68]	; (800246c <HAL_UART_MspInit+0x148>)
 8002426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002428:	2201      	movs	r2, #1
 800242a:	4013      	ands	r3, r2
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002430:	2134      	movs	r1, #52	; 0x34
 8002432:	187b      	adds	r3, r7, r1
 8002434:	2204      	movs	r2, #4
 8002436:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002438:	187b      	adds	r3, r7, r1
 800243a:	2212      	movs	r2, #18
 800243c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800243e:	187b      	adds	r3, r7, r1
 8002440:	2201      	movs	r2, #1
 8002442:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002444:	187b      	adds	r3, r7, r1
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800244a:	187b      	adds	r3, r7, r1
 800244c:	2201      	movs	r2, #1
 800244e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002450:	187a      	adds	r2, r7, r1
 8002452:	23a0      	movs	r3, #160	; 0xa0
 8002454:	05db      	lsls	r3, r3, #23
 8002456:	0011      	movs	r1, r2
 8002458:	0018      	movs	r0, r3
 800245a:	f000 fb6b 	bl	8002b34 <HAL_GPIO_Init>
}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	46bd      	mov	sp, r7
 8002462:	b013      	add	sp, #76	; 0x4c
 8002464:	bd90      	pop	{r4, r7, pc}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	40013800 	.word	0x40013800
 800246c:	40021000 	.word	0x40021000
 8002470:	50000800 	.word	0x50000800
 8002474:	40004400 	.word	0x40004400

08002478 <xl320_init>:
 *	@author Lucas Vallery
 *
 */
#include "xl320_driver.h"

int xl320_init(XL320_t* xl320, uint8_t id, XL320_BaudRate_t br){
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	0008      	movs	r0, r1
 8002482:	0011      	movs	r1, r2
 8002484:	1cfb      	adds	r3, r7, #3
 8002486:	1c02      	adds	r2, r0, #0
 8002488:	701a      	strb	r2, [r3, #0]
 800248a:	1cbb      	adds	r3, r7, #2
 800248c:	1c0a      	adds	r2, r1, #0
 800248e:	701a      	strb	r2, [r3, #0]
	xl320->id 	= id;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	1cfa      	adds	r2, r7, #3
 8002494:	7812      	ldrb	r2, [r2, #0]
 8002496:	701a      	strb	r2, [r3, #0]
	xl320->br	= br;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	1cba      	adds	r2, r7, #2
 800249c:	7812      	ldrb	r2, [r2, #0]
 800249e:	705a      	strb	r2, [r3, #1]

	return 0;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	0018      	movs	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b002      	add	sp, #8
 80024a8:	bd80      	pop	{r7, pc}

080024aa <xl320_addHeader2Buff>:

void xl320_addHeader2Buff(uint8_t* buff){
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
	buff[0] = 0xFF;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	22ff      	movs	r2, #255	; 0xff
 80024b6:	701a      	strb	r2, [r3, #0]
	buff[1] = 0xFF;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3301      	adds	r3, #1
 80024bc:	22ff      	movs	r2, #255	; 0xff
 80024be:	701a      	strb	r2, [r3, #0]
	buff[2] = 0xFD;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3302      	adds	r3, #2
 80024c4:	22fd      	movs	r2, #253	; 0xfd
 80024c6:	701a      	strb	r2, [r3, #0]
	buff[3] = 0x00;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3303      	adds	r3, #3
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
}
 80024d0:	46c0      	nop			; (mov r8, r8)
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b002      	add	sp, #8
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <xl320_updateCrc>:

unsigned short xl320_updateCrc(unsigned short crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size) {
 80024d8:	b5b0      	push	{r4, r5, r7, lr}
 80024da:	4c33      	ldr	r4, [pc, #204]	; (80025a8 <xl320_updateCrc+0xd0>)
 80024dc:	44a5      	add	sp, r4
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6039      	str	r1, [r7, #0]
 80024e2:	0011      	movs	r1, r2
 80024e4:	4b31      	ldr	r3, [pc, #196]	; (80025ac <xl320_updateCrc+0xd4>)
 80024e6:	2484      	movs	r4, #132	; 0x84
 80024e8:	00a4      	lsls	r4, r4, #2
 80024ea:	191b      	adds	r3, r3, r4
 80024ec:	19db      	adds	r3, r3, r7
 80024ee:	1c02      	adds	r2, r0, #0
 80024f0:	801a      	strh	r2, [r3, #0]
 80024f2:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <xl320_updateCrc+0xd8>)
 80024f4:	0020      	movs	r0, r4
 80024f6:	181b      	adds	r3, r3, r0
 80024f8:	19db      	adds	r3, r3, r7
 80024fa:	1c0a      	adds	r2, r1, #0
 80024fc:	801a      	strh	r2, [r3, #0]
	unsigned short i, j;
	unsigned short crc_table[256] = {
 80024fe:	4b2d      	ldr	r3, [pc, #180]	; (80025b4 <xl320_updateCrc+0xdc>)
 8002500:	181b      	adds	r3, r3, r0
 8002502:	19da      	adds	r2, r3, r7
 8002504:	4b2c      	ldr	r3, [pc, #176]	; (80025b8 <xl320_updateCrc+0xe0>)
 8002506:	0010      	movs	r0, r2
 8002508:	0019      	movs	r1, r3
 800250a:	2380      	movs	r3, #128	; 0x80
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	001a      	movs	r2, r3
 8002510:	f004 fee6 	bl	80072e0 <memcpy>
			0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
			0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
			0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
	};

	for(j = 0; j < data_blk_size; j++) {
 8002514:	4b29      	ldr	r3, [pc, #164]	; (80025bc <xl320_updateCrc+0xe4>)
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	2200      	movs	r2, #0
 800251a:	801a      	strh	r2, [r3, #0]
 800251c:	e02f      	b.n	800257e <xl320_updateCrc+0xa6>
		i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 800251e:	4b23      	ldr	r3, [pc, #140]	; (80025ac <xl320_updateCrc+0xd4>)
 8002520:	2084      	movs	r0, #132	; 0x84
 8002522:	0080      	lsls	r0, r0, #2
 8002524:	181b      	adds	r3, r3, r0
 8002526:	19db      	adds	r3, r3, r7
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	b29a      	uxth	r2, r3
 800252e:	4c23      	ldr	r4, [pc, #140]	; (80025bc <xl320_updateCrc+0xe4>)
 8002530:	193b      	adds	r3, r7, r4
 8002532:	881b      	ldrh	r3, [r3, #0]
 8002534:	6839      	ldr	r1, [r7, #0]
 8002536:	18cb      	adds	r3, r1, r3
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	b29b      	uxth	r3, r3
 800253c:	4053      	eors	r3, r2
 800253e:	b29a      	uxth	r2, r3
 8002540:	2583      	movs	r5, #131	; 0x83
 8002542:	00ad      	lsls	r5, r5, #2
 8002544:	197b      	adds	r3, r7, r5
 8002546:	21ff      	movs	r1, #255	; 0xff
 8002548:	400a      	ands	r2, r1
 800254a:	801a      	strh	r2, [r3, #0]
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 800254c:	4b17      	ldr	r3, [pc, #92]	; (80025ac <xl320_updateCrc+0xd4>)
 800254e:	181b      	adds	r3, r3, r0
 8002550:	19db      	adds	r3, r3, r7
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	021b      	lsls	r3, r3, #8
 8002556:	b21a      	sxth	r2, r3
 8002558:	197b      	adds	r3, r7, r5
 800255a:	8819      	ldrh	r1, [r3, #0]
 800255c:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <xl320_updateCrc+0xdc>)
 800255e:	181b      	adds	r3, r3, r0
 8002560:	19db      	adds	r3, r3, r7
 8002562:	0049      	lsls	r1, r1, #1
 8002564:	5acb      	ldrh	r3, [r1, r3]
 8002566:	b21b      	sxth	r3, r3
 8002568:	4053      	eors	r3, r2
 800256a:	b21a      	sxth	r2, r3
 800256c:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <xl320_updateCrc+0xd4>)
 800256e:	181b      	adds	r3, r3, r0
 8002570:	19db      	adds	r3, r3, r7
 8002572:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++) {
 8002574:	193b      	adds	r3, r7, r4
 8002576:	881a      	ldrh	r2, [r3, #0]
 8002578:	193b      	adds	r3, r7, r4
 800257a:	3201      	adds	r2, #1
 800257c:	801a      	strh	r2, [r3, #0]
 800257e:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <xl320_updateCrc+0xe4>)
 8002580:	18fa      	adds	r2, r7, r3
 8002582:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <xl320_updateCrc+0xd8>)
 8002584:	2184      	movs	r1, #132	; 0x84
 8002586:	0089      	lsls	r1, r1, #2
 8002588:	185b      	adds	r3, r3, r1
 800258a:	19db      	adds	r3, r3, r7
 800258c:	8812      	ldrh	r2, [r2, #0]
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d3c4      	bcc.n	800251e <xl320_updateCrc+0x46>
	}

	return crc_accum;
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <xl320_updateCrc+0xd4>)
 8002596:	185b      	adds	r3, r3, r1
 8002598:	19db      	adds	r3, r3, r7
 800259a:	881b      	ldrh	r3, [r3, #0]
}
 800259c:	0018      	movs	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	2384      	movs	r3, #132	; 0x84
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	449d      	add	sp, r3
 80025a6:	bdb0      	pop	{r4, r5, r7, pc}
 80025a8:	fffffdf0 	.word	0xfffffdf0
 80025ac:	fffffdf6 	.word	0xfffffdf6
 80025b0:	fffffdf4 	.word	0xfffffdf4
 80025b4:	fffffdfc 	.word	0xfffffdfc
 80025b8:	080088f8 	.word	0x080088f8
 80025bc:	0000020e 	.word	0x0000020e

080025c0 <xl320_copyParams2Buff>:

void xl320_copyParams2Buff(uint8_t buffStartIndex, uint8_t* buff, uint16_t nbParams, uint8_t* params){
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	0011      	movs	r1, r2
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	230f      	movs	r3, #15
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	1c02      	adds	r2, r0, #0
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	230c      	movs	r3, #12
 80025d6:	18fb      	adds	r3, r7, r3
 80025d8:	1c0a      	adds	r2, r1, #0
 80025da:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i < nbParams; i++){
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	e00f      	b.n	8002602 <xl320_copyParams2Buff+0x42>
		buff[i + buffStartIndex] = params[i];
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	18d2      	adds	r2, r2, r3
 80025e8:	230f      	movs	r3, #15
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	7819      	ldrb	r1, [r3, #0]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	18cb      	adds	r3, r1, r3
 80025f2:	0019      	movs	r1, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	185b      	adds	r3, r3, r1
 80025f8:	7812      	ldrb	r2, [r2, #0]
 80025fa:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < nbParams; i++){
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	3301      	adds	r3, #1
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	230c      	movs	r3, #12
 8002604:	18fb      	adds	r3, r7, r3
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	429a      	cmp	r2, r3
 800260c:	dbe9      	blt.n	80025e2 <xl320_copyParams2Buff+0x22>
	}
}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	46c0      	nop			; (mov r8, r8)
 8002612:	46bd      	mov	sp, r7
 8002614:	b006      	add	sp, #24
 8002616:	bd80      	pop	{r7, pc}

08002618 <xl320_sendCommand>:

int xl320_sendCommand(XL320_t* xl320, XL320_Instruction_t inst, uint16_t nbParams, uint8_t* params){
 8002618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800261a:	b087      	sub	sp, #28
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	0008      	movs	r0, r1
 8002622:	0011      	movs	r1, r2
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	230b      	movs	r3, #11
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	1c02      	adds	r2, r0, #0
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	2008      	movs	r0, #8
 8002630:	183b      	adds	r3, r7, r0
 8002632:	1c0a      	adds	r2, r1, #0
 8002634:	801a      	strh	r2, [r3, #0]
	uint8_t* txBuff = NULL;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
	txBuff = (uint8_t*) malloc((MIN_FRAME_SIZE + nbParams)*sizeof(uint8_t));
 800263a:	183b      	adds	r3, r7, r0
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	330a      	adds	r3, #10
 8002640:	0018      	movs	r0, r3
 8002642:	f004 fe39 	bl	80072b8 <malloc>
 8002646:	0003      	movs	r3, r0
 8002648:	617b      	str	r3, [r7, #20]

	if(txBuff == NULL){
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d106      	bne.n	800265e <xl320_sendCommand+0x46>
		DEBUG_PRINTF("XL320 ERROT : Malloc failed\r\n");
 8002650:	4b34      	ldr	r3, [pc, #208]	; (8002724 <xl320_sendCommand+0x10c>)
 8002652:	0018      	movs	r0, r3
 8002654:	f004 ffc4 	bl	80075e0 <puts>
		return -1;
 8002658:	2301      	movs	r3, #1
 800265a:	425b      	negs	r3, r3
 800265c:	e05d      	b.n	800271a <xl320_sendCommand+0x102>
	}

	uint16_t length = nbParams + 3;
 800265e:	2512      	movs	r5, #18
 8002660:	197b      	adds	r3, r7, r5
 8002662:	2408      	movs	r4, #8
 8002664:	193a      	adds	r2, r7, r4
 8002666:	8812      	ldrh	r2, [r2, #0]
 8002668:	3203      	adds	r2, #3
 800266a:	801a      	strh	r2, [r3, #0]

	xl320_addHeader2Buff(txBuff);
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	0018      	movs	r0, r3
 8002670:	f7ff ff1b 	bl	80024aa <xl320_addHeader2Buff>
	txBuff[4] = xl320->id;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	3304      	adds	r3, #4
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	7812      	ldrb	r2, [r2, #0]
 800267c:	701a      	strb	r2, [r3, #0]
	txBuff[5] = (uint8_t) (length & 0xFF);
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	3305      	adds	r3, #5
 8002682:	197a      	adds	r2, r7, r5
 8002684:	8812      	ldrh	r2, [r2, #0]
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	701a      	strb	r2, [r3, #0]
	txBuff[6] = (uint8_t) (length >> 8);
 800268a:	197b      	adds	r3, r7, r5
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	0a1b      	lsrs	r3, r3, #8
 8002690:	b29a      	uxth	r2, r3
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	3306      	adds	r3, #6
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	701a      	strb	r2, [r3, #0]
	txBuff[7] = inst;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	3307      	adds	r3, #7
 800269e:	220b      	movs	r2, #11
 80026a0:	18ba      	adds	r2, r7, r2
 80026a2:	7812      	ldrb	r2, [r2, #0]
 80026a4:	701a      	strb	r2, [r3, #0]
	xl320_copyParams2Buff(8, txBuff, nbParams, params);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	193b      	adds	r3, r7, r4
 80026aa:	881a      	ldrh	r2, [r3, #0]
 80026ac:	6979      	ldr	r1, [r7, #20]
 80026ae:	0003      	movs	r3, r0
 80026b0:	2008      	movs	r0, #8
 80026b2:	f7ff ff85 	bl	80025c0 <xl320_copyParams2Buff>

	uint16_t crc = xl320_updateCrc(0, txBuff, MIN_FRAME_SIZE + nbParams - CRC_FIELD_SIZE);
 80026b6:	0025      	movs	r5, r4
 80026b8:	193b      	adds	r3, r7, r4
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	3308      	adds	r3, #8
 80026be:	b29a      	uxth	r2, r3
 80026c0:	2610      	movs	r6, #16
 80026c2:	19bc      	adds	r4, r7, r6
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	0019      	movs	r1, r3
 80026c8:	2000      	movs	r0, #0
 80026ca:	f7ff ff05 	bl	80024d8 <xl320_updateCrc>
 80026ce:	0003      	movs	r3, r0
 80026d0:	8023      	strh	r3, [r4, #0]

	txBuff[(MIN_FRAME_SIZE + nbParams) - 2] = (uint8_t) (crc & 0xFF);
 80026d2:	002c      	movs	r4, r5
 80026d4:	193b      	adds	r3, r7, r4
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	3308      	adds	r3, #8
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	18d3      	adds	r3, r2, r3
 80026de:	19ba      	adds	r2, r7, r6
 80026e0:	8812      	ldrh	r2, [r2, #0]
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	701a      	strb	r2, [r3, #0]
	txBuff[(MIN_FRAME_SIZE + nbParams) - 1] = (uint8_t) (crc >> 8);
 80026e6:	19bb      	adds	r3, r7, r6
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	0a1b      	lsrs	r3, r3, #8
 80026ec:	b299      	uxth	r1, r3
 80026ee:	193b      	adds	r3, r7, r4
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	3309      	adds	r3, #9
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	18d3      	adds	r3, r2, r3
 80026f8:	b2ca      	uxtb	r2, r1
 80026fa:	701a      	strb	r2, [r3, #0]

	xl320->serial.transmit(txBuff, (MIN_FRAME_SIZE + nbParams)*sizeof(uint8_t), 0x1F4);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	193a      	adds	r2, r7, r4
 8002702:	8812      	ldrh	r2, [r2, #0]
 8002704:	320a      	adds	r2, #10
 8002706:	b291      	uxth	r1, r2
 8002708:	22fa      	movs	r2, #250	; 0xfa
 800270a:	0052      	lsls	r2, r2, #1
 800270c:	6978      	ldr	r0, [r7, #20]
 800270e:	4798      	blx	r3

	free(txBuff);
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	0018      	movs	r0, r3
 8002714:	f004 fdda 	bl	80072cc <free>
	return 0;
 8002718:	2300      	movs	r3, #0
}
 800271a:	0018      	movs	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	b007      	add	sp, #28
 8002720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	08008af8 	.word	0x08008af8

08002728 <xl320_setGoalPosition>:
	xl320_sendCommand(xl320, WRITE, 3, (uint8_t*) &params);

	return 0;
}

int xl320_setGoalPosition(XL320_t* xl320, float goalPositionInDeg){
 8002728:	b5b0      	push	{r4, r5, r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
	uint16_t position = (uint16_t)(goalPositionInDeg/BIT_RESOLUTION_IN_DEG);
 8002732:	6838      	ldr	r0, [r7, #0]
 8002734:	f7fe fd4e 	bl	80011d4 <__aeabi_f2d>
 8002738:	4a15      	ldr	r2, [pc, #84]	; (8002790 <xl320_setGoalPosition+0x68>)
 800273a:	4b16      	ldr	r3, [pc, #88]	; (8002794 <xl320_setGoalPosition+0x6c>)
 800273c:	f7fd fe8c 	bl	8000458 <__aeabi_ddiv>
 8002740:	0002      	movs	r2, r0
 8002742:	000b      	movs	r3, r1
 8002744:	250e      	movs	r5, #14
 8002746:	197c      	adds	r4, r7, r5
 8002748:	0010      	movs	r0, r2
 800274a:	0019      	movs	r1, r3
 800274c:	f7fd fe66 	bl	800041c <__aeabi_d2uiz>
 8002750:	0003      	movs	r3, r0
 8002752:	8023      	strh	r3, [r4, #0]
	uint8_t params[4] = {POSITION, 0, (uint8_t)(position & 0xFF) , (uint8_t)(position >> 8)};
 8002754:	2108      	movs	r1, #8
 8002756:	187b      	adds	r3, r7, r1
 8002758:	221e      	movs	r2, #30
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	187b      	adds	r3, r7, r1
 800275e:	2200      	movs	r2, #0
 8002760:	705a      	strb	r2, [r3, #1]
 8002762:	197b      	adds	r3, r7, r5
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	b2da      	uxtb	r2, r3
 8002768:	187b      	adds	r3, r7, r1
 800276a:	709a      	strb	r2, [r3, #2]
 800276c:	197b      	adds	r3, r7, r5
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	0a1b      	lsrs	r3, r3, #8
 8002772:	b29b      	uxth	r3, r3
 8002774:	b2da      	uxtb	r2, r3
 8002776:	187b      	adds	r3, r7, r1
 8002778:	70da      	strb	r2, [r3, #3]

	xl320_sendCommand(xl320, WRITE, 4, (uint8_t*) &params);
 800277a:	187b      	adds	r3, r7, r1
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	2204      	movs	r2, #4
 8002780:	2103      	movs	r1, #3
 8002782:	f7ff ff49 	bl	8002618 <xl320_sendCommand>

	return 0;
 8002786:	2300      	movs	r3, #0
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	b004      	add	sp, #16
 800278e:	bdb0      	pop	{r4, r5, r7, pc}
 8002790:	28f5c28f 	.word	0x28f5c28f
 8002794:	3fd28f5c 	.word	0x3fd28f5c

08002798 <xl320_setSpeed>:

int xl320_setSpeed(XL320_t* xl320, float rpm){
 8002798:	b5b0      	push	{r4, r5, r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
	uint16_t speedValue = (uint16_t)(rpm/RESOLUTION_SPEED);
 80027a2:	6838      	ldr	r0, [r7, #0]
 80027a4:	f7fe fd16 	bl	80011d4 <__aeabi_f2d>
 80027a8:	4a1a      	ldr	r2, [pc, #104]	; (8002814 <xl320_setSpeed+0x7c>)
 80027aa:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <xl320_setSpeed+0x80>)
 80027ac:	f7fd fe54 	bl	8000458 <__aeabi_ddiv>
 80027b0:	0002      	movs	r2, r0
 80027b2:	000b      	movs	r3, r1
 80027b4:	250e      	movs	r5, #14
 80027b6:	197c      	adds	r4, r7, r5
 80027b8:	0010      	movs	r0, r2
 80027ba:	0019      	movs	r1, r3
 80027bc:	f7fd fe2e 	bl	800041c <__aeabi_d2uiz>
 80027c0:	0003      	movs	r3, r0
 80027c2:	8023      	strh	r3, [r4, #0]
	uint8_t highByte = (uint8_t)((speedValue >> 8) & 0xFF);
 80027c4:	0029      	movs	r1, r5
 80027c6:	187b      	adds	r3, r7, r1
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	0a1b      	lsrs	r3, r3, #8
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	200d      	movs	r0, #13
 80027d0:	183b      	adds	r3, r7, r0
 80027d2:	701a      	strb	r2, [r3, #0]
	uint8_t lowByte = (uint8_t)(speedValue & 0xFF);
 80027d4:	240c      	movs	r4, #12
 80027d6:	193b      	adds	r3, r7, r4
 80027d8:	187a      	adds	r2, r7, r1
 80027da:	8812      	ldrh	r2, [r2, #0]
 80027dc:	701a      	strb	r2, [r3, #0]

	uint8_t params[4] = {SPEED, 0, lowByte, highByte};
 80027de:	2108      	movs	r1, #8
 80027e0:	187b      	adds	r3, r7, r1
 80027e2:	2220      	movs	r2, #32
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	187b      	adds	r3, r7, r1
 80027e8:	2200      	movs	r2, #0
 80027ea:	705a      	strb	r2, [r3, #1]
 80027ec:	187b      	adds	r3, r7, r1
 80027ee:	193a      	adds	r2, r7, r4
 80027f0:	7812      	ldrb	r2, [r2, #0]
 80027f2:	709a      	strb	r2, [r3, #2]
 80027f4:	187b      	adds	r3, r7, r1
 80027f6:	183a      	adds	r2, r7, r0
 80027f8:	7812      	ldrb	r2, [r2, #0]
 80027fa:	70da      	strb	r2, [r3, #3]
	xl320_sendCommand(xl320, WRITE, 4, (uint8_t*) &params);
 80027fc:	187b      	adds	r3, r7, r1
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	2204      	movs	r2, #4
 8002802:	2103      	movs	r1, #3
 8002804:	f7ff ff08 	bl	8002618 <xl320_sendCommand>

	return 0;
 8002808:	2300      	movs	r3, #0
}
 800280a:	0018      	movs	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	b004      	add	sp, #16
 8002810:	bdb0      	pop	{r4, r5, r7, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	f9db22d1 	.word	0xf9db22d1
 8002818:	3fbc6a7e 	.word	0x3fbc6a7e

0800281c <xl320_executeAction>:

int xl320_executeAction(XL320_t* xl320){
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
	xl320_sendCommand(xl320, ACTION, 0, NULL);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	2300      	movs	r3, #0
 8002828:	2200      	movs	r2, #0
 800282a:	2105      	movs	r1, #5
 800282c:	f7ff fef4 	bl	8002618 <xl320_sendCommand>

	return 0;
 8002830:	2300      	movs	r3, #0
}
 8002832:	0018      	movs	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	b002      	add	sp, #8
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <xl320_torqueEnable>:

int xl320_torqueEnable(XL320_t* xl320){
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
	uint8_t params[3] = {TORQUE_EN, 0, ENABLE};
 8002844:	200c      	movs	r0, #12
 8002846:	183b      	adds	r3, r7, r0
 8002848:	4a07      	ldr	r2, [pc, #28]	; (8002868 <xl320_torqueEnable+0x2c>)
 800284a:	8811      	ldrh	r1, [r2, #0]
 800284c:	8019      	strh	r1, [r3, #0]
 800284e:	7892      	ldrb	r2, [r2, #2]
 8002850:	709a      	strb	r2, [r3, #2]

	xl320_sendCommand(xl320, WRITE, 3, (uint8_t*) &params);
 8002852:	183b      	adds	r3, r7, r0
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	2203      	movs	r2, #3
 8002858:	2103      	movs	r1, #3
 800285a:	f7ff fedd 	bl	8002618 <xl320_sendCommand>

	return 0;
 800285e:	2300      	movs	r3, #0
}
 8002860:	0018      	movs	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	b004      	add	sp, #16
 8002866:	bd80      	pop	{r7, pc}
 8002868:	08008ea8 	.word	0x08008ea8

0800286c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800286c:	480d      	ldr	r0, [pc, #52]	; (80028a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800286e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002870:	f7ff f99a 	bl	8001ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002874:	480c      	ldr	r0, [pc, #48]	; (80028a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002876:	490d      	ldr	r1, [pc, #52]	; (80028ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002878:	4a0d      	ldr	r2, [pc, #52]	; (80028b0 <LoopForever+0xe>)
  movs r3, #0
 800287a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800287c:	e002      	b.n	8002884 <LoopCopyDataInit>

0800287e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800287e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002882:	3304      	adds	r3, #4

08002884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002888:	d3f9      	bcc.n	800287e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800288a:	4a0a      	ldr	r2, [pc, #40]	; (80028b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800288c:	4c0a      	ldr	r4, [pc, #40]	; (80028b8 <LoopForever+0x16>)
  movs r3, #0
 800288e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002890:	e001      	b.n	8002896 <LoopFillZerobss>

08002892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002894:	3204      	adds	r2, #4

08002896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002898:	d3fb      	bcc.n	8002892 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800289a:	f004 fce9 	bl	8007270 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800289e:	f7fe ff0b 	bl	80016b8 <main>

080028a2 <LoopForever>:

LoopForever:
  b LoopForever
 80028a2:	e7fe      	b.n	80028a2 <LoopForever>
  ldr   r0, =_estack
 80028a4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80028a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028ac:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80028b0:	08009098 	.word	0x08009098
  ldr r2, =_sbss
 80028b4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80028b8:	20001338 	.word	0x20001338

080028bc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028bc:	e7fe      	b.n	80028bc <ADC1_IRQHandler>
	...

080028c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028c6:	1dfb      	adds	r3, r7, #7
 80028c8:	2200      	movs	r2, #0
 80028ca:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_Init+0x3c>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <HAL_Init+0x3c>)
 80028d2:	2180      	movs	r1, #128	; 0x80
 80028d4:	0049      	lsls	r1, r1, #1
 80028d6:	430a      	orrs	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028da:	2003      	movs	r0, #3
 80028dc:	f000 f810 	bl	8002900 <HAL_InitTick>
 80028e0:	1e03      	subs	r3, r0, #0
 80028e2:	d003      	beq.n	80028ec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80028e4:	1dfb      	adds	r3, r7, #7
 80028e6:	2201      	movs	r2, #1
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	e001      	b.n	80028f0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80028ec:	f7ff f882 	bl	80019f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028f0:	1dfb      	adds	r3, r7, #7
 80028f2:	781b      	ldrb	r3, [r3, #0]
}
 80028f4:	0018      	movs	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b002      	add	sp, #8
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40022000 	.word	0x40022000

08002900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002900:	b590      	push	{r4, r7, lr}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002908:	230f      	movs	r3, #15
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	2200      	movs	r2, #0
 800290e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002910:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <HAL_InitTick+0x88>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d02b      	beq.n	8002970 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002918:	4b1c      	ldr	r3, [pc, #112]	; (800298c <HAL_InitTick+0x8c>)
 800291a:	681c      	ldr	r4, [r3, #0]
 800291c:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <HAL_InitTick+0x88>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	0019      	movs	r1, r3
 8002922:	23fa      	movs	r3, #250	; 0xfa
 8002924:	0098      	lsls	r0, r3, #2
 8002926:	f7fd fc01 	bl	800012c <__udivsi3>
 800292a:	0003      	movs	r3, r0
 800292c:	0019      	movs	r1, r3
 800292e:	0020      	movs	r0, r4
 8002930:	f7fd fbfc 	bl	800012c <__udivsi3>
 8002934:	0003      	movs	r3, r0
 8002936:	0018      	movs	r0, r3
 8002938:	f000 f8ef 	bl	8002b1a <HAL_SYSTICK_Config>
 800293c:	1e03      	subs	r3, r0, #0
 800293e:	d112      	bne.n	8002966 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b03      	cmp	r3, #3
 8002944:	d80a      	bhi.n	800295c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	2301      	movs	r3, #1
 800294a:	425b      	negs	r3, r3
 800294c:	2200      	movs	r2, #0
 800294e:	0018      	movs	r0, r3
 8002950:	f000 f8ce 	bl	8002af0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002954:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <HAL_InitTick+0x90>)
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	e00d      	b.n	8002978 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800295c:	230f      	movs	r3, #15
 800295e:	18fb      	adds	r3, r7, r3
 8002960:	2201      	movs	r2, #1
 8002962:	701a      	strb	r2, [r3, #0]
 8002964:	e008      	b.n	8002978 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002966:	230f      	movs	r3, #15
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	2201      	movs	r2, #1
 800296c:	701a      	strb	r2, [r3, #0]
 800296e:	e003      	b.n	8002978 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002970:	230f      	movs	r3, #15
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	2201      	movs	r2, #1
 8002976:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002978:	230f      	movs	r3, #15
 800297a:	18fb      	adds	r3, r7, r3
 800297c:	781b      	ldrb	r3, [r3, #0]
}
 800297e:	0018      	movs	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	b005      	add	sp, #20
 8002984:	bd90      	pop	{r4, r7, pc}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	20000008 	.word	0x20000008
 800298c:	20000000 	.word	0x20000000
 8002990:	20000004 	.word	0x20000004

08002994 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002998:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <HAL_IncTick+0x1c>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	001a      	movs	r2, r3
 800299e:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_IncTick+0x20>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	18d2      	adds	r2, r2, r3
 80029a4:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <HAL_IncTick+0x20>)
 80029a6:	601a      	str	r2, [r3, #0]
}
 80029a8:	46c0      	nop			; (mov r8, r8)
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	20000008 	.word	0x20000008
 80029b4:	200005d0 	.word	0x200005d0

080029b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  return uwTick;
 80029bc:	4b02      	ldr	r3, [pc, #8]	; (80029c8 <HAL_GetTick+0x10>)
 80029be:	681b      	ldr	r3, [r3, #0]
}
 80029c0:	0018      	movs	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	200005d0 	.word	0x200005d0

080029cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	0002      	movs	r2, r0
 80029d4:	6039      	str	r1, [r7, #0]
 80029d6:	1dfb      	adds	r3, r7, #7
 80029d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80029da:	1dfb      	adds	r3, r7, #7
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b7f      	cmp	r3, #127	; 0x7f
 80029e0:	d828      	bhi.n	8002a34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029e2:	4a2f      	ldr	r2, [pc, #188]	; (8002aa0 <__NVIC_SetPriority+0xd4>)
 80029e4:	1dfb      	adds	r3, r7, #7
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	b25b      	sxtb	r3, r3
 80029ea:	089b      	lsrs	r3, r3, #2
 80029ec:	33c0      	adds	r3, #192	; 0xc0
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	589b      	ldr	r3, [r3, r2]
 80029f2:	1dfa      	adds	r2, r7, #7
 80029f4:	7812      	ldrb	r2, [r2, #0]
 80029f6:	0011      	movs	r1, r2
 80029f8:	2203      	movs	r2, #3
 80029fa:	400a      	ands	r2, r1
 80029fc:	00d2      	lsls	r2, r2, #3
 80029fe:	21ff      	movs	r1, #255	; 0xff
 8002a00:	4091      	lsls	r1, r2
 8002a02:	000a      	movs	r2, r1
 8002a04:	43d2      	mvns	r2, r2
 8002a06:	401a      	ands	r2, r3
 8002a08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	019b      	lsls	r3, r3, #6
 8002a0e:	22ff      	movs	r2, #255	; 0xff
 8002a10:	401a      	ands	r2, r3
 8002a12:	1dfb      	adds	r3, r7, #7
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	0018      	movs	r0, r3
 8002a18:	2303      	movs	r3, #3
 8002a1a:	4003      	ands	r3, r0
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a20:	481f      	ldr	r0, [pc, #124]	; (8002aa0 <__NVIC_SetPriority+0xd4>)
 8002a22:	1dfb      	adds	r3, r7, #7
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	b25b      	sxtb	r3, r3
 8002a28:	089b      	lsrs	r3, r3, #2
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	33c0      	adds	r3, #192	; 0xc0
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002a32:	e031      	b.n	8002a98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a34:	4a1b      	ldr	r2, [pc, #108]	; (8002aa4 <__NVIC_SetPriority+0xd8>)
 8002a36:	1dfb      	adds	r3, r7, #7
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	230f      	movs	r3, #15
 8002a3e:	400b      	ands	r3, r1
 8002a40:	3b08      	subs	r3, #8
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	3306      	adds	r3, #6
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	18d3      	adds	r3, r2, r3
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	1dfa      	adds	r2, r7, #7
 8002a50:	7812      	ldrb	r2, [r2, #0]
 8002a52:	0011      	movs	r1, r2
 8002a54:	2203      	movs	r2, #3
 8002a56:	400a      	ands	r2, r1
 8002a58:	00d2      	lsls	r2, r2, #3
 8002a5a:	21ff      	movs	r1, #255	; 0xff
 8002a5c:	4091      	lsls	r1, r2
 8002a5e:	000a      	movs	r2, r1
 8002a60:	43d2      	mvns	r2, r2
 8002a62:	401a      	ands	r2, r3
 8002a64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	019b      	lsls	r3, r3, #6
 8002a6a:	22ff      	movs	r2, #255	; 0xff
 8002a6c:	401a      	ands	r2, r3
 8002a6e:	1dfb      	adds	r3, r7, #7
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	0018      	movs	r0, r3
 8002a74:	2303      	movs	r3, #3
 8002a76:	4003      	ands	r3, r0
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a7c:	4809      	ldr	r0, [pc, #36]	; (8002aa4 <__NVIC_SetPriority+0xd8>)
 8002a7e:	1dfb      	adds	r3, r7, #7
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	001c      	movs	r4, r3
 8002a84:	230f      	movs	r3, #15
 8002a86:	4023      	ands	r3, r4
 8002a88:	3b08      	subs	r3, #8
 8002a8a:	089b      	lsrs	r3, r3, #2
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	3306      	adds	r3, #6
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	18c3      	adds	r3, r0, r3
 8002a94:	3304      	adds	r3, #4
 8002a96:	601a      	str	r2, [r3, #0]
}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b003      	add	sp, #12
 8002a9e:	bd90      	pop	{r4, r7, pc}
 8002aa0:	e000e100 	.word	0xe000e100
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	1e5a      	subs	r2, r3, #1
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	045b      	lsls	r3, r3, #17
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d301      	bcc.n	8002ac0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002abc:	2301      	movs	r3, #1
 8002abe:	e010      	b.n	8002ae2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <SysTick_Config+0x44>)
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	3a01      	subs	r2, #1
 8002ac6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ac8:	2301      	movs	r3, #1
 8002aca:	425b      	negs	r3, r3
 8002acc:	2103      	movs	r1, #3
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f7ff ff7c 	bl	80029cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <SysTick_Config+0x44>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ada:	4b04      	ldr	r3, [pc, #16]	; (8002aec <SysTick_Config+0x44>)
 8002adc:	2207      	movs	r2, #7
 8002ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	b002      	add	sp, #8
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	e000e010 	.word	0xe000e010

08002af0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	210f      	movs	r1, #15
 8002afc:	187b      	adds	r3, r7, r1
 8002afe:	1c02      	adds	r2, r0, #0
 8002b00:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	187b      	adds	r3, r7, r1
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	b25b      	sxtb	r3, r3
 8002b0a:	0011      	movs	r1, r2
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f7ff ff5d 	bl	80029cc <__NVIC_SetPriority>
}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b004      	add	sp, #16
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b082      	sub	sp, #8
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	0018      	movs	r0, r3
 8002b26:	f7ff ffbf 	bl	8002aa8 <SysTick_Config>
 8002b2a:	0003      	movs	r3, r0
}
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b002      	add	sp, #8
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b42:	e147      	b.n	8002dd4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2101      	movs	r1, #1
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4091      	lsls	r1, r2
 8002b4e:	000a      	movs	r2, r1
 8002b50:	4013      	ands	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d100      	bne.n	8002b5c <HAL_GPIO_Init+0x28>
 8002b5a:	e138      	b.n	8002dce <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2203      	movs	r2, #3
 8002b62:	4013      	ands	r3, r2
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d005      	beq.n	8002b74 <HAL_GPIO_Init+0x40>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d130      	bne.n	8002bd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	2203      	movs	r2, #3
 8002b80:	409a      	lsls	r2, r3
 8002b82:	0013      	movs	r3, r2
 8002b84:	43da      	mvns	r2, r3
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	409a      	lsls	r2, r3
 8002b96:	0013      	movs	r3, r2
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002baa:	2201      	movs	r2, #1
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	0013      	movs	r3, r2
 8002bb2:	43da      	mvns	r2, r3
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	091b      	lsrs	r3, r3, #4
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	401a      	ands	r2, r3
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	0013      	movs	r3, r2
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2203      	movs	r2, #3
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b03      	cmp	r3, #3
 8002be0:	d017      	beq.n	8002c12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	2203      	movs	r2, #3
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	0013      	movs	r3, r2
 8002bf2:	43da      	mvns	r2, r3
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	409a      	lsls	r2, r3
 8002c04:	0013      	movs	r3, r2
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2203      	movs	r2, #3
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d123      	bne.n	8002c66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	08da      	lsrs	r2, r3, #3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3208      	adds	r2, #8
 8002c26:	0092      	lsls	r2, r2, #2
 8002c28:	58d3      	ldr	r3, [r2, r3]
 8002c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2207      	movs	r2, #7
 8002c30:	4013      	ands	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	220f      	movs	r2, #15
 8002c36:	409a      	lsls	r2, r3
 8002c38:	0013      	movs	r3, r2
 8002c3a:	43da      	mvns	r2, r3
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	691a      	ldr	r2, [r3, #16]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2107      	movs	r1, #7
 8002c4a:	400b      	ands	r3, r1
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	0013      	movs	r3, r2
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	08da      	lsrs	r2, r3, #3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3208      	adds	r2, #8
 8002c60:	0092      	lsls	r2, r2, #2
 8002c62:	6939      	ldr	r1, [r7, #16]
 8002c64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	2203      	movs	r2, #3
 8002c72:	409a      	lsls	r2, r3
 8002c74:	0013      	movs	r3, r2
 8002c76:	43da      	mvns	r2, r3
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2203      	movs	r2, #3
 8002c84:	401a      	ands	r2, r3
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	409a      	lsls	r2, r3
 8002c8c:	0013      	movs	r3, r2
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	23c0      	movs	r3, #192	; 0xc0
 8002ca0:	029b      	lsls	r3, r3, #10
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d100      	bne.n	8002ca8 <HAL_GPIO_Init+0x174>
 8002ca6:	e092      	b.n	8002dce <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002ca8:	4a50      	ldr	r2, [pc, #320]	; (8002dec <HAL_GPIO_Init+0x2b8>)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	089b      	lsrs	r3, r3, #2
 8002cae:	3318      	adds	r3, #24
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	589b      	ldr	r3, [r3, r2]
 8002cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2203      	movs	r2, #3
 8002cba:	4013      	ands	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	220f      	movs	r2, #15
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	0013      	movs	r3, r2
 8002cc4:	43da      	mvns	r2, r3
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	23a0      	movs	r3, #160	; 0xa0
 8002cd0:	05db      	lsls	r3, r3, #23
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d013      	beq.n	8002cfe <HAL_GPIO_Init+0x1ca>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a45      	ldr	r2, [pc, #276]	; (8002df0 <HAL_GPIO_Init+0x2bc>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00d      	beq.n	8002cfa <HAL_GPIO_Init+0x1c6>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a44      	ldr	r2, [pc, #272]	; (8002df4 <HAL_GPIO_Init+0x2c0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <HAL_GPIO_Init+0x1c2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a43      	ldr	r2, [pc, #268]	; (8002df8 <HAL_GPIO_Init+0x2c4>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_GPIO_Init+0x1be>
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e006      	b.n	8002d00 <HAL_GPIO_Init+0x1cc>
 8002cf2:	2305      	movs	r3, #5
 8002cf4:	e004      	b.n	8002d00 <HAL_GPIO_Init+0x1cc>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	e002      	b.n	8002d00 <HAL_GPIO_Init+0x1cc>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <HAL_GPIO_Init+0x1cc>
 8002cfe:	2300      	movs	r3, #0
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	2103      	movs	r1, #3
 8002d04:	400a      	ands	r2, r1
 8002d06:	00d2      	lsls	r2, r2, #3
 8002d08:	4093      	lsls	r3, r2
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002d10:	4936      	ldr	r1, [pc, #216]	; (8002dec <HAL_GPIO_Init+0x2b8>)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	089b      	lsrs	r3, r3, #2
 8002d16:	3318      	adds	r3, #24
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d1e:	4b33      	ldr	r3, [pc, #204]	; (8002dec <HAL_GPIO_Init+0x2b8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	43da      	mvns	r2, r3
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	2380      	movs	r3, #128	; 0x80
 8002d34:	035b      	lsls	r3, r3, #13
 8002d36:	4013      	ands	r3, r2
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d42:	4b2a      	ldr	r3, [pc, #168]	; (8002dec <HAL_GPIO_Init+0x2b8>)
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002d48:	4b28      	ldr	r3, [pc, #160]	; (8002dec <HAL_GPIO_Init+0x2b8>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	43da      	mvns	r2, r3
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4013      	ands	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	039b      	lsls	r3, r3, #14
 8002d60:	4013      	ands	r3, r2
 8002d62:	d003      	beq.n	8002d6c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d6c:	4b1f      	ldr	r3, [pc, #124]	; (8002dec <HAL_GPIO_Init+0x2b8>)
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d72:	4a1e      	ldr	r2, [pc, #120]	; (8002dec <HAL_GPIO_Init+0x2b8>)
 8002d74:	2384      	movs	r3, #132	; 0x84
 8002d76:	58d3      	ldr	r3, [r2, r3]
 8002d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	43da      	mvns	r2, r3
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4013      	ands	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	2380      	movs	r3, #128	; 0x80
 8002d8a:	029b      	lsls	r3, r3, #10
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d003      	beq.n	8002d98 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d98:	4914      	ldr	r1, [pc, #80]	; (8002dec <HAL_GPIO_Init+0x2b8>)
 8002d9a:	2284      	movs	r2, #132	; 0x84
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002da0:	4a12      	ldr	r2, [pc, #72]	; (8002dec <HAL_GPIO_Init+0x2b8>)
 8002da2:	2380      	movs	r3, #128	; 0x80
 8002da4:	58d3      	ldr	r3, [r2, r3]
 8002da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	43da      	mvns	r2, r3
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4013      	ands	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	025b      	lsls	r3, r3, #9
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dc6:	4909      	ldr	r1, [pc, #36]	; (8002dec <HAL_GPIO_Init+0x2b8>)
 8002dc8:	2280      	movs	r2, #128	; 0x80
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	40da      	lsrs	r2, r3
 8002ddc:	1e13      	subs	r3, r2, #0
 8002dde:	d000      	beq.n	8002de2 <HAL_GPIO_Init+0x2ae>
 8002de0:	e6b0      	b.n	8002b44 <HAL_GPIO_Init+0x10>
  }
}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	46c0      	nop			; (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b006      	add	sp, #24
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021800 	.word	0x40021800
 8002df0:	50000400 	.word	0x50000400
 8002df4:	50000800 	.word	0x50000800
 8002df8:	50000c00 	.word	0x50000c00

08002dfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002e04:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a19      	ldr	r2, [pc, #100]	; (8002e70 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	2380      	movs	r3, #128	; 0x80
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d11f      	bne.n	8002e60 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002e20:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	0013      	movs	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	189b      	adds	r3, r3, r2
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4912      	ldr	r1, [pc, #72]	; (8002e78 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f7fd f97c 	bl	800012c <__udivsi3>
 8002e34:	0003      	movs	r3, r0
 8002e36:	3301      	adds	r3, #1
 8002e38:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e3a:	e008      	b.n	8002e4e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3b01      	subs	r3, #1
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	e001      	b.n	8002e4e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e009      	b.n	8002e62 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e4e:	4b07      	ldr	r3, [pc, #28]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e50:	695a      	ldr	r2, [r3, #20]
 8002e52:	2380      	movs	r3, #128	; 0x80
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	401a      	ands	r2, r3
 8002e58:	2380      	movs	r3, #128	; 0x80
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d0ed      	beq.n	8002e3c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	0018      	movs	r0, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	b004      	add	sp, #16
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	40007000 	.word	0x40007000
 8002e70:	fffff9ff 	.word	0xfffff9ff
 8002e74:	20000000 	.word	0x20000000
 8002e78:	000f4240 	.word	0x000f4240

08002e7c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	23e0      	movs	r3, #224	; 0xe0
 8002e86:	01db      	lsls	r3, r3, #7
 8002e88:	4013      	ands	r3, r2
}
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40021000 	.word	0x40021000

08002e94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e2f3      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	4013      	ands	r3, r2
 8002eae:	d100      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x1e>
 8002eb0:	e07c      	b.n	8002fac <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eb2:	4bc3      	ldr	r3, [pc, #780]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2238      	movs	r2, #56	; 0x38
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ebc:	4bc0      	ldr	r3, [pc, #768]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	2203      	movs	r2, #3
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	2b10      	cmp	r3, #16
 8002eca:	d102      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x3e>
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d002      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d10b      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed8:	4bb9      	ldr	r3, [pc, #740]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	2380      	movs	r3, #128	; 0x80
 8002ede:	029b      	lsls	r3, r3, #10
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d062      	beq.n	8002faa <HAL_RCC_OscConfig+0x116>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d15e      	bne.n	8002faa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e2ce      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	2380      	movs	r3, #128	; 0x80
 8002ef6:	025b      	lsls	r3, r3, #9
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d107      	bne.n	8002f0c <HAL_RCC_OscConfig+0x78>
 8002efc:	4bb0      	ldr	r3, [pc, #704]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4baf      	ldr	r3, [pc, #700]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002f02:	2180      	movs	r1, #128	; 0x80
 8002f04:	0249      	lsls	r1, r1, #9
 8002f06:	430a      	orrs	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	e020      	b.n	8002f4e <HAL_RCC_OscConfig+0xba>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	23a0      	movs	r3, #160	; 0xa0
 8002f12:	02db      	lsls	r3, r3, #11
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d10e      	bne.n	8002f36 <HAL_RCC_OscConfig+0xa2>
 8002f18:	4ba9      	ldr	r3, [pc, #676]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	4ba8      	ldr	r3, [pc, #672]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002f1e:	2180      	movs	r1, #128	; 0x80
 8002f20:	02c9      	lsls	r1, r1, #11
 8002f22:	430a      	orrs	r2, r1
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	4ba6      	ldr	r3, [pc, #664]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	4ba5      	ldr	r3, [pc, #660]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002f2c:	2180      	movs	r1, #128	; 0x80
 8002f2e:	0249      	lsls	r1, r1, #9
 8002f30:	430a      	orrs	r2, r1
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	e00b      	b.n	8002f4e <HAL_RCC_OscConfig+0xba>
 8002f36:	4ba2      	ldr	r3, [pc, #648]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	4ba1      	ldr	r3, [pc, #644]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002f3c:	49a1      	ldr	r1, [pc, #644]	; (80031c4 <HAL_RCC_OscConfig+0x330>)
 8002f3e:	400a      	ands	r2, r1
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	4b9f      	ldr	r3, [pc, #636]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	4b9e      	ldr	r3, [pc, #632]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002f48:	499f      	ldr	r1, [pc, #636]	; (80031c8 <HAL_RCC_OscConfig+0x334>)
 8002f4a:	400a      	ands	r2, r1
 8002f4c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d014      	beq.n	8002f80 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f56:	f7ff fd2f 	bl	80029b8 <HAL_GetTick>
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f60:	f7ff fd2a 	bl	80029b8 <HAL_GetTick>
 8002f64:	0002      	movs	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b64      	cmp	r3, #100	; 0x64
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e28d      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f72:	4b93      	ldr	r3, [pc, #588]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	029b      	lsls	r3, r3, #10
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0xcc>
 8002f7e:	e015      	b.n	8002fac <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7ff fd1a 	bl	80029b8 <HAL_GetTick>
 8002f84:	0003      	movs	r3, r0
 8002f86:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f8a:	f7ff fd15 	bl	80029b8 <HAL_GetTick>
 8002f8e:	0002      	movs	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b64      	cmp	r3, #100	; 0x64
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e278      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f9c:	4b88      	ldr	r3, [pc, #544]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	2380      	movs	r3, #128	; 0x80
 8002fa2:	029b      	lsls	r3, r3, #10
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d1f0      	bne.n	8002f8a <HAL_RCC_OscConfig+0xf6>
 8002fa8:	e000      	b.n	8002fac <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002faa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d100      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x124>
 8002fb6:	e099      	b.n	80030ec <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb8:	4b81      	ldr	r3, [pc, #516]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2238      	movs	r2, #56	; 0x38
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fc2:	4b7f      	ldr	r3, [pc, #508]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	4013      	ands	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2b10      	cmp	r3, #16
 8002fd0:	d102      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x144>
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d002      	beq.n	8002fde <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d135      	bne.n	800304a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fde:	4b78      	ldr	r3, [pc, #480]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	2380      	movs	r3, #128	; 0x80
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d005      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x162>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e24b      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff6:	4b72      	ldr	r3, [pc, #456]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	4a74      	ldr	r2, [pc, #464]	; (80031cc <HAL_RCC_OscConfig+0x338>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	0019      	movs	r1, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	021a      	lsls	r2, r3, #8
 8003006:	4b6e      	ldr	r3, [pc, #440]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8003008:	430a      	orrs	r2, r1
 800300a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d112      	bne.n	8003038 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003012:	4b6b      	ldr	r3, [pc, #428]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a6e      	ldr	r2, [pc, #440]	; (80031d0 <HAL_RCC_OscConfig+0x33c>)
 8003018:	4013      	ands	r3, r2
 800301a:	0019      	movs	r1, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	4b67      	ldr	r3, [pc, #412]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8003022:	430a      	orrs	r2, r1
 8003024:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003026:	4b66      	ldr	r3, [pc, #408]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	0adb      	lsrs	r3, r3, #11
 800302c:	2207      	movs	r2, #7
 800302e:	4013      	ands	r3, r2
 8003030:	4a68      	ldr	r2, [pc, #416]	; (80031d4 <HAL_RCC_OscConfig+0x340>)
 8003032:	40da      	lsrs	r2, r3
 8003034:	4b68      	ldr	r3, [pc, #416]	; (80031d8 <HAL_RCC_OscConfig+0x344>)
 8003036:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003038:	4b68      	ldr	r3, [pc, #416]	; (80031dc <HAL_RCC_OscConfig+0x348>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	0018      	movs	r0, r3
 800303e:	f7ff fc5f 	bl	8002900 <HAL_InitTick>
 8003042:	1e03      	subs	r3, r0, #0
 8003044:	d051      	beq.n	80030ea <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e221      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d030      	beq.n	80030b4 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003052:	4b5b      	ldr	r3, [pc, #364]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a5e      	ldr	r2, [pc, #376]	; (80031d0 <HAL_RCC_OscConfig+0x33c>)
 8003058:	4013      	ands	r3, r2
 800305a:	0019      	movs	r1, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	4b57      	ldr	r3, [pc, #348]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8003062:	430a      	orrs	r2, r1
 8003064:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003066:	4b56      	ldr	r3, [pc, #344]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	4b55      	ldr	r3, [pc, #340]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 800306c:	2180      	movs	r1, #128	; 0x80
 800306e:	0049      	lsls	r1, r1, #1
 8003070:	430a      	orrs	r2, r1
 8003072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7ff fca0 	bl	80029b8 <HAL_GetTick>
 8003078:	0003      	movs	r3, r0
 800307a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800307e:	f7ff fc9b 	bl	80029b8 <HAL_GetTick>
 8003082:	0002      	movs	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e1fe      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003090:	4b4b      	ldr	r3, [pc, #300]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4013      	ands	r3, r2
 800309a:	d0f0      	beq.n	800307e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309c:	4b48      	ldr	r3, [pc, #288]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4a4a      	ldr	r2, [pc, #296]	; (80031cc <HAL_RCC_OscConfig+0x338>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	0019      	movs	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	021a      	lsls	r2, r3, #8
 80030ac:	4b44      	ldr	r3, [pc, #272]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	e01b      	b.n	80030ec <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80030b4:	4b42      	ldr	r3, [pc, #264]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4b41      	ldr	r3, [pc, #260]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 80030ba:	4949      	ldr	r1, [pc, #292]	; (80031e0 <HAL_RCC_OscConfig+0x34c>)
 80030bc:	400a      	ands	r2, r1
 80030be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7ff fc7a 	bl	80029b8 <HAL_GetTick>
 80030c4:	0003      	movs	r3, r0
 80030c6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ca:	f7ff fc75 	bl	80029b8 <HAL_GetTick>
 80030ce:	0002      	movs	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e1d8      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030dc:	4b38      	ldr	r3, [pc, #224]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	2380      	movs	r3, #128	; 0x80
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4013      	ands	r3, r2
 80030e6:	d1f0      	bne.n	80030ca <HAL_RCC_OscConfig+0x236>
 80030e8:	e000      	b.n	80030ec <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030ea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2208      	movs	r2, #8
 80030f2:	4013      	ands	r3, r2
 80030f4:	d047      	beq.n	8003186 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80030f6:	4b32      	ldr	r3, [pc, #200]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2238      	movs	r2, #56	; 0x38
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b18      	cmp	r3, #24
 8003100:	d10a      	bne.n	8003118 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003102:	4b2f      	ldr	r3, [pc, #188]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8003104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003106:	2202      	movs	r2, #2
 8003108:	4013      	ands	r3, r2
 800310a:	d03c      	beq.n	8003186 <HAL_RCC_OscConfig+0x2f2>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d138      	bne.n	8003186 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e1ba      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d019      	beq.n	8003154 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003120:	4b27      	ldr	r3, [pc, #156]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8003122:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003124:	4b26      	ldr	r3, [pc, #152]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8003126:	2101      	movs	r1, #1
 8003128:	430a      	orrs	r2, r1
 800312a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312c:	f7ff fc44 	bl	80029b8 <HAL_GetTick>
 8003130:	0003      	movs	r3, r0
 8003132:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003136:	f7ff fc3f 	bl	80029b8 <HAL_GetTick>
 800313a:	0002      	movs	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e1a2      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003148:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 800314a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314c:	2202      	movs	r2, #2
 800314e:	4013      	ands	r3, r2
 8003150:	d0f1      	beq.n	8003136 <HAL_RCC_OscConfig+0x2a2>
 8003152:	e018      	b.n	8003186 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003154:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 8003156:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003158:	4b19      	ldr	r3, [pc, #100]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 800315a:	2101      	movs	r1, #1
 800315c:	438a      	bics	r2, r1
 800315e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7ff fc2a 	bl	80029b8 <HAL_GetTick>
 8003164:	0003      	movs	r3, r0
 8003166:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800316a:	f7ff fc25 	bl	80029b8 <HAL_GetTick>
 800316e:	0002      	movs	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e188      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800317c:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 800317e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003180:	2202      	movs	r2, #2
 8003182:	4013      	ands	r3, r2
 8003184:	d1f1      	bne.n	800316a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2204      	movs	r2, #4
 800318c:	4013      	ands	r3, r2
 800318e:	d100      	bne.n	8003192 <HAL_RCC_OscConfig+0x2fe>
 8003190:	e0c6      	b.n	8003320 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003192:	231f      	movs	r3, #31
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	2200      	movs	r2, #0
 8003198:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800319a:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2238      	movs	r2, #56	; 0x38
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b20      	cmp	r3, #32
 80031a4:	d11e      	bne.n	80031e4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80031a6:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_RCC_OscConfig+0x32c>)
 80031a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031aa:	2202      	movs	r2, #2
 80031ac:	4013      	ands	r3, r2
 80031ae:	d100      	bne.n	80031b2 <HAL_RCC_OscConfig+0x31e>
 80031b0:	e0b6      	b.n	8003320 <HAL_RCC_OscConfig+0x48c>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d000      	beq.n	80031bc <HAL_RCC_OscConfig+0x328>
 80031ba:	e0b1      	b.n	8003320 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e166      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
 80031c0:	40021000 	.word	0x40021000
 80031c4:	fffeffff 	.word	0xfffeffff
 80031c8:	fffbffff 	.word	0xfffbffff
 80031cc:	ffff80ff 	.word	0xffff80ff
 80031d0:	ffffc7ff 	.word	0xffffc7ff
 80031d4:	00f42400 	.word	0x00f42400
 80031d8:	20000000 	.word	0x20000000
 80031dc:	20000004 	.word	0x20000004
 80031e0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031e4:	4bac      	ldr	r3, [pc, #688]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 80031e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	055b      	lsls	r3, r3, #21
 80031ec:	4013      	ands	r3, r2
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_OscConfig+0x360>
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <HAL_RCC_OscConfig+0x362>
 80031f4:	2300      	movs	r3, #0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d011      	beq.n	800321e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80031fa:	4ba7      	ldr	r3, [pc, #668]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 80031fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031fe:	4ba6      	ldr	r3, [pc, #664]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 8003200:	2180      	movs	r1, #128	; 0x80
 8003202:	0549      	lsls	r1, r1, #21
 8003204:	430a      	orrs	r2, r1
 8003206:	63da      	str	r2, [r3, #60]	; 0x3c
 8003208:	4ba3      	ldr	r3, [pc, #652]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 800320a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800320c:	2380      	movs	r3, #128	; 0x80
 800320e:	055b      	lsls	r3, r3, #21
 8003210:	4013      	ands	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003216:	231f      	movs	r3, #31
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	2201      	movs	r2, #1
 800321c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800321e:	4b9f      	ldr	r3, [pc, #636]	; (800349c <HAL_RCC_OscConfig+0x608>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4013      	ands	r3, r2
 8003228:	d11a      	bne.n	8003260 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800322a:	4b9c      	ldr	r3, [pc, #624]	; (800349c <HAL_RCC_OscConfig+0x608>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	4b9b      	ldr	r3, [pc, #620]	; (800349c <HAL_RCC_OscConfig+0x608>)
 8003230:	2180      	movs	r1, #128	; 0x80
 8003232:	0049      	lsls	r1, r1, #1
 8003234:	430a      	orrs	r2, r1
 8003236:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003238:	f7ff fbbe 	bl	80029b8 <HAL_GetTick>
 800323c:	0003      	movs	r3, r0
 800323e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003242:	f7ff fbb9 	bl	80029b8 <HAL_GetTick>
 8003246:	0002      	movs	r2, r0
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e11c      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003254:	4b91      	ldr	r3, [pc, #580]	; (800349c <HAL_RCC_OscConfig+0x608>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	2380      	movs	r3, #128	; 0x80
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4013      	ands	r3, r2
 800325e:	d0f0      	beq.n	8003242 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d106      	bne.n	8003276 <HAL_RCC_OscConfig+0x3e2>
 8003268:	4b8b      	ldr	r3, [pc, #556]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 800326a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800326c:	4b8a      	ldr	r3, [pc, #552]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 800326e:	2101      	movs	r1, #1
 8003270:	430a      	orrs	r2, r1
 8003272:	65da      	str	r2, [r3, #92]	; 0x5c
 8003274:	e01c      	b.n	80032b0 <HAL_RCC_OscConfig+0x41c>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b05      	cmp	r3, #5
 800327c:	d10c      	bne.n	8003298 <HAL_RCC_OscConfig+0x404>
 800327e:	4b86      	ldr	r3, [pc, #536]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 8003280:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003282:	4b85      	ldr	r3, [pc, #532]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 8003284:	2104      	movs	r1, #4
 8003286:	430a      	orrs	r2, r1
 8003288:	65da      	str	r2, [r3, #92]	; 0x5c
 800328a:	4b83      	ldr	r3, [pc, #524]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 800328c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800328e:	4b82      	ldr	r3, [pc, #520]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 8003290:	2101      	movs	r1, #1
 8003292:	430a      	orrs	r2, r1
 8003294:	65da      	str	r2, [r3, #92]	; 0x5c
 8003296:	e00b      	b.n	80032b0 <HAL_RCC_OscConfig+0x41c>
 8003298:	4b7f      	ldr	r3, [pc, #508]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 800329a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800329c:	4b7e      	ldr	r3, [pc, #504]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 800329e:	2101      	movs	r1, #1
 80032a0:	438a      	bics	r2, r1
 80032a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80032a4:	4b7c      	ldr	r3, [pc, #496]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 80032a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032a8:	4b7b      	ldr	r3, [pc, #492]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 80032aa:	2104      	movs	r1, #4
 80032ac:	438a      	bics	r2, r1
 80032ae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d014      	beq.n	80032e2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7ff fb7e 	bl	80029b8 <HAL_GetTick>
 80032bc:	0003      	movs	r3, r0
 80032be:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c0:	e009      	b.n	80032d6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c2:	f7ff fb79 	bl	80029b8 <HAL_GetTick>
 80032c6:	0002      	movs	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	4a74      	ldr	r2, [pc, #464]	; (80034a0 <HAL_RCC_OscConfig+0x60c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e0db      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d6:	4b70      	ldr	r3, [pc, #448]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 80032d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032da:	2202      	movs	r2, #2
 80032dc:	4013      	ands	r3, r2
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x42e>
 80032e0:	e013      	b.n	800330a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e2:	f7ff fb69 	bl	80029b8 <HAL_GetTick>
 80032e6:	0003      	movs	r3, r0
 80032e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032ea:	e009      	b.n	8003300 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ec:	f7ff fb64 	bl	80029b8 <HAL_GetTick>
 80032f0:	0002      	movs	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	4a6a      	ldr	r2, [pc, #424]	; (80034a0 <HAL_RCC_OscConfig+0x60c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e0c6      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003300:	4b65      	ldr	r3, [pc, #404]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 8003302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003304:	2202      	movs	r2, #2
 8003306:	4013      	ands	r3, r2
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800330a:	231f      	movs	r3, #31
 800330c:	18fb      	adds	r3, r7, r3
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d105      	bne.n	8003320 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003314:	4b60      	ldr	r3, [pc, #384]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 8003316:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003318:	4b5f      	ldr	r3, [pc, #380]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 800331a:	4962      	ldr	r1, [pc, #392]	; (80034a4 <HAL_RCC_OscConfig+0x610>)
 800331c:	400a      	ands	r2, r1
 800331e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	69db      	ldr	r3, [r3, #28]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d100      	bne.n	800332a <HAL_RCC_OscConfig+0x496>
 8003328:	e0b0      	b.n	800348c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800332a:	4b5b      	ldr	r3, [pc, #364]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2238      	movs	r2, #56	; 0x38
 8003330:	4013      	ands	r3, r2
 8003332:	2b10      	cmp	r3, #16
 8003334:	d100      	bne.n	8003338 <HAL_RCC_OscConfig+0x4a4>
 8003336:	e078      	b.n	800342a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	2b02      	cmp	r3, #2
 800333e:	d153      	bne.n	80033e8 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003340:	4b55      	ldr	r3, [pc, #340]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4b54      	ldr	r3, [pc, #336]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 8003346:	4958      	ldr	r1, [pc, #352]	; (80034a8 <HAL_RCC_OscConfig+0x614>)
 8003348:	400a      	ands	r2, r1
 800334a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7ff fb34 	bl	80029b8 <HAL_GetTick>
 8003350:	0003      	movs	r3, r0
 8003352:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003356:	f7ff fb2f 	bl	80029b8 <HAL_GetTick>
 800335a:	0002      	movs	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e092      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003368:	4b4b      	ldr	r3, [pc, #300]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	2380      	movs	r3, #128	; 0x80
 800336e:	049b      	lsls	r3, r3, #18
 8003370:	4013      	ands	r3, r2
 8003372:	d1f0      	bne.n	8003356 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003374:	4b48      	ldr	r3, [pc, #288]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4a4c      	ldr	r2, [pc, #304]	; (80034ac <HAL_RCC_OscConfig+0x618>)
 800337a:	4013      	ands	r3, r2
 800337c:	0019      	movs	r1, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1a      	ldr	r2, [r3, #32]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	021b      	lsls	r3, r3, #8
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	431a      	orrs	r2, r3
 800339c:	4b3e      	ldr	r3, [pc, #248]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 800339e:	430a      	orrs	r2, r1
 80033a0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033a2:	4b3d      	ldr	r3, [pc, #244]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	4b3c      	ldr	r3, [pc, #240]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 80033a8:	2180      	movs	r1, #128	; 0x80
 80033aa:	0449      	lsls	r1, r1, #17
 80033ac:	430a      	orrs	r2, r1
 80033ae:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80033b0:	4b39      	ldr	r3, [pc, #228]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	4b38      	ldr	r3, [pc, #224]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 80033b6:	2180      	movs	r1, #128	; 0x80
 80033b8:	0549      	lsls	r1, r1, #21
 80033ba:	430a      	orrs	r2, r1
 80033bc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033be:	f7ff fafb 	bl	80029b8 <HAL_GetTick>
 80033c2:	0003      	movs	r3, r0
 80033c4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c8:	f7ff faf6 	bl	80029b8 <HAL_GetTick>
 80033cc:	0002      	movs	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e059      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033da:	4b2f      	ldr	r3, [pc, #188]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	049b      	lsls	r3, r3, #18
 80033e2:	4013      	ands	r3, r2
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0x534>
 80033e6:	e051      	b.n	800348c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e8:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	4b2a      	ldr	r3, [pc, #168]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 80033ee:	492e      	ldr	r1, [pc, #184]	; (80034a8 <HAL_RCC_OscConfig+0x614>)
 80033f0:	400a      	ands	r2, r1
 80033f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7ff fae0 	bl	80029b8 <HAL_GetTick>
 80033f8:	0003      	movs	r3, r0
 80033fa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fe:	f7ff fadb 	bl	80029b8 <HAL_GetTick>
 8003402:	0002      	movs	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e03e      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003410:	4b21      	ldr	r3, [pc, #132]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	2380      	movs	r3, #128	; 0x80
 8003416:	049b      	lsls	r3, r3, #18
 8003418:	4013      	ands	r3, r2
 800341a:	d1f0      	bne.n	80033fe <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800341c:	4b1e      	ldr	r3, [pc, #120]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 8003422:	4923      	ldr	r1, [pc, #140]	; (80034b0 <HAL_RCC_OscConfig+0x61c>)
 8003424:	400a      	ands	r2, r1
 8003426:	60da      	str	r2, [r3, #12]
 8003428:	e030      	b.n	800348c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e02b      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003436:	4b18      	ldr	r3, [pc, #96]	; (8003498 <HAL_RCC_OscConfig+0x604>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2203      	movs	r2, #3
 8003440:	401a      	ands	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	429a      	cmp	r2, r3
 8003448:	d11e      	bne.n	8003488 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2270      	movs	r2, #112	; 0x70
 800344e:	401a      	ands	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003454:	429a      	cmp	r2, r3
 8003456:	d117      	bne.n	8003488 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	23fe      	movs	r3, #254	; 0xfe
 800345c:	01db      	lsls	r3, r3, #7
 800345e:	401a      	ands	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003464:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003466:	429a      	cmp	r2, r3
 8003468:	d10e      	bne.n	8003488 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	23f8      	movs	r3, #248	; 0xf8
 800346e:	039b      	lsls	r3, r3, #14
 8003470:	401a      	ands	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003476:	429a      	cmp	r2, r3
 8003478:	d106      	bne.n	8003488 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	0f5b      	lsrs	r3, r3, #29
 800347e:	075a      	lsls	r2, r3, #29
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d001      	beq.n	800348c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e000      	b.n	800348e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	0018      	movs	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	b008      	add	sp, #32
 8003494:	bd80      	pop	{r7, pc}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	40021000 	.word	0x40021000
 800349c:	40007000 	.word	0x40007000
 80034a0:	00001388 	.word	0x00001388
 80034a4:	efffffff 	.word	0xefffffff
 80034a8:	feffffff 	.word	0xfeffffff
 80034ac:	1fc1808c 	.word	0x1fc1808c
 80034b0:	effefffc 	.word	0xeffefffc

080034b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e0e9      	b.n	800369c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034c8:	4b76      	ldr	r3, [pc, #472]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2207      	movs	r2, #7
 80034ce:	4013      	ands	r3, r2
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d91e      	bls.n	8003514 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d6:	4b73      	ldr	r3, [pc, #460]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2207      	movs	r2, #7
 80034dc:	4393      	bics	r3, r2
 80034de:	0019      	movs	r1, r3
 80034e0:	4b70      	ldr	r3, [pc, #448]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034e8:	f7ff fa66 	bl	80029b8 <HAL_GetTick>
 80034ec:	0003      	movs	r3, r0
 80034ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034f0:	e009      	b.n	8003506 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f2:	f7ff fa61 	bl	80029b8 <HAL_GetTick>
 80034f6:	0002      	movs	r2, r0
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	4a6a      	ldr	r2, [pc, #424]	; (80036a8 <HAL_RCC_ClockConfig+0x1f4>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e0ca      	b.n	800369c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003506:	4b67      	ldr	r3, [pc, #412]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2207      	movs	r2, #7
 800350c:	4013      	ands	r3, r2
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d1ee      	bne.n	80034f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2202      	movs	r2, #2
 800351a:	4013      	ands	r3, r2
 800351c:	d015      	beq.n	800354a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2204      	movs	r2, #4
 8003524:	4013      	ands	r3, r2
 8003526:	d006      	beq.n	8003536 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003528:	4b60      	ldr	r3, [pc, #384]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	4b5f      	ldr	r3, [pc, #380]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 800352e:	21e0      	movs	r1, #224	; 0xe0
 8003530:	01c9      	lsls	r1, r1, #7
 8003532:	430a      	orrs	r2, r1
 8003534:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003536:	4b5d      	ldr	r3, [pc, #372]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	4a5d      	ldr	r2, [pc, #372]	; (80036b0 <HAL_RCC_ClockConfig+0x1fc>)
 800353c:	4013      	ands	r3, r2
 800353e:	0019      	movs	r1, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	4b59      	ldr	r3, [pc, #356]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 8003546:	430a      	orrs	r2, r1
 8003548:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2201      	movs	r2, #1
 8003550:	4013      	ands	r3, r2
 8003552:	d057      	beq.n	8003604 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d107      	bne.n	800356c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800355c:	4b53      	ldr	r3, [pc, #332]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	2380      	movs	r3, #128	; 0x80
 8003562:	029b      	lsls	r3, r3, #10
 8003564:	4013      	ands	r3, r2
 8003566:	d12b      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e097      	b.n	800369c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d107      	bne.n	8003584 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003574:	4b4d      	ldr	r3, [pc, #308]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	049b      	lsls	r3, r3, #18
 800357c:	4013      	ands	r3, r2
 800357e:	d11f      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e08b      	b.n	800369c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d107      	bne.n	800359c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800358c:	4b47      	ldr	r3, [pc, #284]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4013      	ands	r3, r2
 8003596:	d113      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e07f      	b.n	800369c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d106      	bne.n	80035b2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035a4:	4b41      	ldr	r3, [pc, #260]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 80035a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a8:	2202      	movs	r2, #2
 80035aa:	4013      	ands	r3, r2
 80035ac:	d108      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e074      	b.n	800369c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035b2:	4b3e      	ldr	r3, [pc, #248]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 80035b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b6:	2202      	movs	r2, #2
 80035b8:	4013      	ands	r3, r2
 80035ba:	d101      	bne.n	80035c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e06d      	b.n	800369c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035c0:	4b3a      	ldr	r3, [pc, #232]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2207      	movs	r2, #7
 80035c6:	4393      	bics	r3, r2
 80035c8:	0019      	movs	r1, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	4b37      	ldr	r3, [pc, #220]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 80035d0:	430a      	orrs	r2, r1
 80035d2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d4:	f7ff f9f0 	bl	80029b8 <HAL_GetTick>
 80035d8:	0003      	movs	r3, r0
 80035da:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035dc:	e009      	b.n	80035f2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035de:	f7ff f9eb 	bl	80029b8 <HAL_GetTick>
 80035e2:	0002      	movs	r2, r0
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	4a2f      	ldr	r2, [pc, #188]	; (80036a8 <HAL_RCC_ClockConfig+0x1f4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e054      	b.n	800369c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035f2:	4b2e      	ldr	r3, [pc, #184]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2238      	movs	r2, #56	; 0x38
 80035f8:	401a      	ands	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	429a      	cmp	r2, r3
 8003602:	d1ec      	bne.n	80035de <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003604:	4b27      	ldr	r3, [pc, #156]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2207      	movs	r2, #7
 800360a:	4013      	ands	r3, r2
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d21e      	bcs.n	8003650 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003612:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2207      	movs	r2, #7
 8003618:	4393      	bics	r3, r2
 800361a:	0019      	movs	r1, r3
 800361c:	4b21      	ldr	r3, [pc, #132]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003624:	f7ff f9c8 	bl	80029b8 <HAL_GetTick>
 8003628:	0003      	movs	r3, r0
 800362a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800362c:	e009      	b.n	8003642 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800362e:	f7ff f9c3 	bl	80029b8 <HAL_GetTick>
 8003632:	0002      	movs	r2, r0
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	4a1b      	ldr	r2, [pc, #108]	; (80036a8 <HAL_RCC_ClockConfig+0x1f4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e02c      	b.n	800369c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003642:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2207      	movs	r2, #7
 8003648:	4013      	ands	r3, r2
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d1ee      	bne.n	800362e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2204      	movs	r2, #4
 8003656:	4013      	ands	r3, r2
 8003658:	d009      	beq.n	800366e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800365a:	4b14      	ldr	r3, [pc, #80]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	4a15      	ldr	r2, [pc, #84]	; (80036b4 <HAL_RCC_ClockConfig+0x200>)
 8003660:	4013      	ands	r3, r2
 8003662:	0019      	movs	r1, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	4b10      	ldr	r3, [pc, #64]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 800366a:	430a      	orrs	r2, r1
 800366c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800366e:	f000 f829 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 8003672:	0001      	movs	r1, r0
 8003674:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	0a1b      	lsrs	r3, r3, #8
 800367a:	220f      	movs	r2, #15
 800367c:	401a      	ands	r2, r3
 800367e:	4b0e      	ldr	r3, [pc, #56]	; (80036b8 <HAL_RCC_ClockConfig+0x204>)
 8003680:	0092      	lsls	r2, r2, #2
 8003682:	58d3      	ldr	r3, [r2, r3]
 8003684:	221f      	movs	r2, #31
 8003686:	4013      	ands	r3, r2
 8003688:	000a      	movs	r2, r1
 800368a:	40da      	lsrs	r2, r3
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <HAL_RCC_ClockConfig+0x208>)
 800368e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <HAL_RCC_ClockConfig+0x20c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	0018      	movs	r0, r3
 8003696:	f7ff f933 	bl	8002900 <HAL_InitTick>
 800369a:	0003      	movs	r3, r0
}
 800369c:	0018      	movs	r0, r3
 800369e:	46bd      	mov	sp, r7
 80036a0:	b004      	add	sp, #16
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40022000 	.word	0x40022000
 80036a8:	00001388 	.word	0x00001388
 80036ac:	40021000 	.word	0x40021000
 80036b0:	fffff0ff 	.word	0xfffff0ff
 80036b4:	ffff8fff 	.word	0xffff8fff
 80036b8:	08008f1c 	.word	0x08008f1c
 80036bc:	20000000 	.word	0x20000000
 80036c0:	20000004 	.word	0x20000004

080036c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036ca:	4b3c      	ldr	r3, [pc, #240]	; (80037bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2238      	movs	r2, #56	; 0x38
 80036d0:	4013      	ands	r3, r2
 80036d2:	d10f      	bne.n	80036f4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80036d4:	4b39      	ldr	r3, [pc, #228]	; (80037bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	0adb      	lsrs	r3, r3, #11
 80036da:	2207      	movs	r2, #7
 80036dc:	4013      	ands	r3, r2
 80036de:	2201      	movs	r2, #1
 80036e0:	409a      	lsls	r2, r3
 80036e2:	0013      	movs	r3, r2
 80036e4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80036e6:	6839      	ldr	r1, [r7, #0]
 80036e8:	4835      	ldr	r0, [pc, #212]	; (80037c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80036ea:	f7fc fd1f 	bl	800012c <__udivsi3>
 80036ee:	0003      	movs	r3, r0
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	e05d      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036f4:	4b31      	ldr	r3, [pc, #196]	; (80037bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2238      	movs	r2, #56	; 0x38
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d102      	bne.n	8003706 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003700:	4b30      	ldr	r3, [pc, #192]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	e054      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003706:	4b2d      	ldr	r3, [pc, #180]	; (80037bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	2238      	movs	r2, #56	; 0x38
 800370c:	4013      	ands	r3, r2
 800370e:	2b10      	cmp	r3, #16
 8003710:	d138      	bne.n	8003784 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003712:	4b2a      	ldr	r3, [pc, #168]	; (80037bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	2203      	movs	r2, #3
 8003718:	4013      	ands	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800371c:	4b27      	ldr	r3, [pc, #156]	; (80037bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	2207      	movs	r2, #7
 8003724:	4013      	ands	r3, r2
 8003726:	3301      	adds	r3, #1
 8003728:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2b03      	cmp	r3, #3
 800372e:	d10d      	bne.n	800374c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003730:	68b9      	ldr	r1, [r7, #8]
 8003732:	4824      	ldr	r0, [pc, #144]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003734:	f7fc fcfa 	bl	800012c <__udivsi3>
 8003738:	0003      	movs	r3, r0
 800373a:	0019      	movs	r1, r3
 800373c:	4b1f      	ldr	r3, [pc, #124]	; (80037bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	0a1b      	lsrs	r3, r3, #8
 8003742:	227f      	movs	r2, #127	; 0x7f
 8003744:	4013      	ands	r3, r2
 8003746:	434b      	muls	r3, r1
 8003748:	617b      	str	r3, [r7, #20]
        break;
 800374a:	e00d      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	481c      	ldr	r0, [pc, #112]	; (80037c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003750:	f7fc fcec 	bl	800012c <__udivsi3>
 8003754:	0003      	movs	r3, r0
 8003756:	0019      	movs	r1, r3
 8003758:	4b18      	ldr	r3, [pc, #96]	; (80037bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	0a1b      	lsrs	r3, r3, #8
 800375e:	227f      	movs	r2, #127	; 0x7f
 8003760:	4013      	ands	r3, r2
 8003762:	434b      	muls	r3, r1
 8003764:	617b      	str	r3, [r7, #20]
        break;
 8003766:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003768:	4b14      	ldr	r3, [pc, #80]	; (80037bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	0f5b      	lsrs	r3, r3, #29
 800376e:	2207      	movs	r2, #7
 8003770:	4013      	ands	r3, r2
 8003772:	3301      	adds	r3, #1
 8003774:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	6978      	ldr	r0, [r7, #20]
 800377a:	f7fc fcd7 	bl	800012c <__udivsi3>
 800377e:	0003      	movs	r3, r0
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	e015      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003784:	4b0d      	ldr	r3, [pc, #52]	; (80037bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2238      	movs	r2, #56	; 0x38
 800378a:	4013      	ands	r3, r2
 800378c:	2b20      	cmp	r3, #32
 800378e:	d103      	bne.n	8003798 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003790:	2380      	movs	r3, #128	; 0x80
 8003792:	021b      	lsls	r3, r3, #8
 8003794:	613b      	str	r3, [r7, #16]
 8003796:	e00b      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2238      	movs	r2, #56	; 0x38
 800379e:	4013      	ands	r3, r2
 80037a0:	2b18      	cmp	r3, #24
 80037a2:	d103      	bne.n	80037ac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80037a4:	23fa      	movs	r3, #250	; 0xfa
 80037a6:	01db      	lsls	r3, r3, #7
 80037a8:	613b      	str	r3, [r7, #16]
 80037aa:	e001      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80037b0:	693b      	ldr	r3, [r7, #16]
}
 80037b2:	0018      	movs	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	b006      	add	sp, #24
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	40021000 	.word	0x40021000
 80037c0:	00f42400 	.word	0x00f42400
 80037c4:	007a1200 	.word	0x007a1200

080037c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037cc:	4b02      	ldr	r3, [pc, #8]	; (80037d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80037ce:	681b      	ldr	r3, [r3, #0]
}
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	20000000 	.word	0x20000000

080037dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037dc:	b5b0      	push	{r4, r5, r7, lr}
 80037de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80037e0:	f7ff fff2 	bl	80037c8 <HAL_RCC_GetHCLKFreq>
 80037e4:	0004      	movs	r4, r0
 80037e6:	f7ff fb49 	bl	8002e7c <LL_RCC_GetAPB1Prescaler>
 80037ea:	0003      	movs	r3, r0
 80037ec:	0b1a      	lsrs	r2, r3, #12
 80037ee:	4b05      	ldr	r3, [pc, #20]	; (8003804 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037f0:	0092      	lsls	r2, r2, #2
 80037f2:	58d3      	ldr	r3, [r2, r3]
 80037f4:	221f      	movs	r2, #31
 80037f6:	4013      	ands	r3, r2
 80037f8:	40dc      	lsrs	r4, r3
 80037fa:	0023      	movs	r3, r4
}
 80037fc:	0018      	movs	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	bdb0      	pop	{r4, r5, r7, pc}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	08008f5c 	.word	0x08008f5c

08003808 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003810:	2313      	movs	r3, #19
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	2200      	movs	r2, #0
 8003816:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003818:	2312      	movs	r3, #18
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	2380      	movs	r3, #128	; 0x80
 8003826:	029b      	lsls	r3, r3, #10
 8003828:	4013      	ands	r3, r2
 800382a:	d100      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800382c:	e0a3      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800382e:	2011      	movs	r0, #17
 8003830:	183b      	adds	r3, r7, r0
 8003832:	2200      	movs	r2, #0
 8003834:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003836:	4b86      	ldr	r3, [pc, #536]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800383a:	2380      	movs	r3, #128	; 0x80
 800383c:	055b      	lsls	r3, r3, #21
 800383e:	4013      	ands	r3, r2
 8003840:	d110      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003842:	4b83      	ldr	r3, [pc, #524]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003844:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003846:	4b82      	ldr	r3, [pc, #520]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003848:	2180      	movs	r1, #128	; 0x80
 800384a:	0549      	lsls	r1, r1, #21
 800384c:	430a      	orrs	r2, r1
 800384e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003850:	4b7f      	ldr	r3, [pc, #508]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003854:	2380      	movs	r3, #128	; 0x80
 8003856:	055b      	lsls	r3, r3, #21
 8003858:	4013      	ands	r3, r2
 800385a:	60bb      	str	r3, [r7, #8]
 800385c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800385e:	183b      	adds	r3, r7, r0
 8003860:	2201      	movs	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003864:	4b7b      	ldr	r3, [pc, #492]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	4b7a      	ldr	r3, [pc, #488]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800386a:	2180      	movs	r1, #128	; 0x80
 800386c:	0049      	lsls	r1, r1, #1
 800386e:	430a      	orrs	r2, r1
 8003870:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003872:	f7ff f8a1 	bl	80029b8 <HAL_GetTick>
 8003876:	0003      	movs	r3, r0
 8003878:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800387a:	e00b      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800387c:	f7ff f89c 	bl	80029b8 <HAL_GetTick>
 8003880:	0002      	movs	r2, r0
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d904      	bls.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800388a:	2313      	movs	r3, #19
 800388c:	18fb      	adds	r3, r7, r3
 800388e:	2203      	movs	r2, #3
 8003890:	701a      	strb	r2, [r3, #0]
        break;
 8003892:	e005      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003894:	4b6f      	ldr	r3, [pc, #444]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	2380      	movs	r3, #128	; 0x80
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	4013      	ands	r3, r2
 800389e:	d0ed      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80038a0:	2313      	movs	r3, #19
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d154      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038aa:	4b69      	ldr	r3, [pc, #420]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80038ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038ae:	23c0      	movs	r3, #192	; 0xc0
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4013      	ands	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d019      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d014      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038c6:	4b62      	ldr	r3, [pc, #392]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80038c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ca:	4a63      	ldr	r2, [pc, #396]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038d0:	4b5f      	ldr	r3, [pc, #380]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80038d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038d4:	4b5e      	ldr	r3, [pc, #376]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80038d6:	2180      	movs	r1, #128	; 0x80
 80038d8:	0249      	lsls	r1, r1, #9
 80038da:	430a      	orrs	r2, r1
 80038dc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038de:	4b5c      	ldr	r3, [pc, #368]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80038e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038e2:	4b5b      	ldr	r3, [pc, #364]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80038e4:	495d      	ldr	r1, [pc, #372]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80038e6:	400a      	ands	r2, r1
 80038e8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038ea:	4b59      	ldr	r3, [pc, #356]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	2201      	movs	r2, #1
 80038f4:	4013      	ands	r3, r2
 80038f6:	d016      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f8:	f7ff f85e 	bl	80029b8 <HAL_GetTick>
 80038fc:	0003      	movs	r3, r0
 80038fe:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003900:	e00c      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003902:	f7ff f859 	bl	80029b8 <HAL_GetTick>
 8003906:	0002      	movs	r2, r0
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	4a54      	ldr	r2, [pc, #336]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d904      	bls.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003912:	2313      	movs	r3, #19
 8003914:	18fb      	adds	r3, r7, r3
 8003916:	2203      	movs	r2, #3
 8003918:	701a      	strb	r2, [r3, #0]
            break;
 800391a:	e004      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800391c:	4b4c      	ldr	r3, [pc, #304]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800391e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003920:	2202      	movs	r2, #2
 8003922:	4013      	ands	r3, r2
 8003924:	d0ed      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003926:	2313      	movs	r3, #19
 8003928:	18fb      	adds	r3, r7, r3
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10a      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003930:	4b47      	ldr	r3, [pc, #284]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003934:	4a48      	ldr	r2, [pc, #288]	; (8003a58 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003936:	4013      	ands	r3, r2
 8003938:	0019      	movs	r1, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	4b44      	ldr	r3, [pc, #272]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003940:	430a      	orrs	r2, r1
 8003942:	65da      	str	r2, [r3, #92]	; 0x5c
 8003944:	e00c      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003946:	2312      	movs	r3, #18
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	2213      	movs	r2, #19
 800394c:	18ba      	adds	r2, r7, r2
 800394e:	7812      	ldrb	r2, [r2, #0]
 8003950:	701a      	strb	r2, [r3, #0]
 8003952:	e005      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003954:	2312      	movs	r3, #18
 8003956:	18fb      	adds	r3, r7, r3
 8003958:	2213      	movs	r2, #19
 800395a:	18ba      	adds	r2, r7, r2
 800395c:	7812      	ldrb	r2, [r2, #0]
 800395e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003960:	2311      	movs	r3, #17
 8003962:	18fb      	adds	r3, r7, r3
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d105      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800396a:	4b39      	ldr	r3, [pc, #228]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800396c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800396e:	4b38      	ldr	r3, [pc, #224]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003970:	493c      	ldr	r1, [pc, #240]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003972:	400a      	ands	r2, r1
 8003974:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2201      	movs	r2, #1
 800397c:	4013      	ands	r3, r2
 800397e:	d009      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003980:	4b33      	ldr	r3, [pc, #204]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003984:	2203      	movs	r2, #3
 8003986:	4393      	bics	r3, r2
 8003988:	0019      	movs	r1, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685a      	ldr	r2, [r3, #4]
 800398e:	4b30      	ldr	r3, [pc, #192]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003990:	430a      	orrs	r2, r1
 8003992:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2202      	movs	r2, #2
 800399a:	4013      	ands	r3, r2
 800399c:	d009      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800399e:	4b2c      	ldr	r3, [pc, #176]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80039a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a2:	220c      	movs	r2, #12
 80039a4:	4393      	bics	r3, r2
 80039a6:	0019      	movs	r1, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	4b28      	ldr	r3, [pc, #160]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80039ae:	430a      	orrs	r2, r1
 80039b0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2220      	movs	r2, #32
 80039b8:	4013      	ands	r3, r2
 80039ba:	d009      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039bc:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80039be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c0:	4a29      	ldr	r2, [pc, #164]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	0019      	movs	r1, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	4b21      	ldr	r3, [pc, #132]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80039cc:	430a      	orrs	r2, r1
 80039ce:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	2380      	movs	r3, #128	; 0x80
 80039d6:	01db      	lsls	r3, r3, #7
 80039d8:	4013      	ands	r3, r2
 80039da:	d015      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039dc:	4b1c      	ldr	r3, [pc, #112]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80039de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	0899      	lsrs	r1, r3, #2
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	695a      	ldr	r2, [r3, #20]
 80039e8:	4b19      	ldr	r3, [pc, #100]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80039ea:	430a      	orrs	r2, r1
 80039ec:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695a      	ldr	r2, [r3, #20]
 80039f2:	2380      	movs	r3, #128	; 0x80
 80039f4:	05db      	lsls	r3, r3, #23
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d106      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80039fa:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	4b14      	ldr	r3, [pc, #80]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a00:	2180      	movs	r1, #128	; 0x80
 8003a02:	0249      	lsls	r1, r1, #9
 8003a04:	430a      	orrs	r2, r1
 8003a06:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	2380      	movs	r3, #128	; 0x80
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	4013      	ands	r3, r2
 8003a12:	d016      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003a14:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a18:	4a14      	ldr	r2, [pc, #80]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	0019      	movs	r1, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691a      	ldr	r2, [r3, #16]
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a24:	430a      	orrs	r2, r1
 8003a26:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	01db      	lsls	r3, r3, #7
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d106      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003a3a:	2180      	movs	r1, #128	; 0x80
 8003a3c:	0249      	lsls	r1, r1, #9
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003a42:	2312      	movs	r3, #18
 8003a44:	18fb      	adds	r3, r7, r3
 8003a46:	781b      	ldrb	r3, [r3, #0]
}
 8003a48:	0018      	movs	r0, r3
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b006      	add	sp, #24
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40021000 	.word	0x40021000
 8003a54:	40007000 	.word	0x40007000
 8003a58:	fffffcff 	.word	0xfffffcff
 8003a5c:	fffeffff 	.word	0xfffeffff
 8003a60:	00001388 	.word	0x00001388
 8003a64:	efffffff 	.word	0xefffffff
 8003a68:	ffffcfff 	.word	0xffffcfff
 8003a6c:	ffff3fff 	.word	0xffff3fff

08003a70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e04a      	b.n	8003b18 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	223d      	movs	r2, #61	; 0x3d
 8003a86:	5c9b      	ldrb	r3, [r3, r2]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d107      	bne.n	8003a9e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	223c      	movs	r2, #60	; 0x3c
 8003a92:	2100      	movs	r1, #0
 8003a94:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f7fe fa4f 	bl	8001f3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	223d      	movs	r2, #61	; 0x3d
 8003aa2:	2102      	movs	r1, #2
 8003aa4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3304      	adds	r3, #4
 8003aae:	0019      	movs	r1, r3
 8003ab0:	0010      	movs	r0, r2
 8003ab2:	f000 fb67 	bl	8004184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2248      	movs	r2, #72	; 0x48
 8003aba:	2101      	movs	r1, #1
 8003abc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	223e      	movs	r2, #62	; 0x3e
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	5499      	strb	r1, [r3, r2]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	223f      	movs	r2, #63	; 0x3f
 8003aca:	2101      	movs	r1, #1
 8003acc:	5499      	strb	r1, [r3, r2]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2240      	movs	r2, #64	; 0x40
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	5499      	strb	r1, [r3, r2]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2241      	movs	r2, #65	; 0x41
 8003ada:	2101      	movs	r1, #1
 8003adc:	5499      	strb	r1, [r3, r2]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2242      	movs	r2, #66	; 0x42
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	5499      	strb	r1, [r3, r2]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2243      	movs	r2, #67	; 0x43
 8003aea:	2101      	movs	r1, #1
 8003aec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2244      	movs	r2, #68	; 0x44
 8003af2:	2101      	movs	r1, #1
 8003af4:	5499      	strb	r1, [r3, r2]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2245      	movs	r2, #69	; 0x45
 8003afa:	2101      	movs	r1, #1
 8003afc:	5499      	strb	r1, [r3, r2]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2246      	movs	r2, #70	; 0x46
 8003b02:	2101      	movs	r1, #1
 8003b04:	5499      	strb	r1, [r3, r2]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2247      	movs	r2, #71	; 0x47
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	223d      	movs	r2, #61	; 0x3d
 8003b12:	2101      	movs	r1, #1
 8003b14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	0018      	movs	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b002      	add	sp, #8
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e04a      	b.n	8003bc8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	223d      	movs	r2, #61	; 0x3d
 8003b36:	5c9b      	ldrb	r3, [r3, r2]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d107      	bne.n	8003b4e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	223c      	movs	r2, #60	; 0x3c
 8003b42:	2100      	movs	r1, #0
 8003b44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f7fe fa6b 	bl	8002024 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	223d      	movs	r2, #61	; 0x3d
 8003b52:	2102      	movs	r1, #2
 8003b54:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	0019      	movs	r1, r3
 8003b60:	0010      	movs	r0, r2
 8003b62:	f000 fb0f 	bl	8004184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2248      	movs	r2, #72	; 0x48
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	223e      	movs	r2, #62	; 0x3e
 8003b72:	2101      	movs	r1, #1
 8003b74:	5499      	strb	r1, [r3, r2]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	223f      	movs	r2, #63	; 0x3f
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	5499      	strb	r1, [r3, r2]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2240      	movs	r2, #64	; 0x40
 8003b82:	2101      	movs	r1, #1
 8003b84:	5499      	strb	r1, [r3, r2]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2241      	movs	r2, #65	; 0x41
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	5499      	strb	r1, [r3, r2]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2242      	movs	r2, #66	; 0x42
 8003b92:	2101      	movs	r1, #1
 8003b94:	5499      	strb	r1, [r3, r2]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2243      	movs	r2, #67	; 0x43
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2244      	movs	r2, #68	; 0x44
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	5499      	strb	r1, [r3, r2]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2245      	movs	r2, #69	; 0x45
 8003baa:	2101      	movs	r1, #1
 8003bac:	5499      	strb	r1, [r3, r2]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2246      	movs	r2, #70	; 0x46
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	5499      	strb	r1, [r3, r2]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2247      	movs	r2, #71	; 0x47
 8003bba:	2101      	movs	r1, #1
 8003bbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	223d      	movs	r2, #61	; 0x3d
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	0018      	movs	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	b002      	add	sp, #8
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e04a      	b.n	8003c78 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	223d      	movs	r2, #61	; 0x3d
 8003be6:	5c9b      	ldrb	r3, [r3, r2]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d107      	bne.n	8003bfe <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	223c      	movs	r2, #60	; 0x3c
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f000 f841 	bl	8003c80 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	223d      	movs	r2, #61	; 0x3d
 8003c02:	2102      	movs	r1, #2
 8003c04:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	0019      	movs	r1, r3
 8003c10:	0010      	movs	r0, r2
 8003c12:	f000 fab7 	bl	8004184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2248      	movs	r2, #72	; 0x48
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	223e      	movs	r2, #62	; 0x3e
 8003c22:	2101      	movs	r1, #1
 8003c24:	5499      	strb	r1, [r3, r2]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	223f      	movs	r2, #63	; 0x3f
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	5499      	strb	r1, [r3, r2]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2240      	movs	r2, #64	; 0x40
 8003c32:	2101      	movs	r1, #1
 8003c34:	5499      	strb	r1, [r3, r2]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2241      	movs	r2, #65	; 0x41
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	5499      	strb	r1, [r3, r2]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2242      	movs	r2, #66	; 0x42
 8003c42:	2101      	movs	r1, #1
 8003c44:	5499      	strb	r1, [r3, r2]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2243      	movs	r2, #67	; 0x43
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2244      	movs	r2, #68	; 0x44
 8003c52:	2101      	movs	r1, #1
 8003c54:	5499      	strb	r1, [r3, r2]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2245      	movs	r2, #69	; 0x45
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	5499      	strb	r1, [r3, r2]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2246      	movs	r2, #70	; 0x46
 8003c62:	2101      	movs	r1, #1
 8003c64:	5499      	strb	r1, [r3, r2]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2247      	movs	r2, #71	; 0x47
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	223d      	movs	r2, #61	; 0x3d
 8003c72:	2101      	movs	r1, #1
 8003c74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	0018      	movs	r0, r3
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	b002      	add	sp, #8
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003c88:	46c0      	nop			; (mov r8, r8)
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b002      	add	sp, #8
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c9c:	2317      	movs	r3, #23
 8003c9e:	18fb      	adds	r3, r7, r3
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	223c      	movs	r2, #60	; 0x3c
 8003ca8:	5c9b      	ldrb	r3, [r3, r2]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_TIM_IC_ConfigChannel+0x22>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e08c      	b.n	8003dcc <HAL_TIM_IC_ConfigChannel+0x13c>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	223c      	movs	r2, #60	; 0x3c
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d11b      	bne.n	8003cf8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6818      	ldr	r0, [r3, #0]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	6819      	ldr	r1, [r3, #0]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f000 fd92 	bl	80047f8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699a      	ldr	r2, [r3, #24]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	210c      	movs	r1, #12
 8003ce0:	438a      	bics	r2, r1
 8003ce2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6999      	ldr	r1, [r3, #24]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	619a      	str	r2, [r3, #24]
 8003cf6:	e062      	b.n	8003dbe <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d11c      	bne.n	8003d38 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	6819      	ldr	r1, [r3, #0]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f000 fdf9 	bl	8004904 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	699a      	ldr	r2, [r3, #24]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	492d      	ldr	r1, [pc, #180]	; (8003dd4 <HAL_TIM_IC_ConfigChannel+0x144>)
 8003d1e:	400a      	ands	r2, r1
 8003d20:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6999      	ldr	r1, [r3, #24]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	021a      	lsls	r2, r3, #8
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	619a      	str	r2, [r3, #24]
 8003d36:	e042      	b.n	8003dbe <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d11b      	bne.n	8003d76 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	6819      	ldr	r1, [r3, #0]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f000 fe4d 	bl	80049ec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69da      	ldr	r2, [r3, #28]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	210c      	movs	r1, #12
 8003d5e:	438a      	bics	r2, r1
 8003d60:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69d9      	ldr	r1, [r3, #28]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	61da      	str	r2, [r3, #28]
 8003d74:	e023      	b.n	8003dbe <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b0c      	cmp	r3, #12
 8003d7a:	d11c      	bne.n	8003db6 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6818      	ldr	r0, [r3, #0]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	6819      	ldr	r1, [r3, #0]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f000 fe6e 	bl	8004a6c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	69da      	ldr	r2, [r3, #28]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	490e      	ldr	r1, [pc, #56]	; (8003dd4 <HAL_TIM_IC_ConfigChannel+0x144>)
 8003d9c:	400a      	ands	r2, r1
 8003d9e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69d9      	ldr	r1, [r3, #28]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	021a      	lsls	r2, r3, #8
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	61da      	str	r2, [r3, #28]
 8003db4:	e003      	b.n	8003dbe <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8003db6:	2317      	movs	r3, #23
 8003db8:	18fb      	adds	r3, r7, r3
 8003dba:	2201      	movs	r2, #1
 8003dbc:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	223c      	movs	r2, #60	; 0x3c
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	5499      	strb	r1, [r3, r2]

  return status;
 8003dc6:	2317      	movs	r3, #23
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	781b      	ldrb	r3, [r3, #0]
}
 8003dcc:	0018      	movs	r0, r3
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	b006      	add	sp, #24
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	fffff3ff 	.word	0xfffff3ff

08003dd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de4:	2317      	movs	r3, #23
 8003de6:	18fb      	adds	r3, r7, r3
 8003de8:	2200      	movs	r2, #0
 8003dea:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	223c      	movs	r2, #60	; 0x3c
 8003df0:	5c9b      	ldrb	r3, [r3, r2]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <HAL_TIM_PWM_ConfigChannel+0x22>
 8003df6:	2302      	movs	r3, #2
 8003df8:	e0e5      	b.n	8003fc6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	223c      	movs	r2, #60	; 0x3c
 8003dfe:	2101      	movs	r1, #1
 8003e00:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b14      	cmp	r3, #20
 8003e06:	d900      	bls.n	8003e0a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003e08:	e0d1      	b.n	8003fae <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	009a      	lsls	r2, r3, #2
 8003e0e:	4b70      	ldr	r3, [pc, #448]	; (8003fd0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003e10:	18d3      	adds	r3, r2, r3
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	0011      	movs	r1, r2
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f000 fa26 	bl	8004270 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699a      	ldr	r2, [r3, #24]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2108      	movs	r1, #8
 8003e30:	430a      	orrs	r2, r1
 8003e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	699a      	ldr	r2, [r3, #24]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2104      	movs	r1, #4
 8003e40:	438a      	bics	r2, r1
 8003e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6999      	ldr	r1, [r3, #24]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	691a      	ldr	r2, [r3, #16]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	619a      	str	r2, [r3, #24]
      break;
 8003e56:	e0af      	b.n	8003fb8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	0011      	movs	r1, r2
 8003e60:	0018      	movs	r0, r3
 8003e62:	f000 fa8f 	bl	8004384 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	699a      	ldr	r2, [r3, #24]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2180      	movs	r1, #128	; 0x80
 8003e72:	0109      	lsls	r1, r1, #4
 8003e74:	430a      	orrs	r2, r1
 8003e76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699a      	ldr	r2, [r3, #24]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4954      	ldr	r1, [pc, #336]	; (8003fd4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003e84:	400a      	ands	r2, r1
 8003e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6999      	ldr	r1, [r3, #24]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	021a      	lsls	r2, r3, #8
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	619a      	str	r2, [r3, #24]
      break;
 8003e9c:	e08c      	b.n	8003fb8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	0011      	movs	r1, r2
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f000 faf0 	bl	800448c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	69da      	ldr	r2, [r3, #28]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2108      	movs	r1, #8
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	69da      	ldr	r2, [r3, #28]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2104      	movs	r1, #4
 8003ec8:	438a      	bics	r2, r1
 8003eca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	69d9      	ldr	r1, [r3, #28]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	691a      	ldr	r2, [r3, #16]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	61da      	str	r2, [r3, #28]
      break;
 8003ede:	e06b      	b.n	8003fb8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	0011      	movs	r1, r2
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f000 fb57 	bl	800459c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69da      	ldr	r2, [r3, #28]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2180      	movs	r1, #128	; 0x80
 8003efa:	0109      	lsls	r1, r1, #4
 8003efc:	430a      	orrs	r2, r1
 8003efe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	69da      	ldr	r2, [r3, #28]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4932      	ldr	r1, [pc, #200]	; (8003fd4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003f0c:	400a      	ands	r2, r1
 8003f0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	69d9      	ldr	r1, [r3, #28]
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	021a      	lsls	r2, r3, #8
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	61da      	str	r2, [r3, #28]
      break;
 8003f24:	e048      	b.n	8003fb8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	0011      	movs	r1, r2
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f000 fb9e 	bl	8004670 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2108      	movs	r1, #8
 8003f40:	430a      	orrs	r2, r1
 8003f42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2104      	movs	r1, #4
 8003f50:	438a      	bics	r2, r1
 8003f52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f66:	e027      	b.n	8003fb8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	0011      	movs	r1, r2
 8003f70:	0018      	movs	r0, r3
 8003f72:	f000 fbdd 	bl	8004730 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2180      	movs	r1, #128	; 0x80
 8003f82:	0109      	lsls	r1, r1, #4
 8003f84:	430a      	orrs	r2, r1
 8003f86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4910      	ldr	r1, [pc, #64]	; (8003fd4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003f94:	400a      	ands	r2, r1
 8003f96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	021a      	lsls	r2, r3, #8
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003fac:	e004      	b.n	8003fb8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003fae:	2317      	movs	r3, #23
 8003fb0:	18fb      	adds	r3, r7, r3
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	701a      	strb	r2, [r3, #0]
      break;
 8003fb6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	223c      	movs	r2, #60	; 0x3c
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	5499      	strb	r1, [r3, r2]

  return status;
 8003fc0:	2317      	movs	r3, #23
 8003fc2:	18fb      	adds	r3, r7, r3
 8003fc4:	781b      	ldrb	r3, [r3, #0]
}
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b006      	add	sp, #24
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	08008f7c 	.word	0x08008f7c
 8003fd4:	fffffbff 	.word	0xfffffbff

08003fd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fe2:	230f      	movs	r3, #15
 8003fe4:	18fb      	adds	r3, r7, r3
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	223c      	movs	r2, #60	; 0x3c
 8003fee:	5c9b      	ldrb	r3, [r3, r2]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d101      	bne.n	8003ff8 <HAL_TIM_ConfigClockSource+0x20>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	e0bc      	b.n	8004172 <HAL_TIM_ConfigClockSource+0x19a>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	223c      	movs	r2, #60	; 0x3c
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	223d      	movs	r2, #61	; 0x3d
 8004004:	2102      	movs	r1, #2
 8004006:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	4a5a      	ldr	r2, [pc, #360]	; (800417c <HAL_TIM_ConfigClockSource+0x1a4>)
 8004014:	4013      	ands	r3, r2
 8004016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	4a59      	ldr	r2, [pc, #356]	; (8004180 <HAL_TIM_ConfigClockSource+0x1a8>)
 800401c:	4013      	ands	r3, r2
 800401e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2280      	movs	r2, #128	; 0x80
 800402e:	0192      	lsls	r2, r2, #6
 8004030:	4293      	cmp	r3, r2
 8004032:	d040      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0xde>
 8004034:	2280      	movs	r2, #128	; 0x80
 8004036:	0192      	lsls	r2, r2, #6
 8004038:	4293      	cmp	r3, r2
 800403a:	d900      	bls.n	800403e <HAL_TIM_ConfigClockSource+0x66>
 800403c:	e088      	b.n	8004150 <HAL_TIM_ConfigClockSource+0x178>
 800403e:	2280      	movs	r2, #128	; 0x80
 8004040:	0152      	lsls	r2, r2, #5
 8004042:	4293      	cmp	r3, r2
 8004044:	d100      	bne.n	8004048 <HAL_TIM_ConfigClockSource+0x70>
 8004046:	e088      	b.n	800415a <HAL_TIM_ConfigClockSource+0x182>
 8004048:	2280      	movs	r2, #128	; 0x80
 800404a:	0152      	lsls	r2, r2, #5
 800404c:	4293      	cmp	r3, r2
 800404e:	d900      	bls.n	8004052 <HAL_TIM_ConfigClockSource+0x7a>
 8004050:	e07e      	b.n	8004150 <HAL_TIM_ConfigClockSource+0x178>
 8004052:	2b70      	cmp	r3, #112	; 0x70
 8004054:	d018      	beq.n	8004088 <HAL_TIM_ConfigClockSource+0xb0>
 8004056:	d900      	bls.n	800405a <HAL_TIM_ConfigClockSource+0x82>
 8004058:	e07a      	b.n	8004150 <HAL_TIM_ConfigClockSource+0x178>
 800405a:	2b60      	cmp	r3, #96	; 0x60
 800405c:	d04f      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0x126>
 800405e:	d900      	bls.n	8004062 <HAL_TIM_ConfigClockSource+0x8a>
 8004060:	e076      	b.n	8004150 <HAL_TIM_ConfigClockSource+0x178>
 8004062:	2b50      	cmp	r3, #80	; 0x50
 8004064:	d03b      	beq.n	80040de <HAL_TIM_ConfigClockSource+0x106>
 8004066:	d900      	bls.n	800406a <HAL_TIM_ConfigClockSource+0x92>
 8004068:	e072      	b.n	8004150 <HAL_TIM_ConfigClockSource+0x178>
 800406a:	2b40      	cmp	r3, #64	; 0x40
 800406c:	d057      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x146>
 800406e:	d900      	bls.n	8004072 <HAL_TIM_ConfigClockSource+0x9a>
 8004070:	e06e      	b.n	8004150 <HAL_TIM_ConfigClockSource+0x178>
 8004072:	2b30      	cmp	r3, #48	; 0x30
 8004074:	d063      	beq.n	800413e <HAL_TIM_ConfigClockSource+0x166>
 8004076:	d86b      	bhi.n	8004150 <HAL_TIM_ConfigClockSource+0x178>
 8004078:	2b20      	cmp	r3, #32
 800407a:	d060      	beq.n	800413e <HAL_TIM_ConfigClockSource+0x166>
 800407c:	d868      	bhi.n	8004150 <HAL_TIM_ConfigClockSource+0x178>
 800407e:	2b00      	cmp	r3, #0
 8004080:	d05d      	beq.n	800413e <HAL_TIM_ConfigClockSource+0x166>
 8004082:	2b10      	cmp	r3, #16
 8004084:	d05b      	beq.n	800413e <HAL_TIM_ConfigClockSource+0x166>
 8004086:	e063      	b.n	8004150 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6818      	ldr	r0, [r3, #0]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	6899      	ldr	r1, [r3, #8]
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f000 fd4a 	bl	8004b30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2277      	movs	r2, #119	; 0x77
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	609a      	str	r2, [r3, #8]
      break;
 80040b4:	e052      	b.n	800415c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	6899      	ldr	r1, [r3, #8]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f000 fd33 	bl	8004b30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2180      	movs	r1, #128	; 0x80
 80040d6:	01c9      	lsls	r1, r1, #7
 80040d8:	430a      	orrs	r2, r1
 80040da:	609a      	str	r2, [r3, #8]
      break;
 80040dc:	e03e      	b.n	800415c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	6859      	ldr	r1, [r3, #4]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	001a      	movs	r2, r3
 80040ec:	f000 fbdc 	bl	80048a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2150      	movs	r1, #80	; 0x50
 80040f6:	0018      	movs	r0, r3
 80040f8:	f000 fcfe 	bl	8004af8 <TIM_ITRx_SetConfig>
      break;
 80040fc:	e02e      	b.n	800415c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	6859      	ldr	r1, [r3, #4]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	001a      	movs	r2, r3
 800410c:	f000 fc3c 	bl	8004988 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2160      	movs	r1, #96	; 0x60
 8004116:	0018      	movs	r0, r3
 8004118:	f000 fcee 	bl	8004af8 <TIM_ITRx_SetConfig>
      break;
 800411c:	e01e      	b.n	800415c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6818      	ldr	r0, [r3, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	6859      	ldr	r1, [r3, #4]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	001a      	movs	r2, r3
 800412c:	f000 fbbc 	bl	80048a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2140      	movs	r1, #64	; 0x40
 8004136:	0018      	movs	r0, r3
 8004138:	f000 fcde 	bl	8004af8 <TIM_ITRx_SetConfig>
      break;
 800413c:	e00e      	b.n	800415c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	0019      	movs	r1, r3
 8004148:	0010      	movs	r0, r2
 800414a:	f000 fcd5 	bl	8004af8 <TIM_ITRx_SetConfig>
      break;
 800414e:	e005      	b.n	800415c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004150:	230f      	movs	r3, #15
 8004152:	18fb      	adds	r3, r7, r3
 8004154:	2201      	movs	r2, #1
 8004156:	701a      	strb	r2, [r3, #0]
      break;
 8004158:	e000      	b.n	800415c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800415a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	223d      	movs	r2, #61	; 0x3d
 8004160:	2101      	movs	r1, #1
 8004162:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	223c      	movs	r2, #60	; 0x3c
 8004168:	2100      	movs	r1, #0
 800416a:	5499      	strb	r1, [r3, r2]

  return status;
 800416c:	230f      	movs	r3, #15
 800416e:	18fb      	adds	r3, r7, r3
 8004170:	781b      	ldrb	r3, [r3, #0]
}
 8004172:	0018      	movs	r0, r3
 8004174:	46bd      	mov	sp, r7
 8004176:	b004      	add	sp, #16
 8004178:	bd80      	pop	{r7, pc}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	ffceff88 	.word	0xffceff88
 8004180:	ffff00ff 	.word	0xffff00ff

08004184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a2f      	ldr	r2, [pc, #188]	; (8004254 <TIM_Base_SetConfig+0xd0>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d003      	beq.n	80041a4 <TIM_Base_SetConfig+0x20>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a2e      	ldr	r2, [pc, #184]	; (8004258 <TIM_Base_SetConfig+0xd4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d108      	bne.n	80041b6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2270      	movs	r2, #112	; 0x70
 80041a8:	4393      	bics	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a26      	ldr	r2, [pc, #152]	; (8004254 <TIM_Base_SetConfig+0xd0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <TIM_Base_SetConfig+0x62>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a25      	ldr	r2, [pc, #148]	; (8004258 <TIM_Base_SetConfig+0xd4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00f      	beq.n	80041e6 <TIM_Base_SetConfig+0x62>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a24      	ldr	r2, [pc, #144]	; (800425c <TIM_Base_SetConfig+0xd8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00b      	beq.n	80041e6 <TIM_Base_SetConfig+0x62>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a23      	ldr	r2, [pc, #140]	; (8004260 <TIM_Base_SetConfig+0xdc>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d007      	beq.n	80041e6 <TIM_Base_SetConfig+0x62>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a22      	ldr	r2, [pc, #136]	; (8004264 <TIM_Base_SetConfig+0xe0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d003      	beq.n	80041e6 <TIM_Base_SetConfig+0x62>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a21      	ldr	r2, [pc, #132]	; (8004268 <TIM_Base_SetConfig+0xe4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d108      	bne.n	80041f8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4a20      	ldr	r2, [pc, #128]	; (800426c <TIM_Base_SetConfig+0xe8>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2280      	movs	r2, #128	; 0x80
 80041fc:	4393      	bics	r3, r2
 80041fe:	001a      	movs	r2, r3
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	4313      	orrs	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a0c      	ldr	r2, [pc, #48]	; (8004254 <TIM_Base_SetConfig+0xd0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00b      	beq.n	800423e <TIM_Base_SetConfig+0xba>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a0d      	ldr	r2, [pc, #52]	; (8004260 <TIM_Base_SetConfig+0xdc>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d007      	beq.n	800423e <TIM_Base_SetConfig+0xba>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a0c      	ldr	r2, [pc, #48]	; (8004264 <TIM_Base_SetConfig+0xe0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d003      	beq.n	800423e <TIM_Base_SetConfig+0xba>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a0b      	ldr	r2, [pc, #44]	; (8004268 <TIM_Base_SetConfig+0xe4>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d103      	bne.n	8004246 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	615a      	str	r2, [r3, #20]
}
 800424c:	46c0      	nop			; (mov r8, r8)
 800424e:	46bd      	mov	sp, r7
 8004250:	b004      	add	sp, #16
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40012c00 	.word	0x40012c00
 8004258:	40000400 	.word	0x40000400
 800425c:	40002000 	.word	0x40002000
 8004260:	40014000 	.word	0x40014000
 8004264:	40014400 	.word	0x40014400
 8004268:	40014800 	.word	0x40014800
 800426c:	fffffcff 	.word	0xfffffcff

08004270 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	2201      	movs	r2, #1
 8004280:	4393      	bics	r3, r2
 8004282:	001a      	movs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4a32      	ldr	r2, [pc, #200]	; (8004368 <TIM_OC1_SetConfig+0xf8>)
 800429e:	4013      	ands	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2203      	movs	r2, #3
 80042a6:	4393      	bics	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	2202      	movs	r2, #2
 80042b8:	4393      	bics	r3, r2
 80042ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a28      	ldr	r2, [pc, #160]	; (800436c <TIM_OC1_SetConfig+0xfc>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d00b      	beq.n	80042e6 <TIM_OC1_SetConfig+0x76>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a27      	ldr	r2, [pc, #156]	; (8004370 <TIM_OC1_SetConfig+0x100>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d007      	beq.n	80042e6 <TIM_OC1_SetConfig+0x76>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a26      	ldr	r2, [pc, #152]	; (8004374 <TIM_OC1_SetConfig+0x104>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d003      	beq.n	80042e6 <TIM_OC1_SetConfig+0x76>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a25      	ldr	r2, [pc, #148]	; (8004378 <TIM_OC1_SetConfig+0x108>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d10c      	bne.n	8004300 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2208      	movs	r2, #8
 80042ea:	4393      	bics	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	2204      	movs	r2, #4
 80042fc:	4393      	bics	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a1a      	ldr	r2, [pc, #104]	; (800436c <TIM_OC1_SetConfig+0xfc>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00b      	beq.n	8004320 <TIM_OC1_SetConfig+0xb0>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a19      	ldr	r2, [pc, #100]	; (8004370 <TIM_OC1_SetConfig+0x100>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d007      	beq.n	8004320 <TIM_OC1_SetConfig+0xb0>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a18      	ldr	r2, [pc, #96]	; (8004374 <TIM_OC1_SetConfig+0x104>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d003      	beq.n	8004320 <TIM_OC1_SetConfig+0xb0>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a17      	ldr	r2, [pc, #92]	; (8004378 <TIM_OC1_SetConfig+0x108>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d111      	bne.n	8004344 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	4a16      	ldr	r2, [pc, #88]	; (800437c <TIM_OC1_SetConfig+0x10c>)
 8004324:	4013      	ands	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	4a15      	ldr	r2, [pc, #84]	; (8004380 <TIM_OC1_SetConfig+0x110>)
 800432c:	4013      	ands	r3, r2
 800432e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	621a      	str	r2, [r3, #32]
}
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	46bd      	mov	sp, r7
 8004362:	b006      	add	sp, #24
 8004364:	bd80      	pop	{r7, pc}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	fffeff8f 	.word	0xfffeff8f
 800436c:	40012c00 	.word	0x40012c00
 8004370:	40014000 	.word	0x40014000
 8004374:	40014400 	.word	0x40014400
 8004378:	40014800 	.word	0x40014800
 800437c:	fffffeff 	.word	0xfffffeff
 8004380:	fffffdff 	.word	0xfffffdff

08004384 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	2210      	movs	r2, #16
 8004394:	4393      	bics	r3, r2
 8004396:	001a      	movs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4a2e      	ldr	r2, [pc, #184]	; (800446c <TIM_OC2_SetConfig+0xe8>)
 80043b2:	4013      	ands	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	4a2d      	ldr	r2, [pc, #180]	; (8004470 <TIM_OC2_SetConfig+0xec>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	021b      	lsls	r3, r3, #8
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2220      	movs	r2, #32
 80043ce:	4393      	bics	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	4313      	orrs	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a24      	ldr	r2, [pc, #144]	; (8004474 <TIM_OC2_SetConfig+0xf0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d10d      	bne.n	8004402 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2280      	movs	r2, #128	; 0x80
 80043ea:	4393      	bics	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2240      	movs	r2, #64	; 0x40
 80043fe:	4393      	bics	r3, r2
 8004400:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a1b      	ldr	r2, [pc, #108]	; (8004474 <TIM_OC2_SetConfig+0xf0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d00b      	beq.n	8004422 <TIM_OC2_SetConfig+0x9e>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a1a      	ldr	r2, [pc, #104]	; (8004478 <TIM_OC2_SetConfig+0xf4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d007      	beq.n	8004422 <TIM_OC2_SetConfig+0x9e>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a19      	ldr	r2, [pc, #100]	; (800447c <TIM_OC2_SetConfig+0xf8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d003      	beq.n	8004422 <TIM_OC2_SetConfig+0x9e>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a18      	ldr	r2, [pc, #96]	; (8004480 <TIM_OC2_SetConfig+0xfc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d113      	bne.n	800444a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	4a17      	ldr	r2, [pc, #92]	; (8004484 <TIM_OC2_SetConfig+0x100>)
 8004426:	4013      	ands	r3, r2
 8004428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	4a16      	ldr	r2, [pc, #88]	; (8004488 <TIM_OC2_SetConfig+0x104>)
 800442e:	4013      	ands	r3, r2
 8004430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	621a      	str	r2, [r3, #32]
}
 8004464:	46c0      	nop			; (mov r8, r8)
 8004466:	46bd      	mov	sp, r7
 8004468:	b006      	add	sp, #24
 800446a:	bd80      	pop	{r7, pc}
 800446c:	feff8fff 	.word	0xfeff8fff
 8004470:	fffffcff 	.word	0xfffffcff
 8004474:	40012c00 	.word	0x40012c00
 8004478:	40014000 	.word	0x40014000
 800447c:	40014400 	.word	0x40014400
 8004480:	40014800 	.word	0x40014800
 8004484:	fffffbff 	.word	0xfffffbff
 8004488:	fffff7ff 	.word	0xfffff7ff

0800448c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	4a35      	ldr	r2, [pc, #212]	; (8004570 <TIM_OC3_SetConfig+0xe4>)
 800449c:	401a      	ands	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4a2f      	ldr	r2, [pc, #188]	; (8004574 <TIM_OC3_SetConfig+0xe8>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2203      	movs	r2, #3
 80044c0:	4393      	bics	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	4a29      	ldr	r2, [pc, #164]	; (8004578 <TIM_OC3_SetConfig+0xec>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	021b      	lsls	r3, r3, #8
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	4313      	orrs	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a25      	ldr	r2, [pc, #148]	; (800457c <TIM_OC3_SetConfig+0xf0>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d10d      	bne.n	8004506 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	4a24      	ldr	r2, [pc, #144]	; (8004580 <TIM_OC3_SetConfig+0xf4>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	021b      	lsls	r3, r3, #8
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	4a20      	ldr	r2, [pc, #128]	; (8004584 <TIM_OC3_SetConfig+0xf8>)
 8004502:	4013      	ands	r3, r2
 8004504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a1c      	ldr	r2, [pc, #112]	; (800457c <TIM_OC3_SetConfig+0xf0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d00b      	beq.n	8004526 <TIM_OC3_SetConfig+0x9a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a1d      	ldr	r2, [pc, #116]	; (8004588 <TIM_OC3_SetConfig+0xfc>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d007      	beq.n	8004526 <TIM_OC3_SetConfig+0x9a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a1c      	ldr	r2, [pc, #112]	; (800458c <TIM_OC3_SetConfig+0x100>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d003      	beq.n	8004526 <TIM_OC3_SetConfig+0x9a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a1b      	ldr	r2, [pc, #108]	; (8004590 <TIM_OC3_SetConfig+0x104>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d113      	bne.n	800454e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	4a1a      	ldr	r2, [pc, #104]	; (8004594 <TIM_OC3_SetConfig+0x108>)
 800452a:	4013      	ands	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	4a19      	ldr	r2, [pc, #100]	; (8004598 <TIM_OC3_SetConfig+0x10c>)
 8004532:	4013      	ands	r3, r2
 8004534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4313      	orrs	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	621a      	str	r2, [r3, #32]
}
 8004568:	46c0      	nop			; (mov r8, r8)
 800456a:	46bd      	mov	sp, r7
 800456c:	b006      	add	sp, #24
 800456e:	bd80      	pop	{r7, pc}
 8004570:	fffffeff 	.word	0xfffffeff
 8004574:	fffeff8f 	.word	0xfffeff8f
 8004578:	fffffdff 	.word	0xfffffdff
 800457c:	40012c00 	.word	0x40012c00
 8004580:	fffff7ff 	.word	0xfffff7ff
 8004584:	fffffbff 	.word	0xfffffbff
 8004588:	40014000 	.word	0x40014000
 800458c:	40014400 	.word	0x40014400
 8004590:	40014800 	.word	0x40014800
 8004594:	ffffefff 	.word	0xffffefff
 8004598:	ffffdfff 	.word	0xffffdfff

0800459c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	4a28      	ldr	r2, [pc, #160]	; (800464c <TIM_OC4_SetConfig+0xb0>)
 80045ac:	401a      	ands	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4a22      	ldr	r2, [pc, #136]	; (8004650 <TIM_OC4_SetConfig+0xb4>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4a21      	ldr	r2, [pc, #132]	; (8004654 <TIM_OC4_SetConfig+0xb8>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	021b      	lsls	r3, r3, #8
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	4a1d      	ldr	r2, [pc, #116]	; (8004658 <TIM_OC4_SetConfig+0xbc>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	031b      	lsls	r3, r3, #12
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a19      	ldr	r2, [pc, #100]	; (800465c <TIM_OC4_SetConfig+0xc0>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00b      	beq.n	8004614 <TIM_OC4_SetConfig+0x78>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a18      	ldr	r2, [pc, #96]	; (8004660 <TIM_OC4_SetConfig+0xc4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d007      	beq.n	8004614 <TIM_OC4_SetConfig+0x78>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a17      	ldr	r2, [pc, #92]	; (8004664 <TIM_OC4_SetConfig+0xc8>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d003      	beq.n	8004614 <TIM_OC4_SetConfig+0x78>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a16      	ldr	r2, [pc, #88]	; (8004668 <TIM_OC4_SetConfig+0xcc>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d109      	bne.n	8004628 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	4a15      	ldr	r2, [pc, #84]	; (800466c <TIM_OC4_SetConfig+0xd0>)
 8004618:	4013      	ands	r3, r2
 800461a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	019b      	lsls	r3, r3, #6
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	621a      	str	r2, [r3, #32]
}
 8004642:	46c0      	nop			; (mov r8, r8)
 8004644:	46bd      	mov	sp, r7
 8004646:	b006      	add	sp, #24
 8004648:	bd80      	pop	{r7, pc}
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	ffffefff 	.word	0xffffefff
 8004650:	feff8fff 	.word	0xfeff8fff
 8004654:	fffffcff 	.word	0xfffffcff
 8004658:	ffffdfff 	.word	0xffffdfff
 800465c:	40012c00 	.word	0x40012c00
 8004660:	40014000 	.word	0x40014000
 8004664:	40014400 	.word	0x40014400
 8004668:	40014800 	.word	0x40014800
 800466c:	ffffbfff 	.word	0xffffbfff

08004670 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	4a25      	ldr	r2, [pc, #148]	; (8004714 <TIM_OC5_SetConfig+0xa4>)
 8004680:	401a      	ands	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4a1f      	ldr	r2, [pc, #124]	; (8004718 <TIM_OC5_SetConfig+0xa8>)
 800469c:	4013      	ands	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	4a1b      	ldr	r2, [pc, #108]	; (800471c <TIM_OC5_SetConfig+0xac>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	041b      	lsls	r3, r3, #16
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a17      	ldr	r2, [pc, #92]	; (8004720 <TIM_OC5_SetConfig+0xb0>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00b      	beq.n	80046de <TIM_OC5_SetConfig+0x6e>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a16      	ldr	r2, [pc, #88]	; (8004724 <TIM_OC5_SetConfig+0xb4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d007      	beq.n	80046de <TIM_OC5_SetConfig+0x6e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a15      	ldr	r2, [pc, #84]	; (8004728 <TIM_OC5_SetConfig+0xb8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d003      	beq.n	80046de <TIM_OC5_SetConfig+0x6e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a14      	ldr	r2, [pc, #80]	; (800472c <TIM_OC5_SetConfig+0xbc>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d109      	bne.n	80046f2 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	4a0c      	ldr	r2, [pc, #48]	; (8004714 <TIM_OC5_SetConfig+0xa4>)
 80046e2:	4013      	ands	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	621a      	str	r2, [r3, #32]
}
 800470c:	46c0      	nop			; (mov r8, r8)
 800470e:	46bd      	mov	sp, r7
 8004710:	b006      	add	sp, #24
 8004712:	bd80      	pop	{r7, pc}
 8004714:	fffeffff 	.word	0xfffeffff
 8004718:	fffeff8f 	.word	0xfffeff8f
 800471c:	fffdffff 	.word	0xfffdffff
 8004720:	40012c00 	.word	0x40012c00
 8004724:	40014000 	.word	0x40014000
 8004728:	40014400 	.word	0x40014400
 800472c:	40014800 	.word	0x40014800

08004730 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	4a26      	ldr	r2, [pc, #152]	; (80047d8 <TIM_OC6_SetConfig+0xa8>)
 8004740:	401a      	ands	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4a20      	ldr	r2, [pc, #128]	; (80047dc <TIM_OC6_SetConfig+0xac>)
 800475c:	4013      	ands	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	021b      	lsls	r3, r3, #8
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	4a1c      	ldr	r2, [pc, #112]	; (80047e0 <TIM_OC6_SetConfig+0xb0>)
 8004770:	4013      	ands	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	051b      	lsls	r3, r3, #20
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a18      	ldr	r2, [pc, #96]	; (80047e4 <TIM_OC6_SetConfig+0xb4>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d00b      	beq.n	80047a0 <TIM_OC6_SetConfig+0x70>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a17      	ldr	r2, [pc, #92]	; (80047e8 <TIM_OC6_SetConfig+0xb8>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d007      	beq.n	80047a0 <TIM_OC6_SetConfig+0x70>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a16      	ldr	r2, [pc, #88]	; (80047ec <TIM_OC6_SetConfig+0xbc>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d003      	beq.n	80047a0 <TIM_OC6_SetConfig+0x70>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a15      	ldr	r2, [pc, #84]	; (80047f0 <TIM_OC6_SetConfig+0xc0>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d109      	bne.n	80047b4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	4a14      	ldr	r2, [pc, #80]	; (80047f4 <TIM_OC6_SetConfig+0xc4>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	029b      	lsls	r3, r3, #10
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	621a      	str	r2, [r3, #32]
}
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	46bd      	mov	sp, r7
 80047d2:	b006      	add	sp, #24
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	46c0      	nop			; (mov r8, r8)
 80047d8:	ffefffff 	.word	0xffefffff
 80047dc:	feff8fff 	.word	0xfeff8fff
 80047e0:	ffdfffff 	.word	0xffdfffff
 80047e4:	40012c00 	.word	0x40012c00
 80047e8:	40014000 	.word	0x40014000
 80047ec:	40014400 	.word	0x40014400
 80047f0:	40014800 	.word	0x40014800
 80047f4:	fffbffff 	.word	0xfffbffff

080047f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	2201      	movs	r2, #1
 800480c:	4393      	bics	r3, r2
 800480e:	001a      	movs	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4a1e      	ldr	r2, [pc, #120]	; (800489c <TIM_TI1_SetConfig+0xa4>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d007      	beq.n	8004838 <TIM_TI1_SetConfig+0x40>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4a1d      	ldr	r2, [pc, #116]	; (80048a0 <TIM_TI1_SetConfig+0xa8>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d003      	beq.n	8004838 <TIM_TI1_SetConfig+0x40>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4a1c      	ldr	r2, [pc, #112]	; (80048a4 <TIM_TI1_SetConfig+0xac>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d101      	bne.n	800483c <TIM_TI1_SetConfig+0x44>
 8004838:	2301      	movs	r3, #1
 800483a:	e000      	b.n	800483e <TIM_TI1_SetConfig+0x46>
 800483c:	2300      	movs	r3, #0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d008      	beq.n	8004854 <TIM_TI1_SetConfig+0x5c>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2203      	movs	r2, #3
 8004846:	4393      	bics	r3, r2
 8004848:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4313      	orrs	r3, r2
 8004850:	617b      	str	r3, [r7, #20]
 8004852:	e003      	b.n	800485c <TIM_TI1_SetConfig+0x64>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	2201      	movs	r2, #1
 8004858:	4313      	orrs	r3, r2
 800485a:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	22f0      	movs	r2, #240	; 0xf0
 8004860:	4393      	bics	r3, r2
 8004862:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	011b      	lsls	r3, r3, #4
 8004868:	22ff      	movs	r2, #255	; 0xff
 800486a:	4013      	ands	r3, r2
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	220a      	movs	r2, #10
 8004876:	4393      	bics	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	220a      	movs	r2, #10
 800487e:	4013      	ands	r3, r2
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	621a      	str	r2, [r3, #32]
}
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	46bd      	mov	sp, r7
 8004896:	b006      	add	sp, #24
 8004898:	bd80      	pop	{r7, pc}
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	40012c00 	.word	0x40012c00
 80048a0:	40000400 	.word	0x40000400
 80048a4:	40014000 	.word	0x40014000

080048a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	2201      	movs	r2, #1
 80048c0:	4393      	bics	r3, r2
 80048c2:	001a      	movs	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	22f0      	movs	r2, #240	; 0xf0
 80048d2:	4393      	bics	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	220a      	movs	r2, #10
 80048e4:	4393      	bics	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	621a      	str	r2, [r3, #32]
}
 80048fc:	46c0      	nop			; (mov r8, r8)
 80048fe:	46bd      	mov	sp, r7
 8004900:	b006      	add	sp, #24
 8004902:	bd80      	pop	{r7, pc}

08004904 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	2210      	movs	r2, #16
 8004918:	4393      	bics	r3, r2
 800491a:	001a      	movs	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	4a14      	ldr	r2, [pc, #80]	; (8004980 <TIM_TI2_SetConfig+0x7c>)
 8004930:	4013      	ands	r3, r2
 8004932:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	021b      	lsls	r3, r3, #8
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	4313      	orrs	r3, r2
 800493c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	4a10      	ldr	r2, [pc, #64]	; (8004984 <TIM_TI2_SetConfig+0x80>)
 8004942:	4013      	ands	r3, r2
 8004944:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	031b      	lsls	r3, r3, #12
 800494a:	041b      	lsls	r3, r3, #16
 800494c:	0c1b      	lsrs	r3, r3, #16
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	4313      	orrs	r3, r2
 8004952:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	22a0      	movs	r2, #160	; 0xa0
 8004958:	4393      	bics	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	011b      	lsls	r3, r3, #4
 8004960:	22a0      	movs	r2, #160	; 0xa0
 8004962:	4013      	ands	r3, r2
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	621a      	str	r2, [r3, #32]
}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	46bd      	mov	sp, r7
 800497a:	b006      	add	sp, #24
 800497c:	bd80      	pop	{r7, pc}
 800497e:	46c0      	nop			; (mov r8, r8)
 8004980:	fffffcff 	.word	0xfffffcff
 8004984:	ffff0fff 	.word	0xffff0fff

08004988 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	2210      	movs	r2, #16
 800499a:	4393      	bics	r3, r2
 800499c:	001a      	movs	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	4a0d      	ldr	r2, [pc, #52]	; (80049e8 <TIM_TI2_ConfigInputStage+0x60>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	031b      	lsls	r3, r3, #12
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4313      	orrs	r3, r2
 80049be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	22a0      	movs	r2, #160	; 0xa0
 80049c4:	4393      	bics	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	621a      	str	r2, [r3, #32]
}
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	46bd      	mov	sp, r7
 80049e2:	b006      	add	sp, #24
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	ffff0fff 	.word	0xffff0fff

080049ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	4a19      	ldr	r2, [pc, #100]	; (8004a64 <TIM_TI3_SetConfig+0x78>)
 8004a00:	401a      	ands	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2203      	movs	r2, #3
 8004a16:	4393      	bics	r3, r2
 8004a18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	22f0      	movs	r2, #240	; 0xf0
 8004a26:	4393      	bics	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	011b      	lsls	r3, r3, #4
 8004a2e:	22ff      	movs	r2, #255	; 0xff
 8004a30:	4013      	ands	r3, r2
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4a0b      	ldr	r2, [pc, #44]	; (8004a68 <TIM_TI3_SetConfig+0x7c>)
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	021a      	lsls	r2, r3, #8
 8004a44:	23a0      	movs	r3, #160	; 0xa0
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	4013      	ands	r3, r2
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	621a      	str	r2, [r3, #32]
}
 8004a5c:	46c0      	nop			; (mov r8, r8)
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	b006      	add	sp, #24
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	fffffeff 	.word	0xfffffeff
 8004a68:	fffff5ff 	.word	0xfffff5ff

08004a6c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ae8 <TIM_TI4_SetConfig+0x7c>)
 8004a80:	401a      	ands	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	4a15      	ldr	r2, [pc, #84]	; (8004aec <TIM_TI4_SetConfig+0x80>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	021b      	lsls	r3, r3, #8
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	4a12      	ldr	r2, [pc, #72]	; (8004af0 <TIM_TI4_SetConfig+0x84>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	031b      	lsls	r3, r3, #12
 8004ab0:	041b      	lsls	r3, r3, #16
 8004ab2:	0c1b      	lsrs	r3, r3, #16
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	4a0d      	ldr	r2, [pc, #52]	; (8004af4 <TIM_TI4_SetConfig+0x88>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	031a      	lsls	r2, r3, #12
 8004ac6:	23a0      	movs	r3, #160	; 0xa0
 8004ac8:	021b      	lsls	r3, r3, #8
 8004aca:	4013      	ands	r3, r2
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	621a      	str	r2, [r3, #32]
}
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	b006      	add	sp, #24
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	ffffefff 	.word	0xffffefff
 8004aec:	fffffcff 	.word	0xfffffcff
 8004af0:	ffff0fff 	.word	0xffff0fff
 8004af4:	ffff5fff 	.word	0xffff5fff

08004af8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4a08      	ldr	r2, [pc, #32]	; (8004b2c <TIM_ITRx_SetConfig+0x34>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	2207      	movs	r2, #7
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	609a      	str	r2, [r3, #8]
}
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	46bd      	mov	sp, r7
 8004b26:	b004      	add	sp, #16
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	ffcfff8f 	.word	0xffcfff8f

08004b30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	4a09      	ldr	r2, [pc, #36]	; (8004b6c <TIM_ETR_SetConfig+0x3c>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	021a      	lsls	r2, r3, #8
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	431a      	orrs	r2, r3
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	609a      	str	r2, [r3, #8]
}
 8004b64:	46c0      	nop			; (mov r8, r8)
 8004b66:	46bd      	mov	sp, r7
 8004b68:	b006      	add	sp, #24
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	ffff00ff 	.word	0xffff00ff

08004b70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	223c      	movs	r2, #60	; 0x3c
 8004b7e:	5c9b      	ldrb	r3, [r3, r2]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e04f      	b.n	8004c28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	223c      	movs	r2, #60	; 0x3c
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	223d      	movs	r2, #61	; 0x3d
 8004b94:	2102      	movs	r1, #2
 8004b96:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a20      	ldr	r2, [pc, #128]	; (8004c30 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d108      	bne.n	8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4a1f      	ldr	r2, [pc, #124]	; (8004c34 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2270      	movs	r2, #112	; 0x70
 8004bc8:	4393      	bics	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a13      	ldr	r2, [pc, #76]	; (8004c30 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d009      	beq.n	8004bfc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a12      	ldr	r2, [pc, #72]	; (8004c38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d004      	beq.n	8004bfc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a11      	ldr	r2, [pc, #68]	; (8004c3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d10c      	bne.n	8004c16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	2280      	movs	r2, #128	; 0x80
 8004c00:	4393      	bics	r3, r2
 8004c02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	223d      	movs	r2, #61	; 0x3d
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	223c      	movs	r2, #60	; 0x3c
 8004c22:	2100      	movs	r1, #0
 8004c24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	0018      	movs	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	b004      	add	sp, #16
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40012c00 	.word	0x40012c00
 8004c34:	ff0fffff 	.word	0xff0fffff
 8004c38:	40000400 	.word	0x40000400
 8004c3c:	40014000 	.word	0x40014000

08004c40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	223c      	movs	r2, #60	; 0x3c
 8004c52:	5c9b      	ldrb	r3, [r3, r2]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e079      	b.n	8004d50 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	223c      	movs	r2, #60	; 0x3c
 8004c60:	2101      	movs	r1, #1
 8004c62:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	22ff      	movs	r2, #255	; 0xff
 8004c68:	4393      	bics	r3, r2
 8004c6a:	001a      	movs	r2, r3
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4a38      	ldr	r2, [pc, #224]	; (8004d58 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004c78:	401a      	ands	r2, r3
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4a35      	ldr	r2, [pc, #212]	; (8004d5c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004c86:	401a      	ands	r2, r3
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4a33      	ldr	r2, [pc, #204]	; (8004d60 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004c94:	401a      	ands	r2, r3
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4a30      	ldr	r2, [pc, #192]	; (8004d64 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004ca2:	401a      	ands	r2, r3
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4a2e      	ldr	r2, [pc, #184]	; (8004d68 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004cb0:	401a      	ands	r2, r3
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4a2b      	ldr	r2, [pc, #172]	; (8004d6c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004cbe:	401a      	ands	r2, r3
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4a29      	ldr	r2, [pc, #164]	; (8004d70 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004ccc:	401a      	ands	r2, r3
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	041b      	lsls	r3, r3, #16
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a25      	ldr	r2, [pc, #148]	; (8004d74 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d106      	bne.n	8004cf0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4a24      	ldr	r2, [pc, #144]	; (8004d78 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004ce6:	401a      	ands	r2, r3
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1f      	ldr	r2, [pc, #124]	; (8004d74 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d121      	bne.n	8004d3e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	4a1f      	ldr	r2, [pc, #124]	; (8004d7c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004cfe:	401a      	ands	r2, r3
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d04:	051b      	lsls	r3, r3, #20
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4a1c      	ldr	r2, [pc, #112]	; (8004d80 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8004d0e:	401a      	ands	r2, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4a1a      	ldr	r2, [pc, #104]	; (8004d84 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8004d1c:	401a      	ands	r2, r3
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a12      	ldr	r2, [pc, #72]	; (8004d74 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d106      	bne.n	8004d3e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4a15      	ldr	r2, [pc, #84]	; (8004d88 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8004d34:	401a      	ands	r2, r3
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	223c      	movs	r2, #60	; 0x3c
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	0018      	movs	r0, r3
 8004d52:	46bd      	mov	sp, r7
 8004d54:	b004      	add	sp, #16
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	fffffcff 	.word	0xfffffcff
 8004d5c:	fffffbff 	.word	0xfffffbff
 8004d60:	fffff7ff 	.word	0xfffff7ff
 8004d64:	ffffefff 	.word	0xffffefff
 8004d68:	ffffdfff 	.word	0xffffdfff
 8004d6c:	ffffbfff 	.word	0xffffbfff
 8004d70:	fff0ffff 	.word	0xfff0ffff
 8004d74:	40012c00 	.word	0x40012c00
 8004d78:	efffffff 	.word	0xefffffff
 8004d7c:	ff0fffff 	.word	0xff0fffff
 8004d80:	feffffff 	.word	0xfeffffff
 8004d84:	fdffffff 	.word	0xfdffffff
 8004d88:	dfffffff 	.word	0xdfffffff

08004d8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e046      	b.n	8004e2c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2288      	movs	r2, #136	; 0x88
 8004da2:	589b      	ldr	r3, [r3, r2]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d107      	bne.n	8004db8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2284      	movs	r2, #132	; 0x84
 8004dac:	2100      	movs	r1, #0
 8004dae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	0018      	movs	r0, r3
 8004db4:	f7fd fab6 	bl	8002324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2288      	movs	r2, #136	; 0x88
 8004dbc:	2124      	movs	r1, #36	; 0x24
 8004dbe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2101      	movs	r1, #1
 8004dcc:	438a      	bics	r2, r1
 8004dce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	f000 fab0 	bl	8005338 <UART_SetConfig>
 8004dd8:	0003      	movs	r3, r0
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e024      	b.n	8004e2c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	0018      	movs	r0, r3
 8004dee:	f000 fc47 	bl	8005680 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	490d      	ldr	r1, [pc, #52]	; (8004e34 <HAL_UART_Init+0xa8>)
 8004dfe:	400a      	ands	r2, r1
 8004e00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	212a      	movs	r1, #42	; 0x2a
 8004e0e:	438a      	bics	r2, r1
 8004e10:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	0018      	movs	r0, r3
 8004e26:	f000 fcdf 	bl	80057e8 <UART_CheckIdleState>
 8004e2a:	0003      	movs	r3, r0
}
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	b002      	add	sp, #8
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	ffffb7ff 	.word	0xffffb7ff

08004e38 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e04e      	b.n	8004ee8 <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2288      	movs	r2, #136	; 0x88
 8004e4e:	589b      	ldr	r3, [r3, r2]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d107      	bne.n	8004e64 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2284      	movs	r2, #132	; 0x84
 8004e58:	2100      	movs	r1, #0
 8004e5a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	0018      	movs	r0, r3
 8004e60:	f7fd fa60 	bl	8002324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2288      	movs	r2, #136	; 0x88
 8004e68:	2124      	movs	r1, #36	; 0x24
 8004e6a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2101      	movs	r1, #1
 8004e78:	438a      	bics	r2, r1
 8004e7a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	0018      	movs	r0, r3
 8004e80:	f000 fa5a 	bl	8005338 <UART_SetConfig>
 8004e84:	0003      	movs	r3, r0
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d101      	bne.n	8004e8e <HAL_HalfDuplex_Init+0x56>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e02c      	b.n	8004ee8 <HAL_HalfDuplex_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_HalfDuplex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	0018      	movs	r0, r3
 8004e9a:	f000 fbf1 	bl	8005680 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4911      	ldr	r1, [pc, #68]	; (8004ef0 <HAL_HalfDuplex_Init+0xb8>)
 8004eaa:	400a      	ands	r2, r1
 8004eac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2122      	movs	r1, #34	; 0x22
 8004eba:	438a      	bics	r2, r1
 8004ebc:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2108      	movs	r1, #8
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2101      	movs	r1, #1
 8004eda:	430a      	orrs	r2, r1
 8004edc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f000 fc81 	bl	80057e8 <UART_CheckIdleState>
 8004ee6:	0003      	movs	r3, r0
}
 8004ee8:	0018      	movs	r0, r3
 8004eea:	46bd      	mov	sp, r7
 8004eec:	b002      	add	sp, #8
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	ffffb7ff 	.word	0xffffb7ff

08004ef4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08a      	sub	sp, #40	; 0x28
 8004ef8:	af02      	add	r7, sp, #8
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	1dbb      	adds	r3, r7, #6
 8004f02:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2288      	movs	r2, #136	; 0x88
 8004f08:	589b      	ldr	r3, [r3, r2]
 8004f0a:	2b20      	cmp	r3, #32
 8004f0c:	d000      	beq.n	8004f10 <HAL_UART_Transmit+0x1c>
 8004f0e:	e088      	b.n	8005022 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <HAL_UART_Transmit+0x2a>
 8004f16:	1dbb      	adds	r3, r7, #6
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e080      	b.n	8005024 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	2380      	movs	r3, #128	; 0x80
 8004f28:	015b      	lsls	r3, r3, #5
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d109      	bne.n	8004f42 <HAL_UART_Transmit+0x4e>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d105      	bne.n	8004f42 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	d001      	beq.n	8004f42 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e070      	b.n	8005024 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2290      	movs	r2, #144	; 0x90
 8004f46:	2100      	movs	r1, #0
 8004f48:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2288      	movs	r2, #136	; 0x88
 8004f4e:	2121      	movs	r1, #33	; 0x21
 8004f50:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f52:	f7fd fd31 	bl	80029b8 <HAL_GetTick>
 8004f56:	0003      	movs	r3, r0
 8004f58:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	1dba      	adds	r2, r7, #6
 8004f5e:	2154      	movs	r1, #84	; 0x54
 8004f60:	8812      	ldrh	r2, [r2, #0]
 8004f62:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	1dba      	adds	r2, r7, #6
 8004f68:	2156      	movs	r1, #86	; 0x56
 8004f6a:	8812      	ldrh	r2, [r2, #0]
 8004f6c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	2380      	movs	r3, #128	; 0x80
 8004f74:	015b      	lsls	r3, r3, #5
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d108      	bne.n	8004f8c <HAL_UART_Transmit+0x98>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d104      	bne.n	8004f8c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004f82:	2300      	movs	r3, #0
 8004f84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	61bb      	str	r3, [r7, #24]
 8004f8a:	e003      	b.n	8004f94 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f90:	2300      	movs	r3, #0
 8004f92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f94:	e02c      	b.n	8004ff0 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	0013      	movs	r3, r2
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	2180      	movs	r1, #128	; 0x80
 8004fa4:	f000 fc6e 	bl	8005884 <UART_WaitOnFlagUntilTimeout>
 8004fa8:	1e03      	subs	r3, r0, #0
 8004faa:	d001      	beq.n	8004fb0 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e039      	b.n	8005024 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10b      	bne.n	8004fce <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	881b      	ldrh	r3, [r3, #0]
 8004fba:	001a      	movs	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	05d2      	lsls	r2, r2, #23
 8004fc2:	0dd2      	lsrs	r2, r2, #23
 8004fc4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	3302      	adds	r3, #2
 8004fca:	61bb      	str	r3, [r7, #24]
 8004fcc:	e007      	b.n	8004fde <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	781a      	ldrb	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2256      	movs	r2, #86	; 0x56
 8004fe2:	5a9b      	ldrh	r3, [r3, r2]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	b299      	uxth	r1, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2256      	movs	r2, #86	; 0x56
 8004fee:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2256      	movs	r2, #86	; 0x56
 8004ff4:	5a9b      	ldrh	r3, [r3, r2]
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1cc      	bne.n	8004f96 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	0013      	movs	r3, r2
 8005006:	2200      	movs	r2, #0
 8005008:	2140      	movs	r1, #64	; 0x40
 800500a:	f000 fc3b 	bl	8005884 <UART_WaitOnFlagUntilTimeout>
 800500e:	1e03      	subs	r3, r0, #0
 8005010:	d001      	beq.n	8005016 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e006      	b.n	8005024 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2288      	movs	r2, #136	; 0x88
 800501a:	2120      	movs	r1, #32
 800501c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	e000      	b.n	8005024 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8005022:	2302      	movs	r3, #2
  }
}
 8005024:	0018      	movs	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	b008      	add	sp, #32
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b08a      	sub	sp, #40	; 0x28
 8005030:	af02      	add	r7, sp, #8
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	603b      	str	r3, [r7, #0]
 8005038:	1dbb      	adds	r3, r7, #6
 800503a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	228c      	movs	r2, #140	; 0x8c
 8005040:	589b      	ldr	r3, [r3, r2]
 8005042:	2b20      	cmp	r3, #32
 8005044:	d000      	beq.n	8005048 <HAL_UART_Receive+0x1c>
 8005046:	e0cc      	b.n	80051e2 <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_UART_Receive+0x2a>
 800504e:	1dbb      	adds	r3, r7, #6
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e0c4      	b.n	80051e4 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	2380      	movs	r3, #128	; 0x80
 8005060:	015b      	lsls	r3, r3, #5
 8005062:	429a      	cmp	r2, r3
 8005064:	d109      	bne.n	800507a <HAL_UART_Receive+0x4e>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d105      	bne.n	800507a <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2201      	movs	r2, #1
 8005072:	4013      	ands	r3, r2
 8005074:	d001      	beq.n	800507a <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e0b4      	b.n	80051e4 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2290      	movs	r2, #144	; 0x90
 800507e:	2100      	movs	r1, #0
 8005080:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	228c      	movs	r2, #140	; 0x8c
 8005086:	2122      	movs	r1, #34	; 0x22
 8005088:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005090:	f7fd fc92 	bl	80029b8 <HAL_GetTick>
 8005094:	0003      	movs	r3, r0
 8005096:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	1dba      	adds	r2, r7, #6
 800509c:	215c      	movs	r1, #92	; 0x5c
 800509e:	8812      	ldrh	r2, [r2, #0]
 80050a0:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	1dba      	adds	r2, r7, #6
 80050a6:	215e      	movs	r1, #94	; 0x5e
 80050a8:	8812      	ldrh	r2, [r2, #0]
 80050aa:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	2380      	movs	r3, #128	; 0x80
 80050b2:	015b      	lsls	r3, r3, #5
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d10d      	bne.n	80050d4 <HAL_UART_Receive+0xa8>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d104      	bne.n	80050ca <HAL_UART_Receive+0x9e>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2260      	movs	r2, #96	; 0x60
 80050c4:	4949      	ldr	r1, [pc, #292]	; (80051ec <HAL_UART_Receive+0x1c0>)
 80050c6:	5299      	strh	r1, [r3, r2]
 80050c8:	e02e      	b.n	8005128 <HAL_UART_Receive+0xfc>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2260      	movs	r2, #96	; 0x60
 80050ce:	21ff      	movs	r1, #255	; 0xff
 80050d0:	5299      	strh	r1, [r3, r2]
 80050d2:	e029      	b.n	8005128 <HAL_UART_Receive+0xfc>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10d      	bne.n	80050f8 <HAL_UART_Receive+0xcc>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d104      	bne.n	80050ee <HAL_UART_Receive+0xc2>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2260      	movs	r2, #96	; 0x60
 80050e8:	21ff      	movs	r1, #255	; 0xff
 80050ea:	5299      	strh	r1, [r3, r2]
 80050ec:	e01c      	b.n	8005128 <HAL_UART_Receive+0xfc>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2260      	movs	r2, #96	; 0x60
 80050f2:	217f      	movs	r1, #127	; 0x7f
 80050f4:	5299      	strh	r1, [r3, r2]
 80050f6:	e017      	b.n	8005128 <HAL_UART_Receive+0xfc>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	2380      	movs	r3, #128	; 0x80
 80050fe:	055b      	lsls	r3, r3, #21
 8005100:	429a      	cmp	r2, r3
 8005102:	d10d      	bne.n	8005120 <HAL_UART_Receive+0xf4>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d104      	bne.n	8005116 <HAL_UART_Receive+0xea>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2260      	movs	r2, #96	; 0x60
 8005110:	217f      	movs	r1, #127	; 0x7f
 8005112:	5299      	strh	r1, [r3, r2]
 8005114:	e008      	b.n	8005128 <HAL_UART_Receive+0xfc>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2260      	movs	r2, #96	; 0x60
 800511a:	213f      	movs	r1, #63	; 0x3f
 800511c:	5299      	strh	r1, [r3, r2]
 800511e:	e003      	b.n	8005128 <HAL_UART_Receive+0xfc>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2260      	movs	r2, #96	; 0x60
 8005124:	2100      	movs	r1, #0
 8005126:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005128:	2312      	movs	r3, #18
 800512a:	18fb      	adds	r3, r7, r3
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	2160      	movs	r1, #96	; 0x60
 8005130:	5a52      	ldrh	r2, [r2, r1]
 8005132:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	2380      	movs	r3, #128	; 0x80
 800513a:	015b      	lsls	r3, r3, #5
 800513c:	429a      	cmp	r2, r3
 800513e:	d108      	bne.n	8005152 <HAL_UART_Receive+0x126>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d104      	bne.n	8005152 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8005148:	2300      	movs	r3, #0
 800514a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	61bb      	str	r3, [r7, #24]
 8005150:	e003      	b.n	800515a <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005156:	2300      	movs	r3, #0
 8005158:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800515a:	e036      	b.n	80051ca <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	0013      	movs	r3, r2
 8005166:	2200      	movs	r2, #0
 8005168:	2120      	movs	r1, #32
 800516a:	f000 fb8b 	bl	8005884 <UART_WaitOnFlagUntilTimeout>
 800516e:	1e03      	subs	r3, r0, #0
 8005170:	d001      	beq.n	8005176 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e036      	b.n	80051e4 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10e      	bne.n	800519a <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	b29b      	uxth	r3, r3
 8005184:	2212      	movs	r2, #18
 8005186:	18ba      	adds	r2, r7, r2
 8005188:	8812      	ldrh	r2, [r2, #0]
 800518a:	4013      	ands	r3, r2
 800518c:	b29a      	uxth	r2, r3
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	3302      	adds	r3, #2
 8005196:	61bb      	str	r3, [r7, #24]
 8005198:	e00e      	b.n	80051b8 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2212      	movs	r2, #18
 80051a4:	18ba      	adds	r2, r7, r2
 80051a6:	8812      	ldrh	r2, [r2, #0]
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	4013      	ands	r3, r2
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	3301      	adds	r3, #1
 80051b6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	225e      	movs	r2, #94	; 0x5e
 80051bc:	5a9b      	ldrh	r3, [r3, r2]
 80051be:	b29b      	uxth	r3, r3
 80051c0:	3b01      	subs	r3, #1
 80051c2:	b299      	uxth	r1, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	225e      	movs	r2, #94	; 0x5e
 80051c8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	225e      	movs	r2, #94	; 0x5e
 80051ce:	5a9b      	ldrh	r3, [r3, r2]
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1c2      	bne.n	800515c <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	228c      	movs	r2, #140	; 0x8c
 80051da:	2120      	movs	r1, #32
 80051dc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	e000      	b.n	80051e4 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 80051e2:	2302      	movs	r3, #2
  }
}
 80051e4:	0018      	movs	r0, r3
 80051e6:	46bd      	mov	sp, r7
 80051e8:	b008      	add	sp, #32
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	000001ff 	.word	0x000001ff

080051f0 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08a      	sub	sp, #40	; 0x28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2284      	movs	r2, #132	; 0x84
 80051fc:	5c9b      	ldrb	r3, [r3, r2]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d101      	bne.n	8005206 <HAL_HalfDuplex_EnableTransmitter+0x16>
 8005202:	2302      	movs	r3, #2
 8005204:	e042      	b.n	800528c <HAL_HalfDuplex_EnableTransmitter+0x9c>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2284      	movs	r2, #132	; 0x84
 800520a:	2101      	movs	r1, #1
 800520c:	5499      	strb	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_BUSY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2288      	movs	r2, #136	; 0x88
 8005212:	2124      	movs	r1, #36	; 0x24
 8005214:	5099      	str	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005216:	f3ef 8310 	mrs	r3, PRIMASK
 800521a:	60bb      	str	r3, [r7, #8]
  return(result);
 800521c:	68bb      	ldr	r3, [r7, #8]

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
 8005220:	2301      	movs	r3, #1
 8005222:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f383 8810 	msr	PRIMASK, r3
}
 800522a:	46c0      	nop			; (mov r8, r8)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	210c      	movs	r1, #12
 8005238:	438a      	bics	r2, r1
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f383 8810 	msr	PRIMASK, r3
}
 8005246:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005248:	f3ef 8310 	mrs	r3, PRIMASK
 800524c:	617b      	str	r3, [r7, #20]
  return(result);
 800524e:	697b      	ldr	r3, [r7, #20]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8005250:	623b      	str	r3, [r7, #32]
 8005252:	2301      	movs	r3, #1
 8005254:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	f383 8810 	msr	PRIMASK, r3
}
 800525c:	46c0      	nop			; (mov r8, r8)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2108      	movs	r1, #8
 800526a:	430a      	orrs	r2, r1
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	6a3b      	ldr	r3, [r7, #32]
 8005270:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	f383 8810 	msr	PRIMASK, r3
}
 8005278:	46c0      	nop			; (mov r8, r8)

  huart->gState = HAL_UART_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2288      	movs	r2, #136	; 0x88
 800527e:	2120      	movs	r1, #32
 8005280:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2284      	movs	r2, #132	; 0x84
 8005286:	2100      	movs	r1, #0
 8005288:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	0018      	movs	r0, r3
 800528e:	46bd      	mov	sp, r7
 8005290:	b00a      	add	sp, #40	; 0x28
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08a      	sub	sp, #40	; 0x28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2284      	movs	r2, #132	; 0x84
 80052a0:	5c9b      	ldrb	r3, [r3, r2]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d101      	bne.n	80052aa <HAL_HalfDuplex_EnableReceiver+0x16>
 80052a6:	2302      	movs	r3, #2
 80052a8:	e042      	b.n	8005330 <HAL_HalfDuplex_EnableReceiver+0x9c>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2284      	movs	r2, #132	; 0x84
 80052ae:	2101      	movs	r1, #1
 80052b0:	5499      	strb	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_BUSY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2288      	movs	r2, #136	; 0x88
 80052b6:	2124      	movs	r1, #36	; 0x24
 80052b8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ba:	f3ef 8310 	mrs	r3, PRIMASK
 80052be:	60bb      	str	r3, [r7, #8]
  return(result);
 80052c0:	68bb      	ldr	r3, [r7, #8]

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80052c2:	627b      	str	r3, [r7, #36]	; 0x24
 80052c4:	2301      	movs	r3, #1
 80052c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f383 8810 	msr	PRIMASK, r3
}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	210c      	movs	r1, #12
 80052dc:	438a      	bics	r2, r1
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	f383 8810 	msr	PRIMASK, r3
}
 80052ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ec:	f3ef 8310 	mrs	r3, PRIMASK
 80052f0:	617b      	str	r3, [r7, #20]
  return(result);
 80052f2:	697b      	ldr	r3, [r7, #20]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 80052f4:	623b      	str	r3, [r7, #32]
 80052f6:	2301      	movs	r3, #1
 80052f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	f383 8810 	msr	PRIMASK, r3
}
 8005300:	46c0      	nop			; (mov r8, r8)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2104      	movs	r1, #4
 800530e:	430a      	orrs	r2, r1
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	f383 8810 	msr	PRIMASK, r3
}
 800531c:	46c0      	nop			; (mov r8, r8)

  huart->gState = HAL_UART_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2288      	movs	r2, #136	; 0x88
 8005322:	2120      	movs	r1, #32
 8005324:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2284      	movs	r2, #132	; 0x84
 800532a:	2100      	movs	r1, #0
 800532c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	0018      	movs	r0, r3
 8005332:	46bd      	mov	sp, r7
 8005334:	b00a      	add	sp, #40	; 0x28
 8005336:	bd80      	pop	{r7, pc}

08005338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b088      	sub	sp, #32
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005340:	231a      	movs	r3, #26
 8005342:	18fb      	adds	r3, r7, r3
 8005344:	2200      	movs	r2, #0
 8005346:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	431a      	orrs	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	4313      	orrs	r3, r2
 800535e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4abc      	ldr	r2, [pc, #752]	; (8005658 <UART_SetConfig+0x320>)
 8005368:	4013      	ands	r3, r2
 800536a:	0019      	movs	r1, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	69fa      	ldr	r2, [r7, #28]
 8005372:	430a      	orrs	r2, r1
 8005374:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	4ab7      	ldr	r2, [pc, #732]	; (800565c <UART_SetConfig+0x324>)
 800537e:	4013      	ands	r3, r2
 8005380:	0019      	movs	r1, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	69fa      	ldr	r2, [r7, #28]
 800539a:	4313      	orrs	r3, r2
 800539c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	4aae      	ldr	r2, [pc, #696]	; (8005660 <UART_SetConfig+0x328>)
 80053a6:	4013      	ands	r3, r2
 80053a8:	0019      	movs	r1, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ba:	220f      	movs	r2, #15
 80053bc:	4393      	bics	r3, r2
 80053be:	0019      	movs	r1, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	430a      	orrs	r2, r1
 80053ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4aa4      	ldr	r2, [pc, #656]	; (8005664 <UART_SetConfig+0x32c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d127      	bne.n	8005426 <UART_SetConfig+0xee>
 80053d6:	4ba4      	ldr	r3, [pc, #656]	; (8005668 <UART_SetConfig+0x330>)
 80053d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053da:	2203      	movs	r2, #3
 80053dc:	4013      	ands	r3, r2
 80053de:	2b03      	cmp	r3, #3
 80053e0:	d017      	beq.n	8005412 <UART_SetConfig+0xda>
 80053e2:	d81b      	bhi.n	800541c <UART_SetConfig+0xe4>
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d00a      	beq.n	80053fe <UART_SetConfig+0xc6>
 80053e8:	d818      	bhi.n	800541c <UART_SetConfig+0xe4>
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <UART_SetConfig+0xbc>
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d00a      	beq.n	8005408 <UART_SetConfig+0xd0>
 80053f2:	e013      	b.n	800541c <UART_SetConfig+0xe4>
 80053f4:	231b      	movs	r3, #27
 80053f6:	18fb      	adds	r3, r7, r3
 80053f8:	2200      	movs	r2, #0
 80053fa:	701a      	strb	r2, [r3, #0]
 80053fc:	e058      	b.n	80054b0 <UART_SetConfig+0x178>
 80053fe:	231b      	movs	r3, #27
 8005400:	18fb      	adds	r3, r7, r3
 8005402:	2202      	movs	r2, #2
 8005404:	701a      	strb	r2, [r3, #0]
 8005406:	e053      	b.n	80054b0 <UART_SetConfig+0x178>
 8005408:	231b      	movs	r3, #27
 800540a:	18fb      	adds	r3, r7, r3
 800540c:	2204      	movs	r2, #4
 800540e:	701a      	strb	r2, [r3, #0]
 8005410:	e04e      	b.n	80054b0 <UART_SetConfig+0x178>
 8005412:	231b      	movs	r3, #27
 8005414:	18fb      	adds	r3, r7, r3
 8005416:	2208      	movs	r2, #8
 8005418:	701a      	strb	r2, [r3, #0]
 800541a:	e049      	b.n	80054b0 <UART_SetConfig+0x178>
 800541c:	231b      	movs	r3, #27
 800541e:	18fb      	adds	r3, r7, r3
 8005420:	2210      	movs	r2, #16
 8005422:	701a      	strb	r2, [r3, #0]
 8005424:	e044      	b.n	80054b0 <UART_SetConfig+0x178>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a90      	ldr	r2, [pc, #576]	; (800566c <UART_SetConfig+0x334>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d127      	bne.n	8005480 <UART_SetConfig+0x148>
 8005430:	4b8d      	ldr	r3, [pc, #564]	; (8005668 <UART_SetConfig+0x330>)
 8005432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005434:	220c      	movs	r2, #12
 8005436:	4013      	ands	r3, r2
 8005438:	2b0c      	cmp	r3, #12
 800543a:	d017      	beq.n	800546c <UART_SetConfig+0x134>
 800543c:	d81b      	bhi.n	8005476 <UART_SetConfig+0x13e>
 800543e:	2b08      	cmp	r3, #8
 8005440:	d00a      	beq.n	8005458 <UART_SetConfig+0x120>
 8005442:	d818      	bhi.n	8005476 <UART_SetConfig+0x13e>
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <UART_SetConfig+0x116>
 8005448:	2b04      	cmp	r3, #4
 800544a:	d00a      	beq.n	8005462 <UART_SetConfig+0x12a>
 800544c:	e013      	b.n	8005476 <UART_SetConfig+0x13e>
 800544e:	231b      	movs	r3, #27
 8005450:	18fb      	adds	r3, r7, r3
 8005452:	2200      	movs	r2, #0
 8005454:	701a      	strb	r2, [r3, #0]
 8005456:	e02b      	b.n	80054b0 <UART_SetConfig+0x178>
 8005458:	231b      	movs	r3, #27
 800545a:	18fb      	adds	r3, r7, r3
 800545c:	2202      	movs	r2, #2
 800545e:	701a      	strb	r2, [r3, #0]
 8005460:	e026      	b.n	80054b0 <UART_SetConfig+0x178>
 8005462:	231b      	movs	r3, #27
 8005464:	18fb      	adds	r3, r7, r3
 8005466:	2204      	movs	r2, #4
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	e021      	b.n	80054b0 <UART_SetConfig+0x178>
 800546c:	231b      	movs	r3, #27
 800546e:	18fb      	adds	r3, r7, r3
 8005470:	2208      	movs	r2, #8
 8005472:	701a      	strb	r2, [r3, #0]
 8005474:	e01c      	b.n	80054b0 <UART_SetConfig+0x178>
 8005476:	231b      	movs	r3, #27
 8005478:	18fb      	adds	r3, r7, r3
 800547a:	2210      	movs	r2, #16
 800547c:	701a      	strb	r2, [r3, #0]
 800547e:	e017      	b.n	80054b0 <UART_SetConfig+0x178>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a7a      	ldr	r2, [pc, #488]	; (8005670 <UART_SetConfig+0x338>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d104      	bne.n	8005494 <UART_SetConfig+0x15c>
 800548a:	231b      	movs	r3, #27
 800548c:	18fb      	adds	r3, r7, r3
 800548e:	2200      	movs	r2, #0
 8005490:	701a      	strb	r2, [r3, #0]
 8005492:	e00d      	b.n	80054b0 <UART_SetConfig+0x178>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a76      	ldr	r2, [pc, #472]	; (8005674 <UART_SetConfig+0x33c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d104      	bne.n	80054a8 <UART_SetConfig+0x170>
 800549e:	231b      	movs	r3, #27
 80054a0:	18fb      	adds	r3, r7, r3
 80054a2:	2200      	movs	r2, #0
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	e003      	b.n	80054b0 <UART_SetConfig+0x178>
 80054a8:	231b      	movs	r3, #27
 80054aa:	18fb      	adds	r3, r7, r3
 80054ac:	2210      	movs	r2, #16
 80054ae:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	2380      	movs	r3, #128	; 0x80
 80054b6:	021b      	lsls	r3, r3, #8
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d000      	beq.n	80054be <UART_SetConfig+0x186>
 80054bc:	e065      	b.n	800558a <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80054be:	231b      	movs	r3, #27
 80054c0:	18fb      	adds	r3, r7, r3
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d015      	beq.n	80054f4 <UART_SetConfig+0x1bc>
 80054c8:	dc18      	bgt.n	80054fc <UART_SetConfig+0x1c4>
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d00d      	beq.n	80054ea <UART_SetConfig+0x1b2>
 80054ce:	dc15      	bgt.n	80054fc <UART_SetConfig+0x1c4>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <UART_SetConfig+0x1a2>
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d005      	beq.n	80054e4 <UART_SetConfig+0x1ac>
 80054d8:	e010      	b.n	80054fc <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054da:	f7fe f97f 	bl	80037dc <HAL_RCC_GetPCLK1Freq>
 80054de:	0003      	movs	r3, r0
 80054e0:	617b      	str	r3, [r7, #20]
        break;
 80054e2:	e012      	b.n	800550a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054e4:	4b64      	ldr	r3, [pc, #400]	; (8005678 <UART_SetConfig+0x340>)
 80054e6:	617b      	str	r3, [r7, #20]
        break;
 80054e8:	e00f      	b.n	800550a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ea:	f7fe f8eb 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 80054ee:	0003      	movs	r3, r0
 80054f0:	617b      	str	r3, [r7, #20]
        break;
 80054f2:	e00a      	b.n	800550a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054f4:	2380      	movs	r3, #128	; 0x80
 80054f6:	021b      	lsls	r3, r3, #8
 80054f8:	617b      	str	r3, [r7, #20]
        break;
 80054fa:	e006      	b.n	800550a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80054fc:	2300      	movs	r3, #0
 80054fe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005500:	231a      	movs	r3, #26
 8005502:	18fb      	adds	r3, r7, r3
 8005504:	2201      	movs	r2, #1
 8005506:	701a      	strb	r2, [r3, #0]
        break;
 8005508:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d100      	bne.n	8005512 <UART_SetConfig+0x1da>
 8005510:	e08d      	b.n	800562e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005516:	4b59      	ldr	r3, [pc, #356]	; (800567c <UART_SetConfig+0x344>)
 8005518:	0052      	lsls	r2, r2, #1
 800551a:	5ad3      	ldrh	r3, [r2, r3]
 800551c:	0019      	movs	r1, r3
 800551e:	6978      	ldr	r0, [r7, #20]
 8005520:	f7fa fe04 	bl	800012c <__udivsi3>
 8005524:	0003      	movs	r3, r0
 8005526:	005a      	lsls	r2, r3, #1
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	085b      	lsrs	r3, r3, #1
 800552e:	18d2      	adds	r2, r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	0019      	movs	r1, r3
 8005536:	0010      	movs	r0, r2
 8005538:	f7fa fdf8 	bl	800012c <__udivsi3>
 800553c:	0003      	movs	r3, r0
 800553e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	2b0f      	cmp	r3, #15
 8005544:	d91c      	bls.n	8005580 <UART_SetConfig+0x248>
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	2380      	movs	r3, #128	; 0x80
 800554a:	025b      	lsls	r3, r3, #9
 800554c:	429a      	cmp	r2, r3
 800554e:	d217      	bcs.n	8005580 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	b29a      	uxth	r2, r3
 8005554:	200e      	movs	r0, #14
 8005556:	183b      	adds	r3, r7, r0
 8005558:	210f      	movs	r1, #15
 800555a:	438a      	bics	r2, r1
 800555c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	085b      	lsrs	r3, r3, #1
 8005562:	b29b      	uxth	r3, r3
 8005564:	2207      	movs	r2, #7
 8005566:	4013      	ands	r3, r2
 8005568:	b299      	uxth	r1, r3
 800556a:	183b      	adds	r3, r7, r0
 800556c:	183a      	adds	r2, r7, r0
 800556e:	8812      	ldrh	r2, [r2, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	183a      	adds	r2, r7, r0
 800557a:	8812      	ldrh	r2, [r2, #0]
 800557c:	60da      	str	r2, [r3, #12]
 800557e:	e056      	b.n	800562e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005580:	231a      	movs	r3, #26
 8005582:	18fb      	adds	r3, r7, r3
 8005584:	2201      	movs	r2, #1
 8005586:	701a      	strb	r2, [r3, #0]
 8005588:	e051      	b.n	800562e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800558a:	231b      	movs	r3, #27
 800558c:	18fb      	adds	r3, r7, r3
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b08      	cmp	r3, #8
 8005592:	d015      	beq.n	80055c0 <UART_SetConfig+0x288>
 8005594:	dc18      	bgt.n	80055c8 <UART_SetConfig+0x290>
 8005596:	2b04      	cmp	r3, #4
 8005598:	d00d      	beq.n	80055b6 <UART_SetConfig+0x27e>
 800559a:	dc15      	bgt.n	80055c8 <UART_SetConfig+0x290>
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <UART_SetConfig+0x26e>
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d005      	beq.n	80055b0 <UART_SetConfig+0x278>
 80055a4:	e010      	b.n	80055c8 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055a6:	f7fe f919 	bl	80037dc <HAL_RCC_GetPCLK1Freq>
 80055aa:	0003      	movs	r3, r0
 80055ac:	617b      	str	r3, [r7, #20]
        break;
 80055ae:	e012      	b.n	80055d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055b0:	4b31      	ldr	r3, [pc, #196]	; (8005678 <UART_SetConfig+0x340>)
 80055b2:	617b      	str	r3, [r7, #20]
        break;
 80055b4:	e00f      	b.n	80055d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055b6:	f7fe f885 	bl	80036c4 <HAL_RCC_GetSysClockFreq>
 80055ba:	0003      	movs	r3, r0
 80055bc:	617b      	str	r3, [r7, #20]
        break;
 80055be:	e00a      	b.n	80055d6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055c0:	2380      	movs	r3, #128	; 0x80
 80055c2:	021b      	lsls	r3, r3, #8
 80055c4:	617b      	str	r3, [r7, #20]
        break;
 80055c6:	e006      	b.n	80055d6 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80055cc:	231a      	movs	r3, #26
 80055ce:	18fb      	adds	r3, r7, r3
 80055d0:	2201      	movs	r2, #1
 80055d2:	701a      	strb	r2, [r3, #0]
        break;
 80055d4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d028      	beq.n	800562e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055e0:	4b26      	ldr	r3, [pc, #152]	; (800567c <UART_SetConfig+0x344>)
 80055e2:	0052      	lsls	r2, r2, #1
 80055e4:	5ad3      	ldrh	r3, [r2, r3]
 80055e6:	0019      	movs	r1, r3
 80055e8:	6978      	ldr	r0, [r7, #20]
 80055ea:	f7fa fd9f 	bl	800012c <__udivsi3>
 80055ee:	0003      	movs	r3, r0
 80055f0:	001a      	movs	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	085b      	lsrs	r3, r3, #1
 80055f8:	18d2      	adds	r2, r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	0019      	movs	r1, r3
 8005600:	0010      	movs	r0, r2
 8005602:	f7fa fd93 	bl	800012c <__udivsi3>
 8005606:	0003      	movs	r3, r0
 8005608:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	2b0f      	cmp	r3, #15
 800560e:	d90a      	bls.n	8005626 <UART_SetConfig+0x2ee>
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	2380      	movs	r3, #128	; 0x80
 8005614:	025b      	lsls	r3, r3, #9
 8005616:	429a      	cmp	r2, r3
 8005618:	d205      	bcs.n	8005626 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	b29a      	uxth	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	60da      	str	r2, [r3, #12]
 8005624:	e003      	b.n	800562e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005626:	231a      	movs	r3, #26
 8005628:	18fb      	adds	r3, r7, r3
 800562a:	2201      	movs	r2, #1
 800562c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	226a      	movs	r2, #106	; 0x6a
 8005632:	2101      	movs	r1, #1
 8005634:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2268      	movs	r2, #104	; 0x68
 800563a:	2101      	movs	r1, #1
 800563c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800564a:	231a      	movs	r3, #26
 800564c:	18fb      	adds	r3, r7, r3
 800564e:	781b      	ldrb	r3, [r3, #0]
}
 8005650:	0018      	movs	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	b008      	add	sp, #32
 8005656:	bd80      	pop	{r7, pc}
 8005658:	cfff69f3 	.word	0xcfff69f3
 800565c:	ffffcfff 	.word	0xffffcfff
 8005660:	11fff4ff 	.word	0x11fff4ff
 8005664:	40013800 	.word	0x40013800
 8005668:	40021000 	.word	0x40021000
 800566c:	40004400 	.word	0x40004400
 8005670:	40004800 	.word	0x40004800
 8005674:	40004c00 	.word	0x40004c00
 8005678:	00f42400 	.word	0x00f42400
 800567c:	08008fd0 	.word	0x08008fd0

08005680 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568c:	2201      	movs	r2, #1
 800568e:	4013      	ands	r3, r2
 8005690:	d00b      	beq.n	80056aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	4a4a      	ldr	r2, [pc, #296]	; (80057c4 <UART_AdvFeatureConfig+0x144>)
 800569a:	4013      	ands	r3, r2
 800569c:	0019      	movs	r1, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ae:	2202      	movs	r2, #2
 80056b0:	4013      	ands	r3, r2
 80056b2:	d00b      	beq.n	80056cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	4a43      	ldr	r2, [pc, #268]	; (80057c8 <UART_AdvFeatureConfig+0x148>)
 80056bc:	4013      	ands	r3, r2
 80056be:	0019      	movs	r1, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d0:	2204      	movs	r2, #4
 80056d2:	4013      	ands	r3, r2
 80056d4:	d00b      	beq.n	80056ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	4a3b      	ldr	r2, [pc, #236]	; (80057cc <UART_AdvFeatureConfig+0x14c>)
 80056de:	4013      	ands	r3, r2
 80056e0:	0019      	movs	r1, r3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f2:	2208      	movs	r2, #8
 80056f4:	4013      	ands	r3, r2
 80056f6:	d00b      	beq.n	8005710 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	4a34      	ldr	r2, [pc, #208]	; (80057d0 <UART_AdvFeatureConfig+0x150>)
 8005700:	4013      	ands	r3, r2
 8005702:	0019      	movs	r1, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005714:	2210      	movs	r2, #16
 8005716:	4013      	ands	r3, r2
 8005718:	d00b      	beq.n	8005732 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	4a2c      	ldr	r2, [pc, #176]	; (80057d4 <UART_AdvFeatureConfig+0x154>)
 8005722:	4013      	ands	r3, r2
 8005724:	0019      	movs	r1, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005736:	2220      	movs	r2, #32
 8005738:	4013      	ands	r3, r2
 800573a:	d00b      	beq.n	8005754 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	4a25      	ldr	r2, [pc, #148]	; (80057d8 <UART_AdvFeatureConfig+0x158>)
 8005744:	4013      	ands	r3, r2
 8005746:	0019      	movs	r1, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005758:	2240      	movs	r2, #64	; 0x40
 800575a:	4013      	ands	r3, r2
 800575c:	d01d      	beq.n	800579a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	4a1d      	ldr	r2, [pc, #116]	; (80057dc <UART_AdvFeatureConfig+0x15c>)
 8005766:	4013      	ands	r3, r2
 8005768:	0019      	movs	r1, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800577a:	2380      	movs	r3, #128	; 0x80
 800577c:	035b      	lsls	r3, r3, #13
 800577e:	429a      	cmp	r2, r3
 8005780:	d10b      	bne.n	800579a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	4a15      	ldr	r2, [pc, #84]	; (80057e0 <UART_AdvFeatureConfig+0x160>)
 800578a:	4013      	ands	r3, r2
 800578c:	0019      	movs	r1, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579e:	2280      	movs	r2, #128	; 0x80
 80057a0:	4013      	ands	r3, r2
 80057a2:	d00b      	beq.n	80057bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	4a0e      	ldr	r2, [pc, #56]	; (80057e4 <UART_AdvFeatureConfig+0x164>)
 80057ac:	4013      	ands	r3, r2
 80057ae:	0019      	movs	r1, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	430a      	orrs	r2, r1
 80057ba:	605a      	str	r2, [r3, #4]
  }
}
 80057bc:	46c0      	nop			; (mov r8, r8)
 80057be:	46bd      	mov	sp, r7
 80057c0:	b002      	add	sp, #8
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	fffdffff 	.word	0xfffdffff
 80057c8:	fffeffff 	.word	0xfffeffff
 80057cc:	fffbffff 	.word	0xfffbffff
 80057d0:	ffff7fff 	.word	0xffff7fff
 80057d4:	ffffefff 	.word	0xffffefff
 80057d8:	ffffdfff 	.word	0xffffdfff
 80057dc:	ffefffff 	.word	0xffefffff
 80057e0:	ff9fffff 	.word	0xff9fffff
 80057e4:	fff7ffff 	.word	0xfff7ffff

080057e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af02      	add	r7, sp, #8
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2290      	movs	r2, #144	; 0x90
 80057f4:	2100      	movs	r1, #0
 80057f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057f8:	f7fd f8de 	bl	80029b8 <HAL_GetTick>
 80057fc:	0003      	movs	r3, r0
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2208      	movs	r2, #8
 8005808:	4013      	ands	r3, r2
 800580a:	2b08      	cmp	r3, #8
 800580c:	d10c      	bne.n	8005828 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2280      	movs	r2, #128	; 0x80
 8005812:	0391      	lsls	r1, r2, #14
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	4a1a      	ldr	r2, [pc, #104]	; (8005880 <UART_CheckIdleState+0x98>)
 8005818:	9200      	str	r2, [sp, #0]
 800581a:	2200      	movs	r2, #0
 800581c:	f000 f832 	bl	8005884 <UART_WaitOnFlagUntilTimeout>
 8005820:	1e03      	subs	r3, r0, #0
 8005822:	d001      	beq.n	8005828 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e026      	b.n	8005876 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2204      	movs	r2, #4
 8005830:	4013      	ands	r3, r2
 8005832:	2b04      	cmp	r3, #4
 8005834:	d10c      	bne.n	8005850 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2280      	movs	r2, #128	; 0x80
 800583a:	03d1      	lsls	r1, r2, #15
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	4a10      	ldr	r2, [pc, #64]	; (8005880 <UART_CheckIdleState+0x98>)
 8005840:	9200      	str	r2, [sp, #0]
 8005842:	2200      	movs	r2, #0
 8005844:	f000 f81e 	bl	8005884 <UART_WaitOnFlagUntilTimeout>
 8005848:	1e03      	subs	r3, r0, #0
 800584a:	d001      	beq.n	8005850 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e012      	b.n	8005876 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2288      	movs	r2, #136	; 0x88
 8005854:	2120      	movs	r1, #32
 8005856:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	228c      	movs	r2, #140	; 0x8c
 800585c:	2120      	movs	r1, #32
 800585e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2284      	movs	r2, #132	; 0x84
 8005870:	2100      	movs	r1, #0
 8005872:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	0018      	movs	r0, r3
 8005878:	46bd      	mov	sp, r7
 800587a:	b004      	add	sp, #16
 800587c:	bd80      	pop	{r7, pc}
 800587e:	46c0      	nop			; (mov r8, r8)
 8005880:	01ffffff 	.word	0x01ffffff

08005884 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b094      	sub	sp, #80	; 0x50
 8005888:	af00      	add	r7, sp, #0
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	603b      	str	r3, [r7, #0]
 8005890:	1dfb      	adds	r3, r7, #7
 8005892:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005894:	e0a7      	b.n	80059e6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005898:	3301      	adds	r3, #1
 800589a:	d100      	bne.n	800589e <UART_WaitOnFlagUntilTimeout+0x1a>
 800589c:	e0a3      	b.n	80059e6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800589e:	f7fd f88b 	bl	80029b8 <HAL_GetTick>
 80058a2:	0002      	movs	r2, r0
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d302      	bcc.n	80058b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80058ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d13f      	bne.n	8005934 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058b4:	f3ef 8310 	mrs	r3, PRIMASK
 80058b8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80058ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80058bc:	647b      	str	r3, [r7, #68]	; 0x44
 80058be:	2301      	movs	r3, #1
 80058c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c4:	f383 8810 	msr	PRIMASK, r3
}
 80058c8:	46c0      	nop			; (mov r8, r8)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	494e      	ldr	r1, [pc, #312]	; (8005a10 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80058d6:	400a      	ands	r2, r1
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058dc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	f383 8810 	msr	PRIMASK, r3
}
 80058e4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058e6:	f3ef 8310 	mrs	r3, PRIMASK
 80058ea:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80058ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ee:	643b      	str	r3, [r7, #64]	; 0x40
 80058f0:	2301      	movs	r3, #1
 80058f2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f6:	f383 8810 	msr	PRIMASK, r3
}
 80058fa:	46c0      	nop			; (mov r8, r8)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689a      	ldr	r2, [r3, #8]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2101      	movs	r1, #1
 8005908:	438a      	bics	r2, r1
 800590a:	609a      	str	r2, [r3, #8]
 800590c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800590e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005912:	f383 8810 	msr	PRIMASK, r3
}
 8005916:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2288      	movs	r2, #136	; 0x88
 800591c:	2120      	movs	r1, #32
 800591e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	228c      	movs	r2, #140	; 0x8c
 8005924:	2120      	movs	r1, #32
 8005926:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2284      	movs	r2, #132	; 0x84
 800592c:	2100      	movs	r1, #0
 800592e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e069      	b.n	8005a08 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2204      	movs	r2, #4
 800593c:	4013      	ands	r3, r2
 800593e:	d052      	beq.n	80059e6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	69da      	ldr	r2, [r3, #28]
 8005946:	2380      	movs	r3, #128	; 0x80
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	401a      	ands	r2, r3
 800594c:	2380      	movs	r3, #128	; 0x80
 800594e:	011b      	lsls	r3, r3, #4
 8005950:	429a      	cmp	r2, r3
 8005952:	d148      	bne.n	80059e6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2280      	movs	r2, #128	; 0x80
 800595a:	0112      	lsls	r2, r2, #4
 800595c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800595e:	f3ef 8310 	mrs	r3, PRIMASK
 8005962:	613b      	str	r3, [r7, #16]
  return(result);
 8005964:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005968:	2301      	movs	r3, #1
 800596a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f383 8810 	msr	PRIMASK, r3
}
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4924      	ldr	r1, [pc, #144]	; (8005a10 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005980:	400a      	ands	r2, r1
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005986:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	f383 8810 	msr	PRIMASK, r3
}
 800598e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005990:	f3ef 8310 	mrs	r3, PRIMASK
 8005994:	61fb      	str	r3, [r7, #28]
  return(result);
 8005996:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005998:	64bb      	str	r3, [r7, #72]	; 0x48
 800599a:	2301      	movs	r3, #1
 800599c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	f383 8810 	msr	PRIMASK, r3
}
 80059a4:	46c0      	nop			; (mov r8, r8)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2101      	movs	r1, #1
 80059b2:	438a      	bics	r2, r1
 80059b4:	609a      	str	r2, [r3, #8]
 80059b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059b8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	f383 8810 	msr	PRIMASK, r3
}
 80059c0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2288      	movs	r2, #136	; 0x88
 80059c6:	2120      	movs	r1, #32
 80059c8:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	228c      	movs	r2, #140	; 0x8c
 80059ce:	2120      	movs	r1, #32
 80059d0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2290      	movs	r2, #144	; 0x90
 80059d6:	2120      	movs	r1, #32
 80059d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2284      	movs	r2, #132	; 0x84
 80059de:	2100      	movs	r1, #0
 80059e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e010      	b.n	8005a08 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	4013      	ands	r3, r2
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	425a      	negs	r2, r3
 80059f6:	4153      	adcs	r3, r2
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	001a      	movs	r2, r3
 80059fc:	1dfb      	adds	r3, r7, #7
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d100      	bne.n	8005a06 <UART_WaitOnFlagUntilTimeout+0x182>
 8005a04:	e747      	b.n	8005896 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	0018      	movs	r0, r3
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	b014      	add	sp, #80	; 0x50
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	fffffe5f 	.word	0xfffffe5f

08005a14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2284      	movs	r2, #132	; 0x84
 8005a20:	5c9b      	ldrb	r3, [r3, r2]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d101      	bne.n	8005a2a <HAL_UARTEx_DisableFifoMode+0x16>
 8005a26:	2302      	movs	r3, #2
 8005a28:	e027      	b.n	8005a7a <HAL_UARTEx_DisableFifoMode+0x66>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2284      	movs	r2, #132	; 0x84
 8005a2e:	2101      	movs	r1, #1
 8005a30:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2288      	movs	r2, #136	; 0x88
 8005a36:	2124      	movs	r1, #36	; 0x24
 8005a38:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	438a      	bics	r2, r1
 8005a50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4a0b      	ldr	r2, [pc, #44]	; (8005a84 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005a56:	4013      	ands	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2288      	movs	r2, #136	; 0x88
 8005a6c:	2120      	movs	r1, #32
 8005a6e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2284      	movs	r2, #132	; 0x84
 8005a74:	2100      	movs	r1, #0
 8005a76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	0018      	movs	r0, r3
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	b004      	add	sp, #16
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	46c0      	nop			; (mov r8, r8)
 8005a84:	dfffffff 	.word	0xdfffffff

08005a88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2284      	movs	r2, #132	; 0x84
 8005a96:	5c9b      	ldrb	r3, [r3, r2]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e02e      	b.n	8005afe <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2284      	movs	r2, #132	; 0x84
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2288      	movs	r2, #136	; 0x88
 8005aac:	2124      	movs	r1, #36	; 0x24
 8005aae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	438a      	bics	r2, r1
 8005ac6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	08d9      	lsrs	r1, r3, #3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	0018      	movs	r0, r3
 8005ae0:	f000 f854 	bl	8005b8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2288      	movs	r2, #136	; 0x88
 8005af0:	2120      	movs	r1, #32
 8005af2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2284      	movs	r2, #132	; 0x84
 8005af8:	2100      	movs	r1, #0
 8005afa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	0018      	movs	r0, r3
 8005b00:	46bd      	mov	sp, r7
 8005b02:	b004      	add	sp, #16
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2284      	movs	r2, #132	; 0x84
 8005b16:	5c9b      	ldrb	r3, [r3, r2]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d101      	bne.n	8005b20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	e02f      	b.n	8005b80 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2284      	movs	r2, #132	; 0x84
 8005b24:	2101      	movs	r1, #1
 8005b26:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2288      	movs	r2, #136	; 0x88
 8005b2c:	2124      	movs	r1, #36	; 0x24
 8005b2e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2101      	movs	r1, #1
 8005b44:	438a      	bics	r2, r1
 8005b46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	4a0e      	ldr	r2, [pc, #56]	; (8005b88 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	0019      	movs	r1, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	0018      	movs	r0, r3
 8005b62:	f000 f813 	bl	8005b8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2288      	movs	r2, #136	; 0x88
 8005b72:	2120      	movs	r1, #32
 8005b74:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2284      	movs	r2, #132	; 0x84
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	0018      	movs	r0, r3
 8005b82:	46bd      	mov	sp, r7
 8005b84:	b004      	add	sp, #16
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	f1ffffff 	.word	0xf1ffffff

08005b8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d108      	bne.n	8005bae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	226a      	movs	r2, #106	; 0x6a
 8005ba0:	2101      	movs	r1, #1
 8005ba2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2268      	movs	r2, #104	; 0x68
 8005ba8:	2101      	movs	r1, #1
 8005baa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005bac:	e043      	b.n	8005c36 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005bae:	260f      	movs	r6, #15
 8005bb0:	19bb      	adds	r3, r7, r6
 8005bb2:	2208      	movs	r2, #8
 8005bb4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005bb6:	200e      	movs	r0, #14
 8005bb8:	183b      	adds	r3, r7, r0
 8005bba:	2208      	movs	r2, #8
 8005bbc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	0e5b      	lsrs	r3, r3, #25
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	240d      	movs	r4, #13
 8005bca:	193b      	adds	r3, r7, r4
 8005bcc:	2107      	movs	r1, #7
 8005bce:	400a      	ands	r2, r1
 8005bd0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	0f5b      	lsrs	r3, r3, #29
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	250c      	movs	r5, #12
 8005bde:	197b      	adds	r3, r7, r5
 8005be0:	2107      	movs	r1, #7
 8005be2:	400a      	ands	r2, r1
 8005be4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005be6:	183b      	adds	r3, r7, r0
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	197a      	adds	r2, r7, r5
 8005bec:	7812      	ldrb	r2, [r2, #0]
 8005bee:	4914      	ldr	r1, [pc, #80]	; (8005c40 <UARTEx_SetNbDataToProcess+0xb4>)
 8005bf0:	5c8a      	ldrb	r2, [r1, r2]
 8005bf2:	435a      	muls	r2, r3
 8005bf4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005bf6:	197b      	adds	r3, r7, r5
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	4a12      	ldr	r2, [pc, #72]	; (8005c44 <UARTEx_SetNbDataToProcess+0xb8>)
 8005bfc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bfe:	0019      	movs	r1, r3
 8005c00:	f7fa fb1e 	bl	8000240 <__divsi3>
 8005c04:	0003      	movs	r3, r0
 8005c06:	b299      	uxth	r1, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	226a      	movs	r2, #106	; 0x6a
 8005c0c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c0e:	19bb      	adds	r3, r7, r6
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	193a      	adds	r2, r7, r4
 8005c14:	7812      	ldrb	r2, [r2, #0]
 8005c16:	490a      	ldr	r1, [pc, #40]	; (8005c40 <UARTEx_SetNbDataToProcess+0xb4>)
 8005c18:	5c8a      	ldrb	r2, [r1, r2]
 8005c1a:	435a      	muls	r2, r3
 8005c1c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c1e:	193b      	adds	r3, r7, r4
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	4a08      	ldr	r2, [pc, #32]	; (8005c44 <UARTEx_SetNbDataToProcess+0xb8>)
 8005c24:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c26:	0019      	movs	r1, r3
 8005c28:	f7fa fb0a 	bl	8000240 <__divsi3>
 8005c2c:	0003      	movs	r3, r0
 8005c2e:	b299      	uxth	r1, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2268      	movs	r2, #104	; 0x68
 8005c34:	5299      	strh	r1, [r3, r2]
}
 8005c36:	46c0      	nop			; (mov r8, r8)
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	b005      	add	sp, #20
 8005c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c3e:	46c0      	nop			; (mov r8, r8)
 8005c40:	08008fe8 	.word	0x08008fe8
 8005c44:	08008ff0 	.word	0x08008ff0

08005c48 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	0002      	movs	r2, r0
 8005c50:	1dbb      	adds	r3, r7, #6
 8005c52:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005c54:	2300      	movs	r3, #0
 8005c56:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005c58:	1dbb      	adds	r3, r7, #6
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	5e9b      	ldrsh	r3, [r3, r2]
 8005c5e:	2b84      	cmp	r3, #132	; 0x84
 8005c60:	d006      	beq.n	8005c70 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8005c62:	1dbb      	adds	r3, r7, #6
 8005c64:	2200      	movs	r2, #0
 8005c66:	5e9a      	ldrsh	r2, [r3, r2]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	18d3      	adds	r3, r2, r3
 8005c6c:	3303      	adds	r3, #3
 8005c6e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005c70:	68fb      	ldr	r3, [r7, #12]
}
 8005c72:	0018      	movs	r0, r3
 8005c74:	46bd      	mov	sp, r7
 8005c76:	b004      	add	sp, #16
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005c7e:	f000 fab9 	bl	80061f4 <vTaskStartScheduler>
  
  return osOK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	0018      	movs	r0, r3
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c8c:	b087      	sub	sp, #28
 8005c8e:	af02      	add	r7, sp, #8
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685c      	ldr	r4, [r3, #4]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ca0:	b29e      	uxth	r6, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2208      	movs	r2, #8
 8005ca6:	5e9b      	ldrsh	r3, [r3, r2]
 8005ca8:	0018      	movs	r0, r3
 8005caa:	f7ff ffcd 	bl	8005c48 <makeFreeRtosPriority>
 8005cae:	0001      	movs	r1, r0
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	230c      	movs	r3, #12
 8005cb4:	18fb      	adds	r3, r7, r3
 8005cb6:	9301      	str	r3, [sp, #4]
 8005cb8:	9100      	str	r1, [sp, #0]
 8005cba:	0013      	movs	r3, r2
 8005cbc:	0032      	movs	r2, r6
 8005cbe:	0029      	movs	r1, r5
 8005cc0:	0020      	movs	r0, r4
 8005cc2:	f000 f8c7 	bl	8005e54 <xTaskCreate>
 8005cc6:	0003      	movs	r3, r0
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d001      	beq.n	8005cd0 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	e000      	b.n	8005cd2 <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
}
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	b005      	add	sp, #20
 8005cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005cda <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <osDelay+0x16>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	e000      	b.n	8005cf2 <osDelay+0x18>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	f000 f9ea 	bl	80060cc <vTaskDelay>
  
  return osOK;
 8005cf8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	b004      	add	sp, #16
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b082      	sub	sp, #8
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	001a      	movs	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	4252      	negs	r2, r2
 8005d1a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3308      	adds	r3, #8
 8005d20:	001a      	movs	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	3308      	adds	r3, #8
 8005d2a:	001a      	movs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d36:	46c0      	nop			; (mov r8, r8)
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	b002      	add	sp, #8
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b082      	sub	sp, #8
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d4c:	46c0      	nop			; (mov r8, r8)
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	b002      	add	sp, #8
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	683a      	ldr	r2, [r7, #0]
 8005d78:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	601a      	str	r2, [r3, #0]
}
 8005d90:	46c0      	nop			; (mov r8, r8)
 8005d92:	46bd      	mov	sp, r7
 8005d94:	b004      	add	sp, #16
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	3301      	adds	r3, #1
 8005dac:	d103      	bne.n	8005db6 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	e00c      	b.n	8005dd0 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	3308      	adds	r3, #8
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	e002      	b.n	8005dc4 <vListInsert+0x2c>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	60fb      	str	r3, [r7, #12]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d2f6      	bcs.n	8005dbe <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	685a      	ldr	r2, [r3, #4]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	1c5a      	adds	r2, r3, #1
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	601a      	str	r2, [r3, #0]
}
 8005dfc:	46c0      	nop			; (mov r8, r8)
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	b004      	add	sp, #16
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6892      	ldr	r2, [r2, #8]
 8005e1a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	6852      	ldr	r2, [r2, #4]
 8005e24:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d103      	bne.n	8005e38 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	1e5a      	subs	r2, r3, #1
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
}
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	b004      	add	sp, #16
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e54:	b590      	push	{r4, r7, lr}
 8005e56:	b08d      	sub	sp, #52	; 0x34
 8005e58:	af04      	add	r7, sp, #16
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	603b      	str	r3, [r7, #0]
 8005e60:	1dbb      	adds	r3, r7, #6
 8005e62:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e64:	1dbb      	adds	r3, r7, #6
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	0018      	movs	r0, r3
 8005e6c:	f001 f848 	bl	8006f00 <pvPortMalloc>
 8005e70:	0003      	movs	r3, r0
 8005e72:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d010      	beq.n	8005e9c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e7a:	2060      	movs	r0, #96	; 0x60
 8005e7c:	f001 f840 	bl	8006f00 <pvPortMalloc>
 8005e80:	0003      	movs	r3, r0
 8005e82:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	631a      	str	r2, [r3, #48]	; 0x30
 8005e90:	e006      	b.n	8005ea0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	0018      	movs	r0, r3
 8005e96:	f001 f8df 	bl	8007058 <vPortFree>
 8005e9a:	e001      	b.n	8005ea0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d016      	beq.n	8005ed4 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ea6:	1dbb      	adds	r3, r7, #6
 8005ea8:	881a      	ldrh	r2, [r3, #0]
 8005eaa:	683c      	ldr	r4, [r7, #0]
 8005eac:	68b9      	ldr	r1, [r7, #8]
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	9303      	str	r3, [sp, #12]
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	9302      	str	r3, [sp, #8]
 8005eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eba:	9301      	str	r3, [sp, #4]
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	0023      	movs	r3, r4
 8005ec2:	f000 f80f 	bl	8005ee4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	0018      	movs	r0, r3
 8005eca:	f000 f897 	bl	8005ffc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	61bb      	str	r3, [r7, #24]
 8005ed2:	e002      	b.n	8005eda <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	425b      	negs	r3, r3
 8005ed8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005eda:	69bb      	ldr	r3, [r7, #24]
	}
 8005edc:	0018      	movs	r0, r3
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	b009      	add	sp, #36	; 0x24
 8005ee2:	bd90      	pop	{r4, r7, pc}

08005ee4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
 8005ef0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	001a      	movs	r2, r3
 8005efc:	21a5      	movs	r1, #165	; 0xa5
 8005efe:	f001 f9f8 	bl	80072f2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	493b      	ldr	r1, [pc, #236]	; (8005ff8 <prvInitialiseNewTask+0x114>)
 8005f0a:	468c      	mov	ip, r1
 8005f0c:	4463      	add	r3, ip
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	18d3      	adds	r3, r2, r3
 8005f12:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	2207      	movs	r2, #7
 8005f18:	4393      	bics	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	2207      	movs	r2, #7
 8005f20:	4013      	ands	r3, r2
 8005f22:	d001      	beq.n	8005f28 <prvInitialiseNewTask+0x44>
 8005f24:	b672      	cpsid	i
 8005f26:	e7fe      	b.n	8005f26 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d020      	beq.n	8005f70 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f2e:	2300      	movs	r3, #0
 8005f30:	617b      	str	r3, [r7, #20]
 8005f32:	e013      	b.n	8005f5c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	18d3      	adds	r3, r2, r3
 8005f3a:	7818      	ldrb	r0, [r3, #0]
 8005f3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f3e:	2134      	movs	r1, #52	; 0x34
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	18d3      	adds	r3, r2, r3
 8005f44:	185b      	adds	r3, r3, r1
 8005f46:	1c02      	adds	r2, r0, #0
 8005f48:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	18d3      	adds	r3, r2, r3
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d006      	beq.n	8005f64 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2b0f      	cmp	r3, #15
 8005f60:	d9e8      	bls.n	8005f34 <prvInitialiseNewTask+0x50>
 8005f62:	e000      	b.n	8005f66 <prvInitialiseNewTask+0x82>
			{
				break;
 8005f64:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f68:	2243      	movs	r2, #67	; 0x43
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	5499      	strb	r1, [r3, r2]
 8005f6e:	e003      	b.n	8005f78 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f72:	2234      	movs	r2, #52	; 0x34
 8005f74:	2100      	movs	r1, #0
 8005f76:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	2b06      	cmp	r3, #6
 8005f7c:	d901      	bls.n	8005f82 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f7e:	2306      	movs	r3, #6
 8005f80:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f84:	6a3a      	ldr	r2, [r7, #32]
 8005f86:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	6a3a      	ldr	r2, [r7, #32]
 8005f8c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f90:	2200      	movs	r2, #0
 8005f92:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f96:	3304      	adds	r3, #4
 8005f98:	0018      	movs	r0, r3
 8005f9a:	f7ff fed0 	bl	8005d3e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa0:	3318      	adds	r3, #24
 8005fa2:	0018      	movs	r0, r3
 8005fa4:	f7ff fecb 	bl	8005d3e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005faa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fae:	6a3b      	ldr	r3, [r7, #32]
 8005fb0:	2207      	movs	r2, #7
 8005fb2:	1ad2      	subs	r2, r2, r3
 8005fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fbc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8005fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fcc:	225c      	movs	r2, #92	; 0x5c
 8005fce:	2100      	movs	r1, #0
 8005fd0:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	68f9      	ldr	r1, [r7, #12]
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	0018      	movs	r0, r3
 8005fda:	f000 fe61 	bl	8006ca0 <pxPortInitialiseStack>
 8005fde:	0002      	movs	r2, r0
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <prvInitialiseNewTask+0x10c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ff0:	46c0      	nop			; (mov r8, r8)
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	b006      	add	sp, #24
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	3fffffff 	.word	0x3fffffff

08005ffc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006004:	f000 fee4 	bl	8006dd0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006008:	4b2a      	ldr	r3, [pc, #168]	; (80060b4 <prvAddNewTaskToReadyList+0xb8>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	1c5a      	adds	r2, r3, #1
 800600e:	4b29      	ldr	r3, [pc, #164]	; (80060b4 <prvAddNewTaskToReadyList+0xb8>)
 8006010:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006012:	4b29      	ldr	r3, [pc, #164]	; (80060b8 <prvAddNewTaskToReadyList+0xbc>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d109      	bne.n	800602e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800601a:	4b27      	ldr	r3, [pc, #156]	; (80060b8 <prvAddNewTaskToReadyList+0xbc>)
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006020:	4b24      	ldr	r3, [pc, #144]	; (80060b4 <prvAddNewTaskToReadyList+0xb8>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d110      	bne.n	800604a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006028:	f000 fb9a 	bl	8006760 <prvInitialiseTaskLists>
 800602c:	e00d      	b.n	800604a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800602e:	4b23      	ldr	r3, [pc, #140]	; (80060bc <prvAddNewTaskToReadyList+0xc0>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d109      	bne.n	800604a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006036:	4b20      	ldr	r3, [pc, #128]	; (80060b8 <prvAddNewTaskToReadyList+0xbc>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006040:	429a      	cmp	r2, r3
 8006042:	d802      	bhi.n	800604a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006044:	4b1c      	ldr	r3, [pc, #112]	; (80060b8 <prvAddNewTaskToReadyList+0xbc>)
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800604a:	4b1d      	ldr	r3, [pc, #116]	; (80060c0 <prvAddNewTaskToReadyList+0xc4>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	1c5a      	adds	r2, r3, #1
 8006050:	4b1b      	ldr	r3, [pc, #108]	; (80060c0 <prvAddNewTaskToReadyList+0xc4>)
 8006052:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006054:	4b1a      	ldr	r3, [pc, #104]	; (80060c0 <prvAddNewTaskToReadyList+0xc4>)
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006060:	4b18      	ldr	r3, [pc, #96]	; (80060c4 <prvAddNewTaskToReadyList+0xc8>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	429a      	cmp	r2, r3
 8006066:	d903      	bls.n	8006070 <prvAddNewTaskToReadyList+0x74>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800606c:	4b15      	ldr	r3, [pc, #84]	; (80060c4 <prvAddNewTaskToReadyList+0xc8>)
 800606e:	601a      	str	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006074:	0013      	movs	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	189b      	adds	r3, r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4a12      	ldr	r2, [pc, #72]	; (80060c8 <prvAddNewTaskToReadyList+0xcc>)
 800607e:	189a      	adds	r2, r3, r2
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3304      	adds	r3, #4
 8006084:	0019      	movs	r1, r3
 8006086:	0010      	movs	r0, r2
 8006088:	f7ff fe64 	bl	8005d54 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800608c:	f000 feb2 	bl	8006df4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006090:	4b0a      	ldr	r3, [pc, #40]	; (80060bc <prvAddNewTaskToReadyList+0xc0>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d008      	beq.n	80060aa <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006098:	4b07      	ldr	r3, [pc, #28]	; (80060b8 <prvAddNewTaskToReadyList+0xbc>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d201      	bcs.n	80060aa <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060a6:	f000 fe83 	bl	8006db0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060aa:	46c0      	nop			; (mov r8, r8)
 80060ac:	46bd      	mov	sp, r7
 80060ae:	b002      	add	sp, #8
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	46c0      	nop			; (mov r8, r8)
 80060b4:	200006d4 	.word	0x200006d4
 80060b8:	200005d4 	.word	0x200005d4
 80060bc:	200006e0 	.word	0x200006e0
 80060c0:	200006f0 	.word	0x200006f0
 80060c4:	200006dc 	.word	0x200006dc
 80060c8:	200005d8 	.word	0x200005d8

080060cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060d4:	2300      	movs	r3, #0
 80060d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d010      	beq.n	8006100 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060de:	4b0d      	ldr	r3, [pc, #52]	; (8006114 <vTaskDelay+0x48>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <vTaskDelay+0x1e>
 80060e6:	b672      	cpsid	i
 80060e8:	e7fe      	b.n	80060e8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80060ea:	f000 f8bb 	bl	8006264 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2100      	movs	r1, #0
 80060f2:	0018      	movs	r0, r3
 80060f4:	f000 fd80 	bl	8006bf8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80060f8:	f000 f8c0 	bl	800627c <xTaskResumeAll>
 80060fc:	0003      	movs	r3, r0
 80060fe:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8006106:	f000 fe53 	bl	8006db0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800610a:	46c0      	nop			; (mov r8, r8)
 800610c:	46bd      	mov	sp, r7
 800610e:	b004      	add	sp, #16
 8006110:	bd80      	pop	{r7, pc}
 8006112:	46c0      	nop			; (mov r8, r8)
 8006114:	200006fc 	.word	0x200006fc

08006118 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8006118:	b580      	push	{r7, lr}
 800611a:	b088      	sub	sp, #32
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <eTaskGetState+0x16>
 800612a:	b672      	cpsid	i
 800612c:	e7fe      	b.n	800612c <eTaskGetState+0x14>

		if( pxTCB == pxCurrentTCB )
 800612e:	4b2c      	ldr	r3, [pc, #176]	; (80061e0 <eTaskGetState+0xc8>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	429a      	cmp	r2, r3
 8006136:	d104      	bne.n	8006142 <eTaskGetState+0x2a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8006138:	231f      	movs	r3, #31
 800613a:	18fb      	adds	r3, r7, r3
 800613c:	2200      	movs	r2, #0
 800613e:	701a      	strb	r2, [r3, #0]
 8006140:	e046      	b.n	80061d0 <eTaskGetState+0xb8>
		}
		else
		{
			taskENTER_CRITICAL();
 8006142:	f000 fe45 	bl	8006dd0 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800614c:	4b25      	ldr	r3, [pc, #148]	; (80061e4 <eTaskGetState+0xcc>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8006152:	4b25      	ldr	r3, [pc, #148]	; (80061e8 <eTaskGetState+0xd0>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8006158:	f000 fe4c 	bl	8006df4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	429a      	cmp	r2, r3
 8006162:	d003      	beq.n	800616c <eTaskGetState+0x54>
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	429a      	cmp	r2, r3
 800616a:	d104      	bne.n	8006176 <eTaskGetState+0x5e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800616c:	231f      	movs	r3, #31
 800616e:	18fb      	adds	r3, r7, r3
 8006170:	2202      	movs	r2, #2
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	e02c      	b.n	80061d0 <eTaskGetState+0xb8>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	4b1c      	ldr	r3, [pc, #112]	; (80061ec <eTaskGetState+0xd4>)
 800617a:	429a      	cmp	r2, r3
 800617c:	d118      	bne.n	80061b0 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10f      	bne.n	80061a6 <eTaskGetState+0x8e>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	225c      	movs	r2, #92	; 0x5c
 800618a:	5c9b      	ldrb	r3, [r3, r2]
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b01      	cmp	r3, #1
 8006190:	d104      	bne.n	800619c <eTaskGetState+0x84>
							{
								eReturn = eBlocked;
 8006192:	231f      	movs	r3, #31
 8006194:	18fb      	adds	r3, r7, r3
 8006196:	2202      	movs	r2, #2
 8006198:	701a      	strb	r2, [r3, #0]
 800619a:	e019      	b.n	80061d0 <eTaskGetState+0xb8>
							}
							else
							{
								eReturn = eSuspended;
 800619c:	231f      	movs	r3, #31
 800619e:	18fb      	adds	r3, r7, r3
 80061a0:	2203      	movs	r2, #3
 80061a2:	701a      	strb	r2, [r3, #0]
 80061a4:	e014      	b.n	80061d0 <eTaskGetState+0xb8>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80061a6:	231f      	movs	r3, #31
 80061a8:	18fb      	adds	r3, r7, r3
 80061aa:	2202      	movs	r2, #2
 80061ac:	701a      	strb	r2, [r3, #0]
 80061ae:	e00f      	b.n	80061d0 <eTaskGetState+0xb8>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	4b0f      	ldr	r3, [pc, #60]	; (80061f0 <eTaskGetState+0xd8>)
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d002      	beq.n	80061be <eTaskGetState+0xa6>
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d104      	bne.n	80061c8 <eTaskGetState+0xb0>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80061be:	231f      	movs	r3, #31
 80061c0:	18fb      	adds	r3, r7, r3
 80061c2:	2204      	movs	r2, #4
 80061c4:	701a      	strb	r2, [r3, #0]
 80061c6:	e003      	b.n	80061d0 <eTaskGetState+0xb8>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80061c8:	231f      	movs	r3, #31
 80061ca:	18fb      	adds	r3, r7, r3
 80061cc:	2201      	movs	r2, #1
 80061ce:	701a      	strb	r2, [r3, #0]
			}
		}

		return eReturn;
 80061d0:	231f      	movs	r3, #31
 80061d2:	18fb      	adds	r3, r7, r3
 80061d4:	781b      	ldrb	r3, [r3, #0]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80061d6:	0018      	movs	r0, r3
 80061d8:	46bd      	mov	sp, r7
 80061da:	b008      	add	sp, #32
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	46c0      	nop			; (mov r8, r8)
 80061e0:	200005d4 	.word	0x200005d4
 80061e4:	2000068c 	.word	0x2000068c
 80061e8:	20000690 	.word	0x20000690
 80061ec:	200006c0 	.word	0x200006c0
 80061f0:	200006a8 	.word	0x200006a8

080061f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80061fa:	4914      	ldr	r1, [pc, #80]	; (800624c <vTaskStartScheduler+0x58>)
 80061fc:	4814      	ldr	r0, [pc, #80]	; (8006250 <vTaskStartScheduler+0x5c>)
 80061fe:	4b15      	ldr	r3, [pc, #84]	; (8006254 <vTaskStartScheduler+0x60>)
 8006200:	9301      	str	r3, [sp, #4]
 8006202:	2300      	movs	r3, #0
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	2300      	movs	r3, #0
 8006208:	2280      	movs	r2, #128	; 0x80
 800620a:	f7ff fe23 	bl	8005e54 <xTaskCreate>
 800620e:	0003      	movs	r3, r0
 8006210:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d10f      	bne.n	8006238 <vTaskStartScheduler+0x44>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8006218:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800621a:	4b0f      	ldr	r3, [pc, #60]	; (8006258 <vTaskStartScheduler+0x64>)
 800621c:	2201      	movs	r2, #1
 800621e:	4252      	negs	r2, r2
 8006220:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006222:	4b0e      	ldr	r3, [pc, #56]	; (800625c <vTaskStartScheduler+0x68>)
 8006224:	2201      	movs	r2, #1
 8006226:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006228:	4b0d      	ldr	r3, [pc, #52]	; (8006260 <vTaskStartScheduler+0x6c>)
 800622a:	2200      	movs	r2, #0
 800622c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800622e:	f7fb fbd6 	bl	80019de <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006232:	f000 fd99 	bl	8006d68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006236:	e004      	b.n	8006242 <vTaskStartScheduler+0x4e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	3301      	adds	r3, #1
 800623c:	d101      	bne.n	8006242 <vTaskStartScheduler+0x4e>
 800623e:	b672      	cpsid	i
 8006240:	e7fe      	b.n	8006240 <vTaskStartScheduler+0x4c>
}
 8006242:	46c0      	nop			; (mov r8, r8)
 8006244:	46bd      	mov	sp, r7
 8006246:	b002      	add	sp, #8
 8006248:	bd80      	pop	{r7, pc}
 800624a:	46c0      	nop			; (mov r8, r8)
 800624c:	08008eac 	.word	0x08008eac
 8006250:	08006741 	.word	0x08006741
 8006254:	200006f8 	.word	0x200006f8
 8006258:	200006f4 	.word	0x200006f4
 800625c:	200006e0 	.word	0x200006e0
 8006260:	200006d8 	.word	0x200006d8

08006264 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006268:	4b03      	ldr	r3, [pc, #12]	; (8006278 <vTaskSuspendAll+0x14>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	4b02      	ldr	r3, [pc, #8]	; (8006278 <vTaskSuspendAll+0x14>)
 8006270:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006272:	46c0      	nop			; (mov r8, r8)
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	200006fc 	.word	0x200006fc

0800627c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006282:	2300      	movs	r3, #0
 8006284:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006286:	2300      	movs	r3, #0
 8006288:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800628a:	4b3a      	ldr	r3, [pc, #232]	; (8006374 <xTaskResumeAll+0xf8>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <xTaskResumeAll+0x1a>
 8006292:	b672      	cpsid	i
 8006294:	e7fe      	b.n	8006294 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006296:	f000 fd9b 	bl	8006dd0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800629a:	4b36      	ldr	r3, [pc, #216]	; (8006374 <xTaskResumeAll+0xf8>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	1e5a      	subs	r2, r3, #1
 80062a0:	4b34      	ldr	r3, [pc, #208]	; (8006374 <xTaskResumeAll+0xf8>)
 80062a2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062a4:	4b33      	ldr	r3, [pc, #204]	; (8006374 <xTaskResumeAll+0xf8>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d15b      	bne.n	8006364 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062ac:	4b32      	ldr	r3, [pc, #200]	; (8006378 <xTaskResumeAll+0xfc>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d057      	beq.n	8006364 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062b4:	e02f      	b.n	8006316 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062b6:	4b31      	ldr	r3, [pc, #196]	; (800637c <xTaskResumeAll+0x100>)
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	3318      	adds	r3, #24
 80062c2:	0018      	movs	r0, r3
 80062c4:	f7ff fd9e 	bl	8005e04 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	3304      	adds	r3, #4
 80062cc:	0018      	movs	r0, r3
 80062ce:	f7ff fd99 	bl	8005e04 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d6:	4b2a      	ldr	r3, [pc, #168]	; (8006380 <xTaskResumeAll+0x104>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d903      	bls.n	80062e6 <xTaskResumeAll+0x6a>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e2:	4b27      	ldr	r3, [pc, #156]	; (8006380 <xTaskResumeAll+0x104>)
 80062e4:	601a      	str	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ea:	0013      	movs	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	189b      	adds	r3, r3, r2
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4a24      	ldr	r2, [pc, #144]	; (8006384 <xTaskResumeAll+0x108>)
 80062f4:	189a      	adds	r2, r3, r2
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	3304      	adds	r3, #4
 80062fa:	0019      	movs	r1, r3
 80062fc:	0010      	movs	r0, r2
 80062fe:	f7ff fd29 	bl	8005d54 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006306:	4b20      	ldr	r3, [pc, #128]	; (8006388 <xTaskResumeAll+0x10c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630c:	429a      	cmp	r2, r3
 800630e:	d302      	bcc.n	8006316 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8006310:	4b1e      	ldr	r3, [pc, #120]	; (800638c <xTaskResumeAll+0x110>)
 8006312:	2201      	movs	r2, #1
 8006314:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006316:	4b19      	ldr	r3, [pc, #100]	; (800637c <xTaskResumeAll+0x100>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1cb      	bne.n	80062b6 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d001      	beq.n	8006328 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006324:	f000 fb78 	bl	8006a18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006328:	4b19      	ldr	r3, [pc, #100]	; (8006390 <xTaskResumeAll+0x114>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00f      	beq.n	8006354 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006334:	f000 f8be 	bl	80064b4 <xTaskIncrementTick>
 8006338:	1e03      	subs	r3, r0, #0
 800633a:	d002      	beq.n	8006342 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800633c:	4b13      	ldr	r3, [pc, #76]	; (800638c <xTaskResumeAll+0x110>)
 800633e:	2201      	movs	r2, #1
 8006340:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	3b01      	subs	r3, #1
 8006346:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1f2      	bne.n	8006334 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 800634e:	4b10      	ldr	r3, [pc, #64]	; (8006390 <xTaskResumeAll+0x114>)
 8006350:	2200      	movs	r2, #0
 8006352:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006354:	4b0d      	ldr	r3, [pc, #52]	; (800638c <xTaskResumeAll+0x110>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800635c:	2301      	movs	r3, #1
 800635e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006360:	f000 fd26 	bl	8006db0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006364:	f000 fd46 	bl	8006df4 <vPortExitCritical>

	return xAlreadyYielded;
 8006368:	68bb      	ldr	r3, [r7, #8]
}
 800636a:	0018      	movs	r0, r3
 800636c:	46bd      	mov	sp, r7
 800636e:	b004      	add	sp, #16
 8006370:	bd80      	pop	{r7, pc}
 8006372:	46c0      	nop			; (mov r8, r8)
 8006374:	200006fc 	.word	0x200006fc
 8006378:	200006d4 	.word	0x200006d4
 800637c:	20000694 	.word	0x20000694
 8006380:	200006dc 	.word	0x200006dc
 8006384:	200005d8 	.word	0x200005d8
 8006388:	200005d4 	.word	0x200005d4
 800638c:	200006e8 	.word	0x200006e8
 8006390:	200006e4 	.word	0x200006e4

08006394 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80063a0:	2300      	movs	r3, #0
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	2307      	movs	r3, #7
 80063a6:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 80063a8:	f7ff ff5c 	bl	8006264 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80063ac:	4b3b      	ldr	r3, [pc, #236]	; (800649c <uxTaskGetSystemState+0x108>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d36a      	bcc.n	800648c <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	0013      	movs	r3, r2
 80063c0:	00db      	lsls	r3, r3, #3
 80063c2:	189b      	adds	r3, r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	001a      	movs	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	1898      	adds	r0, r3, r2
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	0013      	movs	r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	189b      	adds	r3, r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4a32      	ldr	r2, [pc, #200]	; (80064a0 <uxTaskGetSystemState+0x10c>)
 80063d8:	189b      	adds	r3, r3, r2
 80063da:	2201      	movs	r2, #1
 80063dc:	0019      	movs	r1, r3
 80063de:	f000 fa9d 	bl	800691c <prvListTasksWithinSingleList>
 80063e2:	0002      	movs	r2, r0
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	189b      	adds	r3, r3, r2
 80063e8:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e2      	bne.n	80063b6 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	0013      	movs	r3, r2
 80063f4:	00db      	lsls	r3, r3, #3
 80063f6:	189b      	adds	r3, r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	001a      	movs	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	1898      	adds	r0, r3, r2
 8006400:	4b28      	ldr	r3, [pc, #160]	; (80064a4 <uxTaskGetSystemState+0x110>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2202      	movs	r2, #2
 8006406:	0019      	movs	r1, r3
 8006408:	f000 fa88 	bl	800691c <prvListTasksWithinSingleList>
 800640c:	0002      	movs	r2, r0
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	189b      	adds	r3, r3, r2
 8006412:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	0013      	movs	r3, r2
 8006418:	00db      	lsls	r3, r3, #3
 800641a:	189b      	adds	r3, r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	001a      	movs	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	1898      	adds	r0, r3, r2
 8006424:	4b20      	ldr	r3, [pc, #128]	; (80064a8 <uxTaskGetSystemState+0x114>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2202      	movs	r2, #2
 800642a:	0019      	movs	r1, r3
 800642c:	f000 fa76 	bl	800691c <prvListTasksWithinSingleList>
 8006430:	0002      	movs	r2, r0
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	189b      	adds	r3, r3, r2
 8006436:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	0013      	movs	r3, r2
 800643c:	00db      	lsls	r3, r3, #3
 800643e:	189b      	adds	r3, r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	001a      	movs	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	189b      	adds	r3, r3, r2
 8006448:	4918      	ldr	r1, [pc, #96]	; (80064ac <uxTaskGetSystemState+0x118>)
 800644a:	2204      	movs	r2, #4
 800644c:	0018      	movs	r0, r3
 800644e:	f000 fa65 	bl	800691c <prvListTasksWithinSingleList>
 8006452:	0002      	movs	r2, r0
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	189b      	adds	r3, r3, r2
 8006458:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	0013      	movs	r3, r2
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	189b      	adds	r3, r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	001a      	movs	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	189b      	adds	r3, r3, r2
 800646a:	4911      	ldr	r1, [pc, #68]	; (80064b0 <uxTaskGetSystemState+0x11c>)
 800646c:	2203      	movs	r2, #3
 800646e:	0018      	movs	r0, r3
 8006470:	f000 fa54 	bl	800691c <prvListTasksWithinSingleList>
 8006474:	0002      	movs	r2, r0
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	189b      	adds	r3, r3, r2
 800647a:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d004      	beq.n	800648c <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006482:	f7fb fab1 	bl	80019e8 <getRunTimeCounterValue>
 8006486:	0002      	movs	r2, r0
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800648c:	f7ff fef6 	bl	800627c <xTaskResumeAll>

		return uxTask;
 8006490:	697b      	ldr	r3, [r7, #20]
	}
 8006492:	0018      	movs	r0, r3
 8006494:	46bd      	mov	sp, r7
 8006496:	b006      	add	sp, #24
 8006498:	bd80      	pop	{r7, pc}
 800649a:	46c0      	nop			; (mov r8, r8)
 800649c:	200006d4 	.word	0x200006d4
 80064a0:	200005d8 	.word	0x200005d8
 80064a4:	2000068c 	.word	0x2000068c
 80064a8:	20000690 	.word	0x20000690
 80064ac:	200006a8 	.word	0x200006a8
 80064b0:	200006c0 	.word	0x200006c0

080064b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b086      	sub	sp, #24
 80064b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80064ba:	2300      	movs	r3, #0
 80064bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064be:	4b4a      	ldr	r3, [pc, #296]	; (80065e8 <xTaskIncrementTick+0x134>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d000      	beq.n	80064c8 <xTaskIncrementTick+0x14>
 80064c6:	e084      	b.n	80065d2 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064c8:	4b48      	ldr	r3, [pc, #288]	; (80065ec <xTaskIncrementTick+0x138>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3301      	adds	r3, #1
 80064ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064d0:	4b46      	ldr	r3, [pc, #280]	; (80065ec <xTaskIncrementTick+0x138>)
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d117      	bne.n	800650c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80064dc:	4b44      	ldr	r3, [pc, #272]	; (80065f0 <xTaskIncrementTick+0x13c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <xTaskIncrementTick+0x36>
 80064e6:	b672      	cpsid	i
 80064e8:	e7fe      	b.n	80064e8 <xTaskIncrementTick+0x34>
 80064ea:	4b41      	ldr	r3, [pc, #260]	; (80065f0 <xTaskIncrementTick+0x13c>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	60fb      	str	r3, [r7, #12]
 80064f0:	4b40      	ldr	r3, [pc, #256]	; (80065f4 <xTaskIncrementTick+0x140>)
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	4b3e      	ldr	r3, [pc, #248]	; (80065f0 <xTaskIncrementTick+0x13c>)
 80064f6:	601a      	str	r2, [r3, #0]
 80064f8:	4b3e      	ldr	r3, [pc, #248]	; (80065f4 <xTaskIncrementTick+0x140>)
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	4b3e      	ldr	r3, [pc, #248]	; (80065f8 <xTaskIncrementTick+0x144>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	1c5a      	adds	r2, r3, #1
 8006504:	4b3c      	ldr	r3, [pc, #240]	; (80065f8 <xTaskIncrementTick+0x144>)
 8006506:	601a      	str	r2, [r3, #0]
 8006508:	f000 fa86 	bl	8006a18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800650c:	4b3b      	ldr	r3, [pc, #236]	; (80065fc <xTaskIncrementTick+0x148>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	429a      	cmp	r2, r3
 8006514:	d349      	bcc.n	80065aa <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006516:	4b36      	ldr	r3, [pc, #216]	; (80065f0 <xTaskIncrementTick+0x13c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d104      	bne.n	800652a <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006520:	4b36      	ldr	r3, [pc, #216]	; (80065fc <xTaskIncrementTick+0x148>)
 8006522:	2201      	movs	r2, #1
 8006524:	4252      	negs	r2, r2
 8006526:	601a      	str	r2, [r3, #0]
					break;
 8006528:	e03f      	b.n	80065aa <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800652a:	4b31      	ldr	r3, [pc, #196]	; (80065f0 <xTaskIncrementTick+0x13c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	429a      	cmp	r2, r3
 8006540:	d203      	bcs.n	800654a <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006542:	4b2e      	ldr	r3, [pc, #184]	; (80065fc <xTaskIncrementTick+0x148>)
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006548:	e02f      	b.n	80065aa <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	3304      	adds	r3, #4
 800654e:	0018      	movs	r0, r3
 8006550:	f7ff fc58 	bl	8005e04 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006558:	2b00      	cmp	r3, #0
 800655a:	d004      	beq.n	8006566 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	3318      	adds	r3, #24
 8006560:	0018      	movs	r0, r3
 8006562:	f7ff fc4f 	bl	8005e04 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800656a:	4b25      	ldr	r3, [pc, #148]	; (8006600 <xTaskIncrementTick+0x14c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	429a      	cmp	r2, r3
 8006570:	d903      	bls.n	800657a <xTaskIncrementTick+0xc6>
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006576:	4b22      	ldr	r3, [pc, #136]	; (8006600 <xTaskIncrementTick+0x14c>)
 8006578:	601a      	str	r2, [r3, #0]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800657e:	0013      	movs	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	189b      	adds	r3, r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4a1f      	ldr	r2, [pc, #124]	; (8006604 <xTaskIncrementTick+0x150>)
 8006588:	189a      	adds	r2, r3, r2
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	3304      	adds	r3, #4
 800658e:	0019      	movs	r1, r3
 8006590:	0010      	movs	r0, r2
 8006592:	f7ff fbdf 	bl	8005d54 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800659a:	4b1b      	ldr	r3, [pc, #108]	; (8006608 <xTaskIncrementTick+0x154>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d3b8      	bcc.n	8006516 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80065a4:	2301      	movs	r3, #1
 80065a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065a8:	e7b5      	b.n	8006516 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065aa:	4b17      	ldr	r3, [pc, #92]	; (8006608 <xTaskIncrementTick+0x154>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b0:	4914      	ldr	r1, [pc, #80]	; (8006604 <xTaskIncrementTick+0x150>)
 80065b2:	0013      	movs	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	189b      	adds	r3, r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	585b      	ldr	r3, [r3, r1]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d901      	bls.n	80065c4 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 80065c0:	2301      	movs	r3, #1
 80065c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80065c4:	4b11      	ldr	r3, [pc, #68]	; (800660c <xTaskIncrementTick+0x158>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d007      	beq.n	80065dc <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 80065cc:	2301      	movs	r3, #1
 80065ce:	617b      	str	r3, [r7, #20]
 80065d0:	e004      	b.n	80065dc <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80065d2:	4b0f      	ldr	r3, [pc, #60]	; (8006610 <xTaskIncrementTick+0x15c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	1c5a      	adds	r2, r3, #1
 80065d8:	4b0d      	ldr	r3, [pc, #52]	; (8006610 <xTaskIncrementTick+0x15c>)
 80065da:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80065dc:	697b      	ldr	r3, [r7, #20]
}
 80065de:	0018      	movs	r0, r3
 80065e0:	46bd      	mov	sp, r7
 80065e2:	b006      	add	sp, #24
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	46c0      	nop			; (mov r8, r8)
 80065e8:	200006fc 	.word	0x200006fc
 80065ec:	200006d8 	.word	0x200006d8
 80065f0:	2000068c 	.word	0x2000068c
 80065f4:	20000690 	.word	0x20000690
 80065f8:	200006ec 	.word	0x200006ec
 80065fc:	200006f4 	.word	0x200006f4
 8006600:	200006dc 	.word	0x200006dc
 8006604:	200005d8 	.word	0x200005d8
 8006608:	200005d4 	.word	0x200005d4
 800660c:	200006e8 	.word	0x200006e8
 8006610:	200006e4 	.word	0x200006e4

08006614 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800661a:	4b41      	ldr	r3, [pc, #260]	; (8006720 <vTaskSwitchContext+0x10c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006622:	4b40      	ldr	r3, [pc, #256]	; (8006724 <vTaskSwitchContext+0x110>)
 8006624:	2201      	movs	r2, #1
 8006626:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006628:	e076      	b.n	8006718 <vTaskSwitchContext+0x104>
		xYieldPending = pdFALSE;
 800662a:	4b3e      	ldr	r3, [pc, #248]	; (8006724 <vTaskSwitchContext+0x110>)
 800662c:	2200      	movs	r2, #0
 800662e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8006630:	f7fb f9da 	bl	80019e8 <getRunTimeCounterValue>
 8006634:	0002      	movs	r2, r0
 8006636:	4b3c      	ldr	r3, [pc, #240]	; (8006728 <vTaskSwitchContext+0x114>)
 8006638:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800663a:	4b3b      	ldr	r3, [pc, #236]	; (8006728 <vTaskSwitchContext+0x114>)
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	4b3b      	ldr	r3, [pc, #236]	; (800672c <vTaskSwitchContext+0x118>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	429a      	cmp	r2, r3
 8006644:	d909      	bls.n	800665a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8006646:	4b3a      	ldr	r3, [pc, #232]	; (8006730 <vTaskSwitchContext+0x11c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800664c:	4a36      	ldr	r2, [pc, #216]	; (8006728 <vTaskSwitchContext+0x114>)
 800664e:	6810      	ldr	r0, [r2, #0]
 8006650:	4a36      	ldr	r2, [pc, #216]	; (800672c <vTaskSwitchContext+0x118>)
 8006652:	6812      	ldr	r2, [r2, #0]
 8006654:	1a82      	subs	r2, r0, r2
 8006656:	188a      	adds	r2, r1, r2
 8006658:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800665a:	4b33      	ldr	r3, [pc, #204]	; (8006728 <vTaskSwitchContext+0x114>)
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	4b33      	ldr	r3, [pc, #204]	; (800672c <vTaskSwitchContext+0x118>)
 8006660:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8006662:	4b33      	ldr	r3, [pc, #204]	; (8006730 <vTaskSwitchContext+0x11c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006668:	60bb      	str	r3, [r7, #8]
 800666a:	4b32      	ldr	r3, [pc, #200]	; (8006734 <vTaskSwitchContext+0x120>)
 800666c:	607b      	str	r3, [r7, #4]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	429a      	cmp	r2, r3
 8006676:	d111      	bne.n	800669c <vTaskSwitchContext+0x88>
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	3304      	adds	r3, #4
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	429a      	cmp	r2, r3
 8006682:	d10b      	bne.n	800669c <vTaskSwitchContext+0x88>
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	3308      	adds	r3, #8
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	429a      	cmp	r2, r3
 800668e:	d105      	bne.n	800669c <vTaskSwitchContext+0x88>
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	330c      	adds	r3, #12
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	429a      	cmp	r2, r3
 800669a:	d008      	beq.n	80066ae <vTaskSwitchContext+0x9a>
 800669c:	4b24      	ldr	r3, [pc, #144]	; (8006730 <vTaskSwitchContext+0x11c>)
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	4b23      	ldr	r3, [pc, #140]	; (8006730 <vTaskSwitchContext+0x11c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	3334      	adds	r3, #52	; 0x34
 80066a6:	0019      	movs	r1, r3
 80066a8:	0010      	movs	r0, r2
 80066aa:	f7fa ff43 	bl	8001534 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066ae:	4b22      	ldr	r3, [pc, #136]	; (8006738 <vTaskSwitchContext+0x124>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	60fb      	str	r3, [r7, #12]
 80066b4:	e007      	b.n	80066c6 <vTaskSwitchContext+0xb2>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d101      	bne.n	80066c0 <vTaskSwitchContext+0xac>
 80066bc:	b672      	cpsid	i
 80066be:	e7fe      	b.n	80066be <vTaskSwitchContext+0xaa>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	491d      	ldr	r1, [pc, #116]	; (800673c <vTaskSwitchContext+0x128>)
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	0013      	movs	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	189b      	adds	r3, r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	585b      	ldr	r3, [r3, r1]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d0ee      	beq.n	80066b6 <vTaskSwitchContext+0xa2>
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	0013      	movs	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	189b      	adds	r3, r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4a16      	ldr	r2, [pc, #88]	; (800673c <vTaskSwitchContext+0x128>)
 80066e4:	189b      	adds	r3, r3, r2
 80066e6:	603b      	str	r3, [r7, #0]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	605a      	str	r2, [r3, #4]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	3308      	adds	r3, #8
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d104      	bne.n	8006708 <vTaskSwitchContext+0xf4>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	685a      	ldr	r2, [r3, #4]
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	605a      	str	r2, [r3, #4]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	68da      	ldr	r2, [r3, #12]
 800670e:	4b08      	ldr	r3, [pc, #32]	; (8006730 <vTaskSwitchContext+0x11c>)
 8006710:	601a      	str	r2, [r3, #0]
 8006712:	4b09      	ldr	r3, [pc, #36]	; (8006738 <vTaskSwitchContext+0x124>)
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	601a      	str	r2, [r3, #0]
}
 8006718:	46c0      	nop			; (mov r8, r8)
 800671a:	46bd      	mov	sp, r7
 800671c:	b004      	add	sp, #16
 800671e:	bd80      	pop	{r7, pc}
 8006720:	200006fc 	.word	0x200006fc
 8006724:	200006e8 	.word	0x200006e8
 8006728:	20000704 	.word	0x20000704
 800672c:	20000700 	.word	0x20000700
 8006730:	200005d4 	.word	0x200005d4
 8006734:	a5a5a5a5 	.word	0xa5a5a5a5
 8006738:	200006dc 	.word	0x200006dc
 800673c:	200005d8 	.word	0x200005d8

08006740 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006748:	f000 f84e 	bl	80067e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800674c:	4b03      	ldr	r3, [pc, #12]	; (800675c <prvIdleTask+0x1c>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d9f9      	bls.n	8006748 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006754:	f000 fb2c 	bl	8006db0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8006758:	e7f6      	b.n	8006748 <prvIdleTask+0x8>
 800675a:	46c0      	nop			; (mov r8, r8)
 800675c:	200005d8 	.word	0x200005d8

08006760 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006766:	2300      	movs	r3, #0
 8006768:	607b      	str	r3, [r7, #4]
 800676a:	e00c      	b.n	8006786 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	0013      	movs	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	189b      	adds	r3, r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4a14      	ldr	r2, [pc, #80]	; (80067c8 <prvInitialiseTaskLists+0x68>)
 8006778:	189b      	adds	r3, r3, r2
 800677a:	0018      	movs	r0, r3
 800677c:	f7ff fac1 	bl	8005d02 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3301      	adds	r3, #1
 8006784:	607b      	str	r3, [r7, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b06      	cmp	r3, #6
 800678a:	d9ef      	bls.n	800676c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800678c:	4b0f      	ldr	r3, [pc, #60]	; (80067cc <prvInitialiseTaskLists+0x6c>)
 800678e:	0018      	movs	r0, r3
 8006790:	f7ff fab7 	bl	8005d02 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006794:	4b0e      	ldr	r3, [pc, #56]	; (80067d0 <prvInitialiseTaskLists+0x70>)
 8006796:	0018      	movs	r0, r3
 8006798:	f7ff fab3 	bl	8005d02 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800679c:	4b0d      	ldr	r3, [pc, #52]	; (80067d4 <prvInitialiseTaskLists+0x74>)
 800679e:	0018      	movs	r0, r3
 80067a0:	f7ff faaf 	bl	8005d02 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80067a4:	4b0c      	ldr	r3, [pc, #48]	; (80067d8 <prvInitialiseTaskLists+0x78>)
 80067a6:	0018      	movs	r0, r3
 80067a8:	f7ff faab 	bl	8005d02 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80067ac:	4b0b      	ldr	r3, [pc, #44]	; (80067dc <prvInitialiseTaskLists+0x7c>)
 80067ae:	0018      	movs	r0, r3
 80067b0:	f7ff faa7 	bl	8005d02 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80067b4:	4b0a      	ldr	r3, [pc, #40]	; (80067e0 <prvInitialiseTaskLists+0x80>)
 80067b6:	4a05      	ldr	r2, [pc, #20]	; (80067cc <prvInitialiseTaskLists+0x6c>)
 80067b8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80067ba:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <prvInitialiseTaskLists+0x84>)
 80067bc:	4a04      	ldr	r2, [pc, #16]	; (80067d0 <prvInitialiseTaskLists+0x70>)
 80067be:	601a      	str	r2, [r3, #0]
}
 80067c0:	46c0      	nop			; (mov r8, r8)
 80067c2:	46bd      	mov	sp, r7
 80067c4:	b002      	add	sp, #8
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	200005d8 	.word	0x200005d8
 80067cc:	20000664 	.word	0x20000664
 80067d0:	20000678 	.word	0x20000678
 80067d4:	20000694 	.word	0x20000694
 80067d8:	200006a8 	.word	0x200006a8
 80067dc:	200006c0 	.word	0x200006c0
 80067e0:	2000068c 	.word	0x2000068c
 80067e4:	20000690 	.word	0x20000690

080067e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067ee:	e01a      	b.n	8006826 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80067f0:	f000 faee 	bl	8006dd0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067f4:	4b10      	ldr	r3, [pc, #64]	; (8006838 <prvCheckTasksWaitingTermination+0x50>)
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	3304      	adds	r3, #4
 8006800:	0018      	movs	r0, r3
 8006802:	f7ff faff 	bl	8005e04 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006806:	4b0d      	ldr	r3, [pc, #52]	; (800683c <prvCheckTasksWaitingTermination+0x54>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	1e5a      	subs	r2, r3, #1
 800680c:	4b0b      	ldr	r3, [pc, #44]	; (800683c <prvCheckTasksWaitingTermination+0x54>)
 800680e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006810:	4b0b      	ldr	r3, [pc, #44]	; (8006840 <prvCheckTasksWaitingTermination+0x58>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	1e5a      	subs	r2, r3, #1
 8006816:	4b0a      	ldr	r3, [pc, #40]	; (8006840 <prvCheckTasksWaitingTermination+0x58>)
 8006818:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800681a:	f000 faeb 	bl	8006df4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	0018      	movs	r0, r3
 8006822:	f000 f8e8 	bl	80069f6 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006826:	4b06      	ldr	r3, [pc, #24]	; (8006840 <prvCheckTasksWaitingTermination+0x58>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1e0      	bne.n	80067f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800682e:	46c0      	nop			; (mov r8, r8)
 8006830:	46c0      	nop			; (mov r8, r8)
 8006832:	46bd      	mov	sp, r7
 8006834:	b002      	add	sp, #8
 8006836:	bd80      	pop	{r7, pc}
 8006838:	200006a8 	.word	0x200006a8
 800683c:	200006d4 	.word	0x200006d4
 8006840:	200006bc 	.word	0x200006bc

08006844 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
 8006850:	001a      	movs	r2, r3
 8006852:	1cfb      	adds	r3, r7, #3
 8006854:	701a      	strb	r2, [r3, #0]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d102      	bne.n	8006862 <vTaskGetInfo+0x1e>
 800685c:	4b2e      	ldr	r3, [pc, #184]	; (8006918 <vTaskGetInfo+0xd4>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	e000      	b.n	8006864 <vTaskGetInfo+0x20>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	3334      	adds	r3, #52	; 0x34
 8006870:	001a      	movs	r2, r3
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800689e:	1cfb      	adds	r3, r7, #3
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b05      	cmp	r3, #5
 80068a4:	d01c      	beq.n	80068e0 <vTaskGetInfo+0x9c>
		{
			if( pxTCB == pxCurrentTCB )
 80068a6:	4b1c      	ldr	r3, [pc, #112]	; (8006918 <vTaskGetInfo+0xd4>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d103      	bne.n	80068b8 <vTaskGetInfo+0x74>
			{
				pxTaskStatus->eCurrentState = eRunning;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2200      	movs	r2, #0
 80068b4:	731a      	strb	r2, [r3, #12]
 80068b6:	e01b      	b.n	80068f0 <vTaskGetInfo+0xac>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	1cfa      	adds	r2, r7, #3
 80068bc:	7812      	ldrb	r2, [r2, #0]
 80068be:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 80068c0:	1cfb      	adds	r3, r7, #3
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d113      	bne.n	80068f0 <vTaskGetInfo+0xac>
					{
						vTaskSuspendAll();
 80068c8:	f7ff fccc 	bl	8006264 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d002      	beq.n	80068da <vTaskGetInfo+0x96>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2202      	movs	r2, #2
 80068d8:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 80068da:	f7ff fccf 	bl	800627c <xTaskResumeAll>
 80068de:	e007      	b.n	80068f0 <vTaskGetInfo+0xac>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	0018      	movs	r0, r3
 80068e4:	f7ff fc18 	bl	8006118 <eTaskGetState>
 80068e8:	0003      	movs	r3, r0
 80068ea:	001a      	movs	r2, r3
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d009      	beq.n	800690a <vTaskGetInfo+0xc6>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fa:	0018      	movs	r0, r3
 80068fc:	f000 f861 	bl	80069c2 <prvTaskCheckFreeStackSpace>
 8006900:	0003      	movs	r3, r0
 8006902:	001a      	movs	r2, r3
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8006908:	e002      	b.n	8006910 <vTaskGetInfo+0xcc>
			pxTaskStatus->usStackHighWaterMark = 0;
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2200      	movs	r2, #0
 800690e:	841a      	strh	r2, [r3, #32]
	}
 8006910:	46c0      	nop			; (mov r8, r8)
 8006912:	46bd      	mov	sp, r7
 8006914:	b006      	add	sp, #24
 8006916:	bd80      	pop	{r7, pc}
 8006918:	200005d4 	.word	0x200005d4

0800691c <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800691c:	b580      	push	{r7, lr}
 800691e:	b08a      	sub	sp, #40	; 0x28
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	1dfb      	adds	r3, r7, #7
 8006928:	701a      	strb	r2, [r3, #0]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800692a:	2300      	movs	r3, #0
 800692c:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d040      	beq.n	80069b8 <prvListTasksWithinSingleList+0x9c>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	623b      	str	r3, [r7, #32]
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	685a      	ldr	r2, [r3, #4]
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	605a      	str	r2, [r3, #4]
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	6a3b      	ldr	r3, [r7, #32]
 800694a:	3308      	adds	r3, #8
 800694c:	429a      	cmp	r2, r3
 800694e:	d104      	bne.n	800695a <prvListTasksWithinSingleList+0x3e>
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	605a      	str	r2, [r3, #4]
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	61bb      	str	r3, [r7, #24]
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	605a      	str	r2, [r3, #4]
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	3308      	adds	r3, #8
 8006978:	429a      	cmp	r2, r3
 800697a:	d104      	bne.n	8006986 <prvListTasksWithinSingleList+0x6a>
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	605a      	str	r2, [r3, #4]
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800698e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006990:	0013      	movs	r3, r2
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	189b      	adds	r3, r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	001a      	movs	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	1899      	adds	r1, r3, r2
 800699e:	1dfb      	adds	r3, r7, #7
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	6978      	ldr	r0, [r7, #20]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f7ff ff4d 	bl	8006844 <vTaskGetInfo>
				uxTask++;
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	3301      	adds	r3, #1
 80069ae:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d1d4      	bne.n	8006962 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80069ba:	0018      	movs	r0, r3
 80069bc:	46bd      	mov	sp, r7
 80069be:	b00a      	add	sp, #40	; 0x28
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80069ca:	2300      	movs	r3, #0
 80069cc:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80069ce:	e005      	b.n	80069dc <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3301      	adds	r3, #1
 80069d4:	607b      	str	r3, [r7, #4]
			ulCount++;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	3301      	adds	r3, #1
 80069da:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	2ba5      	cmp	r3, #165	; 0xa5
 80069e2:	d0f5      	beq.n	80069d0 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	089b      	lsrs	r3, r3, #2
 80069e8:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	b29b      	uxth	r3, r3
	}
 80069ee:	0018      	movs	r0, r3
 80069f0:	46bd      	mov	sp, r7
 80069f2:	b004      	add	sp, #16
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b082      	sub	sp, #8
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a02:	0018      	movs	r0, r3
 8006a04:	f000 fb28 	bl	8007058 <vPortFree>
			vPortFree( pxTCB );
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	f000 fb24 	bl	8007058 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a10:	46c0      	nop			; (mov r8, r8)
 8006a12:	46bd      	mov	sp, r7
 8006a14:	b002      	add	sp, #8
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a1e:	4b0b      	ldr	r3, [pc, #44]	; (8006a4c <prvResetNextTaskUnblockTime+0x34>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d104      	bne.n	8006a32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a28:	4b09      	ldr	r3, [pc, #36]	; (8006a50 <prvResetNextTaskUnblockTime+0x38>)
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	4252      	negs	r2, r2
 8006a2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a30:	e008      	b.n	8006a44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a32:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <prvResetNextTaskUnblockTime+0x34>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	4b03      	ldr	r3, [pc, #12]	; (8006a50 <prvResetNextTaskUnblockTime+0x38>)
 8006a42:	601a      	str	r2, [r3, #0]
}
 8006a44:	46c0      	nop			; (mov r8, r8)
 8006a46:	46bd      	mov	sp, r7
 8006a48:	b002      	add	sp, #8
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	2000068c 	.word	0x2000068c
 8006a50:	200006f4 	.word	0x200006f4

08006a54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a5a:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <xTaskGetSchedulerState+0x30>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d102      	bne.n	8006a68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a62:	2301      	movs	r3, #1
 8006a64:	607b      	str	r3, [r7, #4]
 8006a66:	e008      	b.n	8006a7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a68:	4b07      	ldr	r3, [pc, #28]	; (8006a88 <xTaskGetSchedulerState+0x34>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d102      	bne.n	8006a76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a70:	2302      	movs	r3, #2
 8006a72:	607b      	str	r3, [r7, #4]
 8006a74:	e001      	b.n	8006a7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a76:	2300      	movs	r3, #0
 8006a78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a7a:	687b      	ldr	r3, [r7, #4]
	}
 8006a7c:	0018      	movs	r0, r3
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	b002      	add	sp, #8
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	200006e0 	.word	0x200006e0
 8006a88:	200006fc 	.word	0x200006fc

08006a8c <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8006a96:	683a      	ldr	r2, [r7, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	0011      	movs	r1, r2
 8006a9c:	0018      	movs	r0, r3
 8006a9e:	f000 fe0f 	bl	80076c0 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	f7f9 fb2f 	bl	8000108 <strlen>
 8006aaa:	0003      	movs	r3, r0
 8006aac:	60fb      	str	r3, [r7, #12]
 8006aae:	e007      	b.n	8006ac0 <prvWriteNameToBuffer+0x34>
		{
			pcBuffer[ x ] = ' ';
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	18d3      	adds	r3, r2, r3
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	3301      	adds	r3, #1
 8006abe:	60fb      	str	r3, [r7, #12]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2b0e      	cmp	r3, #14
 8006ac4:	d9f4      	bls.n	8006ab0 <prvWriteNameToBuffer+0x24>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	18d3      	adds	r3, r2, r3
 8006acc:	2200      	movs	r2, #0
 8006ace:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	18d3      	adds	r3, r2, r3
	}
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	b004      	add	sp, #16
 8006adc:	bd80      	pop	{r7, pc}
	...

08006ae0 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8006aee:	4b3f      	ldr	r3, [pc, #252]	; (8006bec <vTaskGetRunTimeStats+0x10c>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8006af4:	4b3d      	ldr	r3, [pc, #244]	; (8006bec <vTaskGetRunTimeStats+0x10c>)
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	0013      	movs	r3, r2
 8006afa:	00db      	lsls	r3, r3, #3
 8006afc:	189b      	adds	r3, r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	0018      	movs	r0, r3
 8006b02:	f000 f9fd 	bl	8006f00 <pvPortMalloc>
 8006b06:	0003      	movs	r3, r0
 8006b08:	617b      	str	r3, [r7, #20]

		if( pxTaskStatusArray != NULL )
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d068      	beq.n	8006be2 <vTaskGetRunTimeStats+0x102>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8006b10:	230c      	movs	r3, #12
 8006b12:	18fa      	adds	r2, r7, r3
 8006b14:	69b9      	ldr	r1, [r7, #24]
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	0018      	movs	r0, r3
 8006b1a:	f7ff fc3b 	bl	8006394 <uxTaskGetSystemState>
 8006b1e:	0003      	movs	r3, r0
 8006b20:	61bb      	str	r3, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2164      	movs	r1, #100	; 0x64
 8006b26:	0018      	movs	r0, r3
 8006b28:	f7f9 fb00 	bl	800012c <__udivsi3>
 8006b2c:	0003      	movs	r3, r0
 8006b2e:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d051      	beq.n	8006bda <vTaskGetRunTimeStats+0xfa>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 8006b36:	2300      	movs	r3, #0
 8006b38:	61fb      	str	r3, [r7, #28]
 8006b3a:	e04a      	b.n	8006bd2 <vTaskGetRunTimeStats+0xf2>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8006b3c:	69fa      	ldr	r2, [r7, #28]
 8006b3e:	0013      	movs	r3, r2
 8006b40:	00db      	lsls	r3, r3, #3
 8006b42:	189b      	adds	r3, r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	001a      	movs	r2, r3
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	189b      	adds	r3, r3, r2
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	0011      	movs	r1, r2
 8006b52:	0018      	movs	r0, r3
 8006b54:	f7f9 faea 	bl	800012c <__udivsi3>
 8006b58:	0003      	movs	r3, r0
 8006b5a:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8006b5c:	69fa      	ldr	r2, [r7, #28]
 8006b5e:	0013      	movs	r3, r2
 8006b60:	00db      	lsls	r3, r3, #3
 8006b62:	189b      	adds	r3, r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	001a      	movs	r2, r3
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	189b      	adds	r3, r3, r2
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	0011      	movs	r1, r2
 8006b72:	0018      	movs	r0, r3
 8006b74:	f7ff ff8a 	bl	8006a8c <prvWriteNameToBuffer>
 8006b78:	0003      	movs	r3, r0
 8006b7a:	607b      	str	r3, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00e      	beq.n	8006ba0 <vTaskGetRunTimeStats+0xc0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8006b82:	69fa      	ldr	r2, [r7, #28]
 8006b84:	0013      	movs	r3, r2
 8006b86:	00db      	lsls	r3, r3, #3
 8006b88:	189b      	adds	r3, r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	001a      	movs	r2, r3
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	189b      	adds	r3, r3, r2
 8006b92:	699a      	ldr	r2, [r3, #24]
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	4916      	ldr	r1, [pc, #88]	; (8006bf0 <vTaskGetRunTimeStats+0x110>)
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fd71 	bl	8007680 <siprintf>
 8006b9e:	e00d      	b.n	8006bbc <vTaskGetRunTimeStats+0xdc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8006ba0:	69fa      	ldr	r2, [r7, #28]
 8006ba2:	0013      	movs	r3, r2
 8006ba4:	00db      	lsls	r3, r3, #3
 8006ba6:	189b      	adds	r3, r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	001a      	movs	r2, r3
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	189b      	adds	r3, r3, r2
 8006bb0:	699a      	ldr	r2, [r3, #24]
 8006bb2:	4910      	ldr	r1, [pc, #64]	; (8006bf4 <vTaskGetRunTimeStats+0x114>)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	0018      	movs	r0, r3
 8006bb8:	f000 fd62 	bl	8007680 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	f7f9 faa2 	bl	8000108 <strlen>
 8006bc4:	0002      	movs	r2, r0
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	189b      	adds	r3, r3, r2
 8006bca:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	61fb      	str	r3, [r7, #28]
 8006bd2:	69fa      	ldr	r2, [r7, #28]
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d3b0      	bcc.n	8006b3c <vTaskGetRunTimeStats+0x5c>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f000 fa3b 	bl	8007058 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006be2:	46c0      	nop			; (mov r8, r8)
 8006be4:	46bd      	mov	sp, r7
 8006be6:	b008      	add	sp, #32
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	46c0      	nop			; (mov r8, r8)
 8006bec:	200006d4 	.word	0x200006d4
 8006bf0:	08008ec4 	.word	0x08008ec4
 8006bf4:	08008ed0 	.word	0x08008ed0

08006bf8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c02:	4b21      	ldr	r3, [pc, #132]	; (8006c88 <prvAddCurrentTaskToDelayedList+0x90>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c08:	4b20      	ldr	r3, [pc, #128]	; (8006c8c <prvAddCurrentTaskToDelayedList+0x94>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	0018      	movs	r0, r3
 8006c10:	f7ff f8f8 	bl	8005e04 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3301      	adds	r3, #1
 8006c18:	d10b      	bne.n	8006c32 <prvAddCurrentTaskToDelayedList+0x3a>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d008      	beq.n	8006c32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c20:	4b1a      	ldr	r3, [pc, #104]	; (8006c8c <prvAddCurrentTaskToDelayedList+0x94>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	1d1a      	adds	r2, r3, #4
 8006c26:	4b1a      	ldr	r3, [pc, #104]	; (8006c90 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c28:	0011      	movs	r1, r2
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	f7ff f892 	bl	8005d54 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c30:	e026      	b.n	8006c80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	18d3      	adds	r3, r2, r3
 8006c38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c3a:	4b14      	ldr	r3, [pc, #80]	; (8006c8c <prvAddCurrentTaskToDelayedList+0x94>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d209      	bcs.n	8006c5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c4a:	4b12      	ldr	r3, [pc, #72]	; (8006c94 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	4b0f      	ldr	r3, [pc, #60]	; (8006c8c <prvAddCurrentTaskToDelayedList+0x94>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3304      	adds	r3, #4
 8006c54:	0019      	movs	r1, r3
 8006c56:	0010      	movs	r0, r2
 8006c58:	f7ff f89e 	bl	8005d98 <vListInsert>
}
 8006c5c:	e010      	b.n	8006c80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c5e:	4b0e      	ldr	r3, [pc, #56]	; (8006c98 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	4b0a      	ldr	r3, [pc, #40]	; (8006c8c <prvAddCurrentTaskToDelayedList+0x94>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	3304      	adds	r3, #4
 8006c68:	0019      	movs	r1, r3
 8006c6a:	0010      	movs	r0, r2
 8006c6c:	f7ff f894 	bl	8005d98 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c70:	4b0a      	ldr	r3, [pc, #40]	; (8006c9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d202      	bcs.n	8006c80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c7a:	4b08      	ldr	r3, [pc, #32]	; (8006c9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	601a      	str	r2, [r3, #0]
}
 8006c80:	46c0      	nop			; (mov r8, r8)
 8006c82:	46bd      	mov	sp, r7
 8006c84:	b004      	add	sp, #16
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	200006d8 	.word	0x200006d8
 8006c8c:	200005d4 	.word	0x200005d4
 8006c90:	200006c0 	.word	0x200006c0
 8006c94:	20000690 	.word	0x20000690
 8006c98:	2000068c 	.word	0x2000068c
 8006c9c:	200006f4 	.word	0x200006f4

08006ca0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	3b04      	subs	r3, #4
 8006cb0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2280      	movs	r2, #128	; 0x80
 8006cb6:	0452      	lsls	r2, r2, #17
 8006cb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3b04      	subs	r3, #4
 8006cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	3b04      	subs	r3, #4
 8006cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ccc:	4a08      	ldr	r2, [pc, #32]	; (8006cf0 <pxPortInitialiseStack+0x50>)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	3b14      	subs	r3, #20
 8006cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3b20      	subs	r3, #32
 8006ce2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
}
 8006ce6:	0018      	movs	r0, r3
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	b004      	add	sp, #16
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	46c0      	nop			; (mov r8, r8)
 8006cf0:	08006cf5 	.word	0x08006cf5

08006cf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006cfe:	4b08      	ldr	r3, [pc, #32]	; (8006d20 <prvTaskExitError+0x2c>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3301      	adds	r3, #1
 8006d04:	d001      	beq.n	8006d0a <prvTaskExitError+0x16>
 8006d06:	b672      	cpsid	i
 8006d08:	e7fe      	b.n	8006d08 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8006d0a:	b672      	cpsid	i
	while( ulDummy == 0 )
 8006d0c:	46c0      	nop			; (mov r8, r8)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d0fc      	beq.n	8006d0e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d14:	46c0      	nop			; (mov r8, r8)
 8006d16:	46c0      	nop			; (mov r8, r8)
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	b002      	add	sp, #8
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	46c0      	nop			; (mov r8, r8)
 8006d20:	2000000c 	.word	0x2000000c

08006d24 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8006d28:	46c0      	nop			; (mov r8, r8)
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
	...

08006d30 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006d30:	4a0b      	ldr	r2, [pc, #44]	; (8006d60 <pxCurrentTCBConst2>)
 8006d32:	6813      	ldr	r3, [r2, #0]
 8006d34:	6818      	ldr	r0, [r3, #0]
 8006d36:	3020      	adds	r0, #32
 8006d38:	f380 8809 	msr	PSP, r0
 8006d3c:	2002      	movs	r0, #2
 8006d3e:	f380 8814 	msr	CONTROL, r0
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006d48:	46ae      	mov	lr, r5
 8006d4a:	bc08      	pop	{r3}
 8006d4c:	bc04      	pop	{r2}
 8006d4e:	b662      	cpsie	i
 8006d50:	4718      	bx	r3
 8006d52:	46c0      	nop			; (mov r8, r8)
 8006d54:	46c0      	nop			; (mov r8, r8)
 8006d56:	46c0      	nop			; (mov r8, r8)
 8006d58:	46c0      	nop			; (mov r8, r8)
 8006d5a:	46c0      	nop			; (mov r8, r8)
 8006d5c:	46c0      	nop			; (mov r8, r8)
 8006d5e:	46c0      	nop			; (mov r8, r8)

08006d60 <pxCurrentTCBConst2>:
 8006d60:	200005d4 	.word	0x200005d4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8006d64:	46c0      	nop			; (mov r8, r8)
 8006d66:	46c0      	nop			; (mov r8, r8)

08006d68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d6c:	4b0e      	ldr	r3, [pc, #56]	; (8006da8 <xPortStartScheduler+0x40>)
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	4b0d      	ldr	r3, [pc, #52]	; (8006da8 <xPortStartScheduler+0x40>)
 8006d72:	21ff      	movs	r1, #255	; 0xff
 8006d74:	0409      	lsls	r1, r1, #16
 8006d76:	430a      	orrs	r2, r1
 8006d78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d7a:	4b0b      	ldr	r3, [pc, #44]	; (8006da8 <xPortStartScheduler+0x40>)
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	4b0a      	ldr	r3, [pc, #40]	; (8006da8 <xPortStartScheduler+0x40>)
 8006d80:	21ff      	movs	r1, #255	; 0xff
 8006d82:	0609      	lsls	r1, r1, #24
 8006d84:	430a      	orrs	r2, r1
 8006d86:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d88:	f000 f898 	bl	8006ebc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d8c:	4b07      	ldr	r3, [pc, #28]	; (8006dac <xPortStartScheduler+0x44>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8006d92:	f7ff ffcd 	bl	8006d30 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d96:	f7ff fc3d 	bl	8006614 <vTaskSwitchContext>
	prvTaskExitError();
 8006d9a:	f7ff ffab 	bl	8006cf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	0018      	movs	r0, r3
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	46c0      	nop			; (mov r8, r8)
 8006da8:	e000ed20 	.word	0xe000ed20
 8006dac:	2000000c 	.word	0x2000000c

08006db0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006db4:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <vPortYield+0x1c>)
 8006db6:	2280      	movs	r2, #128	; 0x80
 8006db8:	0552      	lsls	r2, r2, #21
 8006dba:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8006dbc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006dc0:	f3bf 8f6f 	isb	sy
}
 8006dc4:	46c0      	nop			; (mov r8, r8)
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	46c0      	nop			; (mov r8, r8)
 8006dcc:	e000ed04 	.word	0xe000ed04

08006dd0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8006dd4:	b672      	cpsid	i
	uxCriticalNesting++;
 8006dd6:	4b06      	ldr	r3, [pc, #24]	; (8006df0 <vPortEnterCritical+0x20>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	1c5a      	adds	r2, r3, #1
 8006ddc:	4b04      	ldr	r3, [pc, #16]	; (8006df0 <vPortEnterCritical+0x20>)
 8006dde:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8006de0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006de4:	f3bf 8f6f 	isb	sy
}
 8006de8:	46c0      	nop			; (mov r8, r8)
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	46c0      	nop			; (mov r8, r8)
 8006df0:	2000000c 	.word	0x2000000c

08006df4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006df8:	4b09      	ldr	r3, [pc, #36]	; (8006e20 <vPortExitCritical+0x2c>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <vPortExitCritical+0x10>
 8006e00:	b672      	cpsid	i
 8006e02:	e7fe      	b.n	8006e02 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8006e04:	4b06      	ldr	r3, [pc, #24]	; (8006e20 <vPortExitCritical+0x2c>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	1e5a      	subs	r2, r3, #1
 8006e0a:	4b05      	ldr	r3, [pc, #20]	; (8006e20 <vPortExitCritical+0x2c>)
 8006e0c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8006e0e:	4b04      	ldr	r3, [pc, #16]	; (8006e20 <vPortExitCritical+0x2c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d100      	bne.n	8006e18 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8006e16:	b662      	cpsie	i
	}
}
 8006e18:	46c0      	nop			; (mov r8, r8)
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	46c0      	nop			; (mov r8, r8)
 8006e20:	2000000c 	.word	0x2000000c

08006e24 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8006e24:	f3ef 8010 	mrs	r0, PRIMASK
 8006e28:	b672      	cpsid	i
 8006e2a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8006e2c:	46c0      	nop			; (mov r8, r8)
 8006e2e:	0018      	movs	r0, r3

08006e30 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8006e30:	f380 8810 	msr	PRIMASK, r0
 8006e34:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8006e36:	46c0      	nop			; (mov r8, r8)
	...

08006e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e40:	f3ef 8009 	mrs	r0, PSP
 8006e44:	4b0e      	ldr	r3, [pc, #56]	; (8006e80 <pxCurrentTCBConst>)
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	3820      	subs	r0, #32
 8006e4a:	6010      	str	r0, [r2, #0]
 8006e4c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006e4e:	4644      	mov	r4, r8
 8006e50:	464d      	mov	r5, r9
 8006e52:	4656      	mov	r6, sl
 8006e54:	465f      	mov	r7, fp
 8006e56:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006e58:	b508      	push	{r3, lr}
 8006e5a:	b672      	cpsid	i
 8006e5c:	f7ff fbda 	bl	8006614 <vTaskSwitchContext>
 8006e60:	b662      	cpsie	i
 8006e62:	bc0c      	pop	{r2, r3}
 8006e64:	6811      	ldr	r1, [r2, #0]
 8006e66:	6808      	ldr	r0, [r1, #0]
 8006e68:	3010      	adds	r0, #16
 8006e6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006e6c:	46a0      	mov	r8, r4
 8006e6e:	46a9      	mov	r9, r5
 8006e70:	46b2      	mov	sl, r6
 8006e72:	46bb      	mov	fp, r7
 8006e74:	f380 8809 	msr	PSP, r0
 8006e78:	3820      	subs	r0, #32
 8006e7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006e7c:	4718      	bx	r3
 8006e7e:	46c0      	nop			; (mov r8, r8)

08006e80 <pxCurrentTCBConst>:
 8006e80:	200005d4 	.word	0x200005d4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8006e84:	46c0      	nop			; (mov r8, r8)
 8006e86:	46c0      	nop			; (mov r8, r8)

08006e88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e8e:	f7ff ffc9 	bl	8006e24 <ulSetInterruptMaskFromISR>
 8006e92:	0003      	movs	r3, r0
 8006e94:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e96:	f7ff fb0d 	bl	80064b4 <xTaskIncrementTick>
 8006e9a:	1e03      	subs	r3, r0, #0
 8006e9c:	d003      	beq.n	8006ea6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e9e:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <xPortSysTickHandler+0x30>)
 8006ea0:	2280      	movs	r2, #128	; 0x80
 8006ea2:	0552      	lsls	r2, r2, #21
 8006ea4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	f7ff ffc1 	bl	8006e30 <vClearInterruptMaskFromISR>
}
 8006eae:	46c0      	nop			; (mov r8, r8)
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	b002      	add	sp, #8
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	46c0      	nop			; (mov r8, r8)
 8006eb8:	e000ed04 	.word	0xe000ed04

08006ebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ec0:	4b0b      	ldr	r3, [pc, #44]	; (8006ef0 <vPortSetupTimerInterrupt+0x34>)
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ec6:	4b0b      	ldr	r3, [pc, #44]	; (8006ef4 <vPortSetupTimerInterrupt+0x38>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ecc:	4b0a      	ldr	r3, [pc, #40]	; (8006ef8 <vPortSetupTimerInterrupt+0x3c>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	22fa      	movs	r2, #250	; 0xfa
 8006ed2:	0091      	lsls	r1, r2, #2
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	f7f9 f929 	bl	800012c <__udivsi3>
 8006eda:	0003      	movs	r3, r0
 8006edc:	001a      	movs	r2, r3
 8006ede:	4b07      	ldr	r3, [pc, #28]	; (8006efc <vPortSetupTimerInterrupt+0x40>)
 8006ee0:	3a01      	subs	r2, #1
 8006ee2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8006ee4:	4b02      	ldr	r3, [pc, #8]	; (8006ef0 <vPortSetupTimerInterrupt+0x34>)
 8006ee6:	2207      	movs	r2, #7
 8006ee8:	601a      	str	r2, [r3, #0]
}
 8006eea:	46c0      	nop			; (mov r8, r8)
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	e000e010 	.word	0xe000e010
 8006ef4:	e000e018 	.word	0xe000e018
 8006ef8:	20000000 	.word	0x20000000
 8006efc:	e000e014 	.word	0xe000e014

08006f00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8006f0c:	f7ff f9aa 	bl	8006264 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f10:	4b4b      	ldr	r3, [pc, #300]	; (8007040 <pvPortMalloc+0x140>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f18:	f000 f8ec 	bl	80070f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f1c:	4b49      	ldr	r3, [pc, #292]	; (8007044 <pvPortMalloc+0x144>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	4013      	ands	r3, r2
 8006f24:	d000      	beq.n	8006f28 <pvPortMalloc+0x28>
 8006f26:	e07e      	b.n	8007026 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d012      	beq.n	8006f54 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8006f2e:	2208      	movs	r2, #8
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	189b      	adds	r3, r3, r2
 8006f34:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2207      	movs	r2, #7
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	d00a      	beq.n	8006f54 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2207      	movs	r2, #7
 8006f42:	4393      	bics	r3, r2
 8006f44:	3308      	adds	r3, #8
 8006f46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2207      	movs	r2, #7
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	d001      	beq.n	8006f54 <pvPortMalloc+0x54>
 8006f50:	b672      	cpsid	i
 8006f52:	e7fe      	b.n	8006f52 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d065      	beq.n	8007026 <pvPortMalloc+0x126>
 8006f5a:	4b3b      	ldr	r3, [pc, #236]	; (8007048 <pvPortMalloc+0x148>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d860      	bhi.n	8007026 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f64:	4b39      	ldr	r3, [pc, #228]	; (800704c <pvPortMalloc+0x14c>)
 8006f66:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8006f68:	4b38      	ldr	r3, [pc, #224]	; (800704c <pvPortMalloc+0x14c>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f6e:	e004      	b.n	8006f7a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d903      	bls.n	8006f8c <pvPortMalloc+0x8c>
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1f1      	bne.n	8006f70 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f8c:	4b2c      	ldr	r3, [pc, #176]	; (8007040 <pvPortMalloc+0x140>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d047      	beq.n	8007026 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2208      	movs	r2, #8
 8006f9c:	189b      	adds	r3, r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	1ad2      	subs	r2, r2, r3
 8006fb0:	2308      	movs	r3, #8
 8006fb2:	005b      	lsls	r3, r3, #1
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d916      	bls.n	8006fe6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	18d3      	adds	r3, r2, r3
 8006fbe:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2207      	movs	r2, #7
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	d001      	beq.n	8006fcc <pvPortMalloc+0xcc>
 8006fc8:	b672      	cpsid	i
 8006fca:	e7fe      	b.n	8006fca <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	1ad2      	subs	r2, r2, r3
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	0018      	movs	r0, r3
 8006fe2:	f000 f8e7 	bl	80071b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006fe6:	4b18      	ldr	r3, [pc, #96]	; (8007048 <pvPortMalloc+0x148>)
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	1ad2      	subs	r2, r2, r3
 8006ff0:	4b15      	ldr	r3, [pc, #84]	; (8007048 <pvPortMalloc+0x148>)
 8006ff2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ff4:	4b14      	ldr	r3, [pc, #80]	; (8007048 <pvPortMalloc+0x148>)
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	4b15      	ldr	r3, [pc, #84]	; (8007050 <pvPortMalloc+0x150>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d203      	bcs.n	8007008 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007000:	4b11      	ldr	r3, [pc, #68]	; (8007048 <pvPortMalloc+0x148>)
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	4b12      	ldr	r3, [pc, #72]	; (8007050 <pvPortMalloc+0x150>)
 8007006:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	4b0d      	ldr	r3, [pc, #52]	; (8007044 <pvPortMalloc+0x144>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	431a      	orrs	r2, r3
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800701c:	4b0d      	ldr	r3, [pc, #52]	; (8007054 <pvPortMalloc+0x154>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	4b0c      	ldr	r3, [pc, #48]	; (8007054 <pvPortMalloc+0x154>)
 8007024:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007026:	f7ff f929 	bl	800627c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2207      	movs	r2, #7
 800702e:	4013      	ands	r3, r2
 8007030:	d001      	beq.n	8007036 <pvPortMalloc+0x136>
 8007032:	b672      	cpsid	i
 8007034:	e7fe      	b.n	8007034 <pvPortMalloc+0x134>
	return pvReturn;
 8007036:	68fb      	ldr	r3, [r7, #12]
}
 8007038:	0018      	movs	r0, r3
 800703a:	46bd      	mov	sp, r7
 800703c:	b006      	add	sp, #24
 800703e:	bd80      	pop	{r7, pc}
 8007040:	20001310 	.word	0x20001310
 8007044:	20001324 	.word	0x20001324
 8007048:	20001314 	.word	0x20001314
 800704c:	20001308 	.word	0x20001308
 8007050:	20001318 	.word	0x20001318
 8007054:	2000131c 	.word	0x2000131c

08007058 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d03a      	beq.n	80070e0 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800706a:	2308      	movs	r3, #8
 800706c:	425b      	negs	r3, r3
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	18d3      	adds	r3, r2, r3
 8007072:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	4b1a      	ldr	r3, [pc, #104]	; (80070e8 <vPortFree+0x90>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4013      	ands	r3, r2
 8007082:	d101      	bne.n	8007088 <vPortFree+0x30>
 8007084:	b672      	cpsid	i
 8007086:	e7fe      	b.n	8007086 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d001      	beq.n	8007094 <vPortFree+0x3c>
 8007090:	b672      	cpsid	i
 8007092:	e7fe      	b.n	8007092 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	4b13      	ldr	r3, [pc, #76]	; (80070e8 <vPortFree+0x90>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4013      	ands	r3, r2
 800709e:	d01f      	beq.n	80070e0 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d11b      	bne.n	80070e0 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	4b0e      	ldr	r3, [pc, #56]	; (80070e8 <vPortFree+0x90>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	43db      	mvns	r3, r3
 80070b2:	401a      	ands	r2, r3
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80070b8:	f7ff f8d4 	bl	8006264 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	4b0a      	ldr	r3, [pc, #40]	; (80070ec <vPortFree+0x94>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	18d2      	adds	r2, r2, r3
 80070c6:	4b09      	ldr	r3, [pc, #36]	; (80070ec <vPortFree+0x94>)
 80070c8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	0018      	movs	r0, r3
 80070ce:	f000 f871 	bl	80071b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80070d2:	4b07      	ldr	r3, [pc, #28]	; (80070f0 <vPortFree+0x98>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	1c5a      	adds	r2, r3, #1
 80070d8:	4b05      	ldr	r3, [pc, #20]	; (80070f0 <vPortFree+0x98>)
 80070da:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 80070dc:	f7ff f8ce 	bl	800627c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80070e0:	46c0      	nop			; (mov r8, r8)
 80070e2:	46bd      	mov	sp, r7
 80070e4:	b004      	add	sp, #16
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	20001324 	.word	0x20001324
 80070ec:	20001314 	.word	0x20001314
 80070f0:	20001320 	.word	0x20001320

080070f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070fa:	23c0      	movs	r3, #192	; 0xc0
 80070fc:	011b      	lsls	r3, r3, #4
 80070fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007100:	4b26      	ldr	r3, [pc, #152]	; (800719c <prvHeapInit+0xa8>)
 8007102:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2207      	movs	r2, #7
 8007108:	4013      	ands	r3, r2
 800710a:	d00c      	beq.n	8007126 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	3307      	adds	r3, #7
 8007110:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2207      	movs	r2, #7
 8007116:	4393      	bics	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	1ad2      	subs	r2, r2, r3
 8007120:	4b1e      	ldr	r3, [pc, #120]	; (800719c <prvHeapInit+0xa8>)
 8007122:	18d3      	adds	r3, r2, r3
 8007124:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800712a:	4b1d      	ldr	r3, [pc, #116]	; (80071a0 <prvHeapInit+0xac>)
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007130:	4b1b      	ldr	r3, [pc, #108]	; (80071a0 <prvHeapInit+0xac>)
 8007132:	2200      	movs	r2, #0
 8007134:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	18d3      	adds	r3, r2, r3
 800713c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800713e:	2208      	movs	r2, #8
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	1a9b      	subs	r3, r3, r2
 8007144:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2207      	movs	r2, #7
 800714a:	4393      	bics	r3, r2
 800714c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	4b14      	ldr	r3, [pc, #80]	; (80071a4 <prvHeapInit+0xb0>)
 8007152:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8007154:	4b13      	ldr	r3, [pc, #76]	; (80071a4 <prvHeapInit+0xb0>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2200      	movs	r2, #0
 800715a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800715c:	4b11      	ldr	r3, [pc, #68]	; (80071a4 <prvHeapInit+0xb0>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2200      	movs	r2, #0
 8007162:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	1ad2      	subs	r2, r2, r3
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007172:	4b0c      	ldr	r3, [pc, #48]	; (80071a4 <prvHeapInit+0xb0>)
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	685a      	ldr	r2, [r3, #4]
 800717e:	4b0a      	ldr	r3, [pc, #40]	; (80071a8 <prvHeapInit+0xb4>)
 8007180:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	685a      	ldr	r2, [r3, #4]
 8007186:	4b09      	ldr	r3, [pc, #36]	; (80071ac <prvHeapInit+0xb8>)
 8007188:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800718a:	4b09      	ldr	r3, [pc, #36]	; (80071b0 <prvHeapInit+0xbc>)
 800718c:	2280      	movs	r2, #128	; 0x80
 800718e:	0612      	lsls	r2, r2, #24
 8007190:	601a      	str	r2, [r3, #0]
}
 8007192:	46c0      	nop			; (mov r8, r8)
 8007194:	46bd      	mov	sp, r7
 8007196:	b004      	add	sp, #16
 8007198:	bd80      	pop	{r7, pc}
 800719a:	46c0      	nop			; (mov r8, r8)
 800719c:	20000708 	.word	0x20000708
 80071a0:	20001308 	.word	0x20001308
 80071a4:	20001310 	.word	0x20001310
 80071a8:	20001318 	.word	0x20001318
 80071ac:	20001314 	.word	0x20001314
 80071b0:	20001324 	.word	0x20001324

080071b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071bc:	4b27      	ldr	r3, [pc, #156]	; (800725c <prvInsertBlockIntoFreeList+0xa8>)
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	e002      	b.n	80071c8 <prvInsertBlockIntoFreeList+0x14>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d8f7      	bhi.n	80071c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	18d3      	adds	r3, r2, r3
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d108      	bne.n	80071f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	18d2      	adds	r2, r2, r3
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	18d2      	adds	r2, r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	429a      	cmp	r2, r3
 8007208:	d118      	bne.n	800723c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	4b14      	ldr	r3, [pc, #80]	; (8007260 <prvInsertBlockIntoFreeList+0xac>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	429a      	cmp	r2, r3
 8007214:	d00d      	beq.n	8007232 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	18d2      	adds	r2, r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	601a      	str	r2, [r3, #0]
 8007230:	e008      	b.n	8007244 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007232:	4b0b      	ldr	r3, [pc, #44]	; (8007260 <prvInsertBlockIntoFreeList+0xac>)
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	e003      	b.n	8007244 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	429a      	cmp	r2, r3
 800724a:	d002      	beq.n	8007252 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007252:	46c0      	nop			; (mov r8, r8)
 8007254:	46bd      	mov	sp, r7
 8007256:	b004      	add	sp, #16
 8007258:	bd80      	pop	{r7, pc}
 800725a:	46c0      	nop			; (mov r8, r8)
 800725c:	20001308 	.word	0x20001308
 8007260:	20001310 	.word	0x20001310

08007264 <__errno>:
 8007264:	4b01      	ldr	r3, [pc, #4]	; (800726c <__errno+0x8>)
 8007266:	6818      	ldr	r0, [r3, #0]
 8007268:	4770      	bx	lr
 800726a:	46c0      	nop			; (mov r8, r8)
 800726c:	20000010 	.word	0x20000010

08007270 <__libc_init_array>:
 8007270:	b570      	push	{r4, r5, r6, lr}
 8007272:	2600      	movs	r6, #0
 8007274:	4d0c      	ldr	r5, [pc, #48]	; (80072a8 <__libc_init_array+0x38>)
 8007276:	4c0d      	ldr	r4, [pc, #52]	; (80072ac <__libc_init_array+0x3c>)
 8007278:	1b64      	subs	r4, r4, r5
 800727a:	10a4      	asrs	r4, r4, #2
 800727c:	42a6      	cmp	r6, r4
 800727e:	d109      	bne.n	8007294 <__libc_init_array+0x24>
 8007280:	2600      	movs	r6, #0
 8007282:	f001 fa9b 	bl	80087bc <_init>
 8007286:	4d0a      	ldr	r5, [pc, #40]	; (80072b0 <__libc_init_array+0x40>)
 8007288:	4c0a      	ldr	r4, [pc, #40]	; (80072b4 <__libc_init_array+0x44>)
 800728a:	1b64      	subs	r4, r4, r5
 800728c:	10a4      	asrs	r4, r4, #2
 800728e:	42a6      	cmp	r6, r4
 8007290:	d105      	bne.n	800729e <__libc_init_array+0x2e>
 8007292:	bd70      	pop	{r4, r5, r6, pc}
 8007294:	00b3      	lsls	r3, r6, #2
 8007296:	58eb      	ldr	r3, [r5, r3]
 8007298:	4798      	blx	r3
 800729a:	3601      	adds	r6, #1
 800729c:	e7ee      	b.n	800727c <__libc_init_array+0xc>
 800729e:	00b3      	lsls	r3, r6, #2
 80072a0:	58eb      	ldr	r3, [r5, r3]
 80072a2:	4798      	blx	r3
 80072a4:	3601      	adds	r6, #1
 80072a6:	e7f2      	b.n	800728e <__libc_init_array+0x1e>
 80072a8:	08009090 	.word	0x08009090
 80072ac:	08009090 	.word	0x08009090
 80072b0:	08009090 	.word	0x08009090
 80072b4:	08009094 	.word	0x08009094

080072b8 <malloc>:
 80072b8:	b510      	push	{r4, lr}
 80072ba:	4b03      	ldr	r3, [pc, #12]	; (80072c8 <malloc+0x10>)
 80072bc:	0001      	movs	r1, r0
 80072be:	6818      	ldr	r0, [r3, #0]
 80072c0:	f000 f88c 	bl	80073dc <_malloc_r>
 80072c4:	bd10      	pop	{r4, pc}
 80072c6:	46c0      	nop			; (mov r8, r8)
 80072c8:	20000010 	.word	0x20000010

080072cc <free>:
 80072cc:	b510      	push	{r4, lr}
 80072ce:	4b03      	ldr	r3, [pc, #12]	; (80072dc <free+0x10>)
 80072d0:	0001      	movs	r1, r0
 80072d2:	6818      	ldr	r0, [r3, #0]
 80072d4:	f000 f816 	bl	8007304 <_free_r>
 80072d8:	bd10      	pop	{r4, pc}
 80072da:	46c0      	nop			; (mov r8, r8)
 80072dc:	20000010 	.word	0x20000010

080072e0 <memcpy>:
 80072e0:	2300      	movs	r3, #0
 80072e2:	b510      	push	{r4, lr}
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d100      	bne.n	80072ea <memcpy+0xa>
 80072e8:	bd10      	pop	{r4, pc}
 80072ea:	5ccc      	ldrb	r4, [r1, r3]
 80072ec:	54c4      	strb	r4, [r0, r3]
 80072ee:	3301      	adds	r3, #1
 80072f0:	e7f8      	b.n	80072e4 <memcpy+0x4>

080072f2 <memset>:
 80072f2:	0003      	movs	r3, r0
 80072f4:	1882      	adds	r2, r0, r2
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d100      	bne.n	80072fc <memset+0xa>
 80072fa:	4770      	bx	lr
 80072fc:	7019      	strb	r1, [r3, #0]
 80072fe:	3301      	adds	r3, #1
 8007300:	e7f9      	b.n	80072f6 <memset+0x4>
	...

08007304 <_free_r>:
 8007304:	b570      	push	{r4, r5, r6, lr}
 8007306:	0005      	movs	r5, r0
 8007308:	2900      	cmp	r1, #0
 800730a:	d010      	beq.n	800732e <_free_r+0x2a>
 800730c:	1f0c      	subs	r4, r1, #4
 800730e:	6823      	ldr	r3, [r4, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	da00      	bge.n	8007316 <_free_r+0x12>
 8007314:	18e4      	adds	r4, r4, r3
 8007316:	0028      	movs	r0, r5
 8007318:	f000 fce6 	bl	8007ce8 <__malloc_lock>
 800731c:	4a1d      	ldr	r2, [pc, #116]	; (8007394 <_free_r+0x90>)
 800731e:	6813      	ldr	r3, [r2, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d105      	bne.n	8007330 <_free_r+0x2c>
 8007324:	6063      	str	r3, [r4, #4]
 8007326:	6014      	str	r4, [r2, #0]
 8007328:	0028      	movs	r0, r5
 800732a:	f000 fce5 	bl	8007cf8 <__malloc_unlock>
 800732e:	bd70      	pop	{r4, r5, r6, pc}
 8007330:	42a3      	cmp	r3, r4
 8007332:	d908      	bls.n	8007346 <_free_r+0x42>
 8007334:	6821      	ldr	r1, [r4, #0]
 8007336:	1860      	adds	r0, r4, r1
 8007338:	4283      	cmp	r3, r0
 800733a:	d1f3      	bne.n	8007324 <_free_r+0x20>
 800733c:	6818      	ldr	r0, [r3, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	1841      	adds	r1, r0, r1
 8007342:	6021      	str	r1, [r4, #0]
 8007344:	e7ee      	b.n	8007324 <_free_r+0x20>
 8007346:	001a      	movs	r2, r3
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <_free_r+0x4e>
 800734e:	42a3      	cmp	r3, r4
 8007350:	d9f9      	bls.n	8007346 <_free_r+0x42>
 8007352:	6811      	ldr	r1, [r2, #0]
 8007354:	1850      	adds	r0, r2, r1
 8007356:	42a0      	cmp	r0, r4
 8007358:	d10b      	bne.n	8007372 <_free_r+0x6e>
 800735a:	6820      	ldr	r0, [r4, #0]
 800735c:	1809      	adds	r1, r1, r0
 800735e:	1850      	adds	r0, r2, r1
 8007360:	6011      	str	r1, [r2, #0]
 8007362:	4283      	cmp	r3, r0
 8007364:	d1e0      	bne.n	8007328 <_free_r+0x24>
 8007366:	6818      	ldr	r0, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	1841      	adds	r1, r0, r1
 800736c:	6011      	str	r1, [r2, #0]
 800736e:	6053      	str	r3, [r2, #4]
 8007370:	e7da      	b.n	8007328 <_free_r+0x24>
 8007372:	42a0      	cmp	r0, r4
 8007374:	d902      	bls.n	800737c <_free_r+0x78>
 8007376:	230c      	movs	r3, #12
 8007378:	602b      	str	r3, [r5, #0]
 800737a:	e7d5      	b.n	8007328 <_free_r+0x24>
 800737c:	6821      	ldr	r1, [r4, #0]
 800737e:	1860      	adds	r0, r4, r1
 8007380:	4283      	cmp	r3, r0
 8007382:	d103      	bne.n	800738c <_free_r+0x88>
 8007384:	6818      	ldr	r0, [r3, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	1841      	adds	r1, r0, r1
 800738a:	6021      	str	r1, [r4, #0]
 800738c:	6063      	str	r3, [r4, #4]
 800738e:	6054      	str	r4, [r2, #4]
 8007390:	e7ca      	b.n	8007328 <_free_r+0x24>
 8007392:	46c0      	nop			; (mov r8, r8)
 8007394:	20001328 	.word	0x20001328

08007398 <sbrk_aligned>:
 8007398:	b570      	push	{r4, r5, r6, lr}
 800739a:	4e0f      	ldr	r6, [pc, #60]	; (80073d8 <sbrk_aligned+0x40>)
 800739c:	000d      	movs	r5, r1
 800739e:	6831      	ldr	r1, [r6, #0]
 80073a0:	0004      	movs	r4, r0
 80073a2:	2900      	cmp	r1, #0
 80073a4:	d102      	bne.n	80073ac <sbrk_aligned+0x14>
 80073a6:	f000 f925 	bl	80075f4 <_sbrk_r>
 80073aa:	6030      	str	r0, [r6, #0]
 80073ac:	0029      	movs	r1, r5
 80073ae:	0020      	movs	r0, r4
 80073b0:	f000 f920 	bl	80075f4 <_sbrk_r>
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	d00a      	beq.n	80073ce <sbrk_aligned+0x36>
 80073b8:	2303      	movs	r3, #3
 80073ba:	1cc5      	adds	r5, r0, #3
 80073bc:	439d      	bics	r5, r3
 80073be:	42a8      	cmp	r0, r5
 80073c0:	d007      	beq.n	80073d2 <sbrk_aligned+0x3a>
 80073c2:	1a29      	subs	r1, r5, r0
 80073c4:	0020      	movs	r0, r4
 80073c6:	f000 f915 	bl	80075f4 <_sbrk_r>
 80073ca:	1c43      	adds	r3, r0, #1
 80073cc:	d101      	bne.n	80073d2 <sbrk_aligned+0x3a>
 80073ce:	2501      	movs	r5, #1
 80073d0:	426d      	negs	r5, r5
 80073d2:	0028      	movs	r0, r5
 80073d4:	bd70      	pop	{r4, r5, r6, pc}
 80073d6:	46c0      	nop			; (mov r8, r8)
 80073d8:	2000132c 	.word	0x2000132c

080073dc <_malloc_r>:
 80073dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073de:	2203      	movs	r2, #3
 80073e0:	1ccb      	adds	r3, r1, #3
 80073e2:	4393      	bics	r3, r2
 80073e4:	3308      	adds	r3, #8
 80073e6:	0006      	movs	r6, r0
 80073e8:	001f      	movs	r7, r3
 80073ea:	2b0c      	cmp	r3, #12
 80073ec:	d232      	bcs.n	8007454 <_malloc_r+0x78>
 80073ee:	270c      	movs	r7, #12
 80073f0:	42b9      	cmp	r1, r7
 80073f2:	d831      	bhi.n	8007458 <_malloc_r+0x7c>
 80073f4:	0030      	movs	r0, r6
 80073f6:	f000 fc77 	bl	8007ce8 <__malloc_lock>
 80073fa:	4d32      	ldr	r5, [pc, #200]	; (80074c4 <_malloc_r+0xe8>)
 80073fc:	682b      	ldr	r3, [r5, #0]
 80073fe:	001c      	movs	r4, r3
 8007400:	2c00      	cmp	r4, #0
 8007402:	d12e      	bne.n	8007462 <_malloc_r+0x86>
 8007404:	0039      	movs	r1, r7
 8007406:	0030      	movs	r0, r6
 8007408:	f7ff ffc6 	bl	8007398 <sbrk_aligned>
 800740c:	0004      	movs	r4, r0
 800740e:	1c43      	adds	r3, r0, #1
 8007410:	d11e      	bne.n	8007450 <_malloc_r+0x74>
 8007412:	682c      	ldr	r4, [r5, #0]
 8007414:	0025      	movs	r5, r4
 8007416:	2d00      	cmp	r5, #0
 8007418:	d14a      	bne.n	80074b0 <_malloc_r+0xd4>
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	0029      	movs	r1, r5
 800741e:	18e3      	adds	r3, r4, r3
 8007420:	0030      	movs	r0, r6
 8007422:	9301      	str	r3, [sp, #4]
 8007424:	f000 f8e6 	bl	80075f4 <_sbrk_r>
 8007428:	9b01      	ldr	r3, [sp, #4]
 800742a:	4283      	cmp	r3, r0
 800742c:	d143      	bne.n	80074b6 <_malloc_r+0xda>
 800742e:	6823      	ldr	r3, [r4, #0]
 8007430:	3703      	adds	r7, #3
 8007432:	1aff      	subs	r7, r7, r3
 8007434:	2303      	movs	r3, #3
 8007436:	439f      	bics	r7, r3
 8007438:	3708      	adds	r7, #8
 800743a:	2f0c      	cmp	r7, #12
 800743c:	d200      	bcs.n	8007440 <_malloc_r+0x64>
 800743e:	270c      	movs	r7, #12
 8007440:	0039      	movs	r1, r7
 8007442:	0030      	movs	r0, r6
 8007444:	f7ff ffa8 	bl	8007398 <sbrk_aligned>
 8007448:	1c43      	adds	r3, r0, #1
 800744a:	d034      	beq.n	80074b6 <_malloc_r+0xda>
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	19df      	adds	r7, r3, r7
 8007450:	6027      	str	r7, [r4, #0]
 8007452:	e013      	b.n	800747c <_malloc_r+0xa0>
 8007454:	2b00      	cmp	r3, #0
 8007456:	dacb      	bge.n	80073f0 <_malloc_r+0x14>
 8007458:	230c      	movs	r3, #12
 800745a:	2500      	movs	r5, #0
 800745c:	6033      	str	r3, [r6, #0]
 800745e:	0028      	movs	r0, r5
 8007460:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007462:	6822      	ldr	r2, [r4, #0]
 8007464:	1bd1      	subs	r1, r2, r7
 8007466:	d420      	bmi.n	80074aa <_malloc_r+0xce>
 8007468:	290b      	cmp	r1, #11
 800746a:	d917      	bls.n	800749c <_malloc_r+0xc0>
 800746c:	19e2      	adds	r2, r4, r7
 800746e:	6027      	str	r7, [r4, #0]
 8007470:	42a3      	cmp	r3, r4
 8007472:	d111      	bne.n	8007498 <_malloc_r+0xbc>
 8007474:	602a      	str	r2, [r5, #0]
 8007476:	6863      	ldr	r3, [r4, #4]
 8007478:	6011      	str	r1, [r2, #0]
 800747a:	6053      	str	r3, [r2, #4]
 800747c:	0030      	movs	r0, r6
 800747e:	0025      	movs	r5, r4
 8007480:	f000 fc3a 	bl	8007cf8 <__malloc_unlock>
 8007484:	2207      	movs	r2, #7
 8007486:	350b      	adds	r5, #11
 8007488:	1d23      	adds	r3, r4, #4
 800748a:	4395      	bics	r5, r2
 800748c:	1aea      	subs	r2, r5, r3
 800748e:	429d      	cmp	r5, r3
 8007490:	d0e5      	beq.n	800745e <_malloc_r+0x82>
 8007492:	1b5b      	subs	r3, r3, r5
 8007494:	50a3      	str	r3, [r4, r2]
 8007496:	e7e2      	b.n	800745e <_malloc_r+0x82>
 8007498:	605a      	str	r2, [r3, #4]
 800749a:	e7ec      	b.n	8007476 <_malloc_r+0x9a>
 800749c:	6862      	ldr	r2, [r4, #4]
 800749e:	42a3      	cmp	r3, r4
 80074a0:	d101      	bne.n	80074a6 <_malloc_r+0xca>
 80074a2:	602a      	str	r2, [r5, #0]
 80074a4:	e7ea      	b.n	800747c <_malloc_r+0xa0>
 80074a6:	605a      	str	r2, [r3, #4]
 80074a8:	e7e8      	b.n	800747c <_malloc_r+0xa0>
 80074aa:	0023      	movs	r3, r4
 80074ac:	6864      	ldr	r4, [r4, #4]
 80074ae:	e7a7      	b.n	8007400 <_malloc_r+0x24>
 80074b0:	002c      	movs	r4, r5
 80074b2:	686d      	ldr	r5, [r5, #4]
 80074b4:	e7af      	b.n	8007416 <_malloc_r+0x3a>
 80074b6:	230c      	movs	r3, #12
 80074b8:	0030      	movs	r0, r6
 80074ba:	6033      	str	r3, [r6, #0]
 80074bc:	f000 fc1c 	bl	8007cf8 <__malloc_unlock>
 80074c0:	e7cd      	b.n	800745e <_malloc_r+0x82>
 80074c2:	46c0      	nop			; (mov r8, r8)
 80074c4:	20001328 	.word	0x20001328

080074c8 <iprintf>:
 80074c8:	b40f      	push	{r0, r1, r2, r3}
 80074ca:	4b0b      	ldr	r3, [pc, #44]	; (80074f8 <iprintf+0x30>)
 80074cc:	b513      	push	{r0, r1, r4, lr}
 80074ce:	681c      	ldr	r4, [r3, #0]
 80074d0:	2c00      	cmp	r4, #0
 80074d2:	d005      	beq.n	80074e0 <iprintf+0x18>
 80074d4:	69a3      	ldr	r3, [r4, #24]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d102      	bne.n	80074e0 <iprintf+0x18>
 80074da:	0020      	movs	r0, r4
 80074dc:	f000 faf4 	bl	8007ac8 <__sinit>
 80074e0:	ab05      	add	r3, sp, #20
 80074e2:	0020      	movs	r0, r4
 80074e4:	9a04      	ldr	r2, [sp, #16]
 80074e6:	68a1      	ldr	r1, [r4, #8]
 80074e8:	9301      	str	r3, [sp, #4]
 80074ea:	f000 fd97 	bl	800801c <_vfiprintf_r>
 80074ee:	bc16      	pop	{r1, r2, r4}
 80074f0:	bc08      	pop	{r3}
 80074f2:	b004      	add	sp, #16
 80074f4:	4718      	bx	r3
 80074f6:	46c0      	nop			; (mov r8, r8)
 80074f8:	20000010 	.word	0x20000010

080074fc <_puts_r>:
 80074fc:	b570      	push	{r4, r5, r6, lr}
 80074fe:	0005      	movs	r5, r0
 8007500:	000e      	movs	r6, r1
 8007502:	2800      	cmp	r0, #0
 8007504:	d004      	beq.n	8007510 <_puts_r+0x14>
 8007506:	6983      	ldr	r3, [r0, #24]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <_puts_r+0x14>
 800750c:	f000 fadc 	bl	8007ac8 <__sinit>
 8007510:	69ab      	ldr	r3, [r5, #24]
 8007512:	68ac      	ldr	r4, [r5, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d102      	bne.n	800751e <_puts_r+0x22>
 8007518:	0028      	movs	r0, r5
 800751a:	f000 fad5 	bl	8007ac8 <__sinit>
 800751e:	4b2d      	ldr	r3, [pc, #180]	; (80075d4 <_puts_r+0xd8>)
 8007520:	429c      	cmp	r4, r3
 8007522:	d122      	bne.n	800756a <_puts_r+0x6e>
 8007524:	686c      	ldr	r4, [r5, #4]
 8007526:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007528:	07db      	lsls	r3, r3, #31
 800752a:	d405      	bmi.n	8007538 <_puts_r+0x3c>
 800752c:	89a3      	ldrh	r3, [r4, #12]
 800752e:	059b      	lsls	r3, r3, #22
 8007530:	d402      	bmi.n	8007538 <_puts_r+0x3c>
 8007532:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007534:	f000 fb69 	bl	8007c0a <__retarget_lock_acquire_recursive>
 8007538:	89a3      	ldrh	r3, [r4, #12]
 800753a:	071b      	lsls	r3, r3, #28
 800753c:	d502      	bpl.n	8007544 <_puts_r+0x48>
 800753e:	6923      	ldr	r3, [r4, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d129      	bne.n	8007598 <_puts_r+0x9c>
 8007544:	0021      	movs	r1, r4
 8007546:	0028      	movs	r0, r5
 8007548:	f000 f918 	bl	800777c <__swsetup_r>
 800754c:	2800      	cmp	r0, #0
 800754e:	d023      	beq.n	8007598 <_puts_r+0x9c>
 8007550:	2501      	movs	r5, #1
 8007552:	426d      	negs	r5, r5
 8007554:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007556:	07db      	lsls	r3, r3, #31
 8007558:	d405      	bmi.n	8007566 <_puts_r+0x6a>
 800755a:	89a3      	ldrh	r3, [r4, #12]
 800755c:	059b      	lsls	r3, r3, #22
 800755e:	d402      	bmi.n	8007566 <_puts_r+0x6a>
 8007560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007562:	f000 fb53 	bl	8007c0c <__retarget_lock_release_recursive>
 8007566:	0028      	movs	r0, r5
 8007568:	bd70      	pop	{r4, r5, r6, pc}
 800756a:	4b1b      	ldr	r3, [pc, #108]	; (80075d8 <_puts_r+0xdc>)
 800756c:	429c      	cmp	r4, r3
 800756e:	d101      	bne.n	8007574 <_puts_r+0x78>
 8007570:	68ac      	ldr	r4, [r5, #8]
 8007572:	e7d8      	b.n	8007526 <_puts_r+0x2a>
 8007574:	4b19      	ldr	r3, [pc, #100]	; (80075dc <_puts_r+0xe0>)
 8007576:	429c      	cmp	r4, r3
 8007578:	d1d5      	bne.n	8007526 <_puts_r+0x2a>
 800757a:	68ec      	ldr	r4, [r5, #12]
 800757c:	e7d3      	b.n	8007526 <_puts_r+0x2a>
 800757e:	3601      	adds	r6, #1
 8007580:	60a3      	str	r3, [r4, #8]
 8007582:	2b00      	cmp	r3, #0
 8007584:	da04      	bge.n	8007590 <_puts_r+0x94>
 8007586:	69a2      	ldr	r2, [r4, #24]
 8007588:	429a      	cmp	r2, r3
 800758a:	dc16      	bgt.n	80075ba <_puts_r+0xbe>
 800758c:	290a      	cmp	r1, #10
 800758e:	d014      	beq.n	80075ba <_puts_r+0xbe>
 8007590:	6823      	ldr	r3, [r4, #0]
 8007592:	1c5a      	adds	r2, r3, #1
 8007594:	6022      	str	r2, [r4, #0]
 8007596:	7019      	strb	r1, [r3, #0]
 8007598:	68a3      	ldr	r3, [r4, #8]
 800759a:	7831      	ldrb	r1, [r6, #0]
 800759c:	3b01      	subs	r3, #1
 800759e:	2900      	cmp	r1, #0
 80075a0:	d1ed      	bne.n	800757e <_puts_r+0x82>
 80075a2:	60a3      	str	r3, [r4, #8]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	da0f      	bge.n	80075c8 <_puts_r+0xcc>
 80075a8:	0028      	movs	r0, r5
 80075aa:	0022      	movs	r2, r4
 80075ac:	310a      	adds	r1, #10
 80075ae:	f000 f88f 	bl	80076d0 <__swbuf_r>
 80075b2:	250a      	movs	r5, #10
 80075b4:	1c43      	adds	r3, r0, #1
 80075b6:	d1cd      	bne.n	8007554 <_puts_r+0x58>
 80075b8:	e7ca      	b.n	8007550 <_puts_r+0x54>
 80075ba:	0022      	movs	r2, r4
 80075bc:	0028      	movs	r0, r5
 80075be:	f000 f887 	bl	80076d0 <__swbuf_r>
 80075c2:	1c43      	adds	r3, r0, #1
 80075c4:	d1e8      	bne.n	8007598 <_puts_r+0x9c>
 80075c6:	e7c3      	b.n	8007550 <_puts_r+0x54>
 80075c8:	250a      	movs	r5, #10
 80075ca:	6823      	ldr	r3, [r4, #0]
 80075cc:	1c5a      	adds	r2, r3, #1
 80075ce:	6022      	str	r2, [r4, #0]
 80075d0:	701d      	strb	r5, [r3, #0]
 80075d2:	e7bf      	b.n	8007554 <_puts_r+0x58>
 80075d4:	0800901c 	.word	0x0800901c
 80075d8:	0800903c 	.word	0x0800903c
 80075dc:	08008ffc 	.word	0x08008ffc

080075e0 <puts>:
 80075e0:	b510      	push	{r4, lr}
 80075e2:	4b03      	ldr	r3, [pc, #12]	; (80075f0 <puts+0x10>)
 80075e4:	0001      	movs	r1, r0
 80075e6:	6818      	ldr	r0, [r3, #0]
 80075e8:	f7ff ff88 	bl	80074fc <_puts_r>
 80075ec:	bd10      	pop	{r4, pc}
 80075ee:	46c0      	nop			; (mov r8, r8)
 80075f0:	20000010 	.word	0x20000010

080075f4 <_sbrk_r>:
 80075f4:	2300      	movs	r3, #0
 80075f6:	b570      	push	{r4, r5, r6, lr}
 80075f8:	4d06      	ldr	r5, [pc, #24]	; (8007614 <_sbrk_r+0x20>)
 80075fa:	0004      	movs	r4, r0
 80075fc:	0008      	movs	r0, r1
 80075fe:	602b      	str	r3, [r5, #0]
 8007600:	f7fa fa9c 	bl	8001b3c <_sbrk>
 8007604:	1c43      	adds	r3, r0, #1
 8007606:	d103      	bne.n	8007610 <_sbrk_r+0x1c>
 8007608:	682b      	ldr	r3, [r5, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d000      	beq.n	8007610 <_sbrk_r+0x1c>
 800760e:	6023      	str	r3, [r4, #0]
 8007610:	bd70      	pop	{r4, r5, r6, pc}
 8007612:	46c0      	nop			; (mov r8, r8)
 8007614:	20001334 	.word	0x20001334

08007618 <sniprintf>:
 8007618:	b40c      	push	{r2, r3}
 800761a:	b530      	push	{r4, r5, lr}
 800761c:	4b17      	ldr	r3, [pc, #92]	; (800767c <sniprintf+0x64>)
 800761e:	000c      	movs	r4, r1
 8007620:	681d      	ldr	r5, [r3, #0]
 8007622:	b09d      	sub	sp, #116	; 0x74
 8007624:	2900      	cmp	r1, #0
 8007626:	da08      	bge.n	800763a <sniprintf+0x22>
 8007628:	238b      	movs	r3, #139	; 0x8b
 800762a:	2001      	movs	r0, #1
 800762c:	602b      	str	r3, [r5, #0]
 800762e:	4240      	negs	r0, r0
 8007630:	b01d      	add	sp, #116	; 0x74
 8007632:	bc30      	pop	{r4, r5}
 8007634:	bc08      	pop	{r3}
 8007636:	b002      	add	sp, #8
 8007638:	4718      	bx	r3
 800763a:	2382      	movs	r3, #130	; 0x82
 800763c:	466a      	mov	r2, sp
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	8293      	strh	r3, [r2, #20]
 8007642:	2300      	movs	r3, #0
 8007644:	9002      	str	r0, [sp, #8]
 8007646:	9006      	str	r0, [sp, #24]
 8007648:	4299      	cmp	r1, r3
 800764a:	d000      	beq.n	800764e <sniprintf+0x36>
 800764c:	1e4b      	subs	r3, r1, #1
 800764e:	9304      	str	r3, [sp, #16]
 8007650:	9307      	str	r3, [sp, #28]
 8007652:	2301      	movs	r3, #1
 8007654:	466a      	mov	r2, sp
 8007656:	425b      	negs	r3, r3
 8007658:	82d3      	strh	r3, [r2, #22]
 800765a:	0028      	movs	r0, r5
 800765c:	ab21      	add	r3, sp, #132	; 0x84
 800765e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007660:	a902      	add	r1, sp, #8
 8007662:	9301      	str	r3, [sp, #4]
 8007664:	f000 fbb2 	bl	8007dcc <_svfiprintf_r>
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	da01      	bge.n	8007670 <sniprintf+0x58>
 800766c:	238b      	movs	r3, #139	; 0x8b
 800766e:	602b      	str	r3, [r5, #0]
 8007670:	2c00      	cmp	r4, #0
 8007672:	d0dd      	beq.n	8007630 <sniprintf+0x18>
 8007674:	2300      	movs	r3, #0
 8007676:	9a02      	ldr	r2, [sp, #8]
 8007678:	7013      	strb	r3, [r2, #0]
 800767a:	e7d9      	b.n	8007630 <sniprintf+0x18>
 800767c:	20000010 	.word	0x20000010

08007680 <siprintf>:
 8007680:	b40e      	push	{r1, r2, r3}
 8007682:	b500      	push	{lr}
 8007684:	490b      	ldr	r1, [pc, #44]	; (80076b4 <siprintf+0x34>)
 8007686:	b09c      	sub	sp, #112	; 0x70
 8007688:	ab1d      	add	r3, sp, #116	; 0x74
 800768a:	9002      	str	r0, [sp, #8]
 800768c:	9006      	str	r0, [sp, #24]
 800768e:	9107      	str	r1, [sp, #28]
 8007690:	9104      	str	r1, [sp, #16]
 8007692:	4809      	ldr	r0, [pc, #36]	; (80076b8 <siprintf+0x38>)
 8007694:	4909      	ldr	r1, [pc, #36]	; (80076bc <siprintf+0x3c>)
 8007696:	cb04      	ldmia	r3!, {r2}
 8007698:	9105      	str	r1, [sp, #20]
 800769a:	6800      	ldr	r0, [r0, #0]
 800769c:	a902      	add	r1, sp, #8
 800769e:	9301      	str	r3, [sp, #4]
 80076a0:	f000 fb94 	bl	8007dcc <_svfiprintf_r>
 80076a4:	2300      	movs	r3, #0
 80076a6:	9a02      	ldr	r2, [sp, #8]
 80076a8:	7013      	strb	r3, [r2, #0]
 80076aa:	b01c      	add	sp, #112	; 0x70
 80076ac:	bc08      	pop	{r3}
 80076ae:	b003      	add	sp, #12
 80076b0:	4718      	bx	r3
 80076b2:	46c0      	nop			; (mov r8, r8)
 80076b4:	7fffffff 	.word	0x7fffffff
 80076b8:	20000010 	.word	0x20000010
 80076bc:	ffff0208 	.word	0xffff0208

080076c0 <strcpy>:
 80076c0:	0003      	movs	r3, r0
 80076c2:	780a      	ldrb	r2, [r1, #0]
 80076c4:	3101      	adds	r1, #1
 80076c6:	701a      	strb	r2, [r3, #0]
 80076c8:	3301      	adds	r3, #1
 80076ca:	2a00      	cmp	r2, #0
 80076cc:	d1f9      	bne.n	80076c2 <strcpy+0x2>
 80076ce:	4770      	bx	lr

080076d0 <__swbuf_r>:
 80076d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d2:	0005      	movs	r5, r0
 80076d4:	000e      	movs	r6, r1
 80076d6:	0014      	movs	r4, r2
 80076d8:	2800      	cmp	r0, #0
 80076da:	d004      	beq.n	80076e6 <__swbuf_r+0x16>
 80076dc:	6983      	ldr	r3, [r0, #24]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <__swbuf_r+0x16>
 80076e2:	f000 f9f1 	bl	8007ac8 <__sinit>
 80076e6:	4b22      	ldr	r3, [pc, #136]	; (8007770 <__swbuf_r+0xa0>)
 80076e8:	429c      	cmp	r4, r3
 80076ea:	d12e      	bne.n	800774a <__swbuf_r+0x7a>
 80076ec:	686c      	ldr	r4, [r5, #4]
 80076ee:	69a3      	ldr	r3, [r4, #24]
 80076f0:	60a3      	str	r3, [r4, #8]
 80076f2:	89a3      	ldrh	r3, [r4, #12]
 80076f4:	071b      	lsls	r3, r3, #28
 80076f6:	d532      	bpl.n	800775e <__swbuf_r+0x8e>
 80076f8:	6923      	ldr	r3, [r4, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d02f      	beq.n	800775e <__swbuf_r+0x8e>
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	6922      	ldr	r2, [r4, #16]
 8007702:	b2f7      	uxtb	r7, r6
 8007704:	1a98      	subs	r0, r3, r2
 8007706:	6963      	ldr	r3, [r4, #20]
 8007708:	b2f6      	uxtb	r6, r6
 800770a:	4283      	cmp	r3, r0
 800770c:	dc05      	bgt.n	800771a <__swbuf_r+0x4a>
 800770e:	0021      	movs	r1, r4
 8007710:	0028      	movs	r0, r5
 8007712:	f000 f937 	bl	8007984 <_fflush_r>
 8007716:	2800      	cmp	r0, #0
 8007718:	d127      	bne.n	800776a <__swbuf_r+0x9a>
 800771a:	68a3      	ldr	r3, [r4, #8]
 800771c:	3001      	adds	r0, #1
 800771e:	3b01      	subs	r3, #1
 8007720:	60a3      	str	r3, [r4, #8]
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	1c5a      	adds	r2, r3, #1
 8007726:	6022      	str	r2, [r4, #0]
 8007728:	701f      	strb	r7, [r3, #0]
 800772a:	6963      	ldr	r3, [r4, #20]
 800772c:	4283      	cmp	r3, r0
 800772e:	d004      	beq.n	800773a <__swbuf_r+0x6a>
 8007730:	89a3      	ldrh	r3, [r4, #12]
 8007732:	07db      	lsls	r3, r3, #31
 8007734:	d507      	bpl.n	8007746 <__swbuf_r+0x76>
 8007736:	2e0a      	cmp	r6, #10
 8007738:	d105      	bne.n	8007746 <__swbuf_r+0x76>
 800773a:	0021      	movs	r1, r4
 800773c:	0028      	movs	r0, r5
 800773e:	f000 f921 	bl	8007984 <_fflush_r>
 8007742:	2800      	cmp	r0, #0
 8007744:	d111      	bne.n	800776a <__swbuf_r+0x9a>
 8007746:	0030      	movs	r0, r6
 8007748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800774a:	4b0a      	ldr	r3, [pc, #40]	; (8007774 <__swbuf_r+0xa4>)
 800774c:	429c      	cmp	r4, r3
 800774e:	d101      	bne.n	8007754 <__swbuf_r+0x84>
 8007750:	68ac      	ldr	r4, [r5, #8]
 8007752:	e7cc      	b.n	80076ee <__swbuf_r+0x1e>
 8007754:	4b08      	ldr	r3, [pc, #32]	; (8007778 <__swbuf_r+0xa8>)
 8007756:	429c      	cmp	r4, r3
 8007758:	d1c9      	bne.n	80076ee <__swbuf_r+0x1e>
 800775a:	68ec      	ldr	r4, [r5, #12]
 800775c:	e7c7      	b.n	80076ee <__swbuf_r+0x1e>
 800775e:	0021      	movs	r1, r4
 8007760:	0028      	movs	r0, r5
 8007762:	f000 f80b 	bl	800777c <__swsetup_r>
 8007766:	2800      	cmp	r0, #0
 8007768:	d0c9      	beq.n	80076fe <__swbuf_r+0x2e>
 800776a:	2601      	movs	r6, #1
 800776c:	4276      	negs	r6, r6
 800776e:	e7ea      	b.n	8007746 <__swbuf_r+0x76>
 8007770:	0800901c 	.word	0x0800901c
 8007774:	0800903c 	.word	0x0800903c
 8007778:	08008ffc 	.word	0x08008ffc

0800777c <__swsetup_r>:
 800777c:	4b37      	ldr	r3, [pc, #220]	; (800785c <__swsetup_r+0xe0>)
 800777e:	b570      	push	{r4, r5, r6, lr}
 8007780:	681d      	ldr	r5, [r3, #0]
 8007782:	0006      	movs	r6, r0
 8007784:	000c      	movs	r4, r1
 8007786:	2d00      	cmp	r5, #0
 8007788:	d005      	beq.n	8007796 <__swsetup_r+0x1a>
 800778a:	69ab      	ldr	r3, [r5, #24]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d102      	bne.n	8007796 <__swsetup_r+0x1a>
 8007790:	0028      	movs	r0, r5
 8007792:	f000 f999 	bl	8007ac8 <__sinit>
 8007796:	4b32      	ldr	r3, [pc, #200]	; (8007860 <__swsetup_r+0xe4>)
 8007798:	429c      	cmp	r4, r3
 800779a:	d10f      	bne.n	80077bc <__swsetup_r+0x40>
 800779c:	686c      	ldr	r4, [r5, #4]
 800779e:	230c      	movs	r3, #12
 80077a0:	5ee2      	ldrsh	r2, [r4, r3]
 80077a2:	b293      	uxth	r3, r2
 80077a4:	0711      	lsls	r1, r2, #28
 80077a6:	d42d      	bmi.n	8007804 <__swsetup_r+0x88>
 80077a8:	06d9      	lsls	r1, r3, #27
 80077aa:	d411      	bmi.n	80077d0 <__swsetup_r+0x54>
 80077ac:	2309      	movs	r3, #9
 80077ae:	2001      	movs	r0, #1
 80077b0:	6033      	str	r3, [r6, #0]
 80077b2:	3337      	adds	r3, #55	; 0x37
 80077b4:	4313      	orrs	r3, r2
 80077b6:	81a3      	strh	r3, [r4, #12]
 80077b8:	4240      	negs	r0, r0
 80077ba:	bd70      	pop	{r4, r5, r6, pc}
 80077bc:	4b29      	ldr	r3, [pc, #164]	; (8007864 <__swsetup_r+0xe8>)
 80077be:	429c      	cmp	r4, r3
 80077c0:	d101      	bne.n	80077c6 <__swsetup_r+0x4a>
 80077c2:	68ac      	ldr	r4, [r5, #8]
 80077c4:	e7eb      	b.n	800779e <__swsetup_r+0x22>
 80077c6:	4b28      	ldr	r3, [pc, #160]	; (8007868 <__swsetup_r+0xec>)
 80077c8:	429c      	cmp	r4, r3
 80077ca:	d1e8      	bne.n	800779e <__swsetup_r+0x22>
 80077cc:	68ec      	ldr	r4, [r5, #12]
 80077ce:	e7e6      	b.n	800779e <__swsetup_r+0x22>
 80077d0:	075b      	lsls	r3, r3, #29
 80077d2:	d513      	bpl.n	80077fc <__swsetup_r+0x80>
 80077d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077d6:	2900      	cmp	r1, #0
 80077d8:	d008      	beq.n	80077ec <__swsetup_r+0x70>
 80077da:	0023      	movs	r3, r4
 80077dc:	3344      	adds	r3, #68	; 0x44
 80077de:	4299      	cmp	r1, r3
 80077e0:	d002      	beq.n	80077e8 <__swsetup_r+0x6c>
 80077e2:	0030      	movs	r0, r6
 80077e4:	f7ff fd8e 	bl	8007304 <_free_r>
 80077e8:	2300      	movs	r3, #0
 80077ea:	6363      	str	r3, [r4, #52]	; 0x34
 80077ec:	2224      	movs	r2, #36	; 0x24
 80077ee:	89a3      	ldrh	r3, [r4, #12]
 80077f0:	4393      	bics	r3, r2
 80077f2:	81a3      	strh	r3, [r4, #12]
 80077f4:	2300      	movs	r3, #0
 80077f6:	6063      	str	r3, [r4, #4]
 80077f8:	6923      	ldr	r3, [r4, #16]
 80077fa:	6023      	str	r3, [r4, #0]
 80077fc:	2308      	movs	r3, #8
 80077fe:	89a2      	ldrh	r2, [r4, #12]
 8007800:	4313      	orrs	r3, r2
 8007802:	81a3      	strh	r3, [r4, #12]
 8007804:	6923      	ldr	r3, [r4, #16]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10b      	bne.n	8007822 <__swsetup_r+0xa6>
 800780a:	21a0      	movs	r1, #160	; 0xa0
 800780c:	2280      	movs	r2, #128	; 0x80
 800780e:	89a3      	ldrh	r3, [r4, #12]
 8007810:	0089      	lsls	r1, r1, #2
 8007812:	0092      	lsls	r2, r2, #2
 8007814:	400b      	ands	r3, r1
 8007816:	4293      	cmp	r3, r2
 8007818:	d003      	beq.n	8007822 <__swsetup_r+0xa6>
 800781a:	0021      	movs	r1, r4
 800781c:	0030      	movs	r0, r6
 800781e:	f000 fa1f 	bl	8007c60 <__smakebuf_r>
 8007822:	220c      	movs	r2, #12
 8007824:	5ea3      	ldrsh	r3, [r4, r2]
 8007826:	2001      	movs	r0, #1
 8007828:	001a      	movs	r2, r3
 800782a:	b299      	uxth	r1, r3
 800782c:	4002      	ands	r2, r0
 800782e:	4203      	tst	r3, r0
 8007830:	d00f      	beq.n	8007852 <__swsetup_r+0xd6>
 8007832:	2200      	movs	r2, #0
 8007834:	60a2      	str	r2, [r4, #8]
 8007836:	6962      	ldr	r2, [r4, #20]
 8007838:	4252      	negs	r2, r2
 800783a:	61a2      	str	r2, [r4, #24]
 800783c:	2000      	movs	r0, #0
 800783e:	6922      	ldr	r2, [r4, #16]
 8007840:	4282      	cmp	r2, r0
 8007842:	d1ba      	bne.n	80077ba <__swsetup_r+0x3e>
 8007844:	060a      	lsls	r2, r1, #24
 8007846:	d5b8      	bpl.n	80077ba <__swsetup_r+0x3e>
 8007848:	2240      	movs	r2, #64	; 0x40
 800784a:	4313      	orrs	r3, r2
 800784c:	81a3      	strh	r3, [r4, #12]
 800784e:	3801      	subs	r0, #1
 8007850:	e7b3      	b.n	80077ba <__swsetup_r+0x3e>
 8007852:	0788      	lsls	r0, r1, #30
 8007854:	d400      	bmi.n	8007858 <__swsetup_r+0xdc>
 8007856:	6962      	ldr	r2, [r4, #20]
 8007858:	60a2      	str	r2, [r4, #8]
 800785a:	e7ef      	b.n	800783c <__swsetup_r+0xc0>
 800785c:	20000010 	.word	0x20000010
 8007860:	0800901c 	.word	0x0800901c
 8007864:	0800903c 	.word	0x0800903c
 8007868:	08008ffc 	.word	0x08008ffc

0800786c <__sflush_r>:
 800786c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800786e:	898b      	ldrh	r3, [r1, #12]
 8007870:	0005      	movs	r5, r0
 8007872:	000c      	movs	r4, r1
 8007874:	071a      	lsls	r2, r3, #28
 8007876:	d45f      	bmi.n	8007938 <__sflush_r+0xcc>
 8007878:	684a      	ldr	r2, [r1, #4]
 800787a:	2a00      	cmp	r2, #0
 800787c:	dc04      	bgt.n	8007888 <__sflush_r+0x1c>
 800787e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8007880:	2a00      	cmp	r2, #0
 8007882:	dc01      	bgt.n	8007888 <__sflush_r+0x1c>
 8007884:	2000      	movs	r0, #0
 8007886:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007888:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800788a:	2f00      	cmp	r7, #0
 800788c:	d0fa      	beq.n	8007884 <__sflush_r+0x18>
 800788e:	2200      	movs	r2, #0
 8007890:	2180      	movs	r1, #128	; 0x80
 8007892:	682e      	ldr	r6, [r5, #0]
 8007894:	602a      	str	r2, [r5, #0]
 8007896:	001a      	movs	r2, r3
 8007898:	0149      	lsls	r1, r1, #5
 800789a:	400a      	ands	r2, r1
 800789c:	420b      	tst	r3, r1
 800789e:	d034      	beq.n	800790a <__sflush_r+0x9e>
 80078a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80078a2:	89a3      	ldrh	r3, [r4, #12]
 80078a4:	075b      	lsls	r3, r3, #29
 80078a6:	d506      	bpl.n	80078b6 <__sflush_r+0x4a>
 80078a8:	6863      	ldr	r3, [r4, #4]
 80078aa:	1ac0      	subs	r0, r0, r3
 80078ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <__sflush_r+0x4a>
 80078b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078b4:	1ac0      	subs	r0, r0, r3
 80078b6:	0002      	movs	r2, r0
 80078b8:	6a21      	ldr	r1, [r4, #32]
 80078ba:	2300      	movs	r3, #0
 80078bc:	0028      	movs	r0, r5
 80078be:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80078c0:	47b8      	blx	r7
 80078c2:	89a1      	ldrh	r1, [r4, #12]
 80078c4:	1c43      	adds	r3, r0, #1
 80078c6:	d106      	bne.n	80078d6 <__sflush_r+0x6a>
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	2b1d      	cmp	r3, #29
 80078cc:	d831      	bhi.n	8007932 <__sflush_r+0xc6>
 80078ce:	4a2c      	ldr	r2, [pc, #176]	; (8007980 <__sflush_r+0x114>)
 80078d0:	40da      	lsrs	r2, r3
 80078d2:	07d3      	lsls	r3, r2, #31
 80078d4:	d52d      	bpl.n	8007932 <__sflush_r+0xc6>
 80078d6:	2300      	movs	r3, #0
 80078d8:	6063      	str	r3, [r4, #4]
 80078da:	6923      	ldr	r3, [r4, #16]
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	04cb      	lsls	r3, r1, #19
 80078e0:	d505      	bpl.n	80078ee <__sflush_r+0x82>
 80078e2:	1c43      	adds	r3, r0, #1
 80078e4:	d102      	bne.n	80078ec <__sflush_r+0x80>
 80078e6:	682b      	ldr	r3, [r5, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d100      	bne.n	80078ee <__sflush_r+0x82>
 80078ec:	6560      	str	r0, [r4, #84]	; 0x54
 80078ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078f0:	602e      	str	r6, [r5, #0]
 80078f2:	2900      	cmp	r1, #0
 80078f4:	d0c6      	beq.n	8007884 <__sflush_r+0x18>
 80078f6:	0023      	movs	r3, r4
 80078f8:	3344      	adds	r3, #68	; 0x44
 80078fa:	4299      	cmp	r1, r3
 80078fc:	d002      	beq.n	8007904 <__sflush_r+0x98>
 80078fe:	0028      	movs	r0, r5
 8007900:	f7ff fd00 	bl	8007304 <_free_r>
 8007904:	2000      	movs	r0, #0
 8007906:	6360      	str	r0, [r4, #52]	; 0x34
 8007908:	e7bd      	b.n	8007886 <__sflush_r+0x1a>
 800790a:	2301      	movs	r3, #1
 800790c:	0028      	movs	r0, r5
 800790e:	6a21      	ldr	r1, [r4, #32]
 8007910:	47b8      	blx	r7
 8007912:	1c43      	adds	r3, r0, #1
 8007914:	d1c5      	bne.n	80078a2 <__sflush_r+0x36>
 8007916:	682b      	ldr	r3, [r5, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d0c2      	beq.n	80078a2 <__sflush_r+0x36>
 800791c:	2b1d      	cmp	r3, #29
 800791e:	d001      	beq.n	8007924 <__sflush_r+0xb8>
 8007920:	2b16      	cmp	r3, #22
 8007922:	d101      	bne.n	8007928 <__sflush_r+0xbc>
 8007924:	602e      	str	r6, [r5, #0]
 8007926:	e7ad      	b.n	8007884 <__sflush_r+0x18>
 8007928:	2340      	movs	r3, #64	; 0x40
 800792a:	89a2      	ldrh	r2, [r4, #12]
 800792c:	4313      	orrs	r3, r2
 800792e:	81a3      	strh	r3, [r4, #12]
 8007930:	e7a9      	b.n	8007886 <__sflush_r+0x1a>
 8007932:	2340      	movs	r3, #64	; 0x40
 8007934:	430b      	orrs	r3, r1
 8007936:	e7fa      	b.n	800792e <__sflush_r+0xc2>
 8007938:	690f      	ldr	r7, [r1, #16]
 800793a:	2f00      	cmp	r7, #0
 800793c:	d0a2      	beq.n	8007884 <__sflush_r+0x18>
 800793e:	680a      	ldr	r2, [r1, #0]
 8007940:	600f      	str	r7, [r1, #0]
 8007942:	1bd2      	subs	r2, r2, r7
 8007944:	9201      	str	r2, [sp, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	079b      	lsls	r3, r3, #30
 800794a:	d100      	bne.n	800794e <__sflush_r+0xe2>
 800794c:	694a      	ldr	r2, [r1, #20]
 800794e:	60a2      	str	r2, [r4, #8]
 8007950:	9b01      	ldr	r3, [sp, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	dc00      	bgt.n	8007958 <__sflush_r+0xec>
 8007956:	e795      	b.n	8007884 <__sflush_r+0x18>
 8007958:	003a      	movs	r2, r7
 800795a:	0028      	movs	r0, r5
 800795c:	9b01      	ldr	r3, [sp, #4]
 800795e:	6a21      	ldr	r1, [r4, #32]
 8007960:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007962:	47b0      	blx	r6
 8007964:	2800      	cmp	r0, #0
 8007966:	dc06      	bgt.n	8007976 <__sflush_r+0x10a>
 8007968:	2340      	movs	r3, #64	; 0x40
 800796a:	2001      	movs	r0, #1
 800796c:	89a2      	ldrh	r2, [r4, #12]
 800796e:	4240      	negs	r0, r0
 8007970:	4313      	orrs	r3, r2
 8007972:	81a3      	strh	r3, [r4, #12]
 8007974:	e787      	b.n	8007886 <__sflush_r+0x1a>
 8007976:	9b01      	ldr	r3, [sp, #4]
 8007978:	183f      	adds	r7, r7, r0
 800797a:	1a1b      	subs	r3, r3, r0
 800797c:	9301      	str	r3, [sp, #4]
 800797e:	e7e7      	b.n	8007950 <__sflush_r+0xe4>
 8007980:	20400001 	.word	0x20400001

08007984 <_fflush_r>:
 8007984:	690b      	ldr	r3, [r1, #16]
 8007986:	b570      	push	{r4, r5, r6, lr}
 8007988:	0005      	movs	r5, r0
 800798a:	000c      	movs	r4, r1
 800798c:	2b00      	cmp	r3, #0
 800798e:	d102      	bne.n	8007996 <_fflush_r+0x12>
 8007990:	2500      	movs	r5, #0
 8007992:	0028      	movs	r0, r5
 8007994:	bd70      	pop	{r4, r5, r6, pc}
 8007996:	2800      	cmp	r0, #0
 8007998:	d004      	beq.n	80079a4 <_fflush_r+0x20>
 800799a:	6983      	ldr	r3, [r0, #24]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <_fflush_r+0x20>
 80079a0:	f000 f892 	bl	8007ac8 <__sinit>
 80079a4:	4b14      	ldr	r3, [pc, #80]	; (80079f8 <_fflush_r+0x74>)
 80079a6:	429c      	cmp	r4, r3
 80079a8:	d11b      	bne.n	80079e2 <_fflush_r+0x5e>
 80079aa:	686c      	ldr	r4, [r5, #4]
 80079ac:	220c      	movs	r2, #12
 80079ae:	5ea3      	ldrsh	r3, [r4, r2]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d0ed      	beq.n	8007990 <_fflush_r+0xc>
 80079b4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80079b6:	07d2      	lsls	r2, r2, #31
 80079b8:	d404      	bmi.n	80079c4 <_fflush_r+0x40>
 80079ba:	059b      	lsls	r3, r3, #22
 80079bc:	d402      	bmi.n	80079c4 <_fflush_r+0x40>
 80079be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079c0:	f000 f923 	bl	8007c0a <__retarget_lock_acquire_recursive>
 80079c4:	0028      	movs	r0, r5
 80079c6:	0021      	movs	r1, r4
 80079c8:	f7ff ff50 	bl	800786c <__sflush_r>
 80079cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079ce:	0005      	movs	r5, r0
 80079d0:	07db      	lsls	r3, r3, #31
 80079d2:	d4de      	bmi.n	8007992 <_fflush_r+0xe>
 80079d4:	89a3      	ldrh	r3, [r4, #12]
 80079d6:	059b      	lsls	r3, r3, #22
 80079d8:	d4db      	bmi.n	8007992 <_fflush_r+0xe>
 80079da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079dc:	f000 f916 	bl	8007c0c <__retarget_lock_release_recursive>
 80079e0:	e7d7      	b.n	8007992 <_fflush_r+0xe>
 80079e2:	4b06      	ldr	r3, [pc, #24]	; (80079fc <_fflush_r+0x78>)
 80079e4:	429c      	cmp	r4, r3
 80079e6:	d101      	bne.n	80079ec <_fflush_r+0x68>
 80079e8:	68ac      	ldr	r4, [r5, #8]
 80079ea:	e7df      	b.n	80079ac <_fflush_r+0x28>
 80079ec:	4b04      	ldr	r3, [pc, #16]	; (8007a00 <_fflush_r+0x7c>)
 80079ee:	429c      	cmp	r4, r3
 80079f0:	d1dc      	bne.n	80079ac <_fflush_r+0x28>
 80079f2:	68ec      	ldr	r4, [r5, #12]
 80079f4:	e7da      	b.n	80079ac <_fflush_r+0x28>
 80079f6:	46c0      	nop			; (mov r8, r8)
 80079f8:	0800901c 	.word	0x0800901c
 80079fc:	0800903c 	.word	0x0800903c
 8007a00:	08008ffc 	.word	0x08008ffc

08007a04 <std>:
 8007a04:	2300      	movs	r3, #0
 8007a06:	b510      	push	{r4, lr}
 8007a08:	0004      	movs	r4, r0
 8007a0a:	6003      	str	r3, [r0, #0]
 8007a0c:	6043      	str	r3, [r0, #4]
 8007a0e:	6083      	str	r3, [r0, #8]
 8007a10:	8181      	strh	r1, [r0, #12]
 8007a12:	6643      	str	r3, [r0, #100]	; 0x64
 8007a14:	0019      	movs	r1, r3
 8007a16:	81c2      	strh	r2, [r0, #14]
 8007a18:	6103      	str	r3, [r0, #16]
 8007a1a:	6143      	str	r3, [r0, #20]
 8007a1c:	6183      	str	r3, [r0, #24]
 8007a1e:	2208      	movs	r2, #8
 8007a20:	305c      	adds	r0, #92	; 0x5c
 8007a22:	f7ff fc66 	bl	80072f2 <memset>
 8007a26:	4b05      	ldr	r3, [pc, #20]	; (8007a3c <std+0x38>)
 8007a28:	6224      	str	r4, [r4, #32]
 8007a2a:	6263      	str	r3, [r4, #36]	; 0x24
 8007a2c:	4b04      	ldr	r3, [pc, #16]	; (8007a40 <std+0x3c>)
 8007a2e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a30:	4b04      	ldr	r3, [pc, #16]	; (8007a44 <std+0x40>)
 8007a32:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a34:	4b04      	ldr	r3, [pc, #16]	; (8007a48 <std+0x44>)
 8007a36:	6323      	str	r3, [r4, #48]	; 0x30
 8007a38:	bd10      	pop	{r4, pc}
 8007a3a:	46c0      	nop			; (mov r8, r8)
 8007a3c:	08008595 	.word	0x08008595
 8007a40:	080085bd 	.word	0x080085bd
 8007a44:	080085f5 	.word	0x080085f5
 8007a48:	08008621 	.word	0x08008621

08007a4c <_cleanup_r>:
 8007a4c:	b510      	push	{r4, lr}
 8007a4e:	4902      	ldr	r1, [pc, #8]	; (8007a58 <_cleanup_r+0xc>)
 8007a50:	f000 f8ba 	bl	8007bc8 <_fwalk_reent>
 8007a54:	bd10      	pop	{r4, pc}
 8007a56:	46c0      	nop			; (mov r8, r8)
 8007a58:	08007985 	.word	0x08007985

08007a5c <__sfmoreglue>:
 8007a5c:	b570      	push	{r4, r5, r6, lr}
 8007a5e:	2568      	movs	r5, #104	; 0x68
 8007a60:	1e4a      	subs	r2, r1, #1
 8007a62:	4355      	muls	r5, r2
 8007a64:	000e      	movs	r6, r1
 8007a66:	0029      	movs	r1, r5
 8007a68:	3174      	adds	r1, #116	; 0x74
 8007a6a:	f7ff fcb7 	bl	80073dc <_malloc_r>
 8007a6e:	1e04      	subs	r4, r0, #0
 8007a70:	d008      	beq.n	8007a84 <__sfmoreglue+0x28>
 8007a72:	2100      	movs	r1, #0
 8007a74:	002a      	movs	r2, r5
 8007a76:	6001      	str	r1, [r0, #0]
 8007a78:	6046      	str	r6, [r0, #4]
 8007a7a:	300c      	adds	r0, #12
 8007a7c:	60a0      	str	r0, [r4, #8]
 8007a7e:	3268      	adds	r2, #104	; 0x68
 8007a80:	f7ff fc37 	bl	80072f2 <memset>
 8007a84:	0020      	movs	r0, r4
 8007a86:	bd70      	pop	{r4, r5, r6, pc}

08007a88 <__sfp_lock_acquire>:
 8007a88:	b510      	push	{r4, lr}
 8007a8a:	4802      	ldr	r0, [pc, #8]	; (8007a94 <__sfp_lock_acquire+0xc>)
 8007a8c:	f000 f8bd 	bl	8007c0a <__retarget_lock_acquire_recursive>
 8007a90:	bd10      	pop	{r4, pc}
 8007a92:	46c0      	nop			; (mov r8, r8)
 8007a94:	20001331 	.word	0x20001331

08007a98 <__sfp_lock_release>:
 8007a98:	b510      	push	{r4, lr}
 8007a9a:	4802      	ldr	r0, [pc, #8]	; (8007aa4 <__sfp_lock_release+0xc>)
 8007a9c:	f000 f8b6 	bl	8007c0c <__retarget_lock_release_recursive>
 8007aa0:	bd10      	pop	{r4, pc}
 8007aa2:	46c0      	nop			; (mov r8, r8)
 8007aa4:	20001331 	.word	0x20001331

08007aa8 <__sinit_lock_acquire>:
 8007aa8:	b510      	push	{r4, lr}
 8007aaa:	4802      	ldr	r0, [pc, #8]	; (8007ab4 <__sinit_lock_acquire+0xc>)
 8007aac:	f000 f8ad 	bl	8007c0a <__retarget_lock_acquire_recursive>
 8007ab0:	bd10      	pop	{r4, pc}
 8007ab2:	46c0      	nop			; (mov r8, r8)
 8007ab4:	20001332 	.word	0x20001332

08007ab8 <__sinit_lock_release>:
 8007ab8:	b510      	push	{r4, lr}
 8007aba:	4802      	ldr	r0, [pc, #8]	; (8007ac4 <__sinit_lock_release+0xc>)
 8007abc:	f000 f8a6 	bl	8007c0c <__retarget_lock_release_recursive>
 8007ac0:	bd10      	pop	{r4, pc}
 8007ac2:	46c0      	nop			; (mov r8, r8)
 8007ac4:	20001332 	.word	0x20001332

08007ac8 <__sinit>:
 8007ac8:	b513      	push	{r0, r1, r4, lr}
 8007aca:	0004      	movs	r4, r0
 8007acc:	f7ff ffec 	bl	8007aa8 <__sinit_lock_acquire>
 8007ad0:	69a3      	ldr	r3, [r4, #24]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <__sinit+0x14>
 8007ad6:	f7ff ffef 	bl	8007ab8 <__sinit_lock_release>
 8007ada:	bd13      	pop	{r0, r1, r4, pc}
 8007adc:	64a3      	str	r3, [r4, #72]	; 0x48
 8007ade:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007ae0:	6523      	str	r3, [r4, #80]	; 0x50
 8007ae2:	4b13      	ldr	r3, [pc, #76]	; (8007b30 <__sinit+0x68>)
 8007ae4:	4a13      	ldr	r2, [pc, #76]	; (8007b34 <__sinit+0x6c>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007aea:	9301      	str	r3, [sp, #4]
 8007aec:	42a3      	cmp	r3, r4
 8007aee:	d101      	bne.n	8007af4 <__sinit+0x2c>
 8007af0:	2301      	movs	r3, #1
 8007af2:	61a3      	str	r3, [r4, #24]
 8007af4:	0020      	movs	r0, r4
 8007af6:	f000 f81f 	bl	8007b38 <__sfp>
 8007afa:	6060      	str	r0, [r4, #4]
 8007afc:	0020      	movs	r0, r4
 8007afe:	f000 f81b 	bl	8007b38 <__sfp>
 8007b02:	60a0      	str	r0, [r4, #8]
 8007b04:	0020      	movs	r0, r4
 8007b06:	f000 f817 	bl	8007b38 <__sfp>
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	2104      	movs	r1, #4
 8007b0e:	60e0      	str	r0, [r4, #12]
 8007b10:	6860      	ldr	r0, [r4, #4]
 8007b12:	f7ff ff77 	bl	8007a04 <std>
 8007b16:	2201      	movs	r2, #1
 8007b18:	2109      	movs	r1, #9
 8007b1a:	68a0      	ldr	r0, [r4, #8]
 8007b1c:	f7ff ff72 	bl	8007a04 <std>
 8007b20:	2202      	movs	r2, #2
 8007b22:	2112      	movs	r1, #18
 8007b24:	68e0      	ldr	r0, [r4, #12]
 8007b26:	f7ff ff6d 	bl	8007a04 <std>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	61a3      	str	r3, [r4, #24]
 8007b2e:	e7d2      	b.n	8007ad6 <__sinit+0xe>
 8007b30:	08008ff8 	.word	0x08008ff8
 8007b34:	08007a4d 	.word	0x08007a4d

08007b38 <__sfp>:
 8007b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3a:	0007      	movs	r7, r0
 8007b3c:	f7ff ffa4 	bl	8007a88 <__sfp_lock_acquire>
 8007b40:	4b1f      	ldr	r3, [pc, #124]	; (8007bc0 <__sfp+0x88>)
 8007b42:	681e      	ldr	r6, [r3, #0]
 8007b44:	69b3      	ldr	r3, [r6, #24]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d102      	bne.n	8007b50 <__sfp+0x18>
 8007b4a:	0030      	movs	r0, r6
 8007b4c:	f7ff ffbc 	bl	8007ac8 <__sinit>
 8007b50:	3648      	adds	r6, #72	; 0x48
 8007b52:	68b4      	ldr	r4, [r6, #8]
 8007b54:	6873      	ldr	r3, [r6, #4]
 8007b56:	3b01      	subs	r3, #1
 8007b58:	d504      	bpl.n	8007b64 <__sfp+0x2c>
 8007b5a:	6833      	ldr	r3, [r6, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d022      	beq.n	8007ba6 <__sfp+0x6e>
 8007b60:	6836      	ldr	r6, [r6, #0]
 8007b62:	e7f6      	b.n	8007b52 <__sfp+0x1a>
 8007b64:	220c      	movs	r2, #12
 8007b66:	5ea5      	ldrsh	r5, [r4, r2]
 8007b68:	2d00      	cmp	r5, #0
 8007b6a:	d11a      	bne.n	8007ba2 <__sfp+0x6a>
 8007b6c:	0020      	movs	r0, r4
 8007b6e:	4b15      	ldr	r3, [pc, #84]	; (8007bc4 <__sfp+0x8c>)
 8007b70:	3058      	adds	r0, #88	; 0x58
 8007b72:	60e3      	str	r3, [r4, #12]
 8007b74:	6665      	str	r5, [r4, #100]	; 0x64
 8007b76:	f000 f847 	bl	8007c08 <__retarget_lock_init_recursive>
 8007b7a:	f7ff ff8d 	bl	8007a98 <__sfp_lock_release>
 8007b7e:	0020      	movs	r0, r4
 8007b80:	2208      	movs	r2, #8
 8007b82:	0029      	movs	r1, r5
 8007b84:	6025      	str	r5, [r4, #0]
 8007b86:	60a5      	str	r5, [r4, #8]
 8007b88:	6065      	str	r5, [r4, #4]
 8007b8a:	6125      	str	r5, [r4, #16]
 8007b8c:	6165      	str	r5, [r4, #20]
 8007b8e:	61a5      	str	r5, [r4, #24]
 8007b90:	305c      	adds	r0, #92	; 0x5c
 8007b92:	f7ff fbae 	bl	80072f2 <memset>
 8007b96:	6365      	str	r5, [r4, #52]	; 0x34
 8007b98:	63a5      	str	r5, [r4, #56]	; 0x38
 8007b9a:	64a5      	str	r5, [r4, #72]	; 0x48
 8007b9c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007b9e:	0020      	movs	r0, r4
 8007ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ba2:	3468      	adds	r4, #104	; 0x68
 8007ba4:	e7d7      	b.n	8007b56 <__sfp+0x1e>
 8007ba6:	2104      	movs	r1, #4
 8007ba8:	0038      	movs	r0, r7
 8007baa:	f7ff ff57 	bl	8007a5c <__sfmoreglue>
 8007bae:	1e04      	subs	r4, r0, #0
 8007bb0:	6030      	str	r0, [r6, #0]
 8007bb2:	d1d5      	bne.n	8007b60 <__sfp+0x28>
 8007bb4:	f7ff ff70 	bl	8007a98 <__sfp_lock_release>
 8007bb8:	230c      	movs	r3, #12
 8007bba:	603b      	str	r3, [r7, #0]
 8007bbc:	e7ef      	b.n	8007b9e <__sfp+0x66>
 8007bbe:	46c0      	nop			; (mov r8, r8)
 8007bc0:	08008ff8 	.word	0x08008ff8
 8007bc4:	ffff0001 	.word	0xffff0001

08007bc8 <_fwalk_reent>:
 8007bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bca:	0004      	movs	r4, r0
 8007bcc:	0006      	movs	r6, r0
 8007bce:	2700      	movs	r7, #0
 8007bd0:	9101      	str	r1, [sp, #4]
 8007bd2:	3448      	adds	r4, #72	; 0x48
 8007bd4:	6863      	ldr	r3, [r4, #4]
 8007bd6:	68a5      	ldr	r5, [r4, #8]
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	9b00      	ldr	r3, [sp, #0]
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	d504      	bpl.n	8007bec <_fwalk_reent+0x24>
 8007be2:	6824      	ldr	r4, [r4, #0]
 8007be4:	2c00      	cmp	r4, #0
 8007be6:	d1f5      	bne.n	8007bd4 <_fwalk_reent+0xc>
 8007be8:	0038      	movs	r0, r7
 8007bea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007bec:	89ab      	ldrh	r3, [r5, #12]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d908      	bls.n	8007c04 <_fwalk_reent+0x3c>
 8007bf2:	220e      	movs	r2, #14
 8007bf4:	5eab      	ldrsh	r3, [r5, r2]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	d004      	beq.n	8007c04 <_fwalk_reent+0x3c>
 8007bfa:	0029      	movs	r1, r5
 8007bfc:	0030      	movs	r0, r6
 8007bfe:	9b01      	ldr	r3, [sp, #4]
 8007c00:	4798      	blx	r3
 8007c02:	4307      	orrs	r7, r0
 8007c04:	3568      	adds	r5, #104	; 0x68
 8007c06:	e7e8      	b.n	8007bda <_fwalk_reent+0x12>

08007c08 <__retarget_lock_init_recursive>:
 8007c08:	4770      	bx	lr

08007c0a <__retarget_lock_acquire_recursive>:
 8007c0a:	4770      	bx	lr

08007c0c <__retarget_lock_release_recursive>:
 8007c0c:	4770      	bx	lr
	...

08007c10 <__swhatbuf_r>:
 8007c10:	b570      	push	{r4, r5, r6, lr}
 8007c12:	000e      	movs	r6, r1
 8007c14:	001d      	movs	r5, r3
 8007c16:	230e      	movs	r3, #14
 8007c18:	5ec9      	ldrsh	r1, [r1, r3]
 8007c1a:	0014      	movs	r4, r2
 8007c1c:	b096      	sub	sp, #88	; 0x58
 8007c1e:	2900      	cmp	r1, #0
 8007c20:	da08      	bge.n	8007c34 <__swhatbuf_r+0x24>
 8007c22:	220c      	movs	r2, #12
 8007c24:	5eb3      	ldrsh	r3, [r6, r2]
 8007c26:	2200      	movs	r2, #0
 8007c28:	602a      	str	r2, [r5, #0]
 8007c2a:	061b      	lsls	r3, r3, #24
 8007c2c:	d411      	bmi.n	8007c52 <__swhatbuf_r+0x42>
 8007c2e:	2380      	movs	r3, #128	; 0x80
 8007c30:	00db      	lsls	r3, r3, #3
 8007c32:	e00f      	b.n	8007c54 <__swhatbuf_r+0x44>
 8007c34:	466a      	mov	r2, sp
 8007c36:	f000 fd1f 	bl	8008678 <_fstat_r>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	dbf1      	blt.n	8007c22 <__swhatbuf_r+0x12>
 8007c3e:	23f0      	movs	r3, #240	; 0xf0
 8007c40:	9901      	ldr	r1, [sp, #4]
 8007c42:	021b      	lsls	r3, r3, #8
 8007c44:	4019      	ands	r1, r3
 8007c46:	4b05      	ldr	r3, [pc, #20]	; (8007c5c <__swhatbuf_r+0x4c>)
 8007c48:	18c9      	adds	r1, r1, r3
 8007c4a:	424b      	negs	r3, r1
 8007c4c:	4159      	adcs	r1, r3
 8007c4e:	6029      	str	r1, [r5, #0]
 8007c50:	e7ed      	b.n	8007c2e <__swhatbuf_r+0x1e>
 8007c52:	2340      	movs	r3, #64	; 0x40
 8007c54:	2000      	movs	r0, #0
 8007c56:	6023      	str	r3, [r4, #0]
 8007c58:	b016      	add	sp, #88	; 0x58
 8007c5a:	bd70      	pop	{r4, r5, r6, pc}
 8007c5c:	ffffe000 	.word	0xffffe000

08007c60 <__smakebuf_r>:
 8007c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c62:	2602      	movs	r6, #2
 8007c64:	898b      	ldrh	r3, [r1, #12]
 8007c66:	0005      	movs	r5, r0
 8007c68:	000c      	movs	r4, r1
 8007c6a:	4233      	tst	r3, r6
 8007c6c:	d006      	beq.n	8007c7c <__smakebuf_r+0x1c>
 8007c6e:	0023      	movs	r3, r4
 8007c70:	3347      	adds	r3, #71	; 0x47
 8007c72:	6023      	str	r3, [r4, #0]
 8007c74:	6123      	str	r3, [r4, #16]
 8007c76:	2301      	movs	r3, #1
 8007c78:	6163      	str	r3, [r4, #20]
 8007c7a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007c7c:	466a      	mov	r2, sp
 8007c7e:	ab01      	add	r3, sp, #4
 8007c80:	f7ff ffc6 	bl	8007c10 <__swhatbuf_r>
 8007c84:	9900      	ldr	r1, [sp, #0]
 8007c86:	0007      	movs	r7, r0
 8007c88:	0028      	movs	r0, r5
 8007c8a:	f7ff fba7 	bl	80073dc <_malloc_r>
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	d108      	bne.n	8007ca4 <__smakebuf_r+0x44>
 8007c92:	220c      	movs	r2, #12
 8007c94:	5ea3      	ldrsh	r3, [r4, r2]
 8007c96:	059a      	lsls	r2, r3, #22
 8007c98:	d4ef      	bmi.n	8007c7a <__smakebuf_r+0x1a>
 8007c9a:	2203      	movs	r2, #3
 8007c9c:	4393      	bics	r3, r2
 8007c9e:	431e      	orrs	r6, r3
 8007ca0:	81a6      	strh	r6, [r4, #12]
 8007ca2:	e7e4      	b.n	8007c6e <__smakebuf_r+0xe>
 8007ca4:	4b0f      	ldr	r3, [pc, #60]	; (8007ce4 <__smakebuf_r+0x84>)
 8007ca6:	62ab      	str	r3, [r5, #40]	; 0x28
 8007ca8:	2380      	movs	r3, #128	; 0x80
 8007caa:	89a2      	ldrh	r2, [r4, #12]
 8007cac:	6020      	str	r0, [r4, #0]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	81a3      	strh	r3, [r4, #12]
 8007cb2:	9b00      	ldr	r3, [sp, #0]
 8007cb4:	6120      	str	r0, [r4, #16]
 8007cb6:	6163      	str	r3, [r4, #20]
 8007cb8:	9b01      	ldr	r3, [sp, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00d      	beq.n	8007cda <__smakebuf_r+0x7a>
 8007cbe:	0028      	movs	r0, r5
 8007cc0:	230e      	movs	r3, #14
 8007cc2:	5ee1      	ldrsh	r1, [r4, r3]
 8007cc4:	f000 fcea 	bl	800869c <_isatty_r>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	d006      	beq.n	8007cda <__smakebuf_r+0x7a>
 8007ccc:	2203      	movs	r2, #3
 8007cce:	89a3      	ldrh	r3, [r4, #12]
 8007cd0:	4393      	bics	r3, r2
 8007cd2:	001a      	movs	r2, r3
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	81a3      	strh	r3, [r4, #12]
 8007cda:	89a0      	ldrh	r0, [r4, #12]
 8007cdc:	4307      	orrs	r7, r0
 8007cde:	81a7      	strh	r7, [r4, #12]
 8007ce0:	e7cb      	b.n	8007c7a <__smakebuf_r+0x1a>
 8007ce2:	46c0      	nop			; (mov r8, r8)
 8007ce4:	08007a4d 	.word	0x08007a4d

08007ce8 <__malloc_lock>:
 8007ce8:	b510      	push	{r4, lr}
 8007cea:	4802      	ldr	r0, [pc, #8]	; (8007cf4 <__malloc_lock+0xc>)
 8007cec:	f7ff ff8d 	bl	8007c0a <__retarget_lock_acquire_recursive>
 8007cf0:	bd10      	pop	{r4, pc}
 8007cf2:	46c0      	nop			; (mov r8, r8)
 8007cf4:	20001330 	.word	0x20001330

08007cf8 <__malloc_unlock>:
 8007cf8:	b510      	push	{r4, lr}
 8007cfa:	4802      	ldr	r0, [pc, #8]	; (8007d04 <__malloc_unlock+0xc>)
 8007cfc:	f7ff ff86 	bl	8007c0c <__retarget_lock_release_recursive>
 8007d00:	bd10      	pop	{r4, pc}
 8007d02:	46c0      	nop			; (mov r8, r8)
 8007d04:	20001330 	.word	0x20001330

08007d08 <__ssputs_r>:
 8007d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d0a:	688e      	ldr	r6, [r1, #8]
 8007d0c:	b085      	sub	sp, #20
 8007d0e:	0007      	movs	r7, r0
 8007d10:	000c      	movs	r4, r1
 8007d12:	9203      	str	r2, [sp, #12]
 8007d14:	9301      	str	r3, [sp, #4]
 8007d16:	429e      	cmp	r6, r3
 8007d18:	d83c      	bhi.n	8007d94 <__ssputs_r+0x8c>
 8007d1a:	2390      	movs	r3, #144	; 0x90
 8007d1c:	898a      	ldrh	r2, [r1, #12]
 8007d1e:	00db      	lsls	r3, r3, #3
 8007d20:	421a      	tst	r2, r3
 8007d22:	d034      	beq.n	8007d8e <__ssputs_r+0x86>
 8007d24:	6909      	ldr	r1, [r1, #16]
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	6960      	ldr	r0, [r4, #20]
 8007d2a:	1a5b      	subs	r3, r3, r1
 8007d2c:	9302      	str	r3, [sp, #8]
 8007d2e:	2303      	movs	r3, #3
 8007d30:	4343      	muls	r3, r0
 8007d32:	0fdd      	lsrs	r5, r3, #31
 8007d34:	18ed      	adds	r5, r5, r3
 8007d36:	9b01      	ldr	r3, [sp, #4]
 8007d38:	9802      	ldr	r0, [sp, #8]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	181b      	adds	r3, r3, r0
 8007d3e:	106d      	asrs	r5, r5, #1
 8007d40:	42ab      	cmp	r3, r5
 8007d42:	d900      	bls.n	8007d46 <__ssputs_r+0x3e>
 8007d44:	001d      	movs	r5, r3
 8007d46:	0553      	lsls	r3, r2, #21
 8007d48:	d532      	bpl.n	8007db0 <__ssputs_r+0xa8>
 8007d4a:	0029      	movs	r1, r5
 8007d4c:	0038      	movs	r0, r7
 8007d4e:	f7ff fb45 	bl	80073dc <_malloc_r>
 8007d52:	1e06      	subs	r6, r0, #0
 8007d54:	d109      	bne.n	8007d6a <__ssputs_r+0x62>
 8007d56:	230c      	movs	r3, #12
 8007d58:	603b      	str	r3, [r7, #0]
 8007d5a:	2340      	movs	r3, #64	; 0x40
 8007d5c:	2001      	movs	r0, #1
 8007d5e:	89a2      	ldrh	r2, [r4, #12]
 8007d60:	4240      	negs	r0, r0
 8007d62:	4313      	orrs	r3, r2
 8007d64:	81a3      	strh	r3, [r4, #12]
 8007d66:	b005      	add	sp, #20
 8007d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d6a:	9a02      	ldr	r2, [sp, #8]
 8007d6c:	6921      	ldr	r1, [r4, #16]
 8007d6e:	f7ff fab7 	bl	80072e0 <memcpy>
 8007d72:	89a3      	ldrh	r3, [r4, #12]
 8007d74:	4a14      	ldr	r2, [pc, #80]	; (8007dc8 <__ssputs_r+0xc0>)
 8007d76:	401a      	ands	r2, r3
 8007d78:	2380      	movs	r3, #128	; 0x80
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	81a3      	strh	r3, [r4, #12]
 8007d7e:	9b02      	ldr	r3, [sp, #8]
 8007d80:	6126      	str	r6, [r4, #16]
 8007d82:	18f6      	adds	r6, r6, r3
 8007d84:	6026      	str	r6, [r4, #0]
 8007d86:	6165      	str	r5, [r4, #20]
 8007d88:	9e01      	ldr	r6, [sp, #4]
 8007d8a:	1aed      	subs	r5, r5, r3
 8007d8c:	60a5      	str	r5, [r4, #8]
 8007d8e:	9b01      	ldr	r3, [sp, #4]
 8007d90:	429e      	cmp	r6, r3
 8007d92:	d900      	bls.n	8007d96 <__ssputs_r+0x8e>
 8007d94:	9e01      	ldr	r6, [sp, #4]
 8007d96:	0032      	movs	r2, r6
 8007d98:	9903      	ldr	r1, [sp, #12]
 8007d9a:	6820      	ldr	r0, [r4, #0]
 8007d9c:	f000 fcaf 	bl	80086fe <memmove>
 8007da0:	68a3      	ldr	r3, [r4, #8]
 8007da2:	2000      	movs	r0, #0
 8007da4:	1b9b      	subs	r3, r3, r6
 8007da6:	60a3      	str	r3, [r4, #8]
 8007da8:	6823      	ldr	r3, [r4, #0]
 8007daa:	199e      	adds	r6, r3, r6
 8007dac:	6026      	str	r6, [r4, #0]
 8007dae:	e7da      	b.n	8007d66 <__ssputs_r+0x5e>
 8007db0:	002a      	movs	r2, r5
 8007db2:	0038      	movs	r0, r7
 8007db4:	f000 fcb6 	bl	8008724 <_realloc_r>
 8007db8:	1e06      	subs	r6, r0, #0
 8007dba:	d1e0      	bne.n	8007d7e <__ssputs_r+0x76>
 8007dbc:	0038      	movs	r0, r7
 8007dbe:	6921      	ldr	r1, [r4, #16]
 8007dc0:	f7ff faa0 	bl	8007304 <_free_r>
 8007dc4:	e7c7      	b.n	8007d56 <__ssputs_r+0x4e>
 8007dc6:	46c0      	nop			; (mov r8, r8)
 8007dc8:	fffffb7f 	.word	0xfffffb7f

08007dcc <_svfiprintf_r>:
 8007dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dce:	b0a1      	sub	sp, #132	; 0x84
 8007dd0:	9003      	str	r0, [sp, #12]
 8007dd2:	001d      	movs	r5, r3
 8007dd4:	898b      	ldrh	r3, [r1, #12]
 8007dd6:	000f      	movs	r7, r1
 8007dd8:	0016      	movs	r6, r2
 8007dda:	061b      	lsls	r3, r3, #24
 8007ddc:	d511      	bpl.n	8007e02 <_svfiprintf_r+0x36>
 8007dde:	690b      	ldr	r3, [r1, #16]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10e      	bne.n	8007e02 <_svfiprintf_r+0x36>
 8007de4:	2140      	movs	r1, #64	; 0x40
 8007de6:	f7ff faf9 	bl	80073dc <_malloc_r>
 8007dea:	6038      	str	r0, [r7, #0]
 8007dec:	6138      	str	r0, [r7, #16]
 8007dee:	2800      	cmp	r0, #0
 8007df0:	d105      	bne.n	8007dfe <_svfiprintf_r+0x32>
 8007df2:	230c      	movs	r3, #12
 8007df4:	9a03      	ldr	r2, [sp, #12]
 8007df6:	3801      	subs	r0, #1
 8007df8:	6013      	str	r3, [r2, #0]
 8007dfa:	b021      	add	sp, #132	; 0x84
 8007dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dfe:	2340      	movs	r3, #64	; 0x40
 8007e00:	617b      	str	r3, [r7, #20]
 8007e02:	2300      	movs	r3, #0
 8007e04:	ac08      	add	r4, sp, #32
 8007e06:	6163      	str	r3, [r4, #20]
 8007e08:	3320      	adds	r3, #32
 8007e0a:	7663      	strb	r3, [r4, #25]
 8007e0c:	3310      	adds	r3, #16
 8007e0e:	76a3      	strb	r3, [r4, #26]
 8007e10:	9507      	str	r5, [sp, #28]
 8007e12:	0035      	movs	r5, r6
 8007e14:	782b      	ldrb	r3, [r5, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <_svfiprintf_r+0x52>
 8007e1a:	2b25      	cmp	r3, #37	; 0x25
 8007e1c:	d147      	bne.n	8007eae <_svfiprintf_r+0xe2>
 8007e1e:	1bab      	subs	r3, r5, r6
 8007e20:	9305      	str	r3, [sp, #20]
 8007e22:	42b5      	cmp	r5, r6
 8007e24:	d00c      	beq.n	8007e40 <_svfiprintf_r+0x74>
 8007e26:	0032      	movs	r2, r6
 8007e28:	0039      	movs	r1, r7
 8007e2a:	9803      	ldr	r0, [sp, #12]
 8007e2c:	f7ff ff6c 	bl	8007d08 <__ssputs_r>
 8007e30:	1c43      	adds	r3, r0, #1
 8007e32:	d100      	bne.n	8007e36 <_svfiprintf_r+0x6a>
 8007e34:	e0ae      	b.n	8007f94 <_svfiprintf_r+0x1c8>
 8007e36:	6962      	ldr	r2, [r4, #20]
 8007e38:	9b05      	ldr	r3, [sp, #20]
 8007e3a:	4694      	mov	ip, r2
 8007e3c:	4463      	add	r3, ip
 8007e3e:	6163      	str	r3, [r4, #20]
 8007e40:	782b      	ldrb	r3, [r5, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d100      	bne.n	8007e48 <_svfiprintf_r+0x7c>
 8007e46:	e0a5      	b.n	8007f94 <_svfiprintf_r+0x1c8>
 8007e48:	2201      	movs	r2, #1
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	4252      	negs	r2, r2
 8007e4e:	6062      	str	r2, [r4, #4]
 8007e50:	a904      	add	r1, sp, #16
 8007e52:	3254      	adds	r2, #84	; 0x54
 8007e54:	1852      	adds	r2, r2, r1
 8007e56:	1c6e      	adds	r6, r5, #1
 8007e58:	6023      	str	r3, [r4, #0]
 8007e5a:	60e3      	str	r3, [r4, #12]
 8007e5c:	60a3      	str	r3, [r4, #8]
 8007e5e:	7013      	strb	r3, [r2, #0]
 8007e60:	65a3      	str	r3, [r4, #88]	; 0x58
 8007e62:	2205      	movs	r2, #5
 8007e64:	7831      	ldrb	r1, [r6, #0]
 8007e66:	4854      	ldr	r0, [pc, #336]	; (8007fb8 <_svfiprintf_r+0x1ec>)
 8007e68:	f000 fc3e 	bl	80086e8 <memchr>
 8007e6c:	1c75      	adds	r5, r6, #1
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d11f      	bne.n	8007eb2 <_svfiprintf_r+0xe6>
 8007e72:	6822      	ldr	r2, [r4, #0]
 8007e74:	06d3      	lsls	r3, r2, #27
 8007e76:	d504      	bpl.n	8007e82 <_svfiprintf_r+0xb6>
 8007e78:	2353      	movs	r3, #83	; 0x53
 8007e7a:	a904      	add	r1, sp, #16
 8007e7c:	185b      	adds	r3, r3, r1
 8007e7e:	2120      	movs	r1, #32
 8007e80:	7019      	strb	r1, [r3, #0]
 8007e82:	0713      	lsls	r3, r2, #28
 8007e84:	d504      	bpl.n	8007e90 <_svfiprintf_r+0xc4>
 8007e86:	2353      	movs	r3, #83	; 0x53
 8007e88:	a904      	add	r1, sp, #16
 8007e8a:	185b      	adds	r3, r3, r1
 8007e8c:	212b      	movs	r1, #43	; 0x2b
 8007e8e:	7019      	strb	r1, [r3, #0]
 8007e90:	7833      	ldrb	r3, [r6, #0]
 8007e92:	2b2a      	cmp	r3, #42	; 0x2a
 8007e94:	d016      	beq.n	8007ec4 <_svfiprintf_r+0xf8>
 8007e96:	0035      	movs	r5, r6
 8007e98:	2100      	movs	r1, #0
 8007e9a:	200a      	movs	r0, #10
 8007e9c:	68e3      	ldr	r3, [r4, #12]
 8007e9e:	782a      	ldrb	r2, [r5, #0]
 8007ea0:	1c6e      	adds	r6, r5, #1
 8007ea2:	3a30      	subs	r2, #48	; 0x30
 8007ea4:	2a09      	cmp	r2, #9
 8007ea6:	d94e      	bls.n	8007f46 <_svfiprintf_r+0x17a>
 8007ea8:	2900      	cmp	r1, #0
 8007eaa:	d111      	bne.n	8007ed0 <_svfiprintf_r+0x104>
 8007eac:	e017      	b.n	8007ede <_svfiprintf_r+0x112>
 8007eae:	3501      	adds	r5, #1
 8007eb0:	e7b0      	b.n	8007e14 <_svfiprintf_r+0x48>
 8007eb2:	4b41      	ldr	r3, [pc, #260]	; (8007fb8 <_svfiprintf_r+0x1ec>)
 8007eb4:	6822      	ldr	r2, [r4, #0]
 8007eb6:	1ac0      	subs	r0, r0, r3
 8007eb8:	2301      	movs	r3, #1
 8007eba:	4083      	lsls	r3, r0
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	002e      	movs	r6, r5
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	e7ce      	b.n	8007e62 <_svfiprintf_r+0x96>
 8007ec4:	9b07      	ldr	r3, [sp, #28]
 8007ec6:	1d19      	adds	r1, r3, #4
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	9107      	str	r1, [sp, #28]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	db01      	blt.n	8007ed4 <_svfiprintf_r+0x108>
 8007ed0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ed2:	e004      	b.n	8007ede <_svfiprintf_r+0x112>
 8007ed4:	425b      	negs	r3, r3
 8007ed6:	60e3      	str	r3, [r4, #12]
 8007ed8:	2302      	movs	r3, #2
 8007eda:	4313      	orrs	r3, r2
 8007edc:	6023      	str	r3, [r4, #0]
 8007ede:	782b      	ldrb	r3, [r5, #0]
 8007ee0:	2b2e      	cmp	r3, #46	; 0x2e
 8007ee2:	d10a      	bne.n	8007efa <_svfiprintf_r+0x12e>
 8007ee4:	786b      	ldrb	r3, [r5, #1]
 8007ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ee8:	d135      	bne.n	8007f56 <_svfiprintf_r+0x18a>
 8007eea:	9b07      	ldr	r3, [sp, #28]
 8007eec:	3502      	adds	r5, #2
 8007eee:	1d1a      	adds	r2, r3, #4
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	9207      	str	r2, [sp, #28]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	db2b      	blt.n	8007f50 <_svfiprintf_r+0x184>
 8007ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8007efa:	4e30      	ldr	r6, [pc, #192]	; (8007fbc <_svfiprintf_r+0x1f0>)
 8007efc:	2203      	movs	r2, #3
 8007efe:	0030      	movs	r0, r6
 8007f00:	7829      	ldrb	r1, [r5, #0]
 8007f02:	f000 fbf1 	bl	80086e8 <memchr>
 8007f06:	2800      	cmp	r0, #0
 8007f08:	d006      	beq.n	8007f18 <_svfiprintf_r+0x14c>
 8007f0a:	2340      	movs	r3, #64	; 0x40
 8007f0c:	1b80      	subs	r0, r0, r6
 8007f0e:	4083      	lsls	r3, r0
 8007f10:	6822      	ldr	r2, [r4, #0]
 8007f12:	3501      	adds	r5, #1
 8007f14:	4313      	orrs	r3, r2
 8007f16:	6023      	str	r3, [r4, #0]
 8007f18:	7829      	ldrb	r1, [r5, #0]
 8007f1a:	2206      	movs	r2, #6
 8007f1c:	4828      	ldr	r0, [pc, #160]	; (8007fc0 <_svfiprintf_r+0x1f4>)
 8007f1e:	1c6e      	adds	r6, r5, #1
 8007f20:	7621      	strb	r1, [r4, #24]
 8007f22:	f000 fbe1 	bl	80086e8 <memchr>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d03c      	beq.n	8007fa4 <_svfiprintf_r+0x1d8>
 8007f2a:	4b26      	ldr	r3, [pc, #152]	; (8007fc4 <_svfiprintf_r+0x1f8>)
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d125      	bne.n	8007f7c <_svfiprintf_r+0x1b0>
 8007f30:	2207      	movs	r2, #7
 8007f32:	9b07      	ldr	r3, [sp, #28]
 8007f34:	3307      	adds	r3, #7
 8007f36:	4393      	bics	r3, r2
 8007f38:	3308      	adds	r3, #8
 8007f3a:	9307      	str	r3, [sp, #28]
 8007f3c:	6963      	ldr	r3, [r4, #20]
 8007f3e:	9a04      	ldr	r2, [sp, #16]
 8007f40:	189b      	adds	r3, r3, r2
 8007f42:	6163      	str	r3, [r4, #20]
 8007f44:	e765      	b.n	8007e12 <_svfiprintf_r+0x46>
 8007f46:	4343      	muls	r3, r0
 8007f48:	0035      	movs	r5, r6
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	189b      	adds	r3, r3, r2
 8007f4e:	e7a6      	b.n	8007e9e <_svfiprintf_r+0xd2>
 8007f50:	2301      	movs	r3, #1
 8007f52:	425b      	negs	r3, r3
 8007f54:	e7d0      	b.n	8007ef8 <_svfiprintf_r+0x12c>
 8007f56:	2300      	movs	r3, #0
 8007f58:	200a      	movs	r0, #10
 8007f5a:	001a      	movs	r2, r3
 8007f5c:	3501      	adds	r5, #1
 8007f5e:	6063      	str	r3, [r4, #4]
 8007f60:	7829      	ldrb	r1, [r5, #0]
 8007f62:	1c6e      	adds	r6, r5, #1
 8007f64:	3930      	subs	r1, #48	; 0x30
 8007f66:	2909      	cmp	r1, #9
 8007f68:	d903      	bls.n	8007f72 <_svfiprintf_r+0x1a6>
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d0c5      	beq.n	8007efa <_svfiprintf_r+0x12e>
 8007f6e:	9209      	str	r2, [sp, #36]	; 0x24
 8007f70:	e7c3      	b.n	8007efa <_svfiprintf_r+0x12e>
 8007f72:	4342      	muls	r2, r0
 8007f74:	0035      	movs	r5, r6
 8007f76:	2301      	movs	r3, #1
 8007f78:	1852      	adds	r2, r2, r1
 8007f7a:	e7f1      	b.n	8007f60 <_svfiprintf_r+0x194>
 8007f7c:	ab07      	add	r3, sp, #28
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	003a      	movs	r2, r7
 8007f82:	0021      	movs	r1, r4
 8007f84:	4b10      	ldr	r3, [pc, #64]	; (8007fc8 <_svfiprintf_r+0x1fc>)
 8007f86:	9803      	ldr	r0, [sp, #12]
 8007f88:	e000      	b.n	8007f8c <_svfiprintf_r+0x1c0>
 8007f8a:	bf00      	nop
 8007f8c:	9004      	str	r0, [sp, #16]
 8007f8e:	9b04      	ldr	r3, [sp, #16]
 8007f90:	3301      	adds	r3, #1
 8007f92:	d1d3      	bne.n	8007f3c <_svfiprintf_r+0x170>
 8007f94:	89bb      	ldrh	r3, [r7, #12]
 8007f96:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007f98:	065b      	lsls	r3, r3, #25
 8007f9a:	d400      	bmi.n	8007f9e <_svfiprintf_r+0x1d2>
 8007f9c:	e72d      	b.n	8007dfa <_svfiprintf_r+0x2e>
 8007f9e:	2001      	movs	r0, #1
 8007fa0:	4240      	negs	r0, r0
 8007fa2:	e72a      	b.n	8007dfa <_svfiprintf_r+0x2e>
 8007fa4:	ab07      	add	r3, sp, #28
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	003a      	movs	r2, r7
 8007faa:	0021      	movs	r1, r4
 8007fac:	4b06      	ldr	r3, [pc, #24]	; (8007fc8 <_svfiprintf_r+0x1fc>)
 8007fae:	9803      	ldr	r0, [sp, #12]
 8007fb0:	f000 f9de 	bl	8008370 <_printf_i>
 8007fb4:	e7ea      	b.n	8007f8c <_svfiprintf_r+0x1c0>
 8007fb6:	46c0      	nop			; (mov r8, r8)
 8007fb8:	0800905c 	.word	0x0800905c
 8007fbc:	08009062 	.word	0x08009062
 8007fc0:	08009066 	.word	0x08009066
 8007fc4:	00000000 	.word	0x00000000
 8007fc8:	08007d09 	.word	0x08007d09

08007fcc <__sfputc_r>:
 8007fcc:	6893      	ldr	r3, [r2, #8]
 8007fce:	b510      	push	{r4, lr}
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	6093      	str	r3, [r2, #8]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	da04      	bge.n	8007fe2 <__sfputc_r+0x16>
 8007fd8:	6994      	ldr	r4, [r2, #24]
 8007fda:	42a3      	cmp	r3, r4
 8007fdc:	db07      	blt.n	8007fee <__sfputc_r+0x22>
 8007fde:	290a      	cmp	r1, #10
 8007fe0:	d005      	beq.n	8007fee <__sfputc_r+0x22>
 8007fe2:	6813      	ldr	r3, [r2, #0]
 8007fe4:	1c58      	adds	r0, r3, #1
 8007fe6:	6010      	str	r0, [r2, #0]
 8007fe8:	7019      	strb	r1, [r3, #0]
 8007fea:	0008      	movs	r0, r1
 8007fec:	bd10      	pop	{r4, pc}
 8007fee:	f7ff fb6f 	bl	80076d0 <__swbuf_r>
 8007ff2:	0001      	movs	r1, r0
 8007ff4:	e7f9      	b.n	8007fea <__sfputc_r+0x1e>

08007ff6 <__sfputs_r>:
 8007ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff8:	0006      	movs	r6, r0
 8007ffa:	000f      	movs	r7, r1
 8007ffc:	0014      	movs	r4, r2
 8007ffe:	18d5      	adds	r5, r2, r3
 8008000:	42ac      	cmp	r4, r5
 8008002:	d101      	bne.n	8008008 <__sfputs_r+0x12>
 8008004:	2000      	movs	r0, #0
 8008006:	e007      	b.n	8008018 <__sfputs_r+0x22>
 8008008:	7821      	ldrb	r1, [r4, #0]
 800800a:	003a      	movs	r2, r7
 800800c:	0030      	movs	r0, r6
 800800e:	f7ff ffdd 	bl	8007fcc <__sfputc_r>
 8008012:	3401      	adds	r4, #1
 8008014:	1c43      	adds	r3, r0, #1
 8008016:	d1f3      	bne.n	8008000 <__sfputs_r+0xa>
 8008018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800801c <_vfiprintf_r>:
 800801c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800801e:	b0a1      	sub	sp, #132	; 0x84
 8008020:	0006      	movs	r6, r0
 8008022:	000c      	movs	r4, r1
 8008024:	001f      	movs	r7, r3
 8008026:	9203      	str	r2, [sp, #12]
 8008028:	2800      	cmp	r0, #0
 800802a:	d004      	beq.n	8008036 <_vfiprintf_r+0x1a>
 800802c:	6983      	ldr	r3, [r0, #24]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d101      	bne.n	8008036 <_vfiprintf_r+0x1a>
 8008032:	f7ff fd49 	bl	8007ac8 <__sinit>
 8008036:	4b8e      	ldr	r3, [pc, #568]	; (8008270 <_vfiprintf_r+0x254>)
 8008038:	429c      	cmp	r4, r3
 800803a:	d11c      	bne.n	8008076 <_vfiprintf_r+0x5a>
 800803c:	6874      	ldr	r4, [r6, #4]
 800803e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008040:	07db      	lsls	r3, r3, #31
 8008042:	d405      	bmi.n	8008050 <_vfiprintf_r+0x34>
 8008044:	89a3      	ldrh	r3, [r4, #12]
 8008046:	059b      	lsls	r3, r3, #22
 8008048:	d402      	bmi.n	8008050 <_vfiprintf_r+0x34>
 800804a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800804c:	f7ff fddd 	bl	8007c0a <__retarget_lock_acquire_recursive>
 8008050:	89a3      	ldrh	r3, [r4, #12]
 8008052:	071b      	lsls	r3, r3, #28
 8008054:	d502      	bpl.n	800805c <_vfiprintf_r+0x40>
 8008056:	6923      	ldr	r3, [r4, #16]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d11d      	bne.n	8008098 <_vfiprintf_r+0x7c>
 800805c:	0021      	movs	r1, r4
 800805e:	0030      	movs	r0, r6
 8008060:	f7ff fb8c 	bl	800777c <__swsetup_r>
 8008064:	2800      	cmp	r0, #0
 8008066:	d017      	beq.n	8008098 <_vfiprintf_r+0x7c>
 8008068:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800806a:	07db      	lsls	r3, r3, #31
 800806c:	d50d      	bpl.n	800808a <_vfiprintf_r+0x6e>
 800806e:	2001      	movs	r0, #1
 8008070:	4240      	negs	r0, r0
 8008072:	b021      	add	sp, #132	; 0x84
 8008074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008076:	4b7f      	ldr	r3, [pc, #508]	; (8008274 <_vfiprintf_r+0x258>)
 8008078:	429c      	cmp	r4, r3
 800807a:	d101      	bne.n	8008080 <_vfiprintf_r+0x64>
 800807c:	68b4      	ldr	r4, [r6, #8]
 800807e:	e7de      	b.n	800803e <_vfiprintf_r+0x22>
 8008080:	4b7d      	ldr	r3, [pc, #500]	; (8008278 <_vfiprintf_r+0x25c>)
 8008082:	429c      	cmp	r4, r3
 8008084:	d1db      	bne.n	800803e <_vfiprintf_r+0x22>
 8008086:	68f4      	ldr	r4, [r6, #12]
 8008088:	e7d9      	b.n	800803e <_vfiprintf_r+0x22>
 800808a:	89a3      	ldrh	r3, [r4, #12]
 800808c:	059b      	lsls	r3, r3, #22
 800808e:	d4ee      	bmi.n	800806e <_vfiprintf_r+0x52>
 8008090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008092:	f7ff fdbb 	bl	8007c0c <__retarget_lock_release_recursive>
 8008096:	e7ea      	b.n	800806e <_vfiprintf_r+0x52>
 8008098:	2300      	movs	r3, #0
 800809a:	ad08      	add	r5, sp, #32
 800809c:	616b      	str	r3, [r5, #20]
 800809e:	3320      	adds	r3, #32
 80080a0:	766b      	strb	r3, [r5, #25]
 80080a2:	3310      	adds	r3, #16
 80080a4:	76ab      	strb	r3, [r5, #26]
 80080a6:	9707      	str	r7, [sp, #28]
 80080a8:	9f03      	ldr	r7, [sp, #12]
 80080aa:	783b      	ldrb	r3, [r7, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d001      	beq.n	80080b4 <_vfiprintf_r+0x98>
 80080b0:	2b25      	cmp	r3, #37	; 0x25
 80080b2:	d14e      	bne.n	8008152 <_vfiprintf_r+0x136>
 80080b4:	9b03      	ldr	r3, [sp, #12]
 80080b6:	1afb      	subs	r3, r7, r3
 80080b8:	9305      	str	r3, [sp, #20]
 80080ba:	9b03      	ldr	r3, [sp, #12]
 80080bc:	429f      	cmp	r7, r3
 80080be:	d00d      	beq.n	80080dc <_vfiprintf_r+0xc0>
 80080c0:	9b05      	ldr	r3, [sp, #20]
 80080c2:	0021      	movs	r1, r4
 80080c4:	0030      	movs	r0, r6
 80080c6:	9a03      	ldr	r2, [sp, #12]
 80080c8:	f7ff ff95 	bl	8007ff6 <__sfputs_r>
 80080cc:	1c43      	adds	r3, r0, #1
 80080ce:	d100      	bne.n	80080d2 <_vfiprintf_r+0xb6>
 80080d0:	e0b5      	b.n	800823e <_vfiprintf_r+0x222>
 80080d2:	696a      	ldr	r2, [r5, #20]
 80080d4:	9b05      	ldr	r3, [sp, #20]
 80080d6:	4694      	mov	ip, r2
 80080d8:	4463      	add	r3, ip
 80080da:	616b      	str	r3, [r5, #20]
 80080dc:	783b      	ldrb	r3, [r7, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d100      	bne.n	80080e4 <_vfiprintf_r+0xc8>
 80080e2:	e0ac      	b.n	800823e <_vfiprintf_r+0x222>
 80080e4:	2201      	movs	r2, #1
 80080e6:	1c7b      	adds	r3, r7, #1
 80080e8:	9303      	str	r3, [sp, #12]
 80080ea:	2300      	movs	r3, #0
 80080ec:	4252      	negs	r2, r2
 80080ee:	606a      	str	r2, [r5, #4]
 80080f0:	a904      	add	r1, sp, #16
 80080f2:	3254      	adds	r2, #84	; 0x54
 80080f4:	1852      	adds	r2, r2, r1
 80080f6:	602b      	str	r3, [r5, #0]
 80080f8:	60eb      	str	r3, [r5, #12]
 80080fa:	60ab      	str	r3, [r5, #8]
 80080fc:	7013      	strb	r3, [r2, #0]
 80080fe:	65ab      	str	r3, [r5, #88]	; 0x58
 8008100:	9b03      	ldr	r3, [sp, #12]
 8008102:	2205      	movs	r2, #5
 8008104:	7819      	ldrb	r1, [r3, #0]
 8008106:	485d      	ldr	r0, [pc, #372]	; (800827c <_vfiprintf_r+0x260>)
 8008108:	f000 faee 	bl	80086e8 <memchr>
 800810c:	9b03      	ldr	r3, [sp, #12]
 800810e:	1c5f      	adds	r7, r3, #1
 8008110:	2800      	cmp	r0, #0
 8008112:	d120      	bne.n	8008156 <_vfiprintf_r+0x13a>
 8008114:	682a      	ldr	r2, [r5, #0]
 8008116:	06d3      	lsls	r3, r2, #27
 8008118:	d504      	bpl.n	8008124 <_vfiprintf_r+0x108>
 800811a:	2353      	movs	r3, #83	; 0x53
 800811c:	a904      	add	r1, sp, #16
 800811e:	185b      	adds	r3, r3, r1
 8008120:	2120      	movs	r1, #32
 8008122:	7019      	strb	r1, [r3, #0]
 8008124:	0713      	lsls	r3, r2, #28
 8008126:	d504      	bpl.n	8008132 <_vfiprintf_r+0x116>
 8008128:	2353      	movs	r3, #83	; 0x53
 800812a:	a904      	add	r1, sp, #16
 800812c:	185b      	adds	r3, r3, r1
 800812e:	212b      	movs	r1, #43	; 0x2b
 8008130:	7019      	strb	r1, [r3, #0]
 8008132:	9b03      	ldr	r3, [sp, #12]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	2b2a      	cmp	r3, #42	; 0x2a
 8008138:	d016      	beq.n	8008168 <_vfiprintf_r+0x14c>
 800813a:	2100      	movs	r1, #0
 800813c:	68eb      	ldr	r3, [r5, #12]
 800813e:	9f03      	ldr	r7, [sp, #12]
 8008140:	783a      	ldrb	r2, [r7, #0]
 8008142:	1c78      	adds	r0, r7, #1
 8008144:	3a30      	subs	r2, #48	; 0x30
 8008146:	4684      	mov	ip, r0
 8008148:	2a09      	cmp	r2, #9
 800814a:	d94f      	bls.n	80081ec <_vfiprintf_r+0x1d0>
 800814c:	2900      	cmp	r1, #0
 800814e:	d111      	bne.n	8008174 <_vfiprintf_r+0x158>
 8008150:	e017      	b.n	8008182 <_vfiprintf_r+0x166>
 8008152:	3701      	adds	r7, #1
 8008154:	e7a9      	b.n	80080aa <_vfiprintf_r+0x8e>
 8008156:	4b49      	ldr	r3, [pc, #292]	; (800827c <_vfiprintf_r+0x260>)
 8008158:	682a      	ldr	r2, [r5, #0]
 800815a:	1ac0      	subs	r0, r0, r3
 800815c:	2301      	movs	r3, #1
 800815e:	4083      	lsls	r3, r0
 8008160:	4313      	orrs	r3, r2
 8008162:	602b      	str	r3, [r5, #0]
 8008164:	9703      	str	r7, [sp, #12]
 8008166:	e7cb      	b.n	8008100 <_vfiprintf_r+0xe4>
 8008168:	9b07      	ldr	r3, [sp, #28]
 800816a:	1d19      	adds	r1, r3, #4
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	9107      	str	r1, [sp, #28]
 8008170:	2b00      	cmp	r3, #0
 8008172:	db01      	blt.n	8008178 <_vfiprintf_r+0x15c>
 8008174:	930b      	str	r3, [sp, #44]	; 0x2c
 8008176:	e004      	b.n	8008182 <_vfiprintf_r+0x166>
 8008178:	425b      	negs	r3, r3
 800817a:	60eb      	str	r3, [r5, #12]
 800817c:	2302      	movs	r3, #2
 800817e:	4313      	orrs	r3, r2
 8008180:	602b      	str	r3, [r5, #0]
 8008182:	783b      	ldrb	r3, [r7, #0]
 8008184:	2b2e      	cmp	r3, #46	; 0x2e
 8008186:	d10a      	bne.n	800819e <_vfiprintf_r+0x182>
 8008188:	787b      	ldrb	r3, [r7, #1]
 800818a:	2b2a      	cmp	r3, #42	; 0x2a
 800818c:	d137      	bne.n	80081fe <_vfiprintf_r+0x1e2>
 800818e:	9b07      	ldr	r3, [sp, #28]
 8008190:	3702      	adds	r7, #2
 8008192:	1d1a      	adds	r2, r3, #4
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	9207      	str	r2, [sp, #28]
 8008198:	2b00      	cmp	r3, #0
 800819a:	db2d      	blt.n	80081f8 <_vfiprintf_r+0x1dc>
 800819c:	9309      	str	r3, [sp, #36]	; 0x24
 800819e:	2203      	movs	r2, #3
 80081a0:	7839      	ldrb	r1, [r7, #0]
 80081a2:	4837      	ldr	r0, [pc, #220]	; (8008280 <_vfiprintf_r+0x264>)
 80081a4:	f000 faa0 	bl	80086e8 <memchr>
 80081a8:	2800      	cmp	r0, #0
 80081aa:	d007      	beq.n	80081bc <_vfiprintf_r+0x1a0>
 80081ac:	4b34      	ldr	r3, [pc, #208]	; (8008280 <_vfiprintf_r+0x264>)
 80081ae:	682a      	ldr	r2, [r5, #0]
 80081b0:	1ac0      	subs	r0, r0, r3
 80081b2:	2340      	movs	r3, #64	; 0x40
 80081b4:	4083      	lsls	r3, r0
 80081b6:	4313      	orrs	r3, r2
 80081b8:	3701      	adds	r7, #1
 80081ba:	602b      	str	r3, [r5, #0]
 80081bc:	7839      	ldrb	r1, [r7, #0]
 80081be:	1c7b      	adds	r3, r7, #1
 80081c0:	2206      	movs	r2, #6
 80081c2:	4830      	ldr	r0, [pc, #192]	; (8008284 <_vfiprintf_r+0x268>)
 80081c4:	9303      	str	r3, [sp, #12]
 80081c6:	7629      	strb	r1, [r5, #24]
 80081c8:	f000 fa8e 	bl	80086e8 <memchr>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	d045      	beq.n	800825c <_vfiprintf_r+0x240>
 80081d0:	4b2d      	ldr	r3, [pc, #180]	; (8008288 <_vfiprintf_r+0x26c>)
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d127      	bne.n	8008226 <_vfiprintf_r+0x20a>
 80081d6:	2207      	movs	r2, #7
 80081d8:	9b07      	ldr	r3, [sp, #28]
 80081da:	3307      	adds	r3, #7
 80081dc:	4393      	bics	r3, r2
 80081de:	3308      	adds	r3, #8
 80081e0:	9307      	str	r3, [sp, #28]
 80081e2:	696b      	ldr	r3, [r5, #20]
 80081e4:	9a04      	ldr	r2, [sp, #16]
 80081e6:	189b      	adds	r3, r3, r2
 80081e8:	616b      	str	r3, [r5, #20]
 80081ea:	e75d      	b.n	80080a8 <_vfiprintf_r+0x8c>
 80081ec:	210a      	movs	r1, #10
 80081ee:	434b      	muls	r3, r1
 80081f0:	4667      	mov	r7, ip
 80081f2:	189b      	adds	r3, r3, r2
 80081f4:	3909      	subs	r1, #9
 80081f6:	e7a3      	b.n	8008140 <_vfiprintf_r+0x124>
 80081f8:	2301      	movs	r3, #1
 80081fa:	425b      	negs	r3, r3
 80081fc:	e7ce      	b.n	800819c <_vfiprintf_r+0x180>
 80081fe:	2300      	movs	r3, #0
 8008200:	001a      	movs	r2, r3
 8008202:	3701      	adds	r7, #1
 8008204:	606b      	str	r3, [r5, #4]
 8008206:	7839      	ldrb	r1, [r7, #0]
 8008208:	1c78      	adds	r0, r7, #1
 800820a:	3930      	subs	r1, #48	; 0x30
 800820c:	4684      	mov	ip, r0
 800820e:	2909      	cmp	r1, #9
 8008210:	d903      	bls.n	800821a <_vfiprintf_r+0x1fe>
 8008212:	2b00      	cmp	r3, #0
 8008214:	d0c3      	beq.n	800819e <_vfiprintf_r+0x182>
 8008216:	9209      	str	r2, [sp, #36]	; 0x24
 8008218:	e7c1      	b.n	800819e <_vfiprintf_r+0x182>
 800821a:	230a      	movs	r3, #10
 800821c:	435a      	muls	r2, r3
 800821e:	4667      	mov	r7, ip
 8008220:	1852      	adds	r2, r2, r1
 8008222:	3b09      	subs	r3, #9
 8008224:	e7ef      	b.n	8008206 <_vfiprintf_r+0x1ea>
 8008226:	ab07      	add	r3, sp, #28
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	0022      	movs	r2, r4
 800822c:	0029      	movs	r1, r5
 800822e:	0030      	movs	r0, r6
 8008230:	4b16      	ldr	r3, [pc, #88]	; (800828c <_vfiprintf_r+0x270>)
 8008232:	e000      	b.n	8008236 <_vfiprintf_r+0x21a>
 8008234:	bf00      	nop
 8008236:	9004      	str	r0, [sp, #16]
 8008238:	9b04      	ldr	r3, [sp, #16]
 800823a:	3301      	adds	r3, #1
 800823c:	d1d1      	bne.n	80081e2 <_vfiprintf_r+0x1c6>
 800823e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008240:	07db      	lsls	r3, r3, #31
 8008242:	d405      	bmi.n	8008250 <_vfiprintf_r+0x234>
 8008244:	89a3      	ldrh	r3, [r4, #12]
 8008246:	059b      	lsls	r3, r3, #22
 8008248:	d402      	bmi.n	8008250 <_vfiprintf_r+0x234>
 800824a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800824c:	f7ff fcde 	bl	8007c0c <__retarget_lock_release_recursive>
 8008250:	89a3      	ldrh	r3, [r4, #12]
 8008252:	065b      	lsls	r3, r3, #25
 8008254:	d500      	bpl.n	8008258 <_vfiprintf_r+0x23c>
 8008256:	e70a      	b.n	800806e <_vfiprintf_r+0x52>
 8008258:	980d      	ldr	r0, [sp, #52]	; 0x34
 800825a:	e70a      	b.n	8008072 <_vfiprintf_r+0x56>
 800825c:	ab07      	add	r3, sp, #28
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	0022      	movs	r2, r4
 8008262:	0029      	movs	r1, r5
 8008264:	0030      	movs	r0, r6
 8008266:	4b09      	ldr	r3, [pc, #36]	; (800828c <_vfiprintf_r+0x270>)
 8008268:	f000 f882 	bl	8008370 <_printf_i>
 800826c:	e7e3      	b.n	8008236 <_vfiprintf_r+0x21a>
 800826e:	46c0      	nop			; (mov r8, r8)
 8008270:	0800901c 	.word	0x0800901c
 8008274:	0800903c 	.word	0x0800903c
 8008278:	08008ffc 	.word	0x08008ffc
 800827c:	0800905c 	.word	0x0800905c
 8008280:	08009062 	.word	0x08009062
 8008284:	08009066 	.word	0x08009066
 8008288:	00000000 	.word	0x00000000
 800828c:	08007ff7 	.word	0x08007ff7

08008290 <_printf_common>:
 8008290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008292:	0015      	movs	r5, r2
 8008294:	9301      	str	r3, [sp, #4]
 8008296:	688a      	ldr	r2, [r1, #8]
 8008298:	690b      	ldr	r3, [r1, #16]
 800829a:	000c      	movs	r4, r1
 800829c:	9000      	str	r0, [sp, #0]
 800829e:	4293      	cmp	r3, r2
 80082a0:	da00      	bge.n	80082a4 <_printf_common+0x14>
 80082a2:	0013      	movs	r3, r2
 80082a4:	0022      	movs	r2, r4
 80082a6:	602b      	str	r3, [r5, #0]
 80082a8:	3243      	adds	r2, #67	; 0x43
 80082aa:	7812      	ldrb	r2, [r2, #0]
 80082ac:	2a00      	cmp	r2, #0
 80082ae:	d001      	beq.n	80082b4 <_printf_common+0x24>
 80082b0:	3301      	adds	r3, #1
 80082b2:	602b      	str	r3, [r5, #0]
 80082b4:	6823      	ldr	r3, [r4, #0]
 80082b6:	069b      	lsls	r3, r3, #26
 80082b8:	d502      	bpl.n	80082c0 <_printf_common+0x30>
 80082ba:	682b      	ldr	r3, [r5, #0]
 80082bc:	3302      	adds	r3, #2
 80082be:	602b      	str	r3, [r5, #0]
 80082c0:	6822      	ldr	r2, [r4, #0]
 80082c2:	2306      	movs	r3, #6
 80082c4:	0017      	movs	r7, r2
 80082c6:	401f      	ands	r7, r3
 80082c8:	421a      	tst	r2, r3
 80082ca:	d027      	beq.n	800831c <_printf_common+0x8c>
 80082cc:	0023      	movs	r3, r4
 80082ce:	3343      	adds	r3, #67	; 0x43
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	1e5a      	subs	r2, r3, #1
 80082d4:	4193      	sbcs	r3, r2
 80082d6:	6822      	ldr	r2, [r4, #0]
 80082d8:	0692      	lsls	r2, r2, #26
 80082da:	d430      	bmi.n	800833e <_printf_common+0xae>
 80082dc:	0022      	movs	r2, r4
 80082de:	9901      	ldr	r1, [sp, #4]
 80082e0:	9800      	ldr	r0, [sp, #0]
 80082e2:	9e08      	ldr	r6, [sp, #32]
 80082e4:	3243      	adds	r2, #67	; 0x43
 80082e6:	47b0      	blx	r6
 80082e8:	1c43      	adds	r3, r0, #1
 80082ea:	d025      	beq.n	8008338 <_printf_common+0xa8>
 80082ec:	2306      	movs	r3, #6
 80082ee:	6820      	ldr	r0, [r4, #0]
 80082f0:	682a      	ldr	r2, [r5, #0]
 80082f2:	68e1      	ldr	r1, [r4, #12]
 80082f4:	2500      	movs	r5, #0
 80082f6:	4003      	ands	r3, r0
 80082f8:	2b04      	cmp	r3, #4
 80082fa:	d103      	bne.n	8008304 <_printf_common+0x74>
 80082fc:	1a8d      	subs	r5, r1, r2
 80082fe:	43eb      	mvns	r3, r5
 8008300:	17db      	asrs	r3, r3, #31
 8008302:	401d      	ands	r5, r3
 8008304:	68a3      	ldr	r3, [r4, #8]
 8008306:	6922      	ldr	r2, [r4, #16]
 8008308:	4293      	cmp	r3, r2
 800830a:	dd01      	ble.n	8008310 <_printf_common+0x80>
 800830c:	1a9b      	subs	r3, r3, r2
 800830e:	18ed      	adds	r5, r5, r3
 8008310:	2700      	movs	r7, #0
 8008312:	42bd      	cmp	r5, r7
 8008314:	d120      	bne.n	8008358 <_printf_common+0xc8>
 8008316:	2000      	movs	r0, #0
 8008318:	e010      	b.n	800833c <_printf_common+0xac>
 800831a:	3701      	adds	r7, #1
 800831c:	68e3      	ldr	r3, [r4, #12]
 800831e:	682a      	ldr	r2, [r5, #0]
 8008320:	1a9b      	subs	r3, r3, r2
 8008322:	42bb      	cmp	r3, r7
 8008324:	ddd2      	ble.n	80082cc <_printf_common+0x3c>
 8008326:	0022      	movs	r2, r4
 8008328:	2301      	movs	r3, #1
 800832a:	9901      	ldr	r1, [sp, #4]
 800832c:	9800      	ldr	r0, [sp, #0]
 800832e:	9e08      	ldr	r6, [sp, #32]
 8008330:	3219      	adds	r2, #25
 8008332:	47b0      	blx	r6
 8008334:	1c43      	adds	r3, r0, #1
 8008336:	d1f0      	bne.n	800831a <_printf_common+0x8a>
 8008338:	2001      	movs	r0, #1
 800833a:	4240      	negs	r0, r0
 800833c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800833e:	2030      	movs	r0, #48	; 0x30
 8008340:	18e1      	adds	r1, r4, r3
 8008342:	3143      	adds	r1, #67	; 0x43
 8008344:	7008      	strb	r0, [r1, #0]
 8008346:	0021      	movs	r1, r4
 8008348:	1c5a      	adds	r2, r3, #1
 800834a:	3145      	adds	r1, #69	; 0x45
 800834c:	7809      	ldrb	r1, [r1, #0]
 800834e:	18a2      	adds	r2, r4, r2
 8008350:	3243      	adds	r2, #67	; 0x43
 8008352:	3302      	adds	r3, #2
 8008354:	7011      	strb	r1, [r2, #0]
 8008356:	e7c1      	b.n	80082dc <_printf_common+0x4c>
 8008358:	0022      	movs	r2, r4
 800835a:	2301      	movs	r3, #1
 800835c:	9901      	ldr	r1, [sp, #4]
 800835e:	9800      	ldr	r0, [sp, #0]
 8008360:	9e08      	ldr	r6, [sp, #32]
 8008362:	321a      	adds	r2, #26
 8008364:	47b0      	blx	r6
 8008366:	1c43      	adds	r3, r0, #1
 8008368:	d0e6      	beq.n	8008338 <_printf_common+0xa8>
 800836a:	3701      	adds	r7, #1
 800836c:	e7d1      	b.n	8008312 <_printf_common+0x82>
	...

08008370 <_printf_i>:
 8008370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008372:	b08b      	sub	sp, #44	; 0x2c
 8008374:	9206      	str	r2, [sp, #24]
 8008376:	000a      	movs	r2, r1
 8008378:	3243      	adds	r2, #67	; 0x43
 800837a:	9307      	str	r3, [sp, #28]
 800837c:	9005      	str	r0, [sp, #20]
 800837e:	9204      	str	r2, [sp, #16]
 8008380:	7e0a      	ldrb	r2, [r1, #24]
 8008382:	000c      	movs	r4, r1
 8008384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008386:	2a78      	cmp	r2, #120	; 0x78
 8008388:	d807      	bhi.n	800839a <_printf_i+0x2a>
 800838a:	2a62      	cmp	r2, #98	; 0x62
 800838c:	d809      	bhi.n	80083a2 <_printf_i+0x32>
 800838e:	2a00      	cmp	r2, #0
 8008390:	d100      	bne.n	8008394 <_printf_i+0x24>
 8008392:	e0c1      	b.n	8008518 <_printf_i+0x1a8>
 8008394:	2a58      	cmp	r2, #88	; 0x58
 8008396:	d100      	bne.n	800839a <_printf_i+0x2a>
 8008398:	e08c      	b.n	80084b4 <_printf_i+0x144>
 800839a:	0026      	movs	r6, r4
 800839c:	3642      	adds	r6, #66	; 0x42
 800839e:	7032      	strb	r2, [r6, #0]
 80083a0:	e022      	b.n	80083e8 <_printf_i+0x78>
 80083a2:	0010      	movs	r0, r2
 80083a4:	3863      	subs	r0, #99	; 0x63
 80083a6:	2815      	cmp	r0, #21
 80083a8:	d8f7      	bhi.n	800839a <_printf_i+0x2a>
 80083aa:	f7f7 feb5 	bl	8000118 <__gnu_thumb1_case_shi>
 80083ae:	0016      	.short	0x0016
 80083b0:	fff6001f 	.word	0xfff6001f
 80083b4:	fff6fff6 	.word	0xfff6fff6
 80083b8:	001ffff6 	.word	0x001ffff6
 80083bc:	fff6fff6 	.word	0xfff6fff6
 80083c0:	fff6fff6 	.word	0xfff6fff6
 80083c4:	003600a8 	.word	0x003600a8
 80083c8:	fff6009a 	.word	0xfff6009a
 80083cc:	00b9fff6 	.word	0x00b9fff6
 80083d0:	0036fff6 	.word	0x0036fff6
 80083d4:	fff6fff6 	.word	0xfff6fff6
 80083d8:	009e      	.short	0x009e
 80083da:	0026      	movs	r6, r4
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	3642      	adds	r6, #66	; 0x42
 80083e0:	1d11      	adds	r1, r2, #4
 80083e2:	6019      	str	r1, [r3, #0]
 80083e4:	6813      	ldr	r3, [r2, #0]
 80083e6:	7033      	strb	r3, [r6, #0]
 80083e8:	2301      	movs	r3, #1
 80083ea:	e0a7      	b.n	800853c <_printf_i+0x1cc>
 80083ec:	6808      	ldr	r0, [r1, #0]
 80083ee:	6819      	ldr	r1, [r3, #0]
 80083f0:	1d0a      	adds	r2, r1, #4
 80083f2:	0605      	lsls	r5, r0, #24
 80083f4:	d50b      	bpl.n	800840e <_printf_i+0x9e>
 80083f6:	680d      	ldr	r5, [r1, #0]
 80083f8:	601a      	str	r2, [r3, #0]
 80083fa:	2d00      	cmp	r5, #0
 80083fc:	da03      	bge.n	8008406 <_printf_i+0x96>
 80083fe:	232d      	movs	r3, #45	; 0x2d
 8008400:	9a04      	ldr	r2, [sp, #16]
 8008402:	426d      	negs	r5, r5
 8008404:	7013      	strb	r3, [r2, #0]
 8008406:	4b61      	ldr	r3, [pc, #388]	; (800858c <_printf_i+0x21c>)
 8008408:	270a      	movs	r7, #10
 800840a:	9303      	str	r3, [sp, #12]
 800840c:	e01b      	b.n	8008446 <_printf_i+0xd6>
 800840e:	680d      	ldr	r5, [r1, #0]
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	0641      	lsls	r1, r0, #25
 8008414:	d5f1      	bpl.n	80083fa <_printf_i+0x8a>
 8008416:	b22d      	sxth	r5, r5
 8008418:	e7ef      	b.n	80083fa <_printf_i+0x8a>
 800841a:	680d      	ldr	r5, [r1, #0]
 800841c:	6819      	ldr	r1, [r3, #0]
 800841e:	1d08      	adds	r0, r1, #4
 8008420:	6018      	str	r0, [r3, #0]
 8008422:	062e      	lsls	r6, r5, #24
 8008424:	d501      	bpl.n	800842a <_printf_i+0xba>
 8008426:	680d      	ldr	r5, [r1, #0]
 8008428:	e003      	b.n	8008432 <_printf_i+0xc2>
 800842a:	066d      	lsls	r5, r5, #25
 800842c:	d5fb      	bpl.n	8008426 <_printf_i+0xb6>
 800842e:	680d      	ldr	r5, [r1, #0]
 8008430:	b2ad      	uxth	r5, r5
 8008432:	4b56      	ldr	r3, [pc, #344]	; (800858c <_printf_i+0x21c>)
 8008434:	2708      	movs	r7, #8
 8008436:	9303      	str	r3, [sp, #12]
 8008438:	2a6f      	cmp	r2, #111	; 0x6f
 800843a:	d000      	beq.n	800843e <_printf_i+0xce>
 800843c:	3702      	adds	r7, #2
 800843e:	0023      	movs	r3, r4
 8008440:	2200      	movs	r2, #0
 8008442:	3343      	adds	r3, #67	; 0x43
 8008444:	701a      	strb	r2, [r3, #0]
 8008446:	6863      	ldr	r3, [r4, #4]
 8008448:	60a3      	str	r3, [r4, #8]
 800844a:	2b00      	cmp	r3, #0
 800844c:	db03      	blt.n	8008456 <_printf_i+0xe6>
 800844e:	2204      	movs	r2, #4
 8008450:	6821      	ldr	r1, [r4, #0]
 8008452:	4391      	bics	r1, r2
 8008454:	6021      	str	r1, [r4, #0]
 8008456:	2d00      	cmp	r5, #0
 8008458:	d102      	bne.n	8008460 <_printf_i+0xf0>
 800845a:	9e04      	ldr	r6, [sp, #16]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00c      	beq.n	800847a <_printf_i+0x10a>
 8008460:	9e04      	ldr	r6, [sp, #16]
 8008462:	0028      	movs	r0, r5
 8008464:	0039      	movs	r1, r7
 8008466:	f7f7 fee7 	bl	8000238 <__aeabi_uidivmod>
 800846a:	9b03      	ldr	r3, [sp, #12]
 800846c:	3e01      	subs	r6, #1
 800846e:	5c5b      	ldrb	r3, [r3, r1]
 8008470:	7033      	strb	r3, [r6, #0]
 8008472:	002b      	movs	r3, r5
 8008474:	0005      	movs	r5, r0
 8008476:	429f      	cmp	r7, r3
 8008478:	d9f3      	bls.n	8008462 <_printf_i+0xf2>
 800847a:	2f08      	cmp	r7, #8
 800847c:	d109      	bne.n	8008492 <_printf_i+0x122>
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	07db      	lsls	r3, r3, #31
 8008482:	d506      	bpl.n	8008492 <_printf_i+0x122>
 8008484:	6863      	ldr	r3, [r4, #4]
 8008486:	6922      	ldr	r2, [r4, #16]
 8008488:	4293      	cmp	r3, r2
 800848a:	dc02      	bgt.n	8008492 <_printf_i+0x122>
 800848c:	2330      	movs	r3, #48	; 0x30
 800848e:	3e01      	subs	r6, #1
 8008490:	7033      	strb	r3, [r6, #0]
 8008492:	9b04      	ldr	r3, [sp, #16]
 8008494:	1b9b      	subs	r3, r3, r6
 8008496:	6123      	str	r3, [r4, #16]
 8008498:	9b07      	ldr	r3, [sp, #28]
 800849a:	0021      	movs	r1, r4
 800849c:	9300      	str	r3, [sp, #0]
 800849e:	9805      	ldr	r0, [sp, #20]
 80084a0:	9b06      	ldr	r3, [sp, #24]
 80084a2:	aa09      	add	r2, sp, #36	; 0x24
 80084a4:	f7ff fef4 	bl	8008290 <_printf_common>
 80084a8:	1c43      	adds	r3, r0, #1
 80084aa:	d14c      	bne.n	8008546 <_printf_i+0x1d6>
 80084ac:	2001      	movs	r0, #1
 80084ae:	4240      	negs	r0, r0
 80084b0:	b00b      	add	sp, #44	; 0x2c
 80084b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084b4:	3145      	adds	r1, #69	; 0x45
 80084b6:	700a      	strb	r2, [r1, #0]
 80084b8:	4a34      	ldr	r2, [pc, #208]	; (800858c <_printf_i+0x21c>)
 80084ba:	9203      	str	r2, [sp, #12]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	6821      	ldr	r1, [r4, #0]
 80084c0:	ca20      	ldmia	r2!, {r5}
 80084c2:	601a      	str	r2, [r3, #0]
 80084c4:	0608      	lsls	r0, r1, #24
 80084c6:	d516      	bpl.n	80084f6 <_printf_i+0x186>
 80084c8:	07cb      	lsls	r3, r1, #31
 80084ca:	d502      	bpl.n	80084d2 <_printf_i+0x162>
 80084cc:	2320      	movs	r3, #32
 80084ce:	4319      	orrs	r1, r3
 80084d0:	6021      	str	r1, [r4, #0]
 80084d2:	2710      	movs	r7, #16
 80084d4:	2d00      	cmp	r5, #0
 80084d6:	d1b2      	bne.n	800843e <_printf_i+0xce>
 80084d8:	2320      	movs	r3, #32
 80084da:	6822      	ldr	r2, [r4, #0]
 80084dc:	439a      	bics	r2, r3
 80084de:	6022      	str	r2, [r4, #0]
 80084e0:	e7ad      	b.n	800843e <_printf_i+0xce>
 80084e2:	2220      	movs	r2, #32
 80084e4:	6809      	ldr	r1, [r1, #0]
 80084e6:	430a      	orrs	r2, r1
 80084e8:	6022      	str	r2, [r4, #0]
 80084ea:	0022      	movs	r2, r4
 80084ec:	2178      	movs	r1, #120	; 0x78
 80084ee:	3245      	adds	r2, #69	; 0x45
 80084f0:	7011      	strb	r1, [r2, #0]
 80084f2:	4a27      	ldr	r2, [pc, #156]	; (8008590 <_printf_i+0x220>)
 80084f4:	e7e1      	b.n	80084ba <_printf_i+0x14a>
 80084f6:	0648      	lsls	r0, r1, #25
 80084f8:	d5e6      	bpl.n	80084c8 <_printf_i+0x158>
 80084fa:	b2ad      	uxth	r5, r5
 80084fc:	e7e4      	b.n	80084c8 <_printf_i+0x158>
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	680d      	ldr	r5, [r1, #0]
 8008502:	1d10      	adds	r0, r2, #4
 8008504:	6949      	ldr	r1, [r1, #20]
 8008506:	6018      	str	r0, [r3, #0]
 8008508:	6813      	ldr	r3, [r2, #0]
 800850a:	062e      	lsls	r6, r5, #24
 800850c:	d501      	bpl.n	8008512 <_printf_i+0x1a2>
 800850e:	6019      	str	r1, [r3, #0]
 8008510:	e002      	b.n	8008518 <_printf_i+0x1a8>
 8008512:	066d      	lsls	r5, r5, #25
 8008514:	d5fb      	bpl.n	800850e <_printf_i+0x19e>
 8008516:	8019      	strh	r1, [r3, #0]
 8008518:	2300      	movs	r3, #0
 800851a:	9e04      	ldr	r6, [sp, #16]
 800851c:	6123      	str	r3, [r4, #16]
 800851e:	e7bb      	b.n	8008498 <_printf_i+0x128>
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	1d11      	adds	r1, r2, #4
 8008524:	6019      	str	r1, [r3, #0]
 8008526:	6816      	ldr	r6, [r2, #0]
 8008528:	2100      	movs	r1, #0
 800852a:	0030      	movs	r0, r6
 800852c:	6862      	ldr	r2, [r4, #4]
 800852e:	f000 f8db 	bl	80086e8 <memchr>
 8008532:	2800      	cmp	r0, #0
 8008534:	d001      	beq.n	800853a <_printf_i+0x1ca>
 8008536:	1b80      	subs	r0, r0, r6
 8008538:	6060      	str	r0, [r4, #4]
 800853a:	6863      	ldr	r3, [r4, #4]
 800853c:	6123      	str	r3, [r4, #16]
 800853e:	2300      	movs	r3, #0
 8008540:	9a04      	ldr	r2, [sp, #16]
 8008542:	7013      	strb	r3, [r2, #0]
 8008544:	e7a8      	b.n	8008498 <_printf_i+0x128>
 8008546:	6923      	ldr	r3, [r4, #16]
 8008548:	0032      	movs	r2, r6
 800854a:	9906      	ldr	r1, [sp, #24]
 800854c:	9805      	ldr	r0, [sp, #20]
 800854e:	9d07      	ldr	r5, [sp, #28]
 8008550:	47a8      	blx	r5
 8008552:	1c43      	adds	r3, r0, #1
 8008554:	d0aa      	beq.n	80084ac <_printf_i+0x13c>
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	079b      	lsls	r3, r3, #30
 800855a:	d415      	bmi.n	8008588 <_printf_i+0x218>
 800855c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800855e:	68e0      	ldr	r0, [r4, #12]
 8008560:	4298      	cmp	r0, r3
 8008562:	daa5      	bge.n	80084b0 <_printf_i+0x140>
 8008564:	0018      	movs	r0, r3
 8008566:	e7a3      	b.n	80084b0 <_printf_i+0x140>
 8008568:	0022      	movs	r2, r4
 800856a:	2301      	movs	r3, #1
 800856c:	9906      	ldr	r1, [sp, #24]
 800856e:	9805      	ldr	r0, [sp, #20]
 8008570:	9e07      	ldr	r6, [sp, #28]
 8008572:	3219      	adds	r2, #25
 8008574:	47b0      	blx	r6
 8008576:	1c43      	adds	r3, r0, #1
 8008578:	d098      	beq.n	80084ac <_printf_i+0x13c>
 800857a:	3501      	adds	r5, #1
 800857c:	68e3      	ldr	r3, [r4, #12]
 800857e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008580:	1a9b      	subs	r3, r3, r2
 8008582:	42ab      	cmp	r3, r5
 8008584:	dcf0      	bgt.n	8008568 <_printf_i+0x1f8>
 8008586:	e7e9      	b.n	800855c <_printf_i+0x1ec>
 8008588:	2500      	movs	r5, #0
 800858a:	e7f7      	b.n	800857c <_printf_i+0x20c>
 800858c:	0800906d 	.word	0x0800906d
 8008590:	0800907e 	.word	0x0800907e

08008594 <__sread>:
 8008594:	b570      	push	{r4, r5, r6, lr}
 8008596:	000c      	movs	r4, r1
 8008598:	250e      	movs	r5, #14
 800859a:	5f49      	ldrsh	r1, [r1, r5]
 800859c:	f000 f8f2 	bl	8008784 <_read_r>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	db03      	blt.n	80085ac <__sread+0x18>
 80085a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80085a6:	181b      	adds	r3, r3, r0
 80085a8:	6563      	str	r3, [r4, #84]	; 0x54
 80085aa:	bd70      	pop	{r4, r5, r6, pc}
 80085ac:	89a3      	ldrh	r3, [r4, #12]
 80085ae:	4a02      	ldr	r2, [pc, #8]	; (80085b8 <__sread+0x24>)
 80085b0:	4013      	ands	r3, r2
 80085b2:	81a3      	strh	r3, [r4, #12]
 80085b4:	e7f9      	b.n	80085aa <__sread+0x16>
 80085b6:	46c0      	nop			; (mov r8, r8)
 80085b8:	ffffefff 	.word	0xffffefff

080085bc <__swrite>:
 80085bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085be:	001f      	movs	r7, r3
 80085c0:	898b      	ldrh	r3, [r1, #12]
 80085c2:	0005      	movs	r5, r0
 80085c4:	000c      	movs	r4, r1
 80085c6:	0016      	movs	r6, r2
 80085c8:	05db      	lsls	r3, r3, #23
 80085ca:	d505      	bpl.n	80085d8 <__swrite+0x1c>
 80085cc:	230e      	movs	r3, #14
 80085ce:	5ec9      	ldrsh	r1, [r1, r3]
 80085d0:	2200      	movs	r2, #0
 80085d2:	2302      	movs	r3, #2
 80085d4:	f000 f874 	bl	80086c0 <_lseek_r>
 80085d8:	89a3      	ldrh	r3, [r4, #12]
 80085da:	4a05      	ldr	r2, [pc, #20]	; (80085f0 <__swrite+0x34>)
 80085dc:	0028      	movs	r0, r5
 80085de:	4013      	ands	r3, r2
 80085e0:	81a3      	strh	r3, [r4, #12]
 80085e2:	0032      	movs	r2, r6
 80085e4:	230e      	movs	r3, #14
 80085e6:	5ee1      	ldrsh	r1, [r4, r3]
 80085e8:	003b      	movs	r3, r7
 80085ea:	f000 f81f 	bl	800862c <_write_r>
 80085ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085f0:	ffffefff 	.word	0xffffefff

080085f4 <__sseek>:
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	000c      	movs	r4, r1
 80085f8:	250e      	movs	r5, #14
 80085fa:	5f49      	ldrsh	r1, [r1, r5]
 80085fc:	f000 f860 	bl	80086c0 <_lseek_r>
 8008600:	89a3      	ldrh	r3, [r4, #12]
 8008602:	1c42      	adds	r2, r0, #1
 8008604:	d103      	bne.n	800860e <__sseek+0x1a>
 8008606:	4a05      	ldr	r2, [pc, #20]	; (800861c <__sseek+0x28>)
 8008608:	4013      	ands	r3, r2
 800860a:	81a3      	strh	r3, [r4, #12]
 800860c:	bd70      	pop	{r4, r5, r6, pc}
 800860e:	2280      	movs	r2, #128	; 0x80
 8008610:	0152      	lsls	r2, r2, #5
 8008612:	4313      	orrs	r3, r2
 8008614:	81a3      	strh	r3, [r4, #12]
 8008616:	6560      	str	r0, [r4, #84]	; 0x54
 8008618:	e7f8      	b.n	800860c <__sseek+0x18>
 800861a:	46c0      	nop			; (mov r8, r8)
 800861c:	ffffefff 	.word	0xffffefff

08008620 <__sclose>:
 8008620:	b510      	push	{r4, lr}
 8008622:	230e      	movs	r3, #14
 8008624:	5ec9      	ldrsh	r1, [r1, r3]
 8008626:	f000 f815 	bl	8008654 <_close_r>
 800862a:	bd10      	pop	{r4, pc}

0800862c <_write_r>:
 800862c:	b570      	push	{r4, r5, r6, lr}
 800862e:	0004      	movs	r4, r0
 8008630:	0008      	movs	r0, r1
 8008632:	0011      	movs	r1, r2
 8008634:	001a      	movs	r2, r3
 8008636:	2300      	movs	r3, #0
 8008638:	4d05      	ldr	r5, [pc, #20]	; (8008650 <_write_r+0x24>)
 800863a:	602b      	str	r3, [r5, #0]
 800863c:	f7f9 fa35 	bl	8001aaa <_write>
 8008640:	1c43      	adds	r3, r0, #1
 8008642:	d103      	bne.n	800864c <_write_r+0x20>
 8008644:	682b      	ldr	r3, [r5, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d000      	beq.n	800864c <_write_r+0x20>
 800864a:	6023      	str	r3, [r4, #0]
 800864c:	bd70      	pop	{r4, r5, r6, pc}
 800864e:	46c0      	nop			; (mov r8, r8)
 8008650:	20001334 	.word	0x20001334

08008654 <_close_r>:
 8008654:	2300      	movs	r3, #0
 8008656:	b570      	push	{r4, r5, r6, lr}
 8008658:	4d06      	ldr	r5, [pc, #24]	; (8008674 <_close_r+0x20>)
 800865a:	0004      	movs	r4, r0
 800865c:	0008      	movs	r0, r1
 800865e:	602b      	str	r3, [r5, #0]
 8008660:	f7f9 fa3f 	bl	8001ae2 <_close>
 8008664:	1c43      	adds	r3, r0, #1
 8008666:	d103      	bne.n	8008670 <_close_r+0x1c>
 8008668:	682b      	ldr	r3, [r5, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d000      	beq.n	8008670 <_close_r+0x1c>
 800866e:	6023      	str	r3, [r4, #0]
 8008670:	bd70      	pop	{r4, r5, r6, pc}
 8008672:	46c0      	nop			; (mov r8, r8)
 8008674:	20001334 	.word	0x20001334

08008678 <_fstat_r>:
 8008678:	2300      	movs	r3, #0
 800867a:	b570      	push	{r4, r5, r6, lr}
 800867c:	4d06      	ldr	r5, [pc, #24]	; (8008698 <_fstat_r+0x20>)
 800867e:	0004      	movs	r4, r0
 8008680:	0008      	movs	r0, r1
 8008682:	0011      	movs	r1, r2
 8008684:	602b      	str	r3, [r5, #0]
 8008686:	f7f9 fa36 	bl	8001af6 <_fstat>
 800868a:	1c43      	adds	r3, r0, #1
 800868c:	d103      	bne.n	8008696 <_fstat_r+0x1e>
 800868e:	682b      	ldr	r3, [r5, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d000      	beq.n	8008696 <_fstat_r+0x1e>
 8008694:	6023      	str	r3, [r4, #0]
 8008696:	bd70      	pop	{r4, r5, r6, pc}
 8008698:	20001334 	.word	0x20001334

0800869c <_isatty_r>:
 800869c:	2300      	movs	r3, #0
 800869e:	b570      	push	{r4, r5, r6, lr}
 80086a0:	4d06      	ldr	r5, [pc, #24]	; (80086bc <_isatty_r+0x20>)
 80086a2:	0004      	movs	r4, r0
 80086a4:	0008      	movs	r0, r1
 80086a6:	602b      	str	r3, [r5, #0]
 80086a8:	f7f9 fa33 	bl	8001b12 <_isatty>
 80086ac:	1c43      	adds	r3, r0, #1
 80086ae:	d103      	bne.n	80086b8 <_isatty_r+0x1c>
 80086b0:	682b      	ldr	r3, [r5, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d000      	beq.n	80086b8 <_isatty_r+0x1c>
 80086b6:	6023      	str	r3, [r4, #0]
 80086b8:	bd70      	pop	{r4, r5, r6, pc}
 80086ba:	46c0      	nop			; (mov r8, r8)
 80086bc:	20001334 	.word	0x20001334

080086c0 <_lseek_r>:
 80086c0:	b570      	push	{r4, r5, r6, lr}
 80086c2:	0004      	movs	r4, r0
 80086c4:	0008      	movs	r0, r1
 80086c6:	0011      	movs	r1, r2
 80086c8:	001a      	movs	r2, r3
 80086ca:	2300      	movs	r3, #0
 80086cc:	4d05      	ldr	r5, [pc, #20]	; (80086e4 <_lseek_r+0x24>)
 80086ce:	602b      	str	r3, [r5, #0]
 80086d0:	f7f9 fa28 	bl	8001b24 <_lseek>
 80086d4:	1c43      	adds	r3, r0, #1
 80086d6:	d103      	bne.n	80086e0 <_lseek_r+0x20>
 80086d8:	682b      	ldr	r3, [r5, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d000      	beq.n	80086e0 <_lseek_r+0x20>
 80086de:	6023      	str	r3, [r4, #0]
 80086e0:	bd70      	pop	{r4, r5, r6, pc}
 80086e2:	46c0      	nop			; (mov r8, r8)
 80086e4:	20001334 	.word	0x20001334

080086e8 <memchr>:
 80086e8:	b2c9      	uxtb	r1, r1
 80086ea:	1882      	adds	r2, r0, r2
 80086ec:	4290      	cmp	r0, r2
 80086ee:	d101      	bne.n	80086f4 <memchr+0xc>
 80086f0:	2000      	movs	r0, #0
 80086f2:	4770      	bx	lr
 80086f4:	7803      	ldrb	r3, [r0, #0]
 80086f6:	428b      	cmp	r3, r1
 80086f8:	d0fb      	beq.n	80086f2 <memchr+0xa>
 80086fa:	3001      	adds	r0, #1
 80086fc:	e7f6      	b.n	80086ec <memchr+0x4>

080086fe <memmove>:
 80086fe:	b510      	push	{r4, lr}
 8008700:	4288      	cmp	r0, r1
 8008702:	d902      	bls.n	800870a <memmove+0xc>
 8008704:	188b      	adds	r3, r1, r2
 8008706:	4298      	cmp	r0, r3
 8008708:	d303      	bcc.n	8008712 <memmove+0x14>
 800870a:	2300      	movs	r3, #0
 800870c:	e007      	b.n	800871e <memmove+0x20>
 800870e:	5c8b      	ldrb	r3, [r1, r2]
 8008710:	5483      	strb	r3, [r0, r2]
 8008712:	3a01      	subs	r2, #1
 8008714:	d2fb      	bcs.n	800870e <memmove+0x10>
 8008716:	bd10      	pop	{r4, pc}
 8008718:	5ccc      	ldrb	r4, [r1, r3]
 800871a:	54c4      	strb	r4, [r0, r3]
 800871c:	3301      	adds	r3, #1
 800871e:	429a      	cmp	r2, r3
 8008720:	d1fa      	bne.n	8008718 <memmove+0x1a>
 8008722:	e7f8      	b.n	8008716 <memmove+0x18>

08008724 <_realloc_r>:
 8008724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008726:	0007      	movs	r7, r0
 8008728:	000e      	movs	r6, r1
 800872a:	0014      	movs	r4, r2
 800872c:	2900      	cmp	r1, #0
 800872e:	d105      	bne.n	800873c <_realloc_r+0x18>
 8008730:	0011      	movs	r1, r2
 8008732:	f7fe fe53 	bl	80073dc <_malloc_r>
 8008736:	0005      	movs	r5, r0
 8008738:	0028      	movs	r0, r5
 800873a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800873c:	2a00      	cmp	r2, #0
 800873e:	d103      	bne.n	8008748 <_realloc_r+0x24>
 8008740:	f7fe fde0 	bl	8007304 <_free_r>
 8008744:	0025      	movs	r5, r4
 8008746:	e7f7      	b.n	8008738 <_realloc_r+0x14>
 8008748:	f000 f830 	bl	80087ac <_malloc_usable_size_r>
 800874c:	9001      	str	r0, [sp, #4]
 800874e:	4284      	cmp	r4, r0
 8008750:	d803      	bhi.n	800875a <_realloc_r+0x36>
 8008752:	0035      	movs	r5, r6
 8008754:	0843      	lsrs	r3, r0, #1
 8008756:	42a3      	cmp	r3, r4
 8008758:	d3ee      	bcc.n	8008738 <_realloc_r+0x14>
 800875a:	0021      	movs	r1, r4
 800875c:	0038      	movs	r0, r7
 800875e:	f7fe fe3d 	bl	80073dc <_malloc_r>
 8008762:	1e05      	subs	r5, r0, #0
 8008764:	d0e8      	beq.n	8008738 <_realloc_r+0x14>
 8008766:	9b01      	ldr	r3, [sp, #4]
 8008768:	0022      	movs	r2, r4
 800876a:	429c      	cmp	r4, r3
 800876c:	d900      	bls.n	8008770 <_realloc_r+0x4c>
 800876e:	001a      	movs	r2, r3
 8008770:	0031      	movs	r1, r6
 8008772:	0028      	movs	r0, r5
 8008774:	f7fe fdb4 	bl	80072e0 <memcpy>
 8008778:	0031      	movs	r1, r6
 800877a:	0038      	movs	r0, r7
 800877c:	f7fe fdc2 	bl	8007304 <_free_r>
 8008780:	e7da      	b.n	8008738 <_realloc_r+0x14>
	...

08008784 <_read_r>:
 8008784:	b570      	push	{r4, r5, r6, lr}
 8008786:	0004      	movs	r4, r0
 8008788:	0008      	movs	r0, r1
 800878a:	0011      	movs	r1, r2
 800878c:	001a      	movs	r2, r3
 800878e:	2300      	movs	r3, #0
 8008790:	4d05      	ldr	r5, [pc, #20]	; (80087a8 <_read_r+0x24>)
 8008792:	602b      	str	r3, [r5, #0]
 8008794:	f7f9 f96c 	bl	8001a70 <_read>
 8008798:	1c43      	adds	r3, r0, #1
 800879a:	d103      	bne.n	80087a4 <_read_r+0x20>
 800879c:	682b      	ldr	r3, [r5, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d000      	beq.n	80087a4 <_read_r+0x20>
 80087a2:	6023      	str	r3, [r4, #0]
 80087a4:	bd70      	pop	{r4, r5, r6, pc}
 80087a6:	46c0      	nop			; (mov r8, r8)
 80087a8:	20001334 	.word	0x20001334

080087ac <_malloc_usable_size_r>:
 80087ac:	1f0b      	subs	r3, r1, #4
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	1f18      	subs	r0, r3, #4
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	da01      	bge.n	80087ba <_malloc_usable_size_r+0xe>
 80087b6:	580b      	ldr	r3, [r1, r0]
 80087b8:	18c0      	adds	r0, r0, r3
 80087ba:	4770      	bx	lr

080087bc <_init>:
 80087bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087be:	46c0      	nop			; (mov r8, r8)
 80087c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087c2:	bc08      	pop	{r3}
 80087c4:	469e      	mov	lr, r3
 80087c6:	4770      	bx	lr

080087c8 <_fini>:
 80087c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ca:	46c0      	nop			; (mov r8, r8)
 80087cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ce:	bc08      	pop	{r3}
 80087d0:	469e      	mov	lr, r3
 80087d2:	4770      	bx	lr
